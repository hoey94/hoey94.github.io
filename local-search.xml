<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Flink-SQL维表Join</title>
    <link href="/2022/07/20/Flink-SQL%E7%BB%B4%E8%A1%A8Join/"/>
    <url>/2022/07/20/Flink-SQL%E7%BB%B4%E8%A1%A8Join/</url>
    
    <content type="html"><![CDATA[<h3 id="1-维表"><a href="#1-维表" class="headerlink" title="1. 维表"></a>1. 维表</h3><h5 id="HBase数据"><a href="#HBase数据" class="headerlink" title="HBase数据"></a>HBase数据</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql">put <span class="hljs-string">&#x27;ods:dim_province&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;field:province_id&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span><br>put <span class="hljs-string">&#x27;ods:dim_province&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;field:province_name&#x27;</span>,<span class="hljs-string">&#x27;上海&#x27;</span><br>put <span class="hljs-string">&#x27;ods:dim_province&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;field:region_name&#x27;</span>,<span class="hljs-string">&#x27;浦东新区&#x27;</span><br>put <span class="hljs-string">&#x27;ods:dim_province&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;field:province_id&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span><br>put <span class="hljs-string">&#x27;ods:dim_province&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;field:province_name&#x27;</span>,<span class="hljs-string">&#x27;上海&#x27;</span><br>put <span class="hljs-string">&#x27;ods:dim_province&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;field:region_name&#x27;</span>,<span class="hljs-string">&#x27;金桥&#x27;</span><br>put <span class="hljs-string">&#x27;ods:dim_province&#x27;</span>,<span class="hljs-string">&#x27;28&#x27;</span>,<span class="hljs-string">&#x27;field:province_id&#x27;</span>,<span class="hljs-string">&#x27;28&#x27;</span><br>put <span class="hljs-string">&#x27;ods:dim_province&#x27;</span>,<span class="hljs-string">&#x27;28&#x27;</span>,<span class="hljs-string">&#x27;field:province_name&#x27;</span>,<span class="hljs-string">&#x27;河南&#x27;</span><br>put <span class="hljs-string">&#x27;ods:dim_province&#x27;</span>,<span class="hljs-string">&#x27;28&#x27;</span>,<span class="hljs-string">&#x27;field:region_name&#x27;</span>,<span class="hljs-string">&#x27;洛阳&#x27;</span><br>put <span class="hljs-string">&#x27;ods:dim_province&#x27;</span>,<span class="hljs-string">&#x27;29&#x27;</span>,<span class="hljs-string">&#x27;field:province_id&#x27;</span>,<span class="hljs-string">&#x27;29&#x27;</span><br>put <span class="hljs-string">&#x27;ods:dim_province&#x27;</span>,<span class="hljs-string">&#x27;29&#x27;</span>,<span class="hljs-string">&#x27;field:province_name&#x27;</span>,<span class="hljs-string">&#x27;河南&#x27;</span><br>put <span class="hljs-string">&#x27;ods:dim_province&#x27;</span>,<span class="hljs-string">&#x27;29&#x27;</span>,<span class="hljs-string">&#x27;field:region_name&#x27;</span>,<span class="hljs-string">&#x27;郑州&#x27;</span><br><span class="hljs-keyword">create</span> <span class="hljs-string">&#x27;ods:dim_province&#x27;</span>,&#123;NAME <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;field&#x27;</span>, VERSIONS <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>&#125;<br></code></pre></td></tr></table></figure><h5 id="HBase-Flink-DDL"><a href="#HBase-Flink-DDL" class="headerlink" title="HBase Flink DDL"></a>HBase Flink DDL</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> dim_province_hbase (<br> rowkey STRING,<br>    field <span class="hljs-type">ROW</span><span class="hljs-operator">&lt;</span><br>        province_id <span class="hljs-type">VARCHAR</span>,  <span class="hljs-comment">-- 省份id</span><br>        province_name  <span class="hljs-type">VARCHAR</span>, <span class="hljs-comment">-- 省份名称</span><br>        region_name <span class="hljs-type">VARCHAR</span> <span class="hljs-comment">-- 区域名称</span><br>    <span class="hljs-operator">&gt;</span>,<br>     <span class="hljs-keyword">PRIMARY</span> KEY (rowkey) <span class="hljs-keyword">NOT</span> ENFORCED<br>) <span class="hljs-keyword">WITH</span> (<br>    <span class="hljs-string">&#x27;connector&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;hbase-2.2&#x27;</span>,<br>    <span class="hljs-string">&#x27;table-name&#x27;</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;ods:dim_province&#x27;</span>,<br>    <span class="hljs-string">&#x27;zookeeper.quorum&#x27;</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;localhost:2181&#x27;</span>,<br>    <span class="hljs-string">&#x27;sink.buffer-flush.interval&#x27;</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;200ms&#x27;</span>,<br>    <span class="hljs-string">&#x27;sink.buffer-flush.max-rows&#x27;</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;100000&#x27;</span>,<br>    <span class="hljs-string">&#x27;null-string-literal&#x27;</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;\N&#x27;</span><br>);<br></code></pre></td></tr></table></figure><h5 id="Mysql-数据"><a href="#Mysql-数据" class="headerlink" title="Mysql 数据"></a>Mysql 数据</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `dim_province`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `dim_province` (<br>  `province_id` <span class="hljs-type">bigint</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `province_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `region_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`province_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Records of dim_province</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">BEGIN</span>;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `dim_province` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;浦东新区&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `dim_province` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;金桥&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `dim_province` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">28</span>, <span class="hljs-string">&#x27;河南&#x27;</span>, <span class="hljs-string">&#x27;洛阳&#x27;</span>);<br><span class="hljs-keyword">COMMIT</span>;<br><br></code></pre></td></tr></table></figure><h5 id="Mysql-Flink-DDL"><a href="#Mysql-Flink-DDL" class="headerlink" title="Mysql Flink DDL"></a>Mysql Flink DDL</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> dim_province (<br>    province_id <span class="hljs-type">BIGINT</span>,  <span class="hljs-comment">-- 省份id</span><br>    province_name  <span class="hljs-type">VARCHAR</span>, <span class="hljs-comment">-- 省份名称</span><br>    region_name <span class="hljs-type">VARCHAR</span> <span class="hljs-comment">-- 区域名称</span><br>) <span class="hljs-keyword">WITH</span> (<br>    <span class="hljs-string">&#x27;connector&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;jdbc&#x27;</span>,<br><span class="hljs-string">&#x27;url&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;jdbc:mysql://127.0.0.1:3306/test?characterEncoding=utf-8&amp;useSSL=false&amp;rewriteBatchedStatements=true&amp;serverTimezone=Asia/Shanghai&#x27;</span>,<br><span class="hljs-string">&#x27;table-name&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;dim_province&#x27;</span>,<br><span class="hljs-string">&#x27;driver&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;com.mysql.jdbc.Driver&#x27;</span>,<br><span class="hljs-string">&#x27;sink.buffer-flush.interval&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;200ms&#x27;</span>,<br><span class="hljs-string">&#x27;sink.buffer-flush.max-rows&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;100000&#x27;</span>,<br>    <span class="hljs-string">&#x27;username&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;root&#x27;</span>,<br>    <span class="hljs-string">&#x27;password&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;root&#x27;</span><br>);<br></code></pre></td></tr></table></figure><h3 id="2-Kafka"><a href="#2-Kafka" class="headerlink" title="2. Kafka"></a>2. Kafka</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;order_id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;currency&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;CN&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;amount&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">100</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;ts&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1573445919</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;order_id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;currency&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;CN&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;amount&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">100</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;ts&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1573445919</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="Flink-DDL"><a href="#Flink-DDL" class="headerlink" title="Flink DDL"></a>Flink DDL</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> user_behavior (<br>    user_id <span class="hljs-type">BIGINT</span>, <span class="hljs-comment">-- 用户id</span><br>    item_id <span class="hljs-type">BIGINT</span>, <span class="hljs-comment">-- 商品id</span><br>    cat_id <span class="hljs-type">BIGINT</span>,  <span class="hljs-comment">-- 品类id</span><br>    action STRING,  <span class="hljs-comment">-- 用户行为</span><br>    province <span class="hljs-type">INT</span>,   <span class="hljs-comment">-- 用户所在的省份</span><br>    ts     <span class="hljs-type">BIGINT</span>,  <span class="hljs-comment">-- 用户行为发生的时间戳</span><br>    proctime <span class="hljs-keyword">as</span> PROCTIME(),   <span class="hljs-comment">-- 通过计算列产生一个处理时间列</span><br>    eventTime <span class="hljs-keyword">AS</span> TO_TIMESTAMP(FROM_UNIXTIME(ts, <span class="hljs-string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)), <span class="hljs-comment">-- 事件时间</span><br>    WATERMARK <span class="hljs-keyword">FOR</span> eventTime <span class="hljs-keyword">as</span> eventTime <span class="hljs-operator">-</span> <span class="hljs-type">INTERVAL</span> <span class="hljs-string">&#x27;5&#x27;</span> <span class="hljs-keyword">SECOND</span>  <span class="hljs-comment">-- 在eventTime上定义watermark</span><br>) <span class="hljs-keyword">WITH</span> (<br>    <span class="hljs-string">&#x27;connector&#x27;</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;kafka&#x27;</span>,<br>    <span class="hljs-string">&#x27;topic&#x27;</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;user_behavior&#x27;</span>,<br>    <span class="hljs-string">&#x27;properties.bootstrap.servers&#x27;</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;localhost:9092&#x27;</span>,<br>    <span class="hljs-string">&#x27;scan.startup.mode&#x27;</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;group-offsets&#x27;</span>,<br>    <span class="hljs-string">&#x27;properties.group.id&#x27;</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;user_behavior_group&#x27;</span>,<br>    <span class="hljs-string">&#x27;properties.fetch.max.bytes&#x27;</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;5242880&#x27;</span>,<br>    <span class="hljs-string">&#x27;properties.allow.auto.create.topics&#x27;</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;false&#x27;</span>,<br>    <span class="hljs-string">&#x27;properties.enable.auto.commit&#x27;</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;true&#x27;</span>,<br>    <span class="hljs-string">&#x27;format&#x27;</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;json&#x27;</span>,<br>    <span class="hljs-string">&#x27;properties.auto.offset.reset&#x27;</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;earliest&#x27;</span><br>);<br></code></pre></td></tr></table></figure><h3 id="3-Join"><a href="#3-Join" class="headerlink" title="3. Join"></a>3. Join</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>  u.user_id, <br>  u.item_id,<br>  u.cat_id,<br>  u.action,  <br>  p.field.province_id,<br>  p.field.province_name,<br>  p.field.region_name<br><span class="hljs-keyword">FROM</span> user_behavior <span class="hljs-keyword">AS</span> u <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> dim_province_hbase <span class="hljs-keyword">FOR</span> <span class="hljs-built_in">SYSTEM_TIME</span> <span class="hljs-keyword">AS</span> <span class="hljs-keyword">OF</span> u.proctime <span class="hljs-keyword">AS</span> p<br><span class="hljs-keyword">ON</span> <span class="hljs-built_in">cast</span>(u.province <span class="hljs-keyword">as</span> STRING) <span class="hljs-operator">=</span> p.rowkey;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Flink</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker安装Oracle11g</title>
    <link href="/2022/06/16/docker-oracle11g/"/>
    <url>/2022/06/16/docker-oracle11g/</url>
    
    <content type="html"><![CDATA[<p>oracleoracleM1macM1ARMdocker </p><h3 id="1docker"><a href="#1docker" class="headerlink" title="1docker"></a>1docker</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g<br></code></pre></td></tr></table></figure><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d -p 1521:1521 --name oracle11g registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g<br></code></pre></td></tr></table></figure><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec -it oracle11 bash<br></code></pre></td></tr></table></figure><h3 id="4root"><a href="#4root" class="headerlink" title="4root"></a>4root</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sqlplus /nolog<br><br>su root <br></code></pre></td></tr></table></figure><h3 id="5profileORACLE"><a href="#5profileORACLE" class="headerlink" title="5profileORACLE"></a>5profileORACLE</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/profile<br><br>export ORACLE_HOME=/home/oracle/app/oracle/product/11.2.0/dbhome_2<br><br>export ORACLE_SID=helowin<br><br>export PATH=$ORACLE_HOME/bin:$PATH<br></code></pre></td></tr></table></figure><h3 id="6"><a href="#6" class="headerlink" title="6"></a>6</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ln -s $ORACLE_HOME/bin/sqlplus /usr/bin<br></code></pre></td></tr></table></figure><h3 id="7oracle"><a href="#7oracle" class="headerlink" title="7oracle"></a>7oracle</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">su - oracle<br></code></pre></td></tr></table></figure><h3 id="8sqlplus"><a href="#8sqlplus" class="headerlink" title="8sqlplus"></a>8sqlplus</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sqlplus /nolog<br><br>conn /as sysdba<br></code></pre></td></tr></table></figure><p>oracle </p><p>Navcatoracle ,helowin </p>]]></content>
    
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FlinkDataStream Kafka2ES</title>
    <link href="/2022/01/10/Flink-DataStream%20kafka2ES/"/>
    <url>/2022/01/10/Flink-DataStream%20kafka2ES/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Kafka2ES<br><br><span class="hljs-keyword">import</span> java.util<br><br><span class="hljs-keyword">import</span> org.apache.flink.api.common.functions.RuntimeContext<br><span class="hljs-keyword">import</span> org.apache.flink.streaming.api.scala._<br><span class="hljs-keyword">import</span> org.apache.flink.streaming.connectors.elasticsearch.&#123;ElasticsearchSinkFunction, RequestIndexer&#125;<br><span class="hljs-keyword">import</span> org.apache.flink.streaming.connectors.elasticsearch6.ElasticsearchSink<br><span class="hljs-keyword">import</span> org.apache.http.HttpHost<br><span class="hljs-keyword">import</span> org.elasticsearch.action.update.UpdateRequest<br><span class="hljs-keyword">import</span> org.elasticsearch.script.&#123;Script, ScriptType&#125;<br><br><span class="hljs-keyword">case</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Message</span>(id: String, para_name: String, para_val: String)<br><br>object Demo1 &#123;<br>  <br>  def <span class="hljs-title function_">main</span><span class="hljs-params">(args: Array[String])</span>: Unit = &#123;<br>    <span class="hljs-type">val</span> <span class="hljs-variable">env</span> <span class="hljs-operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment<br>    env.setParallelism(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-type">val</span> <span class="hljs-variable">dataList</span> <span class="hljs-operator">=</span> List(<br>      <span class="hljs-string">&quot;MSG_001,id,sensor1&quot;</span><br><span class="hljs-comment">//      &quot;MSG_001,timestamp,1603766281&quot;</span><br><span class="hljs-comment">//      &quot;MSG_001,temperature,56&quot;,</span><br><span class="hljs-comment">//      &quot;MSG_002,id,sensor2&quot;,</span><br><span class="hljs-comment">//      &quot;MSG_002,timestamp,1603766282&quot;,</span><br><span class="hljs-comment">//      &quot;MSG_002,temperature,57&quot;,</span><br><span class="hljs-comment">//      &quot;MSG_003,id,sensor3&quot;,</span><br><span class="hljs-comment">//      &quot;MSG_003,timestamp,1603766283&quot;,</span><br><span class="hljs-comment">//      &quot;MSG_003,temperature,58&quot;,</span><br><span class="hljs-comment">//      &quot;MSG_004,id,sensor4&quot;,</span><br><span class="hljs-comment">//      &quot;MSG_004,timestamp,1603766284&quot;,</span><br><span class="hljs-comment">//      &quot;MSG_004,temperature,59&quot;</span><br>    )<br><br>    <span class="hljs-comment">//Source操作</span><br>    <span class="hljs-type">val</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> env.fromCollection(dataList)<br><br>    val dataStream: DataStream[Message] = inputStream.map(row =&gt; &#123;<br>      <span class="hljs-type">val</span> <span class="hljs-variable">lines</span> <span class="hljs-operator">=</span> row.split(<span class="hljs-string">&quot;,&quot;</span>)<br>        <span class="hljs-comment">// 匹配</span><br>      Message(lines(<span class="hljs-number">0</span>),lines(<span class="hljs-number">1</span>),lines(<span class="hljs-number">2</span>))<br>    &#125;)<br><br>    <span class="hljs-type">val</span> <span class="hljs-variable">httpHosts</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">util</span>.ArrayList[HttpHost]()<br>    httpHosts.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHost</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">9200</span>))<br>    <span class="hljs-comment">//创建一个ES Sink的builder</span><br>    val esSinkBuilder: ElasticsearchSink.Builder[Message] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ElasticsearchSink</span>.Builder[Message](<br>      httpHosts,<br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">ElasticsearchSinkFunction</span>[Message] &#123;<br>        override def <span class="hljs-title function_">process</span><span class="hljs-params">(t: Message, runtimeContext: RuntimeContext, requestIndexer: RequestIndexer)</span>: Unit = &#123;<br>          println(<span class="hljs-string">&quot;saving data:&quot;</span> + t)<br><br>          <span class="hljs-comment">//包装成一个Map或者JsonObject格式</span><br>          <span class="hljs-type">val</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">util</span>.HashMap[String, String]()<br>          <span class="hljs-type">val</span> <span class="hljs-variable">mesId</span> <span class="hljs-operator">=</span> t.id<br>          <span class="hljs-type">var</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>          <span class="hljs-type">var</span> <span class="hljs-variable">timestamp</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>          <span class="hljs-type">var</span> <span class="hljs-variable">temperature</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>          <span class="hljs-keyword">if</span>(t.para_name.equals(<span class="hljs-string">&quot;timestamp&quot;</span>))&#123;<br>            timestamp = t.para_val<br>            json.put(<span class="hljs-string">&quot;timestamp&quot;</span>,timestamp)<br>  <br>          &#125;<br>  <br>          <span class="hljs-keyword">if</span>(t.para_name.equals(<span class="hljs-string">&quot;temperature&quot;</span>))&#123;<br>            temperature = t.para_val<br>            json.put(<span class="hljs-string">&quot;temperature&quot;</span>,temperature)<br>  <br>          &#125;<br>  <br>          <span class="hljs-keyword">if</span>(t.para_name.equals(<span class="hljs-string">&quot;id&quot;</span>))&#123;<br>            id = t.para_val<br>            json.put(<span class="hljs-string">&quot;id&quot;</span>,id)<br>          &#125;<br><br><br>          <span class="hljs-comment">//创建indexRequest准备发送数据</span><br><span class="hljs-comment">//          val indexRequest = Requests.indexRequest()</span><br><span class="hljs-comment">//            .index(&quot;ames_1&quot;)</span><br><span class="hljs-comment">//            .`type`(&quot;readingdata&quot;)</span><br><span class="hljs-comment">//            .id(mesId)</span><br><span class="hljs-comment">//            .source(json)</span><br>  <br>          <span class="hljs-type">val</span> <span class="hljs-variable">updateRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateRequest</span>(<span class="hljs-string">&quot;ames_1&quot;</span>, <span class="hljs-string">&quot;readingdata&quot;</span>, mesId).doc(json);<br>          updateRequest.docAsUpsert(<span class="hljs-literal">true</span>);<br>          <br>          <span class="hljs-comment">//利用requestIndexer进行发送请求，写入数据</span><br>          requestIndexer.add(updateRequest)<br>          println(<span class="hljs-string">&quot;data 写入完成。。。&quot;</span>)<br>        &#125;<br>      &#125;<br>    )<br><br><br>    <span class="hljs-comment">//Sink操作</span><br>    dataStream.addSink(esSinkBuilder.build())<br><br>    env.execute(<span class="hljs-string">&quot;sink ES test&quot;</span>)<br>  &#125;<br>  <br>  <br>  <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Flink</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Oracle转Mysql表结构</title>
    <link href="/2021/11/03/2021%E5%B9%B411%E6%9C%8803%E6%97%A516-34-20_Oracle%E8%BD%ACMysql%E8%A1%A8%E7%BB%93%E6%9E%84/"/>
    <url>/2021/11/03/2021%E5%B9%B411%E6%9C%8803%E6%97%A516-34-20_Oracle%E8%BD%ACMysql%E8%A1%A8%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h4 id="1-fnc-table-to-mysql-主体程序"><a href="#1-fnc-table-to-mysql-主体程序" class="headerlink" title="1. fnc_table_to_mysql 主体程序"></a>1. fnc_table_to_mysql 主体程序</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">or</span> replace <span class="hljs-keyword">function</span> fnc_table_to_mysql  <br>( i_owner                       <span class="hljs-keyword">in</span> string,  <br>  i_table_name                  <span class="hljs-keyword">in</span> string,  <br>  i_number_default_type         <span class="hljs-keyword">in</span> string :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;decimal&#x27;</span>,  <br>  i_auto_incretment_column_name <span class="hljs-keyword">in</span> string :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;%ID&#x27;</span>  <br>)  <br><span class="hljs-comment">/*  </span><br><span class="hljs-comment">  功能：ORACLE表生成MYSQL建表DDL  </span><br><span class="hljs-comment">  作者：叶正盛 2013-07-27  </span><br><span class="hljs-comment">  新浪微博:@yzsind-叶正盛  </span><br><span class="hljs-comment">  参数说明：  </span><br><span class="hljs-comment">  i_owner:schema名  </span><br><span class="hljs-comment">  i_table_name:表名  </span><br><span class="hljs-comment">  i_number_default_type:NUMBER默认转换的类型，缺省是decimal  </span><br><span class="hljs-comment">  i_auto_incretment_column_name:自增属性字段名称规则，默认是%ID  </span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  已知问题：  </span><br><span class="hljs-comment">  1.不支持分区  </span><br><span class="hljs-comment">  2.不支持函数索引，位图索引等特殊索引定义  </span><br><span class="hljs-comment">  3.不支持自定义数据类型，不支持ROWID,RAW等特殊数据类型  </span><br><span class="hljs-comment">  4.不支持外键  </span><br><span class="hljs-comment">  5.不支持自定义约束  </span><br><span class="hljs-comment">  6.不支持与空间、事务相关属性  </span><br><span class="hljs-comment">  7.DATE与TIMESTAMP转换成datetime，需注意精度  </span><br><span class="hljs-comment">  8.超大NUMBER直接转换为bigint，需注意精度  </span><br><span class="hljs-comment">  9.auto incretment 是根据字段名规则加一些判断，设置不一定准确，需检查  </span><br><span class="hljs-comment">  */</span>  <br> <span class="hljs-keyword">return</span> <span class="hljs-type">clob</span> <span class="hljs-keyword">is</span>  <br>  <span class="hljs-keyword">Result</span>         <span class="hljs-type">clob</span>;  <br>  cnt            number;  <br>  data_type      varchar2(<span class="hljs-number">128</span>);  <br>  column_str     varchar2(<span class="hljs-number">4000</span>);  <br>  pk_str         varchar2(<span class="hljs-number">4000</span>);  <br>  table_comments varchar2(<span class="hljs-number">4000</span>);  <br>  is_pk_column   number :<span class="hljs-operator">=</span> <span class="hljs-number">0</span>;  <br><span class="hljs-keyword">begin</span>  <br>  <span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)  <br><span class="hljs-keyword">into</span> cnt  <br><span class="hljs-keyword">from</span> all_tables  <br>   <span class="hljs-keyword">where</span> owner <span class="hljs-operator">=</span> i_owner  <br> <span class="hljs-keyword">and</span> table_name <span class="hljs-operator">=</span> i_table_name;  <br>  if (cnt <span class="hljs-operator">=</span> <span class="hljs-number">0</span>) <span class="hljs-keyword">then</span>  <br>RAISE_APPLICATION_ERROR(<span class="hljs-number">-20000</span>,<span class="hljs-string">&#x27;can&#x27;&#x27;t found table,please check input!&#x27;</span>);  <br>  <span class="hljs-keyword">else</span>  <br><span class="hljs-keyword">Result</span> :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;CREATE TABLE `&#x27;</span> <span class="hljs-operator">||</span> <span class="hljs-built_in">lower</span>(i_table_name) <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;`(&#x27;</span>;  <br><span class="hljs-comment">--column  </span><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> a.column_name,  <br> a.data_type,  <br> a.data_length,  <br> a.data_precision,  <br> a.data_scale,  <br> a.nullable,  <br> a.data_default,  <br> b.COMMENTS  <br><span class="hljs-keyword">from</span> all_tab_cols a, all_col_comments b  <br>   <span class="hljs-keyword">where</span> a.owner <span class="hljs-operator">=</span> i_owner  <br> <span class="hljs-keyword">and</span> a.table_name <span class="hljs-operator">=</span> i_table_name  <br> <span class="hljs-keyword">and</span> a.HIDDEN_COLUMN <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;NO&#x27;</span>  <br> <span class="hljs-keyword">and</span> a.owner <span class="hljs-operator">=</span> b.OWNER  <br> <span class="hljs-keyword">and</span> a.TABLE_NAME <span class="hljs-operator">=</span> b.TABLE_NAME  <br> <span class="hljs-keyword">and</span> a.COLUMN_NAME <span class="hljs-operator">=</span> b.COLUMN_NAME  <br>   <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> a.column_id) loop  <br>  if (c.data_type <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;VARCHAR2&#x27;</span> <span class="hljs-keyword">or</span> c.data_type <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;NVARCHAR2&#x27;</span>) <span class="hljs-keyword">then</span>  <br>data_type :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;varchar(&#x27;</span> <span class="hljs-operator">||</span> c.data_length <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;)&#x27;</span>;  <br>  elsif (c.data_type <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;CHAR&#x27;</span> <span class="hljs-keyword">or</span> c.data_type <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;NCHAR&#x27;</span>) <span class="hljs-keyword">then</span>  <br>data_type :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;char(&#x27;</span> <span class="hljs-operator">||</span> c.data_length <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;)&#x27;</span>;  <br>  elsif (c.data_type <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;NUMBER&#x27;</span>) <span class="hljs-keyword">then</span>  <br>if (c.column_name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%ID&#x27;</span> <span class="hljs-keyword">and</span> c.data_scale <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span>) <span class="hljs-keyword">then</span>  <br>  data_type :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;bigint&#x27;</span>;  <br>elsif (c.data_precision<span class="hljs-operator">&lt;</span><span class="hljs-number">3</span> <span class="hljs-keyword">and</span> c.data_scale <span class="hljs-operator">=</span> <span class="hljs-number">0</span>) <span class="hljs-keyword">then</span>  <br>  data_type :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;tinyint&#x27;</span>;  <br>elsif (c.data_precision<span class="hljs-operator">&lt;</span><span class="hljs-number">5</span> <span class="hljs-keyword">and</span> c.data_scale <span class="hljs-operator">=</span> <span class="hljs-number">0</span>) <span class="hljs-keyword">then</span>  <br>  data_type :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;smallint&#x27;</span>;  <br>elsif (c.data_precision<span class="hljs-operator">&lt;</span><span class="hljs-number">10</span> <span class="hljs-keyword">and</span> c.data_scale <span class="hljs-operator">=</span> <span class="hljs-number">0</span>) <span class="hljs-keyword">then</span>  <br>  data_type :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;int&#x27;</span>;  <br>elsif (c.data_precision <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">and</span> c.data_scale <span class="hljs-operator">=</span> <span class="hljs-number">0</span>) <span class="hljs-keyword">then</span>  <br>  data_type :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;bigint&#x27;</span>;  <br>elsif (c.data_precision <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">and</span> c.data_scale <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>) <span class="hljs-keyword">then</span>  <br>  data_type :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;decimal(&#x27;</span> <span class="hljs-operator">||</span> c.data_precision <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;,&#x27;</span> <span class="hljs-operator">||</span>  <br>   c.data_scale <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;)&#x27;</span>;  <br><span class="hljs-keyword">else</span>  <br>  data_type :<span class="hljs-operator">=</span> i_number_default_type;  <br><span class="hljs-keyword">end</span> if;  <br>  elsif (c.data_type <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;DATE&#x27;</span> <span class="hljs-keyword">or</span> c.data_type <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;TIMESTAMP%&#x27;</span>) <span class="hljs-keyword">then</span>  <br>data_type :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;datetime&#x27;</span>;  <br>  elsif (c.data_type <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;CLOB&#x27;</span> <span class="hljs-keyword">or</span> c.data_type <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;NCLOB&#x27;</span> <span class="hljs-keyword">or</span>  <br>c.data_type <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;LONG&#x27;</span>) <span class="hljs-keyword">then</span>  <br>data_type :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;text&#x27;</span>;  <br>  elsif (c.data_type <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;BLOB&#x27;</span> <span class="hljs-keyword">or</span> c.data_type <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;LONG RAW&#x27;</span>) <span class="hljs-keyword">then</span>  <br>data_type :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;blob&#x27;</span>;  <br>  elsif (c.data_type <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;BINARY_FLOAT&#x27;</span>) <span class="hljs-keyword">then</span>  <br>data_type :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;float&#x27;</span>;  <br>  elsif (c.data_type <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;BINARY_DOUBLE&#x27;</span>) <span class="hljs-keyword">then</span>  <br>data_type :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;double&#x27;</span>;  <br>  <span class="hljs-keyword">else</span>  <br>data_type :<span class="hljs-operator">=</span> c.data_type;  <br>  <span class="hljs-keyword">end</span> if;  <br>  column_str :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;  `&#x27;</span> <span class="hljs-operator">||</span> <span class="hljs-built_in">lower</span>(c.column_name) <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;` &#x27;</span> <span class="hljs-operator">||</span> data_type;  <br>  if (c.column_name <span class="hljs-keyword">like</span> i_auto_incretment_column_name <span class="hljs-keyword">and</span>  <br> (c.data_scale <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">or</span> c.data_scale <span class="hljs-operator">=</span> <span class="hljs-number">0</span>)) <span class="hljs-keyword">then</span>  <br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)  <br>  <span class="hljs-keyword">into</span> is_pk_column  <br>  <span class="hljs-keyword">from</span> all_constraints a, all_cons_columns b  <br> <span class="hljs-keyword">where</span> a.owner <span class="hljs-operator">=</span> i_owner  <br>   <span class="hljs-keyword">and</span> a.table_name <span class="hljs-operator">=</span> i_table_name  <br>   <span class="hljs-keyword">and</span> a.constraint_type <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;P&#x27;</span>  <br>   <span class="hljs-keyword">and</span> a.OWNER <span class="hljs-operator">=</span> b.OWNER  <br>   <span class="hljs-keyword">and</span> a.TABLE_NAME <span class="hljs-operator">=</span> b.TABLE_NAME  <br>   <span class="hljs-keyword">and</span> a.CONSTRAINT_NAME <span class="hljs-operator">=</span> b.CONSTRAINT_NAME  <br>   <span class="hljs-keyword">and</span> b.COLUMN_NAME <span class="hljs-operator">=</span> c.column_name;  <br>if is_pk_column <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span> <span class="hljs-keyword">then</span>  <br>  column_str :<span class="hljs-operator">=</span> column_str <span class="hljs-operator">||</span> <span class="hljs-string">&#x27; AUTO_INCREMENT&#x27;</span>;  <br><span class="hljs-keyword">end</span> if;  <br>  <span class="hljs-keyword">end</span> if;  <br>  if c.nullable <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;NO&#x27;</span> <span class="hljs-keyword">then</span>  <br>column_str :<span class="hljs-operator">=</span> column_str <span class="hljs-operator">||</span> <span class="hljs-string">&#x27; NOT NULL&#x27;</span>;  <br>  <span class="hljs-keyword">end</span> if;  <br>  if (<span class="hljs-built_in">trim</span>(c.data_default) <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>) <span class="hljs-keyword">then</span>  <br>column_str :<span class="hljs-operator">=</span> column_str <span class="hljs-operator">||</span> <span class="hljs-string">&#x27; DEFAULT &#x27;</span> <span class="hljs-operator">||</span>  <br>  <span class="hljs-built_in">trim</span>(replace(replace(c.data_default, chr(<span class="hljs-number">13</span>), <span class="hljs-string">&#x27;&#x27;</span>),  <br>   chr(<span class="hljs-number">10</span>),  <br>   <span class="hljs-string">&#x27;&#x27;</span>));  <br>  <span class="hljs-keyword">end</span> if;  <br>  if c.comments <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span>  <br>column_str :<span class="hljs-operator">=</span> column_str <span class="hljs-operator">||</span> <span class="hljs-string">&#x27; COMMENT &#x27;&#x27;&#x27;</span> <span class="hljs-operator">||</span> c.comments <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;&#x27;&#x27;&#x27;</span>;  <br>  <span class="hljs-keyword">end</span> if;  <br>  <span class="hljs-keyword">Result</span> :<span class="hljs-operator">=</span> <span class="hljs-keyword">Result</span> <span class="hljs-operator">||</span> chr(<span class="hljs-number">10</span>) <span class="hljs-operator">||</span> column_str <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;,&#x27;</span>;  <br><span class="hljs-keyword">end</span> loop;  <br><span class="hljs-comment">--pk  </span><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> a.constraint_name, wm_concat(a.column_name) pk_columns  <br><span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> a.CONSTRAINT_NAME,  <br> <span class="hljs-string">&#x27;`&#x27;</span> <span class="hljs-operator">||</span> b.COLUMN_NAME <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;`&#x27;</span> column_name  <br><span class="hljs-keyword">from</span> all_constraints a, all_cons_columns b  <br>   <span class="hljs-keyword">where</span> a.owner <span class="hljs-operator">=</span> i_owner  <br> <span class="hljs-keyword">and</span> a.table_name <span class="hljs-operator">=</span> i_table_name  <br> <span class="hljs-keyword">and</span> a.constraint_type <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;P&#x27;</span>  <br> <span class="hljs-keyword">and</span> a.OWNER <span class="hljs-operator">=</span> b.OWNER  <br> <span class="hljs-keyword">and</span> a.TABLE_NAME <span class="hljs-operator">=</span> b.TABLE_NAME  <br> <span class="hljs-keyword">and</span> a.CONSTRAINT_NAME <span class="hljs-operator">=</span> b.CONSTRAINT_NAME  <br>   <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> b.POSITION) a  <br>   <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a.constraint_name) loop  <br>  <span class="hljs-keyword">Result</span> :<span class="hljs-operator">=</span> <span class="hljs-keyword">Result</span> <span class="hljs-operator">||</span> chr(<span class="hljs-number">10</span>) <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;  PRIMARY KEY (&#x27;</span> <span class="hljs-operator">||</span>  <br><span class="hljs-built_in">lower</span>(c.pk_columns) <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;),&#x27;</span>;  <br><span class="hljs-keyword">end</span> loop;  <br><span class="hljs-comment">--unique  </span><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> a.constraint_name, wm_concat(a.column_name) uk_columns  <br><span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> a.CONSTRAINT_NAME,  <br> <span class="hljs-string">&#x27;`&#x27;</span> <span class="hljs-operator">||</span> b.COLUMN_NAME <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;`&#x27;</span> column_name  <br><span class="hljs-keyword">from</span> all_constraints a, all_cons_columns b  <br>   <span class="hljs-keyword">where</span> a.owner <span class="hljs-operator">=</span> i_owner  <br> <span class="hljs-keyword">and</span> a.table_name <span class="hljs-operator">=</span> i_table_name  <br> <span class="hljs-keyword">and</span> a.constraint_type <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;U&#x27;</span>  <br> <span class="hljs-keyword">and</span> a.OWNER <span class="hljs-operator">=</span> b.OWNER  <br> <span class="hljs-keyword">and</span> a.TABLE_NAME <span class="hljs-operator">=</span> b.TABLE_NAME  <br> <span class="hljs-keyword">and</span> a.CONSTRAINT_NAME <span class="hljs-operator">=</span> b.CONSTRAINT_NAME  <br>   <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> b.POSITION) a  <br>   <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a.constraint_name) loop  <br>  <span class="hljs-keyword">Result</span> :<span class="hljs-operator">=</span> <span class="hljs-keyword">Result</span> <span class="hljs-operator">||</span> chr(<span class="hljs-number">10</span>) <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;  UNIQUE KEY `&#x27;</span> <span class="hljs-operator">||</span>  <br><span class="hljs-built_in">lower</span>(c.constraint_name) <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;`(&#x27;</span> <span class="hljs-operator">||</span> <span class="hljs-built_in">lower</span>(c.uk_columns) <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;),&#x27;</span>;  <br><span class="hljs-keyword">end</span> loop;  <br><span class="hljs-comment">-- index  </span><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> a.index_name, wm_concat(a.column_name) ind_columns  <br><span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> a.index_name,  <br> <span class="hljs-string">&#x27;`&#x27;</span> <span class="hljs-operator">||</span> a.COLUMN_NAME <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;`&#x27;</span> column_name  <br><span class="hljs-keyword">from</span> all_ind_columns a  <br>   <span class="hljs-keyword">where</span> a.table_owner <span class="hljs-operator">=</span> i_owner  <br> <span class="hljs-keyword">and</span> a.TABLE_NAME <span class="hljs-operator">=</span> i_table_name  <br> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span>  <br>   (<span class="hljs-keyword">select</span> index_name  <br><span class="hljs-keyword">from</span> all_constraints b  <br>   <span class="hljs-keyword">where</span> a.TABLE_OWNER <span class="hljs-operator">=</span> b.owner  <br> <span class="hljs-keyword">and</span> a.TABLE_NAME <span class="hljs-operator">=</span> b.TABLE_NAME  <br> <span class="hljs-keyword">and</span> a.INDEX_NAME <span class="hljs-operator">=</span> b.INDEX_NAME)  <br>   <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> a.COLUMN_POSITION) a  <br>   <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a.index_name) loop  <br>  <span class="hljs-keyword">Result</span> :<span class="hljs-operator">=</span> <span class="hljs-keyword">Result</span> <span class="hljs-operator">||</span> chr(<span class="hljs-number">10</span>) <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;  KEY `&#x27;</span> <span class="hljs-operator">||</span> <span class="hljs-built_in">lower</span>(c.index_name) <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;`(&#x27;</span> <span class="hljs-operator">||</span>  <br><span class="hljs-built_in">lower</span>(c.ind_columns) <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;),&#x27;</span>;  <br><span class="hljs-keyword">end</span> loop;  <br><span class="hljs-keyword">Result</span> :<span class="hljs-operator">=</span> substr(<span class="hljs-keyword">Result</span>, <span class="hljs-number">1</span>, length(<span class="hljs-keyword">result</span>) <span class="hljs-operator">-</span> <span class="hljs-number">1</span>) <span class="hljs-operator">||</span> chr(<span class="hljs-number">10</span>) <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;)&#x27;</span>;  <br><span class="hljs-comment">--table comments  </span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">max</span>(a.COMMENTS)  <br>  <span class="hljs-keyword">into</span> table_comments  <br>  <span class="hljs-keyword">from</span> all_tab_comments a  <br> <span class="hljs-keyword">where</span> owner <span class="hljs-operator">=</span> i_owner  <br>   <span class="hljs-keyword">and</span> table_name <span class="hljs-operator">=</span> i_table_name;  <br>if (table_comments <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>) <span class="hljs-keyword">then</span>  <br>  <span class="hljs-keyword">Result</span> :<span class="hljs-operator">=</span> <span class="hljs-keyword">Result</span> <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;COMMENT=&#x27;&#x27;&#x27;</span> <span class="hljs-operator">||</span> table_comments <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;&#x27;&#x27;&#x27;</span>;  <br><span class="hljs-keyword">end</span> if;  <br><span class="hljs-keyword">Result</span> :<span class="hljs-operator">=</span> <span class="hljs-keyword">Result</span> <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;;&#x27;</span>;  <br>  <span class="hljs-keyword">end</span> if;  <br>  <span class="hljs-keyword">return</span>(<span class="hljs-keyword">Result</span>);  <br><span class="hljs-keyword">end</span> fnc_table_to_mysql;  <br><span class="hljs-operator">/</span><br></code></pre></td></tr></table></figure><h4 id="2-需要转换的oracle-表"><a href="#2-需要转换的oracle-表" class="headerlink" title="2 需要转换的oracle 表"></a>2 需要转换的oracle 表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span>  &quot;TEST_MYSQL&quot;.&quot;UC_CUST_SY_CPZX&quot; <br>   (&quot;BUSI_DATE&quot; NUMBER(<span class="hljs-operator">*</span>,<span class="hljs-number">0</span>), <br>&quot;TRADE_DATE&quot; NUMBER(<span class="hljs-operator">*</span>,<span class="hljs-number">0</span>), <br>&quot;YEAR_ID&quot; NUMBER(<span class="hljs-operator">*</span>,<span class="hljs-number">0</span>), <br>&quot;MONTH_ID&quot; NUMBER(<span class="hljs-operator">*</span>,<span class="hljs-number">0</span>), <br>&quot;DAY_ID&quot; NUMBER(<span class="hljs-operator">*</span>,<span class="hljs-number">0</span>), <br>&quot;CPLX&quot; <span class="hljs-type">CHAR</span>(<span class="hljs-number">2</span> BYTE), <br>&quot;CPDM&quot; VARCHAR2(<span class="hljs-number">100</span> BYTE), <br>&quot;PRODUCT_NAME&quot; VARCHAR2(<span class="hljs-number">300</span> BYTE), <br>&quot;DWJZ&quot; NUMBER(<span class="hljs-number">19</span>,<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> ENABLE, <br>&quot;LJJZ&quot; NUMBER(<span class="hljs-number">19</span>,<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> ENABLE, <br>&quot;RZZL&quot; NUMBER(<span class="hljs-number">19</span>,<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> ENABLE, <br>&quot;FQJZ&quot; NUMBER(<span class="hljs-number">19</span>,<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> ENABLE, <br>&quot;LJJZSYL&quot; NUMBER(<span class="hljs-number">19</span>,<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> ENABLE, <br>&quot;CPGLMS&quot; NUMBER(<span class="hljs-operator">*</span>,<span class="hljs-number">0</span>)<br>   );<br></code></pre></td></tr></table></figure><h4 id="3-转换"><a href="#3-转换" class="headerlink" title="3 转换"></a>3 转换</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> dbms_lob.substr(fnc_table_to_mysql(<span class="hljs-string">&#x27;TEST_MYSQL&#x27;</span>,<span class="hljs-string">&#x27;UC_CUST_SY_CPZX&#x27;</span>,<span class="hljs-string">&#x27;decimal&#x27;</span>,<span class="hljs-string">&#x27;ID&#x27;</span>)) <span class="hljs-keyword">FROM</span> DUAL;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `uc_cust_sy_cpzx`(<br>  `busi_date` <span class="hljs-type">decimal</span>,<br>  `trade_date` <span class="hljs-type">decimal</span>,<br>  `year_id` <span class="hljs-type">decimal</span>,<br>  `month_id` <span class="hljs-type">decimal</span>,<br>  `day_id` <span class="hljs-type">decimal</span>,<br>  `cplx` <span class="hljs-type">char</span>(<span class="hljs-number">2</span>),<br>  `cpdm` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>),<br>  `product_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">300</span>),<br>  `dwjz` <span class="hljs-type">decimal</span>(<span class="hljs-number">19</span>,<span class="hljs-number">4</span>),<br>  `ljjz` <span class="hljs-type">decimal</span>(<span class="hljs-number">19</span>,<span class="hljs-number">4</span>),<br>  `rzzl` <span class="hljs-type">decimal</span>(<span class="hljs-number">19</span>,<span class="hljs-number">4</span>),<br>  `fqjz` <span class="hljs-type">decimal</span>(<span class="hljs-number">19</span>,<span class="hljs-number">4</span>),<br>  `ljjzsyl` <span class="hljs-type">decimal</span>(<span class="hljs-number">19</span>,<span class="hljs-number">4</span>),<br>  `cpglms` <span class="hljs-type">decimal</span><br>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kafka2.1.0源码环境构建IDEA+Gradle</title>
    <link href="/2021/10/27/2021%E5%B9%B410%E6%9C%8827%E6%97%A512:48:46_%E5%9F%BA%E4%BA%8EIDEA+Gradle%E6%9E%84%E5%BB%BAKafka%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83/"/>
    <url>/2021/10/27/2021%E5%B9%B410%E6%9C%8827%E6%97%A512:48:46_%E5%9F%BA%E4%BA%8EIDEA+Gradle%E6%9E%84%E5%BB%BAKafka%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h3 id="一-环境"><a href="#一-环境" class="headerlink" title="一. 环境"></a>一. 环境</h3><ul><li>MacOS</li><li>Kafka:<a href="https://archive.apache.org/dist/kafka/2.1.0/kafka-2.1.0-src.tgz">Kafka-2.1.0-src</a></li><li>Gradle:<a href="https://services.gradle.org/distributions/gradle-5.2-all.zip">Gradle-5.2-all</a></li><li>Scala:Scala-2.11.8</li><li>Java:1.8</li></ul><h3 id="二-Gradle安装"><a href="#二-Gradle安装" class="headerlink" title="二. Gradle安装"></a>二. Gradle安装</h3><p>Gradle解压到<code>/Users/zyh/Library</code><br>在<code>~/.zshrc</code>中配置下面环境变量，如果你用的不是zsh需要根据实际情况来配置环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">export GRADLE_HOME=/Users/zyh/Library/gradle-5.2<br>export GRADLE_USER_HOME=$GRADLE_HOME/gradle-reposity<br>export PATH=$GRADLE_HOME/bin:$PATH<br></code></pre></td></tr></table></figure><h3 id="三-Scala安装"><a href="#三-Scala安装" class="headerlink" title="三.Scala安装"></a>三.Scala安装</h3><p><img src="https://raw.githubusercontent.com/zyh194/images/main/gitnote/2021/10/27/1635314194466-1635314194468.png" alt="title"></p><h3 id="四-Kafka源码编译"><a href="#四-Kafka源码编译" class="headerlink" title="四.Kafka源码编译"></a>四.Kafka源码编译</h3><p>下载kafka源码,解压到文件夹替换build.gradle中所有的mavenCentral()，改成阿里的源</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">buildscript</span> &#123;<br>  <span class="hljs-keyword">repositories</span> &#123;<br>    <span class="hljs-comment">//mavenCentral()</span><br>    maven &#123; url <span class="hljs-string">&#x27;http://maven.aliyun.com/nexus/content/groups/public/&#x27;</span> &#125;<br>    maven &#123;<br>      url <span class="hljs-string">&quot;https://plugins.gradle.org/m2/&quot;</span><br>    &#125;<br>  &#125;<br>....<br><span class="hljs-keyword">allprojects</span> &#123;<br>  <span class="hljs-keyword">repositories</span> &#123;<br>    <span class="hljs-comment">//mavenCentral()</span><br>    maven &#123; url <span class="hljs-string">&#x27;http://maven.aliyun.com/nexus/content/groups/public/&#x27;</span> &#125;<br>    maven &#123;<br>      url <span class="hljs-string">&quot;https://plugins.gradle.org/m2/&quot;</span><br>    &#125;<br>  &#125;<br>....<br></code></pre></td></tr></table></figure><h3 id="五-IDEA配置"><a href="#五-IDEA配置" class="headerlink" title="五.IDEA配置"></a>五.IDEA配置</h3><p><img src="https://raw.githubusercontent.com/zyh194/images/main/gitnote/2021/10/27/1635312590215-1635312590217.png" alt="title"></p><p><img src="https://raw.githubusercontent.com/zyh194/images/main/gitnote/2021/10/27/1635312602619-1635312602620.png" alt="title"></p><p>检查配置Gradle环境，File -&gt; Settings -&gt; Build, Execution, Deployment -&gt; Build Tools -&gt; Gradle</p><p><img src="https://raw.githubusercontent.com/zyh194/images/main/gitnote/2021/10/27/1635314286995-1635314286997.png" alt="title"></p><h3 id="六-最终结果"><a href="#六-最终结果" class="headerlink" title="六.最终结果"></a>六.最终结果</h3><p><img src="https://raw.githubusercontent.com/zyh194/images/main/gitnote/2021/10/27/1635314611366-1635314611373.png" alt="title"></p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AVL Tree</title>
    <link href="/2020/12/19/2020%E5%B9%B412%E6%9C%8819%E6%97%A519:33:29_AVLTree/"/>
    <url>/2020/12/19/2020%E5%B9%B412%E6%9C%8819%E6%97%A519:33:29_AVLTree/</url>
    
    <content type="html"><![CDATA[<h3 id="AVL-树介绍"><a href="#AVL-树介绍" class="headerlink" title="AVL 树介绍"></a>AVL 树介绍</h3><p>AVL树是高度平衡的而二叉树。它的特点是：AVL树中任何节点的两个子树的高度最大差别为1。</p><p><img src="https://raw.githubusercontent.com/Demo233/images/main/gitnote/2020/12/19/1608377959927-1608377959961.png" alt="title"></p><p>上面的两张图片，左边的是AVL树，它的任何节点的两个子树的高度差别都&lt;&#x3D;1；而右边的不是AVL树，因为7的两颗子树的高度相差为2(以2为根节点的树的高度是3，而以8为根节点的树的高度是1)。</p><h3 id="AVL树的Java实现"><a href="#AVL树的Java实现" class="headerlink" title="AVL树的Java实现"></a>AVL树的Java实现</h3><p><strong>1.定义</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AVLTree</span>&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Comparable</span>&lt;T&gt;&gt; &#123;<br>    <span class="hljs-keyword">private</span> AVLTreeNode&lt;T&gt; mRoot;    <span class="hljs-comment">// 根结点</span><br><br>    <span class="hljs-comment">// AVL树的节点(内部类)</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">AVLTreeNode</span>&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Comparable</span>&lt;T&gt;&gt; &#123;<br>        T key;                <span class="hljs-comment">// 关键字(键值)</span><br>        <span class="hljs-type">int</span> height;         <span class="hljs-comment">// 高度</span><br>        AVLTreeNode&lt;T&gt; left;    <span class="hljs-comment">// 左孩子</span><br>        AVLTreeNode&lt;T&gt; right;    <span class="hljs-comment">// 右孩子</span><br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">AVLTreeNode</span><span class="hljs-params">(T key, AVLTreeNode&lt;T&gt; left, AVLTreeNode&lt;T&gt; right)</span> &#123;<br>            <span class="hljs-built_in">this</span>.key = key;<br>            <span class="hljs-built_in">this</span>.left = left;<br>            <span class="hljs-built_in">this</span>.right = right;<br>            <span class="hljs-built_in">this</span>.height = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    ......<br>&#125;<br></code></pre></td></tr></table></figure><p>AVLTree是AVL树对应的类，而AVLTreeNode是AVL树节点，它是AVLTree的内部类。AVLTree包含了AVL树的根节点，AVL树的基本操作也定义在AVL树中。AVLTreeNode包括的几个组成对象:</p><ul><li>key – 是关键字，是用来对AVL树的节点进行排序的。</li><li>left – 是左孩子。</li><li>right – 是右孩子。</li><li>height – 是高度。</li></ul><p><strong>2. 树的高度</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 获取树的高度</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">height</span><span class="hljs-params">(AVLTreeNode&lt;T&gt; tree)</span> &#123;<br>    <span class="hljs-keyword">if</span> (tree != <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">return</span> tree.height;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">height</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> height(mRoot);<br>&#125;<br></code></pre></td></tr></table></figure><p>关于高度，有的地方将”空二叉树的高度是-1”，而本文采用维基百科上的定义：树的高度为最大层次。即空的二叉树的高度是0，非空树的高度等于它的最大层次(根的层次为1，根的子节点为第2层，依次类推)。</p><p><strong>3. 比较大小</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 比较两个值的大小</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>    <span class="hljs-keyword">return</span> a&gt;b ? a : b;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h3><p>如果在AVL树中进行插入或删除节点后，可能导致AVL树失去平衡。这种失去平衡的可以概括为4种姿态：LL(左左)，LR(左右)，RR(右右)和RL(右左)。下面给出它们的示意图：</p><p><img src="https://raw.githubusercontent.com/Demo233/images/main/gitnote/2020/12/19/1608378491659-1608378491661.png" alt="title"></p><p>上图中的4棵树都是”失去平衡的AVL树”，从左往右的情况依次是：LL、LR、RL、RR。除了上面的情况之外，还有其它的失去平衡的AVL树，如下图：</p><p><img src="https://raw.githubusercontent.com/Demo233/images/main/gitnote/2020/12/19/1608378588779-1608378588780.png" alt="title"></p><p>上面的两张图都是为了便于理解，而列举的关于”失去平衡的AVL树”的例子。总的来说，AVL树失去平衡时的情况一定是LL、LR、RL、RR这4种之一，它们都由各自的定义：</p><blockquote><p>(01)LL：LeftLeft，也称为”左左”。插入或删除一个节点后，根节点的左子树的左子树还有非空子节点，导致”根的左子树的高度”比”根的右子树的高度”大2，导致AVL树失去了平衡。<br>例如，在上面LL情况中，由于”根节点(8)的左子树(4)的左子树(2)还有非空子节点”，而”根节点(8)的右子树(12)没有子节点”；导致”根节点(8)的左子树(4)高度”比”根节点(8)的右子树(12)”高2。<br>(02)LR：LeftRight，也称为”左右”。插入或删除一个节点后，根节点的左子树的右子树还有非空子节点，导致”根的左子树的高度”比”根的右子树的高度”大2，导致AVL树失去了平衡。<br>例如，在上面LR情况中，由于”根节点(8)的左子树(4)的左子树(6)还有非空子节点”，而”根节点(8)的右子树(12)没有子节点”；导致”根节点(8)的左子树(4)高度”比”根节点(8)的右子树(12)”高2。<br>(03)RL：RightLeft，称为”右左”。插入或删除一个节点后，根节点的右子树的左子树还有非空子节点，导致”根的右子树的高度”比”根的左子树的高度”大2，导致AVL树失去了平衡。<br>例如，在上面RL情况中，由于”根节点(8)的右子树(12)的左子树(10)还有非空子节点”，而”根节点(8)的左子树(4)没有子节点”；导致”根节点(8)的右子树(12)高度”比”根节点(8)的左子树(4)”高2。<br>(04)RR：RightRight，称为”右右”。插入或删除一个节点后，根节点的右子树的右子树还有非空子节点，导致”根的右子树的高度”比”根的左子树的高度”大2，导致AVL树失去了平衡。<br>例如，在上面RR情况中，由于”根节点(8)的右子树(12)的右子树(14)还有非空子节点”，而”根节点(8)的左子树(4)没有子节点”；导致”根节点(8)的右子树(12)高度”比”根节点(8)的左子树(4)”高2。</p></blockquote><p>如果在AVL树中进行插入或删除节点后，可能导致AVL树失去平衡。AVL失去平衡之后，可以通过旋转使其恢复平衡，下面分别介绍”LL(左左)，LR(左右)，RR(右右)和RL(右左)”这4种情况对应的旋转方法。</p>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Apache Druid Guice</title>
    <link href="/2020/12/15/2020%E5%B9%B412%E6%9C%8815%E6%97%A523:26:43_Apache%20Druid%20Guice/"/>
    <url>/2020/12/15/2020%E5%B9%B412%E6%9C%8815%E6%97%A523:26:43_Apache%20Druid%20Guice/</url>
    
    <content type="html"><![CDATA[<p>大数据组件中OLAP引擎应用广泛，比较火的有presto、Kylin、Druid。</p><p>Presto基于内存处理，HQL用Presto瞬间搞定，猛成一把刀，但你再看看内存使用情况也是把人给惊呆了，真是没有个上百G内存玩不转。</p><p>再说Kylin和Druid，前者偏离线，后者偏实时。Kylin作为Hadoop领域的老大哥，已经几乎成为离线标准，指标分析领域应用广泛。而Apache Druid则在实时OLAP领域独领风骚，优异的性能、高可用、易拓展。</p><p>平安2019年底引进Druid，离线迎合数仓、实时迎合埋点+Kafka构建OLAP多维分析报表。关于Druid的资料在网上很少，接触时，只有英文文档。想要了解一下源码，资料更是少的可怜，Druid源码要看懂，得先知道Google Guice这个东西，本文来讨论一下。</p><h3 id="一、-Google-Guice介绍"><a href="#一、-Google-Guice介绍" class="headerlink" title="一、 Google Guice介绍"></a>一、 Google Guice介绍</h3><p><a href="https://github.com/google/guice">Guice</a>是一个小巧的依赖注入工具，玩Java的话，关于Spring依赖注入大家肯定不陌生。早期，Spring依赖注入靠的是写XML，这种方式太过隐蔽。目前Spring依赖注入玩注解，这种方式很灵活。而Guice依赖注入是靠写代码，下面具一些小栗子方便快速入门。</p><h3 id="二、-Guice实例"><a href="#二、-Guice实例" class="headerlink" title="二、 Guice实例"></a>二、 Guice实例</h3><p><strong>1. 普通注入</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ml.yihao;<br><br><span class="hljs-keyword">import</span> com.google.inject.*;<br><span class="hljs-keyword">import</span> com.google.inject.name.Named;<br><span class="hljs-keyword">import</span> com.google.inject.name.Names;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zyh</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/12/158:34 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Example1</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Injector</span> <span class="hljs-variable">injector</span> <span class="hljs-operator">=</span> Guice.createInjector(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Module</span>() &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(Binder binder)</span> &#123;<br>                binder.bind(DataBaseMeta.class).to(MysqlDataBaseMeta.class);<br>                <span class="hljs-comment">// 注入用户名</span><br>                binder.bind(String.class).annotatedWith(Names.named(<span class="hljs-string">&quot;username&quot;</span>)).toInstance(<span class="hljs-string">&quot;root&quot;</span>);<br>                <span class="hljs-comment">// 注入密码</span><br>                binder.bind(String.class).annotatedWith(Names.named(<span class="hljs-string">&quot;password&quot;</span>)).toInstance(<span class="hljs-string">&quot;^5g%@!hKH&quot;</span>);<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-type">DataBaseMeta</span> <span class="hljs-variable">dataBaseMeta</span> <span class="hljs-operator">=</span> injector.getInstance(DataBaseMeta.class);<br>        dataBaseMeta.print();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">DataBaseMeta</span>&#123;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-meta">@Singleton</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MysqlDataBaseMeta</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DataBaseMeta</span> &#123;<br><br><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-meta">@Inject</span><br>    MysqlDataBaseMeta(<span class="hljs-meta">@Named(&quot;username&quot;)</span> String username, <span class="hljs-meta">@Named(&quot;password&quot;)</span> String password)&#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(username + <span class="hljs-string">&quot;:&quot;</span> + password);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>使用Guice动态注入<strong>username</strong>和<strong>password</strong>属性</p><p><strong>2. 默认值</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ml.yihao;<br><br><span class="hljs-keyword">import</span> com.google.inject.*;<br><span class="hljs-keyword">import</span> com.google.inject.multibindings.OptionalBinder;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zyh</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/12/159:12 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Example3</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Injector</span> <span class="hljs-variable">injector</span> <span class="hljs-operator">=</span> Guice.createInjector(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FrameWorkModule</span>()<span class="hljs-comment">/*, new Module() &#123;</span><br><span class="hljs-comment">            @Override</span><br><span class="hljs-comment">            public void configure(Binder binder) &#123;</span><br><span class="hljs-comment">                OptionalBinder.newOptionalBinder(binder, Emit.class).setBinding().to(KafkaEmit.class);</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;*/</span>);<br>        <span class="hljs-type">TestService</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> injector.getInstance(TestService.class);<br>        instance.print();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestService</span>&#123;<br><br>    <span class="hljs-keyword">private</span> Emit emit;<br><br>    <span class="hljs-meta">@Inject</span><br>    TestService(Emit emit)&#123;<br>        <span class="hljs-built_in">this</span>.emit = emit;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.emit.emit();<br>    &#125;<br><br><br><br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Emit</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">emit</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">KafkaEmit</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Emit</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">emit</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;kafka&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpEmit</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Emit</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">emit</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;http&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FrameWorkModule</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Module</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(Binder binder)</span> &#123;<br>        OptionalBinder.newOptionalBinder(binder, Emit.class).setDefault().to(HttpEmit.class);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>3. 覆盖已绑定关系</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ml.yihao;<br><br><span class="hljs-keyword">import</span> com.google.common.collect.ImmutableList;<br><span class="hljs-keyword">import</span> com.google.inject.Guice;<br><span class="hljs-keyword">import</span> com.google.inject.Inject;<br><span class="hljs-keyword">import</span> com.google.inject.Injector;<br><span class="hljs-keyword">import</span> com.google.inject.Module;<br><span class="hljs-keyword">import</span> com.google.inject.util.Modules;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zyh</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 默认注入Mysql，后续覆盖成oracle</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/12/158:48 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Example2</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ImmutableList&lt;Module&gt; defaultModule = ImmutableList.of(binder -&gt; &#123;<br>            binder.bind(Database.class).to(MysqlDatabase.class);<br>        &#125;);<br><br>        ImmutableList&lt;Module&gt; customModule = ImmutableList.of(binder -&gt; &#123;<br>            binder.bind(Database.class).to(OracleDatabase.class);<br>        &#125;);<br><br>        <span class="hljs-comment">// 默认</span><br>        <span class="hljs-comment">//Injector injector = Guice.createInjector(defaultModule);</span><br><br>        <span class="hljs-comment">// 覆盖</span><br>        <span class="hljs-type">Injector</span> <span class="hljs-variable">injector</span> <span class="hljs-operator">=</span> Guice.createInjector(Modules.override(defaultModule).with(customModule));<br><br>        <span class="hljs-type">FrameWork</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> injector.getInstance(FrameWork.class);<br>        instance.start();<br>        <br>    &#125;<br>    <br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FrameWork</span>&#123;<br><br>    <span class="hljs-keyword">private</span> Database database;<br><br>    <span class="hljs-meta">@Inject</span><br>    FrameWork(Database database)&#123;<br>        <span class="hljs-built_in">this</span>.database = database;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span>&#123;<br>        database.print();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Database</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MysqlDatabase</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Database</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mysql&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(type);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">OracleDatabase</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Database</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;oracle&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(type);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="三、-Druid中拓展组件"><a href="#三、-Druid中拓展组件" class="headerlink" title="三、 Druid中拓展组件"></a>三、 Druid中拓展组件</h3><p>Druid在Guice基础上拓展了三个插件，这三个插件贯穿整个Druid源码，不懂会影响看代码。它们分别是<code>guice-lifecycle</code>、<code>guice-jsonconfig</code>和<code>guice-jersey-jetty</code></p><ul><li>guice-lifecycle：提供生命周期管理</li><li>guice-jsonconfig：提供配置文件Bean注入</li><li>guice-jersey-jetty：提供jetty轻量级servlet容器</li></ul><p>下面分别上代码演示一下三个模块的使用，在使用之前我们需要先将其加入到依赖</p><p>这里提供<a href="https://github.com/Demo233/guice-module">源码</a>，你只需要<strong>clone</strong>下来执行<code>mvn package install</code>，然后将下面内容加入到自己项目的<code>pom.xml</code>中即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.google.code<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>guice-lifecycle<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.google.code<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>guice-jsonconfig<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.google.code<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>guice-jersey-jetty<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>1. lifecycle生命周期管理</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ml.yihao;<br><br><span class="hljs-keyword">import</span> com.google.code.guice.lifecycle.*;<br><span class="hljs-keyword">import</span> com.google.inject.Guice;<br><span class="hljs-keyword">import</span> com.google.inject.Inject;<br><span class="hljs-keyword">import</span> com.google.inject.Injector;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zyh</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/12/1510:04 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Example4</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Injector</span> <span class="hljs-variable">injector</span> <span class="hljs-operator">=</span> Guice.createInjector(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LifecycleModule</span>());<br>        <span class="hljs-type">Bootstrap</span> <span class="hljs-variable">bootstrap</span> <span class="hljs-operator">=</span> injector.getInstance(Bootstrap.class);<br>        bootstrap.start();<br><br>    &#125;<br><br>    <span class="hljs-meta">@ManageLifecycle</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintLifecycle</span>&#123;<br><br>        <span class="hljs-meta">@LifecycleStart</span><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;start&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-meta">@LifecycleStop</span><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;stop&quot;</span>);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 定义好类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Bootstrap</span>&#123;<br><br>        <span class="hljs-keyword">private</span> PrintLifecycle printLifecycle;<br>        <span class="hljs-keyword">private</span> Lifecycle lifecycle;<br><br>        <span class="hljs-meta">@Inject</span><br>        Bootstrap(PrintLifecycle printLifecycle, Lifecycle lifecycle)&#123;<br>            <span class="hljs-built_in">this</span>.printLifecycle = printLifecycle;<br>            <span class="hljs-built_in">this</span>.lifecycle = lifecycle;<br>        &#125;<br><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>            System.out.println(<span class="hljs-string">&quot;bootstrap start&quot;</span>);<br>            lifecycle.start();<br>            <span class="hljs-comment">// 等待子线程运行完成以后主线程终止</span><br>            lifecycle.join();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2. 配置类Bean注入</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ml.yihao;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.JsonProperty;<br><span class="hljs-keyword">import</span> com.google.code.guice.jsonconfig.JsonConfigModule;<br><span class="hljs-keyword">import</span> com.google.code.guice.jsonconfig.JsonConfigProvider;<br><span class="hljs-keyword">import</span> com.google.inject.*;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> javax.validation.constraints.Min;<br><span class="hljs-keyword">import</span> javax.validation.constraints.NotNull;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zyh</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/12/1510:31 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Example5</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Injector</span> <span class="hljs-variable">injector</span> <span class="hljs-operator">=</span> Guice.createInjector(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonConfigModule</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Module</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(Binder binder)</span> &#123;<br>                JsonConfigProvider.bind(binder, <span class="hljs-string">&quot;druid.server&quot;</span>, DruidServerConfig.class);<br>            &#125;<br><br>            <span class="hljs-meta">@Provides</span><br>            <span class="hljs-meta">@Singleton</span><br>            Properties <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-type">Properties</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>                prop.put(<span class="hljs-string">&quot;druid.server.host&quot;</span>, <span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br>                prop.put(<span class="hljs-string">&quot;druid.server.port&quot;</span>, <span class="hljs-number">9999</span>);<br>                <span class="hljs-keyword">return</span> prop;<br>            &#125;<br><br>        &#125;);<br>        <span class="hljs-type">DruidServerConfig</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> injector.getInstance(DruidServerConfig.class);<br>        System.out.println(config.getHost() + <span class="hljs-string">&quot;:&quot;</span> + config.getPort());<br>    &#125;<br><br>&#125;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DruidServerConfig</span>&#123;<br><br>    <span class="hljs-meta">@JsonProperty</span> <span class="hljs-meta">@NotNull</span> <span class="hljs-keyword">private</span> String host;<br><br>    <span class="hljs-meta">@JsonProperty</span> <span class="hljs-meta">@Min(6060)</span> <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">8080</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3. jetty容器管理</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ml.yihao;<br><br><span class="hljs-keyword">import</span> com.google.code.guice.jsonconfig.JsonConfigModule;<br><span class="hljs-keyword">import</span> com.google.code.jersey.Jerseys;<br><span class="hljs-keyword">import</span> com.google.code.jersey.ServerConfig;<br><span class="hljs-keyword">import</span> com.google.code.jersey.jetty.JerseyJettyServer;<br><span class="hljs-keyword">import</span> com.google.code.jersey.jetty.JettyServerModule;<br><span class="hljs-keyword">import</span> com.google.inject.*;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.ws.rs.GET;<br><span class="hljs-keyword">import</span> javax.ws.rs.Path;<br><span class="hljs-keyword">import</span> javax.ws.rs.Produces;<br><span class="hljs-keyword">import</span> javax.ws.rs.core.Context;<br><span class="hljs-keyword">import</span> javax.ws.rs.core.MediaType;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zyh</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/12/1510:46 下午</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Example6</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Injector</span> <span class="hljs-variable">injector</span> <span class="hljs-operator">=</span> Guice.createInjector(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JettyServerModule</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonConfigModule</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Module</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(Binder binder)</span> &#123;<br><br>                Jerseys.addResource(binder, IndexResource.class);<br>            &#125;<br><br>            Properties <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-type">Properties</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>                prop.put(<span class="hljs-string">&quot;server.http.host&quot;</span>, <span class="hljs-string">&quot;0.0.0.0&quot;</span>);<br>                prop.put(<span class="hljs-string">&quot;server.http.port&quot;</span>, <span class="hljs-number">8080</span>);<br>                <span class="hljs-keyword">return</span> prop;<br>            &#125;<br><br>        &#125;);<br>        <span class="hljs-type">JerseyJettyServer</span> <span class="hljs-variable">jerseyJettyServer</span> <span class="hljs-operator">=</span> injector.getInstance(JerseyJettyServer.class);<br>        jerseyJettyServer.start();<br>        Thread.currentThread().join();<br>    &#125;<br><br><br><br>    <span class="hljs-meta">@Singleton</span><br>    <span class="hljs-meta">@Path(&quot;/index&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IndexResource</span> &#123;<br>        <span class="hljs-keyword">private</span> ServerConfig serverConfig;<br>        <span class="hljs-meta">@Inject</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">IndexResource</span><span class="hljs-params">(ServerConfig serverConfig)</span> &#123;<br>            <span class="hljs-built_in">this</span>.serverConfig = serverConfig;<br>        &#125;<br><br>        <span class="hljs-meta">@GET</span><br>        <span class="hljs-meta">@Produces(MediaType.APPLICATION_JSON)</span><br>        <span class="hljs-keyword">public</span> ServerConfig <span class="hljs-title function_">doGet</span><span class="hljs-params">(<span class="hljs-meta">@Context</span> <span class="hljs-keyword">final</span> HttpServletRequest req)</span> &#123;<br>            <span class="hljs-keyword">return</span> serverConfig;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><a href="https://github.com/Demo233/guice-example">源码</a>段落引用</p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Apache Druid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ThreadLocal</title>
    <link href="/2020/12/07/2020%E5%B9%B412%E6%9C%8807%E6%97%A521:00:20_ThreadLocal/"/>
    <url>/2020/12/07/2020%E5%B9%B412%E6%9C%8807%E6%97%A521:00:20_ThreadLocal/</url>
    
    <content type="html"><![CDATA[<p>ThreadLocal类是java.lang包中提供的类，下面来从应用场景、同步和原理等方面讨论一下它。</p><h3 id="一、ThreadLocal介绍"><a href="#一、ThreadLocal介绍" class="headerlink" title="一、ThreadLocal介绍"></a>一、ThreadLocal介绍</h3><blockquote><p>This class provides thread-local variables. These variables differ from their normal counterparts in that each thread that accesses one (via its get or set method) has its own, independently initialized copy of the variable. ThreadLocal instances are typically private static fields in classes that wish to associate state with a thread (e.g., a user ID or Transaction ID).</p></blockquote><p>大致的含义是: </p><blockquote><p>ThreadLocal是保存线程的本地变量，访问的get&#x2F;set方法都是相对独立的，<code>private static ThreadLocal</code> 实例化出来的私有静态字段是希望将某个状态与线程做关联。</p></blockquote><p>大白话就是，ThreadLocal是和线程相关的，在一个线程的生命周期内，任意的set&#x2F;get的值都只和当前线程相关。</p><h3 id="二、原理"><a href="#二、原理" class="headerlink" title="二、原理"></a>二、原理</h3><p>在了解ThreadLocal之前，我们先了解一下Thread、ThreadLocalMap和ThreadLocal这三者的关系。如下图所示：<br><img src="https://raw.githubusercontent.com/Demo233/images/main/gitnote/2020/12/07/1607347464265-1607347464295.png" alt="title"></p><p><strong>1. 每个Thread中都维护了一个ThreadLocalMap</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 查看Thread.class</span><br><br><span class="hljs-comment">/* ThreadLocal values pertaining to this thread. This map is maintained</span><br><span class="hljs-comment">* by the ThreadLocal class. */</span><br>ThreadLocal.<span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">threadLocals</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br></code></pre></td></tr></table></figure><p><strong>2. 每个ThreadLocalMap中都维护了多个ThreadLocal</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 查看ThreadLocalMap.class</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* The entries in this hash map extend WeakReference, using</span><br><span class="hljs-comment">* its main ref field as the key (which is always a</span><br><span class="hljs-comment">* ThreadLocal object).  Note that null keys (i.e. entry.get()</span><br><span class="hljs-comment">* == null) mean that the key is no longer referenced, so the</span><br><span class="hljs-comment">* entry can be expunged from table.  Such entries are referred to</span><br><span class="hljs-comment">* as &quot;stale entries&quot; in the code that follows.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Entry</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WeakReference</span>&lt;ThreadLocal&lt;?&gt;&gt; &#123;<br>   <span class="hljs-comment">/** The value associated with this ThreadLocal. */</span><br>   Object value;<br><br>   Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;<br>      <span class="hljs-built_in">super</span>(k);<br>      value = v;<br>   &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="三、同步问题"><a href="#三、同步问题" class="headerlink" title="三、同步问题"></a>三、同步问题</h3><p><strong>1. 到底能不能解决同步?</strong></p><p>有一些说法是ThreadLocal可以解决多线程问题，这里举一个使用ThreadLocal不能解决同步问题的栗子。比如下面这样:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zyh</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadId</span> &#123;<br><br>    <span class="hljs-comment">// 线程Id 共享变量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">// 获取线程ID</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;Integer&gt; threadId = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;Integer&gt;()&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> Integer <span class="hljs-title function_">initialValue</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> id ++;<br>        &#125;<br>    &#125;;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> threadId.get();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>                System.out.println(ThreadId.get());<br>            &#125;).start();<br><br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="https://raw.githubusercontent.com/Demo233/images/main/gitnote/2020/12/12/1607768722697-1607768722727.png" alt="title"></p><p><strong>2. 为什么会出现这样的问题?</strong></p><p><strong>多个线程内的ThreadLocal确实是各自一份，但是ThreadLocal内部操作的静态变量(id)却是相同的引用，这个变量在内存只实例化了一次</strong>。换句话说，多个线程虽然在修改各自内部的ThreadLocal，但是ThreadLocal最终操作的id其实只是一个。</p><p>解决这个问题有两个办法:</p><ul><li>让这个静态变量id保持原子性</li><li>让变量id实例化多次</li></ul><p><strong>3. 保持原子性解决同步</strong></p><p>下面演示一下通过<code>AtomicInteger</code>让变量保持原子性，进而实现同步操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicInteger;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zyh</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadId</span> &#123;<br><br>    <span class="hljs-comment">// 线程Id 共享变量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">// 获取线程ID</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;Integer&gt; threadId = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;Integer&gt;()&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> Integer <span class="hljs-title function_">initialValue</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> id.getAndIncrement();<br>        &#125;<br>    &#125;;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> threadId.get();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>                System.out.println(ThreadId.get());<br>            &#125;).start();<br><br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这里<code>AtomicInteger</code>是<code>JUC</code>包中的类，能够保证id的原子性加一操作。</p></blockquote><p><strong>4. 实例化多次解决同步</strong></p><p>网上讨论的有关<code>ThreadLocal&lt;DateFormat&gt;</code>的同步问题，原理其实就是保证每个线程自己的ThreadLocal指向的DateFormat引用不相同。像下面每次都去实例化一个:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;DateFormat&gt; DATE_FORMAT_THREAD_LOCAL = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InheritableThreadLocal</span>&lt;DateFormat&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> DateFormat <span class="hljs-title function_">initialValue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="四、拓展InheritableThreadLocal"><a href="#四、拓展InheritableThreadLocal" class="headerlink" title="四、拓展InheritableThreadLocal"></a>四、拓展InheritableThreadLocal</h3><p>在开发中不免遇到<strong>子线程获取父线程的ThreadLocal中的值</strong>的场景。只使用ThreadLocal满足不了需求，举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicInteger;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zyh</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadId</span> &#123;<br><br>    <span class="hljs-comment">// 线程Id 共享变量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">// 获取线程ID</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;Integer&gt; threadId = ThreadLocal.withInitial(()-&gt; id.getAndIncrement());<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> threadId.get();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(Integer value)</span>&#123;<br>        threadId.set(value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">// 调用处父线程设置值为8</span><br>        set(<span class="hljs-number">8</span>);<br>        <span class="hljs-comment">// 实例化子线程异步获取设置的值</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">son</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            System.out.println(<span class="hljs-string">&quot;子线程获取的值 : &quot;</span> + get());<br>        &#125;);<br>        son.start();<br>        <span class="hljs-comment">// 阻塞, 父线程等待子线程执行完成</span><br>        son.join();<br><br>        <span class="hljs-comment">// 父线程获取设置的值</span><br>        System.out.println(<span class="hljs-string">&quot;父线程获取的值 : &quot;</span> + get());<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>结果:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">子线程获取的值 : <span class="hljs-number">0</span><br>父线程获取的值 : <span class="hljs-number">8</span><br><br>Process finished with <span class="hljs-keyword">exit</span> code <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>下面演示如果使用InheritableThreadLocal让子类共享父类的值:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> threadlocal;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicInteger;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zyh</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadId</span> &#123;<br><br>    <span class="hljs-comment">// 线程Id 共享变量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">// 获取线程ID</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;Integer&gt; threadId = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InheritableThreadLocal</span>&lt;Integer&gt;()&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> Integer <span class="hljs-title function_">initialValue</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> id.getAndIncrement();<br>        &#125;<br>    &#125;;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> threadId.get();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(Integer value)</span>&#123;<br>        threadId.set(value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        set(<span class="hljs-number">8</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">son</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            System.out.println(<span class="hljs-string">&quot;子线程获取的值 : &quot;</span> + get());<br>        &#125;);<br>        son.start();<br>        son.join();<br><br>        System.out.println(<span class="hljs-string">&quot;父线程获取的值 : &quot;</span> + get());<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">子线程获取的值 : <span class="hljs-number">8</span><br>父线程获取的值 : <span class="hljs-number">8</span><br><br>Process finished with <span class="hljs-keyword">exit</span> code <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线程等待与唤醒</title>
    <link href="/2020/12/03/2020%E5%B9%B412%E6%9C%8803%E6%97%A522:33:13_%E7%BA%BF%E7%A8%8B%E7%AD%89%E5%BE%85%E4%B8%8E%E5%94%A4%E9%86%92/"/>
    <url>/2020/12/03/2020%E5%B9%B412%E6%9C%8803%E6%97%A522:33:13_%E7%BA%BF%E7%A8%8B%E7%AD%89%E5%BE%85%E4%B8%8E%E5%94%A4%E9%86%92/</url>
    
    <content type="html"><![CDATA[<p>今天我们讨论一下多线程的知识，等待（wait）与唤醒（notify）。这个东西有什么用？能用到哪？你一定有印象，还记得在操作系统课程上时的讲的生产者和消费者模型吗？信号量同步的过程，这两个操作贯穿其中，有兴趣的可以看一下实现的过程。</p><h3 id="wait-notify-notifyAll-介绍"><a href="#wait-notify-notifyAll-介绍" class="headerlink" title="wait(), notify(), notifyAll()介绍"></a>wait(), notify(), notifyAll()介绍</h3><p>在Java语言中的Object对象里，定义了wait(), notify()和notifyAll()等接口。wait()的作用是让当前线程进入等待状态，同时，wait()也会让当前线程释放它所持有的锁。而notify()和notifyAll()的作用，则是唤醒当前对象上的等待线程；notify()是唤醒单个线程，而notifyAll()是唤醒所有的线程。</p><p>Object类中关于等待&#x2F;唤醒的API详细信息如下：</p><ul><li>notify() - 唤醒在此对象监视器上等待的单个线程。</li><li>notifyAll() - 唤醒在此对象监视器上等待的所有线程。</li><li>wait() - 让当前线程处于“等待(阻塞)状态”，“直到其他线程调用此对象的 notify() 方法或 notifyAll() 方法”，当前线程被唤醒(进入“就绪状态”)。</li><li>wait(long timeout) - 让当前线程处于“等待(阻塞)状态”，“直到其他线程调用此对象的 notify() 方法或 notifyAll() 方法，或者超过指定的时间量”，当前线程被唤醒(进入“就绪状态”)。</li><li>wait(long timeout, int nanos)- 让当前线程处于“等待(阻塞)状态”，“直到其他线程调用此对象的 notify() 方法或 notifyAll() 方法，或者其他某个线程中断当前线程，或者已超过某个实际时间量”，当前线程被唤醒(进入“就绪状态”)。</li></ul><h3 id="wait-和notify-示例"><a href="#wait-和notify-示例" class="headerlink" title="wait()和notify()示例"></a>wait()和notify()示例</h3><p>下面通过示例演示”wait()和notify()配合使用的情形”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadA</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadA</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot; call notify()&quot;</span>);<br>            <span class="hljs-comment">// 唤醒当前的wait线程</span><br>            notify();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WaitTest</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">ThreadA</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadA</span>(<span class="hljs-string">&quot;t1&quot;</span>);<br><br>        <span class="hljs-keyword">synchronized</span>(t1) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 启动“线程t1”</span><br>                System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot; start t1&quot;</span>);<br>                t1.start();<br><br>                <span class="hljs-comment">// 主线程等待t1通过notify()唤醒。</span><br>                System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot; wait()&quot;</span>);<br>                t1.wait();<br><br>                System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot; continue&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">main</span> start t1<br><span class="hljs-selector-tag">main</span> <span class="hljs-built_in">wait</span>()<br>t1 call <span class="hljs-built_in">notify</span>()<br><span class="hljs-selector-tag">main</span> continue<br></code></pre></td></tr></table></figure><p>结果说明:</p><p>(01) 注意，图中”主线程” 代表“主线程main”。”线程t1” 代表WaitTest中启动的“线程t1”。 而“锁” 代表“t1这个对象的同步锁”。<br>(02) “主线程”通过 new ThreadA(“t1”) 新建“线程t1”。随后通过synchronized(t1)获取“t1对象的同步锁”。然后调用t1.start()启动“线程t1”。<br>(03) “主线程”执行t1.wait() 释放“t1对象的锁”并且进入“等待(阻塞)状态”。等待t1对象上的线程通过notify() 或 notifyAll()将其唤醒。<br>(04) “线程t1”运行之后，通过synchronized(this)获取“当前对象的锁”；接着调用notify()唤醒“当前对象上的等待线程”，也就是唤醒“主线程”。<br>(05) “线程t1”运行完毕之后，释放“当前对象的锁”。紧接着，“主线程”获取“t1对象的锁”，然后接着运行。</p><p><img src="https://raw.githubusercontent.com/Demo233/images/main/gitnote/2020/12/03/1607007915893-1607007915894.png" alt="title"></p><p>对于上面的代码？曾经有个朋友问到过：t1.wait()应该是让“线程t1”等待；但是，为什么却是让“主线程main”等待了呢？<br>在解答该问题前，我们先看看jdk文档中关于wait的一段介绍：</p><blockquote><p>Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.<br>In other words, this method behaves exactly as if it simply performs the call wait(0).<br>The current thread must own this object’s monitor. The thread releases ownership of this monitor and waits until another thread notifies threads waiting on this object’s monitor to wake up either through a call to the notify method or the notifyAll method. The thread then waits until it can re-obtain ownership of the monitor and resumes execution.</p></blockquote><p>中文意思大概是：</p><p><em>引起“当前线程”等待，直到另外一个线程调用notify()或notifyAll()唤醒该线程。换句话说，这个方法和wait(0)的效果一样！(补充，对于wait(long millis)方法，当millis为0时，表示无限等待，直到被notify()或notifyAll()唤醒)。<br>“当前线程”在调用wait()时，必须拥有该对象的同步锁。该线程调用wait()之后，会释放该锁；然后一直等待直到“其它线程”调用对象的同步锁的notify()或notifyAll()方法。然后，该线程继续等待直到它重新获取“该对象的同步锁”，然后就可以接着运行。</em></p><p>注意：<strong>jdk的解释中，说wait()的作用是让“当前线程”等待，而“当前线程”是指正在cpu上运行的线程！</strong></p><p>这也意味着，虽然t1.wait()是通过“线程t1”调用的wait()方法，但是调用t1.wait()的地方是在“主线程main”中。而主线程必须是“当前线程”，也就是运行状态，才可以执行t1.wait()。所以，此时的“当前线程”是“主线程main”！因此，t1.wait()是让“主线程”等待，而不是“线程t1”！</p><h3 id="wait-long-timeout-和notify"><a href="#wait-long-timeout-和notify" class="headerlink" title="wait(long timeout)和notify()"></a>wait(long timeout)和notify()</h3><p>wait(long timeout)会让当前线程处于“等待(阻塞)状态”，“直到其他线程调用此对象的 notify() 方法或 notifyAll() 方法，或者超过指定的时间量”，当前线程被唤醒(进入“就绪状态”)。</p><p>下面的示例就是演示wait(long timeout)在超时情况下，线程被唤醒的情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadA</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadA</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; run &quot;</span>);<br>        <span class="hljs-comment">// 死循环，不断运行。</span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)<br>            ;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WaitTimeoutTest</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">ThreadA</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadA</span>(<span class="hljs-string">&quot;t1&quot;</span>);<br><br>        <span class="hljs-keyword">synchronized</span>(t1) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 启动“线程t1”</span><br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; start t1&quot;</span>);<br>                t1.start();<br><br>                <span class="hljs-comment">// 主线程等待t1通过notify()唤醒 或 notifyAll()唤醒，或超过3000ms延时；然后才被唤醒。</span><br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; call wait &quot;</span>);<br>                t1.wait(<span class="hljs-number">3000</span>);<br><br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; continue&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gauss">main start t1<br>main <span class="hljs-keyword">call</span> <span class="hljs-built_in">wait</span> <br>t1 <span class="hljs-keyword">run</span>                  <span class="hljs-comment">// 大约3秒之后...输出“main continue”</span><br>main <span class="hljs-keyword">continue</span><br></code></pre></td></tr></table></figure><p>结果说明：<br>如下图，说明了“主线程”和“线程t1”的流程。<br>(01) 注意，图中”主线程” 代表WaitTimeoutTest主线程(即，线程main)。”线程t1” 代表WaitTest中启动的线程t1。 而“锁” 代表“t1这个对象的同步锁”。<br>(02) 主线程main执行t1.start()启动“线程t1”。<br>(03) 主线程main执行t1.wait(3000)，此时，主线程进入“阻塞状态”。需要“用于t1对象锁的线程通过notify() 或者 notifyAll()将其唤醒” 或者 “超时3000ms之后”，主线程main才进入到“就绪状态”，然后才可以运行。<br>(04) “线程t1”运行之后，进入了死循环，一直不断的运行。<br>(05) 超时3000ms之后，主线程main会进入到“就绪状态”，然后接着进入“运行状态”。</p><p><img src="https://raw.githubusercontent.com/Demo233/images/main/gitnote/2020/12/03/1607008273551-1607008273552.png" alt="title"></p><h3 id="wait-和-notifyAll"><a href="#wait-和-notifyAll" class="headerlink" title="wait() 和 notifyAll()"></a>wait() 和 notifyAll()</h3><p>通过前面的示例，我们知道 notify() 可以唤醒在此对象监视器上等待的单个线程。</p><p>下面，我们通过示例演示notifyAll()的用法；它的作用是唤醒在此对象监视器上等待的所有线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NotifyAllTest</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">ThreadA</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadA</span>(<span class="hljs-string">&quot;t1&quot;</span>);<br>        <span class="hljs-type">ThreadA</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadA</span>(<span class="hljs-string">&quot;t2&quot;</span>);<br>        <span class="hljs-type">ThreadA</span> <span class="hljs-variable">t3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadA</span>(<span class="hljs-string">&quot;t3&quot;</span>);<br>        t1.start();<br>        t2.start();<br>        t3.start();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot; sleep(3000)&quot;</span>);<br>            Thread.sleep(<span class="hljs-number">3000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">synchronized</span>(obj) &#123;<br>            <span class="hljs-comment">// 主线程等待唤醒。</span><br>            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot; notifyAll()&quot;</span>);<br>            obj.notifyAll();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadA</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadA</span><span class="hljs-params">(String name)</span>&#123;<br>            <span class="hljs-built_in">super</span>(name);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">synchronized</span> (obj) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">// 打印输出结果</span><br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; wait&quot;</span>);<br><br>                    <span class="hljs-comment">// 唤醒当前的wait线程</span><br>                    obj.wait();<br><br>                    <span class="hljs-comment">// 打印输出结果</span><br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; continue&quot;</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-built_in">t1</span> <span class="hljs-keyword">wait</span><br><span class="hljs-keyword"></span>main sleep(<span class="hljs-number">3000</span>)<br><span class="hljs-built_in">t3</span> <span class="hljs-keyword">wait</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">t2</span> <span class="hljs-keyword">wait</span><br><span class="hljs-keyword"></span>main notifyAll()<br><span class="hljs-built_in">t2</span> continue<br><span class="hljs-built_in">t3</span> continue<br><span class="hljs-built_in">t1</span> continue<br><br></code></pre></td></tr></table></figure><p>结果说明：<br>参考下面的流程图。<br>(01) 主线程中新建并且启动了3个线程”t1”, “t2”和”t3”。<br>(02) 主线程通过sleep(3000)休眠3秒。在主线程休眠3秒的过程中，我们假设”t1”, “t2”和”t3”这3个线程都运行了。以”t1”为例，当它运行的时候，它会执行obj.wait()等待其它线程通过notify()或额nofityAll()来唤醒它；相同的道理，”t2”和”t3”也会等待其它线程通过nofity()或nofityAll()来唤醒它们。<br>(03) 主线程休眠3秒之后，接着运行。执行 obj.notifyAll() 唤醒obj上的等待线程，即唤醒”t1”, “t2”和”t3”这3个线程。 紧接着，主线程的synchronized(obj)运行完毕之后，主线程释放“obj锁”。这样，”t1”, “t2”和”t3”就可以获取“obj锁”而继续运行了！</p><p><img src="https://raw.githubusercontent.com/Demo233/images/main/gitnote/2020/12/03/1607009140145-1607009140149.png" alt="title"></p><h3 id="为什么notify-wait-等函数定义在Object中，而不是Thread中"><a href="#为什么notify-wait-等函数定义在Object中，而不是Thread中" class="headerlink" title="为什么notify(), wait()等函数定义在Object中，而不是Thread中"></a>为什么notify(), wait()等函数定义在Object中，而不是Thread中</h3><p>Object中的wait(), notify()等函数，和synchronized一样，会对“对象的同步锁”进行操作。</p><p>wait()会使“当前线程”等待，因为线程进入等待状态，所以线程应该释放它锁持有的“同步锁”，否则其它线程获取不到该“同步锁”而无法运行！<br>OK，线程调用wait()之后，会释放它锁持有的“同步锁”；而且，根据前面的介绍，我们知道：等待线程可以被notify()或notifyAll()唤醒。现在，请思考一个问题：notify()是依据什么唤醒等待线程的？或者说，wait()等待线程和notify()之间是通过什么关联起来的？答案是：依据“对象的同步锁”。</p><p>负责唤醒等待线程的那个线程(我们称为“唤醒线程”)，它只有在获取“该对象的同步锁”(这里的同步锁必须和等待线程的同步锁是同一个)，并且调用notify()或notifyAll()方法之后，才能唤醒等待线程。虽然，等待线程被唤醒；但是，它不能立刻执行，因为唤醒线程还持有“该对象的同步锁”。必须等到唤醒线程释放了“对象的同步锁”之后，等待线程才能获取到“对象的同步锁”进而继续运行。</p><p>总之，notify(), wait()依赖于“同步锁”，而“同步锁”是对象锁持有，并且每个对象有且仅有一个！这就是为什么notify(), wait()等函数定义在Object类，而不是Thread类中的原因。</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LRU</title>
    <link href="/2020/12/02/2020-12-02%2022:53:37_/"/>
    <url>/2020/12/02/2020-12-02%2022:53:37_/</url>
    
    <content type="html"><![CDATA[<h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><p>还记得第一次听到些词是在计算机组成原理课上，讲高速缓存存储器-cache章节涉及到的，当时一脸懵逼不知道说的是啥。</p><ul><li>LRU - 最近最少使用策略(Lastest Recently Used)</li><li>LFU - 最少使用策略(Lastest Frequently Used)</li><li>FIFO - 先进先出(First In First Out)</li></ul><p>大家都是比较实在的人，相信大家肯定也不喜欢硬背这些东西，其实他们离我们生活很近，只是我们忽略了没有在意它们。</p><p>你可以试想一下如果现在有一大堆书，你会以什么方式扔这些书，对应⼀下，你的选择标准是不是和上⾯的三种策略神似呢？</p><h3 id="链表实现LRU"><a href="#链表实现LRU" class="headerlink" title="链表实现LRU"></a>链表实现LRU</h3><p>下面用链表实现以下LRU策略。</p><p>要求是：链表做存储，当链表满了，我们就按照LRU最近最少使用策略的丢数据。</p><h4 id="1-链表数据结构"><a href="#1-链表数据结构" class="headerlink" title="1.链表数据结构"></a>1.链表数据结构</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LRULinkedList</span>&lt;T&gt; &#123;<br><br>    <span class="hljs-comment">// 记录当前容量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 默认容量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><br>    <span class="hljs-comment">// 设置守卫简化代码</span><br>    <span class="hljs-keyword">private</span> SNode head;<br><br>    <span class="hljs-comment">// 链表节点</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">SNode</span>&lt;T&gt; &#123;<br>        <span class="hljs-comment">// 数据</span><br>        T data;<br>        <span class="hljs-comment">// 指向下一个节点的指针</span><br>        SNode next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>守卫</strong></p><p>守卫的意思是守护边界，用于管理边界的一些操作，因为边界操作往往会出现很多种情况十分复杂，利用守卫就可以屏蔽掉多种情况，这是编码的一种技巧。</p><p>下面用两组场景，说一下写它的原因。</p><p><strong>第一组</strong></p><p>比如往链表结点p后⾯插⼊⼀个新的结点，正常插入只需要这样写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">newNode-&gt;next = p-&gt;next; <br>p-&gt;next = newNode;<br></code></pre></td></tr></table></figure><p>但是，当我们要向⼀个空链表中插⼊第⼀个结点，上面两行代码就不工作了，代码要在原有的基础上写一层判断，像下面这样子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(head == <span class="hljs-literal">null</span>)&#123;<br>    head = newNode;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>第二组</strong></p><p>再比如删除链表中的节点，如果要删除p节点的后继节点，只需要这样写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">p-&gt;next = p-&gt;next-&gt;next;<br></code></pre></td></tr></table></figure><p>但是如果要删除最后一个节点，就要多写下面的内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (head-&gt;next == <span class="hljs-literal">null</span>) &#123; <br>    head = <span class="hljs-literal">null</span>; <br>&#125;<br></code></pre></td></tr></table></figure><p>这么写简直太糟糕了，条件少还能吼得住，条件多少一个就是bug，怪不得老加班。那问题来了，有没有办法省掉第一组和第二组判断的那部分代码呢？</p><p>这时候就要用守卫来解决了，带守卫的链表叫带头链表，没有守卫节点的叫不带头链表，守卫在链表中并不存任何数据，像下图这样。</p><p><img src="https://raw.githubusercontent.com/Demo233/images/main/gitnote/2020/12/02/1606923214948-1606923214975.png" alt="title"></p><p>这样的技巧在数据结构与算法代码编写中十分常用，⽐如插⼊排序、归并排序、动态规划等，如果感觉有点不太理解，带守卫和不带守卫都可以尝试着写写，debug一下看看。</p><h4 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2.代码实现"></a>2.代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 添加</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(T data)</span> &#123;<br><br>    <span class="hljs-type">SNode</span> <span class="hljs-variable">preNode</span> <span class="hljs-operator">=</span> findPreNode(data);<br><br>    <span class="hljs-keyword">if</span>(preNode != <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-comment">// 删除前一个节点的下一个节点，也就是当前节点有点绕。。</span><br>        delete(preNode);<br>        <span class="hljs-comment">// 插入到头</span><br>        insertBegin(data);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">if</span>(CAPACITY &gt; DEFAULT_CAPACITY)&#123;<br>            <span class="hljs-comment">// 删除最后节点</span><br>            deleteEnd();<br>        &#125;<br>        insertBegin(data);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">// 删除队尾</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteEnd</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">SNode</span> <span class="hljs-variable">ptr</span> <span class="hljs-operator">=</span> head;<br><br>    <span class="hljs-comment">// 判断队列是否为空</span><br>    <span class="hljs-keyword">if</span>(ptr.next == <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 找到倒数第二个节点</span><br>    <span class="hljs-keyword">while</span>(ptr.next.next != <span class="hljs-literal">null</span>)&#123;<br>        ptr = ptr.next;<br>    &#125;<br><br>    <span class="hljs-comment">// 删除最后节点</span><br>    <span class="hljs-type">SNode</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> ptr.next;<br>    ptr.next = <span class="hljs-literal">null</span>;<br>    tmp = <span class="hljs-literal">null</span>;<br>    CAPACITY--;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertBegin</span><span class="hljs-params">(T data)</span> &#123;<br>    <span class="hljs-comment">// 插入对头</span><br>    <span class="hljs-type">SNode</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> head.next;<br>    head.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SNode</span>(data,next);<br>    CAPACITY++;<br>&#125;<br><br><span class="hljs-comment">// 删除当前节点</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(SNode preNode)</span> &#123;<br>    <span class="hljs-type">SNode</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> preNode.next;<br>    preNode.next = tmp.next;<br>    tmp = <span class="hljs-literal">null</span>;<br>    CAPACITY--;<br><br>&#125;<br><br><span class="hljs-comment">// 寻找data对应的前一个节点</span><br><span class="hljs-keyword">public</span> SNode <span class="hljs-title function_">findPreNode</span><span class="hljs-params">(T data)</span> &#123;<br>    <span class="hljs-type">SNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-keyword">while</span>(node.next != <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">if</span>(data.equals(node.next.data))&#123;<br>            <span class="hljs-keyword">return</span> node;<br>        &#125;<br>        node = node.next;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>方便折腾下面是<a href="https://github.com/Demo233/algorithm/blob/master/src/main/java/com/paic/linkedlist/LRULinkedList.java">源码</a></p>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Topological Sort</title>
    <link href="/2020/12/01/2020%E5%B9%B412%E6%9C%8801%E6%97%A518:40:33_TopologicalSort/"/>
    <url>/2020/12/01/2020%E5%B9%B412%E6%9C%8801%E6%97%A518:40:33_TopologicalSort/</url>
    
    <content type="html"><![CDATA[<p>这里讨论一下拓扑排序，以及怎么检查有向图有没有带环。</p><h3 id="DAG介绍"><a href="#DAG介绍" class="headerlink" title="DAG介绍"></a>DAG介绍</h3><p>DAG叫有向无环图，他描述了整个连通图中的某个子图不能带有环的，只要有环，就不能称为有向无环图。</p><p><img src="https://raw.githubusercontent.com/Demo233/images/main/gitnote/2020/12/01/1606822347296-1606822347327.png" alt="title"></p><p>下图是错误的，带环的图。</p><p><img src="https://raw.githubusercontent.com/Demo233/images/main/gitnote/2020/12/01/1606822388564-1606822388565.png" alt="title"></p><h3 id="拓扑排序介绍"><a href="#拓扑排序介绍" class="headerlink" title="拓扑排序介绍"></a>拓扑排序介绍</h3><p>拓扑排序该算法在1972年设计编译器时被发明出来，当时的问题是，怎么解决代码编译的依赖问题。因为代码都是有顺序的，例如：C代码文件依赖B代码文件，B依赖A，B依赖D，那在编译时就不能先编译B，得将A和D先编译完了，才能编译B。所以编译的顺序要么是[A,D,B,C]，要么是[D,A,B,C]。拓扑排序可以将图转为顺序表，挨个打印这个表，就是正确的顺序了。</p><p>关于拓扑排序的实现有很多办法BFS、DFS、Kahn都可以实现，下面用Kahn实现以一下。</p><h3 id="Kahn算法实现"><a href="#Kahn算法实现" class="headerlink" title="Kahn算法实现"></a>Kahn算法实现</h3><p>关于代码的实现不复杂下面简单理一下实现思路:</p><p>定义数据结构的时候，如果s需要先于t执⾏，那就添加⼀条s指向t的边。所以，如果某个顶点⼊度为0， 也就表示，没有任何顶点必须先于这个顶点执⾏，那么这个顶点就可以执⾏了。</p><p>我们先从图中，找出⼀个⼊度为0的顶点，将其输出到拓扑排序的结果序列中（对应代码中就是把它打印出来），并且把这个顶点从图中删除（也就是把这个顶点可达的顶点的⼊度都减1）。我们循环执⾏上⾯的过程，直到所有的顶点都被输出。最后输出的序列，就是满⾜局部依赖关系的拓扑排序。</p><p><strong>下面是代码简单思路</strong></p><p>下面Java实现拓扑排序（有向图是用邻接表的方式存储）：</p><ul><li>初始化图顶点的入度</li><li>将入度为0的顶点放到辅助队列T</li><li>当T不为空，就取出队列的顶点，并从T中删除</li><li>把取出的顶点放入队列Q中，并且把这个顶点从图中删除（也就是把这个顶点可达的顶点的⼊度都减1），如果入度为0，将其放到T，等下次循环，否则什么都不做。</li></ul><blockquote><p>关于有向无环图的邻接表实现可以看一下这个<a href="https://github.com/Demo233/algorithm/blob/master/src/main/java/com/paic/graph/ListDG.java">源码</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//辅助队列T</span><br><span class="hljs-keyword">private</span> Queue&lt;Integer&gt; queue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(ListDG listDG)</span>&#123;<br>    ListDG.VNode[] vNodes = listDG.getVNodes();<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;Integer&gt;();<br>    <span class="hljs-type">char</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[vNodes.length];<br>    <span class="hljs-type">int</span>[] ins = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[vNodes.length];<br><br>    <span class="hljs-comment">// 初始化所有顶点的入度</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; vNodes.length; i++) &#123;<br>        ListDG.<span class="hljs-type">ENode</span> <span class="hljs-variable">edges</span> <span class="hljs-operator">=</span> vNodes[i].firstEdge;<br>        <span class="hljs-keyword">while</span>(edges != <span class="hljs-literal">null</span>)&#123;<br>            ins[edges.index]++;<br>            edges = edges.next;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//将入度为0的顶点放入到队列中</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; ins.length; i++) &#123;<br>        <span class="hljs-keyword">if</span>(ins[i] == <span class="hljs-number">0</span>)<br>            queue.add(i);<br>    &#125;<br><br>    <span class="hljs-keyword">while</span>(!queue.isEmpty())&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> queue.remove();<br>        res[index++] = vNodes[v].data;<br><br>        <span class="hljs-comment">// 获取到所有的边</span><br>        ListDG.<span class="hljs-type">ENode</span> <span class="hljs-variable">edges</span> <span class="hljs-operator">=</span> vNodes[v].firstEdge;<br>        <span class="hljs-keyword">while</span>(edges != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">// 这里入度-1，就当做删除边操作了</span><br>            ins[edges.index]--;<br><br>            <span class="hljs-keyword">if</span>(ins[edges.index] == <span class="hljs-number">0</span>)<br>                queue.add(edges.index);<br><br>            edges = edges.next;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(index != vNodes.length)&#123;<br>        System.out.println(<span class="hljs-string">&quot;图有环&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 遍历T队列</span><br>    System.out.print(<span class="hljs-string">&quot;图的拓扑排序结果为:&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; res.length; i++) &#123;<br>        System.out.print(res[i] + <span class="hljs-string">&quot;\t&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="算法时间复杂度"><a href="#算法时间复杂度" class="headerlink" title="算法时间复杂度"></a>算法时间复杂度</h3><p>从Kahn代码中可以看出来，每个顶点被访问了⼀次，每个边也都被访问了⼀次，所以，Kahn算法的时间复杂度就是O(V+E)（V表示顶点个数，E表示边的个数）。</p><h3 id="图有没有带环"><a href="#图有没有带环" class="headerlink" title="图有没有带环"></a>图有没有带环</h3><p>其实检查环的问题。只适用于，已知一个图，检查图中环的场景，看顺序表中的length是不是为顶点的个数就能监测是不是有环，因为它的效率真的是太低了，要处理完整个图才能看到结果。比如场景：已知数据库中的所有顶点的依赖关系了，检查顶点间到底有没有环。这个问题，就需要⽤到拓扑排序算法了。我们把关系从数据库中加载到内存，然后构建成这种有向图数据结构，再利⽤拓扑排序，拿到排序完的顺序表，检查环。</p><p>另外一种场景就是，插入一个关系以后，监测是否出现环，这时候再用拓扑排序显然性能有点low，下面介绍一个稍微好点的。举个例子比如下图:</p><p><img src="https://raw.githubusercontent.com/Demo233/images/main/gitnote/2020/12/01/1606823823344-1606823823348.png" alt="title"></p><p>这个时候插入C指向A的边以后，怎么监测带没带环？使用BFS或者DFS遍历顶点，用哈希表记录已访问过的顶点值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">HashSet&lt;Integer&gt; hashTable = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;(); <span class="hljs-comment">// 保存已经访问过的vertex</span><br></code></pre></td></tr></table></figure><p>然后如果放的时候发现哈希表里面已经存在，那就意味着出现环了。</p><p>方便折腾的时候参考，<a href="https://github.com/Demo233/algorithm/blob/master/src/main/java/com/paic/graph/TopologicalSort.java">源码</a></p>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Observer</title>
    <link href="/2020/11/29/2020-11-29_19-11-56_Observer/"/>
    <url>/2020/11/29/2020-11-29_19-11-56_Observer/</url>
    
    <content type="html"><![CDATA[<h3 id="1-观察者模式简介"><a href="#1-观察者模式简介" class="headerlink" title="1. 观察者模式简介"></a>1. 观察者模式简介</h3><p>观察者模式描述了一对多的关系，让多个观察者监测到主题，当主题发生改变的时候，能够通知到观察者，让其能更新自己。这么说挺抽象的，我举一些实际应用的例子，如果你有一些开发经验的话，这些应用你肯定也用过。比如redis的发布-订阅功能、Java Swing编程里的源-监听器。</p><p>观察者模式中有两个概念比较重要，主题(Subject)又叫被观察者，观察者(Observer)。下图截选自百度百科<br><img src="https://raw.githubusercontent.com/Demo233/images/main/gitnote/2020/11/29/e7cd7b899e510fb3d7db4436d133c895d0430c54-1606650189080.png" alt="title"></p><ul><li>Observer - 观察者，其中定义好update方法</li><li>Subjedt - 抽象的主题，他是个抽象类，其中维护了Observers<ul><li>新增Observer</li><li>删除Observer</li><li>通知Observers的update方法</li></ul></li><li>ConcreteSubject - 具体的主题</li><li>ConcreateObserver - 具体的观察者</li></ul><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> observer;<br><span class="hljs-comment">// 观察者</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Observer</span> &#123;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> observer;<br><br><span class="hljs-keyword">import</span> java.util.Enumeration;<br><span class="hljs-keyword">import</span> java.util.Vector;<br><span class="hljs-comment">// 主题</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Subject</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Vector</span> <span class="hljs-variable">observerVector</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vector</span>();<br><br>    <span class="hljs-comment">// 注册观察者</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerOberver</span><span class="hljs-params">(Observer observer)</span> &#123;<br>        observerVector.add(observer);<br>    &#125;<br><br>    <span class="hljs-comment">// 销毁观察者</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">detach</span><span class="hljs-params">(Observer observer)</span> &#123;<br>        observerVector.removeElement(observer);<br>    &#125;<br><br>    <span class="hljs-comment">// 通知所有注册的观察者</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notifyObservers</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-type">Enumeration</span> <span class="hljs-variable">elements</span> <span class="hljs-operator">=</span> observers();<br>        <span class="hljs-keyword">while</span> (elements.hasMoreElements())&#123;<br>            ((Observer) elements.nextElement()).update();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Enumeration <span class="hljs-title function_">observers</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> ((Vector) observerVector.clone()).elements();<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> observer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteObserver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Observer</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;I am notified.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> observer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteSubject</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Subject</span>&#123;<br>    <span class="hljs-keyword">private</span> String state;<br><br>    <span class="hljs-comment">// 改变主题的方法。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(String newState)</span>&#123;<br>        state = newState;<br>        <span class="hljs-built_in">this</span>.notifyObservers();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> observer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">ConcreteSubject</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteSubject</span>();<br>        <span class="hljs-type">Observer</span> <span class="hljs-variable">observer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteObserver</span>();<br>        subject.registerOberver(observer);<br><br>        subject.change(<span class="hljs-string">&quot;123&quot;</span>);<br>        subject.change(<span class="hljs-string">&quot;456&quot;</span>);<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-Java中的观察者模式"><a href="#2-Java中的观察者模式" class="headerlink" title="2. Java中的观察者模式"></a>2. Java中的观察者模式</h3><p>Java提供了实现观察者模式的方法，其中两个核心类，Observable和Observer</p><ul><li>Observer - 观察者,对应我们写的接口类Observer</li><li>Observable - 主题，对应我们写的抽象类Subject</li></ul><p>下面以问题：公鸡见到太阳升起，就打鸣为例，进行建模</p><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> observer.java.example1;<br><br><span class="hljs-keyword">import</span> java.util.Observable;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sun</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Observable</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rise</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;太阳升起&quot;</span>);<br>        <span class="hljs-built_in">this</span>.setChanged();<br>        <span class="hljs-comment">// 通知所有的观察者</span><br>        <span class="hljs-built_in">this</span>.notifyObservers();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> observer.java.example1;<br><br><span class="hljs-keyword">import</span> java.util.Observable;<br><span class="hljs-keyword">import</span> java.util.Observer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cock</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Observer</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Observable o, Object arg)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;公鸡打鸣&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> observer.java.example1;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Sun</span> <span class="hljs-variable">sun</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sun</span>();<br>        <span class="hljs-type">Cock</span> <span class="hljs-variable">cock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cock</span>();<br>        sun.addObserver(cock);<br><br><br>        sun.rise();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-实际应用"><a href="#3-实际应用" class="headerlink" title="3. 实际应用"></a>3. 实际应用</h3><p>最近写多线程代码是遇到了这样的问题，线程在用JDBC链接HiveServer2时因server不稳定，常常出现Timeout问题，联系运营发现，服务会在某时间段内重启，可能会有服务波动。</p><p>针对此问题，简单的思路就是在指定时间段内，发现timeout就重启线程。这里有两个类，观察者Restartor，线程JdbcQuerier。</p><ul><li>Restartor - 观察者，主要负责观察线程运行状态，并完成重启线程操作</li><li>JdbcQuerier - 被观察者，该类继承Runnable，在发生异常时，改变状态。</li></ul><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> observer.java.example2;<br><br><span class="hljs-keyword">import</span> java.util.Observable;<br><span class="hljs-keyword">import</span> java.util.Observer;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zyh</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 观察者，用于重启线程</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Restartor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Observer</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Observable o, Object arg)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;重启线程&quot;</span>);<br>        <span class="hljs-keyword">if</span>(condition1()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;检测到当前时间为9-10点,重启线程&quot;</span>);<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(((JdbcQuerier) o)).start();<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            o = <span class="hljs-literal">null</span>;<br>            System.out.println(<span class="hljs-string">&quot;检测到当前时间不是9-10点,不重启线程&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 条件1: 这里模拟重启条件，假如能被2整除就是是9-10点，9-10点也就是服务重启的时间，同样的你可以添加多个条件。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">condition1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt();<br>        <span class="hljs-keyword">if</span>(i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> observer.java.example2;<br><br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.Observable;<br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeoutException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zyh</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: jdbc查询者,被观察对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcQuerier</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Observable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;:&quot;</span> + <span class="hljs-string">&quot;线程运行&quot;</span>);<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-comment">// 查询数据库</span><br>            queryData();<br>        &#125;<span class="hljs-keyword">catch</span> (TimeoutException e1)&#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;:&quot;</span> + <span class="hljs-string">&quot;检测到Timeout异常&quot;</span>);<br>            <span class="hljs-built_in">this</span>.setChanged();<br>            <span class="hljs-built_in">this</span>.notifyObservers();<br>        &#125;<span class="hljs-keyword">catch</span> (SQLException e2)&#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;:&quot;</span> + <span class="hljs-string">&quot;检测到SQLException异常&quot;</span>);<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;:&quot;</span> + <span class="hljs-string">&quot;线程终止&quot;</span>);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryData</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException, TimeoutException &#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;:&quot;</span> + <span class="hljs-string">&quot;获取连接&quot;</span>);<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;:&quot;</span> + <span class="hljs-string">&quot;select * from tableName&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt();<br>            <span class="hljs-keyword">if</span>(i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TimeoutException</span>();    <br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SQLException</span>();<br>        &#125;<span class="hljs-keyword">catch</span> (SQLException e1)&#123;<br>            <span class="hljs-keyword">throw</span> e1;<br>        &#125;<span class="hljs-keyword">catch</span> (TimeoutException e2)&#123;<br>            <span class="hljs-keyword">throw</span> e2;<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;:&quot;</span> + <span class="hljs-string">&quot;关闭连接&quot;</span>);<br>        &#125;<br>        <br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> observer.java.example2;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zyh</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-comment">// 被观察者</span><br>        <span class="hljs-type">JdbcQuerier</span> <span class="hljs-variable">jdbcQuerier</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcQuerier</span>();<br>        <span class="hljs-comment">// 观察者</span><br>        <span class="hljs-type">Restartor</span> <span class="hljs-variable">restartor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Restartor</span>();<br>        <span class="hljs-comment">//注册观察者</span><br>        jdbcQuerier.addObserver(restartor);<br><br>        <span class="hljs-comment">// 运行线程</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(jdbcQuerier);<br><br>        t1.start();<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            Thread.sleep(<span class="hljs-number">1000L</span>);<br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>方便学习提供<a href="https://github.com/Demo233/design-pattern/tree/master/src/main/java/observer/java">源码</a></p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>BFS</title>
    <link href="/2020/11/28/2020-11-28_22:12:24_%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86%E7%AE%97%E6%B3%95BFS/"/>
    <url>/2020/11/28/2020-11-28_22:12:24_%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86%E7%AE%97%E6%B3%95BFS/</url>
    
    <content type="html"><![CDATA[<p>前文了解了如何用深度优先遍历算法去遍历图，本文换一种方式遍历图，广度优先遍历算法（Breath-First Search），下面用Java实现以下它。</p><h3 id="一-BFS介绍"><a href="#一-BFS介绍" class="headerlink" title="一. BFS介绍"></a>一. BFS介绍</h3><p>BFS它遍历的策略是：对于当前访问的顶点V，依次访问其所有的兄弟节点，直到遍历完为止，再以兄弟节点重复此操作，直到整个图遍历完为止。下面画个图来看看。</p><p><img src="https://raw.githubusercontent.com/Demo233/images/main/gitnote/2020/11/28/1606573744520-1606573771391.jpg" alt="title"></p><p>BFS是这样的一个遍历思路，先找到顶点1并输出，找到1的第一个邻接点8并输出，第二个邻接点5输出，第三个顶点3输出，顶点1没有邻接点了；开始以8为顶点输出，8的第一个邻接点4输出，8的第二个邻接点1<strong>发现已经访问过了不作处理</strong>，顶点8没有邻接点了；开始以5为顶点输出，反复上面操作…那么打印的节点顺序就是1,8,5,3,4,2,6,11,9,7</p><h3 id="二-代码说明"><a href="#二-代码说明" class="headerlink" title="二.代码说明"></a>二.代码说明</h3><p>我们以邻接矩阵存储实现的图为基础，来实现BFS算法，邻接矩阵<a href="http://hoey.tk/2020/11/22/2020%E5%B9%B411%E6%9C%8822%E6%97%A514:11:18_%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5%E6%9C%89%E5%90%91%E5%9B%BE/">有向图实现</a>和<a href="http://hoey.tk/2020/11/21/2020%E5%B9%B411%E6%9C%8821%E6%97%A522:45:32_%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5%E6%97%A0%E5%90%91%E5%9B%BE/">无向图实现</a></p><p>首先以分治的思想将大问题划分为小问题，先解决一个顶点的深度搜索问题，在将此拓展到整个图上，也就解决了图的深度搜索问题。</p><h4 id="1-顶点i的深度搜索问题"><a href="#1-顶点i的深度搜索问题" class="headerlink" title="1. 顶点i的深度搜索问题"></a>1. 顶点i的深度搜索问题</h4><p><strong>解决思路</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 将节点i输出记录已访问，并将节点放到队列T中<br><span class="hljs-bullet">2.</span> T不为空开始循环<br><span class="hljs-bullet">3.</span> 移除队头节点u<br><span class="hljs-bullet">4.</span> 寻找u的邻接点w<br><span class="hljs-bullet">5.</span> 如果w存在就循环，否则重复2<br><span class="hljs-bullet">6.</span> 如果w没有访问过，就将其放到队列T，输出标记已访问，否则什么都不做<br><span class="hljs-bullet">7.</span> 更新w，找u的下一个邻接点，重复5<br></code></pre></td></tr></table></figure><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 广度优先遍历</span><br>LinkedList&lt;Integer&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;Integer&gt;();<span class="hljs-comment">//辅助队列</span><br><span class="hljs-type">int</span> w; <span class="hljs-comment">// 第n个邻接点</span><br><span class="hljs-type">int</span> u; <span class="hljs-comment">// 头结点</span><br><span class="hljs-type">boolean</span>[] visited = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[n];<span class="hljs-comment">// 已访问节点</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bfs</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br><br>    <span class="hljs-comment">// 输出i记录已访问，加入队列T</span><br>    System.out.print(vertexs.get(i) + <span class="hljs-string">&quot;-&gt;&quot;</span>);<br>    visited[i] = <span class="hljs-literal">true</span>;<br>    queue.addLast(i);<br><br>    <span class="hljs-comment">// T不为空就开始循环</span><br>    <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>        u = queue.removeFirst();<br>        <span class="hljs-comment">// 找到邻接点</span><br>        w = firstNeighbor(i);<br>        <span class="hljs-keyword">while</span> (w != -<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">if</span> (!visited[w]) &#123;<br>                <span class="hljs-comment">// 找到的邻接点没访问过，就输出记录已访问，加入队列T</span><br>                queue.addLast(w);<br>                System.out.print(vertexs.get(w) + <span class="hljs-string">&quot;-&gt;&quot;</span>);<br>                visited[w] = <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-comment">// 寻找下一个邻接点</span><br>            w = nextNeighbor(u, w);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nextNeighbor</span><span class="hljs-params">(<span class="hljs-type">int</span> i1, <span class="hljs-type">int</span> i2)</span> &#123;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i2 + <span class="hljs-number">1</span>; j &lt; edge[i1].length; j++) &#123;<br>        <span class="hljs-keyword">if</span> (edge[i1][j] == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> j;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br><br><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">firstNeighbor</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; edge[index].length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (edge[index][i] &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-图的深度搜索问题"><a href="#2-图的深度搜索问题" class="headerlink" title="2. 图的深度搜索问题"></a>2. 图的深度搜索问题</h4><p>上面我们已经将单个顶点的深度遍历问题解决了，下面只需要把方法套一下就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bfs</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 对于所有的顶点vertexs，依次遍历</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; vertexs.size(); i++) &#123;<br>        <span class="hljs-keyword">if</span> (!visited[i]) &#123;<br>            bfs(i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-时间复杂度分析"><a href="#3-时间复杂度分析" class="headerlink" title="3. 时间复杂度分析"></a>3. 时间复杂度分析</h4><p>关于有n个顶点m条边的图来说时间复杂度是什么呢？可以考虑这样一个问题，对于最坏情况来讲，从最开始的顶点h，找到最终的顶点e，每一个顶点都要进出一次队列，每一个边都会被访问一次，因此时间复杂度O(n+m)。</p><p>对于一个连通图来讲，一般边m的都是大于n-1的，因此时间复杂度通常可以简化为O(m)</p><p>方便大家学习，查看<a href="https://github.com/Demo233/algorithm/blob/master/src/main/java/com/paic/graph/MatrixUDG.java">源代码</a></p>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SkipList</title>
    <link href="/2020/11/26/2020%E5%B9%B411%E6%9C%8826%E6%97%A523:52:26_%E8%B7%B3%E8%A1%A8/"/>
    <url>/2020/11/26/2020%E5%B9%B411%E6%9C%8826%E6%97%A523:52:26_%E8%B7%B3%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>本文我们用Java实现跳表的创建</p><h3 id="一-跳表介绍"><a href="#一-跳表介绍" class="headerlink" title="一. 跳表介绍"></a>一. 跳表介绍</h3><p>我们知道单链表的查询时间复杂度为O(n)，那么有没有优化的办法呢？这里介绍一种数据结构，叫跳表，跳表应用十分广泛，比如最熟悉不过的redis，Redis中的有序集合（Sorted Set）就是⽤跳表来实现的。另外Java JUC中也有它的影子，想要了解的可以看下<code>ConcurrentSkipListMap</code>和<code>ConcurrentSkipListSet</code> ，其中底层实现都是使用了跳表。</p><p>之前提到如何优化链表的查询速度，想一下把二分查找的思想应用到单链表查找上，会是什么样？下面介绍一种办法，就是在链表上层创建索引，下面用一个图来解释。</p><p><img src="https://raw.githubusercontent.com/Demo233/images/main/gitnote/2020/11/27/1606407069286-1606407081340.jpg" alt="title"></p><p>我们在原链表的基础上创建两级索引，比如查询16，如果没有索引，9次命中目标；而使用了2级索引，3次就命中了目标，不难发现这是一种使用空间换区时间的策略。</p><h3 id="二-代码说明"><a href="#二-代码说明" class="headerlink" title="二.代码说明"></a>二.代码说明</h3><h4 id="1-基本定义"><a href="#1-基本定义" class="headerlink" title="1. 基本定义"></a>1. 基本定义</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SkipList</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Node</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>();  <span class="hljs-comment">// 带头链表</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">levelCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">private</span> Node forwards[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>[MAX_LEVEL];<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">maxLevel</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>            builder.append(<span class="hljs-string">&quot;&#123; data: &quot;</span>);<br>            builder.append(data);<br>            builder.append(<span class="hljs-string">&quot;; levels: &quot;</span>);<br>            builder.append(maxLevel);<br>            builder.append(<span class="hljs-string">&quot; &#125;&quot;</span>);<br><br>            <span class="hljs-keyword">return</span> builder.toString();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>head 是头结点,head.forwards[0]指的是原链表,head.forwards[1]指的是第一级索引,head.forwards[2]指的是第二级索引以此类推</li><li>levelCount 当前构造跳表索引的最大层数值</li><li>Node 是链表</li></ul><h4 id="2-插入实现"><a href="#2-插入实现" class="headerlink" title="2. 插入实现"></a>2. 插入实现</h4><p><strong>动态更新</strong></p><p>在插入前需要考虑一个问题，索引的更新问题。如果我们不更新索引，只是单纯的插入节点，会造成索引间节点的值过多，查询速度退化问题。因此这边在插入时需要实时更新索引，一种简单的办法就是把原来的索引删了，重新创建索引。</p><p><img src="https://raw.githubusercontent.com/Demo233/images/main/gitnote/2020/11/27/1606409160409-1606409181108.jpg" alt="title"></p><p><strong>概率算法</strong></p><p>我们不难发现原链表中节点个数为n，第一级索引节点个数为n&#x2F;2，第二级索引节点个数为n&#x2F;4，第m层索引节点个个数为n&#x2F;2^m。不难发现，每层的节点个数都是有规律可循的，这里利用概率学推出概率函数randomLevel(),假定给一个值V，就能算出它的层L，通俗一些讲，对于插入的新值V，有50%几率建立一层索引，有25%的几率建立二层索引，有12.5%的概率建立三层索引…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">float</span> <span class="hljs-variable">SKIPLIST_P</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.5f</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_LEVEL</span> <span class="hljs-operator">=</span> <span class="hljs-number">16</span>;<br><br><span class="hljs-comment">// 理论来讲，一级索引中元素个数应该占原始数据的 50%，二级索引中元素个数占 25%，三级索引12.5% ，一直到最顶层。</span><br><span class="hljs-comment">// 因为这里每一层的晋升概率是 50%。对于每一个新插入的节点，都需要调用 randomLevel 生成一个合理的层数。</span><br><span class="hljs-comment">// 该 randomLevel 方法会随机生成 1~MAX_LEVEL 之间的数，且 ：</span><br><span class="hljs-comment">//        50%的概率返回 1</span><br><span class="hljs-comment">//        25%的概率返回 2</span><br><span class="hljs-comment">//      12.5%的概率返回 3 ...</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">randomLevel</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">level</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">while</span> (Math.random() &lt; SKIPLIST_P &amp;&amp; level &lt; MAX_LEVEL)<br>        level += <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> level;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>Redis 的Sorted set也同样使用了类似的算法，详情查看<a href="https://github.com/redis/redis/blob/unstable/src/t_zset.c">t_zset.c</a>，搜索<code>ZSKIPLIST_P</code>跳转到对应位置有兴趣的可以详细看一下。</p></blockquote><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>    # 获取层<br>    <span class="hljs-type">int</span> <span class="hljs-variable">level</span> <span class="hljs-operator">=</span> randomLevel();<br>    <br>    # 构造当前节点<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>();<br>    newNode.data = value;<br>    newNode.maxLevel = level;<br>    # 辅助数组，下表<span class="hljs-number">0</span>代表是原链表，下表<span class="hljs-number">1</span>代表是第一级索引，下表<span class="hljs-number">2</span>代表第二级索引<br>    Node update[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>[level];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; level; ++i) &#123;<br>        update[i] = head;<br>    &#125;<br><br>    <span class="hljs-comment">// 找当前节点插入的位置。解释：对于索引高度为n的跳表 寻找与插入值紧挨着的最小值，将其放在辅助数组里</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> level - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; --i) &#123;<br>        <span class="hljs-keyword">while</span> (p.forwards[i] != <span class="hljs-literal">null</span> &amp;&amp; p.forwards[i].data &lt; value) &#123;<br>            p = p.forwards[i];<br>        &#125;<br>        update[i] = p;<br>    &#125;<br><br>    <span class="hljs-comment">// 将当前节点插入到每层的链表中的指定位置。</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; level; ++i) &#123;<br>        newNode.forwards[i] = update[i].forwards[i];<br>        update[i].forwards[i] = newNode;<br>    &#125;<br><br>    <span class="hljs-comment">// 更新跳表索引的高度</span><br>    <span class="hljs-keyword">if</span> (levelCount &lt; level) levelCount = level;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>下面方便学习提供<a href="https://github.com/Demo233/algorithm/blob/master/src/main/java/com/paic/array/SkipList.java">源码</a></p>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ListDG</title>
    <link href="/2020/11/24/2020%E5%B9%B411%E6%9C%8824%E6%97%A522:58:10_%E9%82%BB%E6%8E%A5%E8%A1%A8%E6%9C%89%E5%90%91%E5%9B%BE/"/>
    <url>/2020/11/24/2020%E5%B9%B411%E6%9C%8824%E6%97%A522:58:10_%E9%82%BB%E6%8E%A5%E8%A1%A8%E6%9C%89%E5%90%91%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<p>本文我们用Java实现邻接表有向图的创建。</p><h3 id="一-邻接表有向图介绍"><a href="#一-邻接表有向图介绍" class="headerlink" title="一. 邻接表有向图介绍"></a>一. 邻接表有向图介绍</h3><p>邻接表底层使用了一个数组+链表来存储图，数组用于存储图的顶点，链表存储两个顶点之间的关系。如下图所示<br><img src="https://raw.githubusercontent.com/Demo233/images/main/gitnote/2020/11/25/1606234936018-1606234945778.jpg" alt="title"></p><h3 id="二-代码说明"><a href="#二-代码说明" class="headerlink" title="二.代码说明"></a>二.代码说明</h3><h4 id="1-基本定义"><a href="#1-基本定义" class="headerlink" title="1. 基本定义"></a>1. 基本定义</h4><p>这里定义还是和之前一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListDG</span> &#123;<br><br>    <span class="hljs-keyword">private</span> VNode[] vNodes;<br><br>    <span class="hljs-comment">// 边节点</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ENode</span>&#123;<br>        <span class="hljs-comment">// 边的索引</span><br>        <span class="hljs-type">int</span> index;<br>        <span class="hljs-comment">// 边的下一条边</span><br>        ENode next;<br>    &#125;<br><br>    <span class="hljs-comment">// 顶点</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VNode</span>&#123;<br>        <span class="hljs-comment">// 顶点存储的值</span><br>        <span class="hljs-type">char</span> data;<br>        <span class="hljs-comment">// 顶底相连的第一条边</span><br>        ENode firstEdge;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-算法实现"><a href="#2-算法实现" class="headerlink" title="2. 算法实现"></a>2. 算法实现</h4><p>这边只需要把创建边的方法稍作改动就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ListDG</span><span class="hljs-params">(<span class="hljs-type">char</span>[] vertexs, <span class="hljs-type">char</span>[][] edges)</span>&#123;<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">v1</span> <span class="hljs-operator">=</span> vertexs.length;<br>    vNodes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VNode</span>[v1];<br><br>    <span class="hljs-comment">// 创建顶点</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; vertexs.length; i++) &#123;<br>        <span class="hljs-type">VNode</span> <span class="hljs-variable">vNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VNode</span>();<br>        vNode.data = vertexs[i];<br>        vNode.firstEdge = <span class="hljs-literal">null</span>;<br>        vNodes[i] = vNode;<br>    &#125;<br><br>    <span class="hljs-comment">// 创建边</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; edges.length; i++) &#123;<br><br>        <span class="hljs-comment">// 获取两条边对应的下标</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> getPos(edges[i][<span class="hljs-number">0</span>]);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> getPos(edges[i][<span class="hljs-number">1</span>]);<br><br>        <span class="hljs-type">ENode</span> <span class="hljs-variable">node1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ENode</span>();<br>        node1.index = p2;<br>        <span class="hljs-keyword">if</span>(vNodes[p1].firstEdge == <span class="hljs-literal">null</span>)<br>            vNodes[p1].firstEdge = node1;<br>        <span class="hljs-keyword">else</span><br>            linkLast(vNodes[p1].firstEdge, node1);<br><br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>方便大家学习，提供了<a href="https://github.com/Demo233/algorithm/blob/master/src/main/java/com/paic/graph/DG.java">源代码</a></p>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MatrixDG</title>
    <link href="/2020/11/22/2020%E5%B9%B411%E6%9C%8822%E6%97%A514:11:18_%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5%E6%9C%89%E5%90%91%E5%9B%BE/"/>
    <url>/2020/11/22/2020%E5%B9%B411%E6%9C%8822%E6%97%A514:11:18_%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5%E6%9C%89%E5%90%91%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<p>前文我们介绍了邻接矩阵创建无向图，本文我们用Java实现邻接矩阵有向图的创建。</p><h3 id="一-邻接矩阵有向图介绍"><a href="#一-邻接矩阵有向图介绍" class="headerlink" title="一. 邻接矩阵有向图介绍"></a>一. 邻接矩阵有向图介绍</h3><p>有向图的应用方向也很广，比如微信中好友A可以添加B但是，B可以不添加A，再比如微博中的关注数，下图体现出了无向图和有向图的差异，同时还拓展了，第三种图，加权图。</p><p><img src="https://raw.githubusercontent.com/Demo233/images/main/gitnote/2020/11/24/1606233556168-1606233568123.jpg" alt="title"></p><h3 id="二-代码说明"><a href="#二-代码说明" class="headerlink" title="二.代码说明"></a>二.代码说明</h3><h4 id="1-基本定义"><a href="#1-基本定义" class="headerlink" title="1. 基本定义"></a>1. 基本定义</h4><p>这里定义还是和之前一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MatrixDG</span>&lt;T&gt; &#123;<br><br>    <span class="hljs-comment">// 顶点</span><br>    <span class="hljs-keyword">private</span> ArrayList&lt;T&gt; vertexs;<br>    <span class="hljs-comment">// 存储边</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[][] edge;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-算法实现"><a href="#2-算法实现" class="headerlink" title="2. 算法实现"></a>2. 算法实现</h4><p>这边只需要把邻接矩阵无向图的<code>insertEdge</code>稍作改动就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 有向图和无向图的区别，仅仅是在插入边时做改动</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertEdge</span><span class="hljs-params">(<span class="hljs-type">int</span> v1, <span class="hljs-type">int</span> v2, <span class="hljs-type">int</span> weight)</span> &#123;<br>    edge[v1][v2] = weight;<br>&#125;<br><br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertVertex</span><span class="hljs-params">(T i)</span> &#123;<br>    vertexs.add(i);<br>&#125;<br></code></pre></td></tr></table></figure><p>方便大家学习，提供了<a href="https://github.com/Demo233/algorithm/blob/master/src/main/java/com/paic/graph/MatrixDG.java">源代码</a></p>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DFS</title>
    <link href="/2020/11/21/2020%E5%B9%B411%E6%9C%8821%E6%97%A523:02:20_%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86%E7%AE%97%E6%B3%95/"/>
    <url>/2020/11/21/2020%E5%B9%B411%E6%9C%8821%E6%97%A523:02:20_%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p></p><p>前文我们知道了如何创建无向图，分为邻接表和邻接矩阵两种方式，本文通过Java实现经典图的遍历算法-深度优先遍历算法(Depth First Search)</p><h3 id="一-DFS介绍"><a href="#一-DFS介绍" class="headerlink" title="一. DFS介绍"></a>一. DFS介绍</h3><p>深度优先遍历算法是一种算法，是一种遍历图的方法，在里面可以体会一下递归和回溯的思想。</p><p>讲一个寻找路径的小例子，方便理解比如“⾛迷宫”。 假设你站在迷宫的某个岔路⼝，然后想找到出⼝。你随意选择⼀个岔路⼝来⾛，⾛着⾛着发现⾛不通的时候，你就回退到上⼀ 个岔路⼝，重新选择⼀条路继续⾛，直到最终找到出⼝。这种⾛法就是⼀种深度优先搜索策略。</p><p>这⾥⾯实线箭头表示遍历，虚线箭头表示回退，从下图可以看到基本的行走路径。</p><p><img src="https://raw.githubusercontent.com/Demo233/images/main/gitnote/2020/11/24/1606233135024-1606233153377.jpg" alt="title"></p><h3 id="二-代码说明"><a href="#二-代码说明" class="headerlink" title="二.代码说明"></a>二.代码说明</h3><h4 id="1-基本定义"><a href="#1-基本定义" class="headerlink" title="1. 基本定义"></a>1. 基本定义</h4><p>这里我们用邻接矩阵无向图的来做，在原有的基础上新增一个visited数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Graph</span>&lt;T&gt; &#123;<br>    <span class="hljs-comment">// 顶点</span><br>    <span class="hljs-keyword">private</span> ArrayList&lt;T&gt; vertexs;<br>    <span class="hljs-comment">// 边</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[][] edge;<br>    <span class="hljs-comment">// 已访问</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span>[] visited;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>visited 用一个数组来记录顶点是否已被访问</li></ul><h4 id="2-Kahn算法实现"><a href="#2-Kahn算法实现" class="headerlink" title="2. Kahn算法实现"></a>2. Kahn算法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br><span class="hljs-comment">// 输出访问的节点</span><br>       System.out.print(vertexs.get(i).toString() + <span class="hljs-string">&quot;=&gt;&quot;</span>);<br>       visited[i] = <span class="hljs-literal">true</span>;<br><br>       <span class="hljs-comment">//获取i的第一个邻接点</span><br>       <span class="hljs-type">int</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> firstNeighbor(i);<br>       <span class="hljs-keyword">while</span> (w != -<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-comment">// 判断是否访问过</span><br>           <span class="hljs-keyword">if</span> (!visited[w]) &#123;<br><span class="hljs-comment">// 没有访问递归</span><br>               dfs(w);<br>           &#125;<br>    <span class="hljs-comment">// 找下个邻接点</span><br>           w = nextNeighbor(i, w);<br>       &#125;<br><br>   &#125;<br><br>   <span class="hljs-comment">// 深度优先遍历算法</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// 这里对上面dfs(i)方法进行重载，dfs(i)是找一个点的所有邻接点，这里套一层意思就是找所有点的邻接点</span><br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; vertexs.size(); i++) &#123;<br>           <span class="hljs-keyword">if</span> (!visited[i]) &#123;<br>               dfs(i);<br>           &#125;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p>⼴度优先搜索的时间复杂度是O(V+E)，其中，V表示顶点的个数，E表示边的个数。当然，对于⼀个连通图来说，也就是说⼀个图中的所有顶点都是连通的，E肯定要⼤于等于V-1，所以，⼴度优先搜索的时间复杂度也可以简写为O(E)。</p><p>方便大家学习，提供了<a href="https://github.com/Demo233/algorithm/blob/master/src/main/java/com/paic/graph/MatrixUDG.java">源代码</a></p>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ListUDF</title>
    <link href="/2020/11/21/2020%E5%B9%B411%E6%9C%8821%E6%97%A523:01:34_%E9%82%BB%E6%8E%A5%E8%A1%A8%E6%97%A0%E5%90%91%E5%9B%BE/"/>
    <url>/2020/11/21/2020%E5%B9%B411%E6%9C%8821%E6%97%A523:01:34_%E9%82%BB%E6%8E%A5%E8%A1%A8%E6%97%A0%E5%90%91%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<p>前文我们通过邻接矩阵创建了无向图，本文通过Java实现邻接表创建无向图。</p><h3 id="一-邻接表无向图的介绍"><a href="#一-邻接表无向图的介绍" class="headerlink" title="一. 邻接表无向图的介绍"></a>一. 邻接表无向图的介绍</h3><p>邻接表无向图是一种数据结构，与之前邻接矩阵无向图不同的是，它使用链表来存储顶点的关系,也就是用链表存储边。如下面所示</p><p><img src="https://raw.githubusercontent.com/Demo233/images/main/gitnote/2020/11/25/1606234936018-1606234945778.jpg" alt="title"></p><blockquote><p>Tips: 之前用矩阵存储会造成空间上的额外开销，用链表就可以很好地改善，但代价是要花费更多的时间依次遍历链表每个节点。在实际工程中优化的话，可以考虑将链表换成<code>哈希表</code>、<code>跳表</code>或者是<code>红黑树</code></p></blockquote><h3 id="二-邻接矩阵无向图的代码说明"><a href="#二-邻接矩阵无向图的代码说明" class="headerlink" title="二. 邻接矩阵无向图的代码说明"></a>二. 邻接矩阵无向图的代码说明</h3><h4 id="1-基本定义"><a href="#1-基本定义" class="headerlink" title="1. 基本定义"></a>1. 基本定义</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListDG</span> &#123;<br><br>    <span class="hljs-comment">// 存储所有的顶点</span><br>    <span class="hljs-keyword">private</span> VNode[] vNodes;<br><br>    <span class="hljs-comment">// 边节点</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ENode</span>&#123;<br>        <span class="hljs-comment">// 边的索引</span><br>        <span class="hljs-type">int</span> index;<br>        <span class="hljs-comment">// 边的下一条边</span><br>        ENode next;<br>    &#125;<br><br>    <span class="hljs-comment">// 顶点</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VNode</span>&#123;<br>        <span class="hljs-comment">// 顶点存储的值</span><br>        <span class="hljs-type">char</span> data;<br>        <span class="hljs-comment">// 顶底相连的第一条边</span><br>        ENode firstEdge;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>vNodes 用于存储顶点值</li><li>ENode是边的数据结构，其实一个链表的表示形式</li><li>VNode实顶点的数据结构</li></ul><h4 id="2-创建图"><a href="#2-创建图" class="headerlink" title="2. 创建图"></a>2. 创建图</h4><p>创建图有两种方法，一种是已知数据创建图，一种是用户输入创建图。这里用的是前者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ListUDG</span><span class="hljs-params">(<span class="hljs-type">char</span>[] vertexs, <span class="hljs-type">char</span>[][] edges)</span>&#123;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">v1</span> <span class="hljs-operator">=</span> vertexs.length;<br>        vNodes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VNode</span>[v1];<br><br>        <span class="hljs-comment">// 创建顶点</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; vertexs.length; i++) &#123;<br>            <span class="hljs-type">VNode</span> <span class="hljs-variable">vNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VNode</span>();<br>            vNode.data = vertexs[i];<br>            vNode.firstEdge = <span class="hljs-literal">null</span>;<br>            vNodes[i] = vNode;<br>        &#125;<br><br>        <span class="hljs-comment">// 创建边</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; edges.length; i++) &#123;<br><br>            <span class="hljs-comment">// 获取两条边对应的下标</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> getPos(edges[i][<span class="hljs-number">0</span>]);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> getPos(edges[i][<span class="hljs-number">1</span>]);<br><br>            <span class="hljs-type">ENode</span> <span class="hljs-variable">node1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ENode</span>();<br>            node1.index = p2;<br>            <span class="hljs-keyword">if</span>(vNodes[p1].firstEdge == <span class="hljs-literal">null</span>)<br>                vNodes[p1].firstEdge = node1;<br>            <span class="hljs-keyword">else</span><br>                linkLast(vNodes[p1].firstEdge, node1);<br><br>            <span class="hljs-comment">// 创建无向图</span><br>            <span class="hljs-type">ENode</span> <span class="hljs-variable">node2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ENode</span>();<br>            node2.index = p1;<br>            <span class="hljs-keyword">if</span>(vNodes[p2].firstEdge == <span class="hljs-literal">null</span>)<br>                vNodes[p2].firstEdge = node2;<br>            <span class="hljs-keyword">else</span><br>                linkLast(vNodes[p2].firstEdge, node2);<br>        &#125;<br><br><br>    &#125;<br></code></pre></td></tr></table></figure><p>方便大家学习，提供了<a href="https://github.com/Demo233/algorithm/blob/master/src/main/java/com/paic/graph/ListUDF.java">源代码</a></p>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MatrixUDG</title>
    <link href="/2020/11/21/2020%E5%B9%B411%E6%9C%8821%E6%97%A522:45:32_%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5%E6%97%A0%E5%90%91%E5%9B%BE/"/>
    <url>/2020/11/21/2020%E5%B9%B411%E6%9C%8821%E6%97%A522:45:32_%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5%E6%97%A0%E5%90%91%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<p>本文通过Java实现邻接矩阵无向图。</p><h3 id="一-邻接矩阵无向图的介绍"><a href="#一-邻接矩阵无向图的介绍" class="headerlink" title="一. 邻接矩阵无向图的介绍"></a>一. 邻接矩阵无向图的介绍</h3><p>邻接矩阵无向图是一种数据结构，其利用数组存储顶点，二维数组存储顶点之间的关系来存储数据。如下面所示</p><p><img src="https://raw.githubusercontent.com/Demo233/images/main/gitnote/2020/11/25/1606233939308-1606233950964.jpg" alt="title"></p><blockquote><p>Tips: 不难发现它是用空间换时间的策略，这么存边会造成很大的空间浪费，对于顶点关系的检索速度会很快。优化的话可以考虑使用稀疏数组来替换二维数组。同样的策略也适用于<code>邻接矩阵有向图</code></p></blockquote><h3 id="二-邻接矩阵无向图的代码说明"><a href="#二-邻接矩阵无向图的代码说明" class="headerlink" title="二. 邻接矩阵无向图的代码说明"></a>二. 邻接矩阵无向图的代码说明</h3><h4 id="1-基本定义"><a href="#1-基本定义" class="headerlink" title="1. 基本定义"></a>1. 基本定义</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Graph</span>&lt;T&gt; &#123;<br>    <span class="hljs-comment">// 顶点</span><br>    <span class="hljs-keyword">private</span> ArrayList&lt;T&gt; vertexs;<br>    <span class="hljs-comment">// 边</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[][] edge;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>vertexs 用于存储顶点值</li><li>edge用于存储各个顶点的关系，我们把这种关系称之为<code>边</code></li></ul><h4 id="2-创建图"><a href="#2-创建图" class="headerlink" title="2. 创建图"></a>2. 创建图</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 初始化</span><br>Graph(<span class="hljs-type">int</span> n)&#123;<br>    vertexs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;T&gt;();<br>    edge = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n][n];<br>    visited = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[n];<br>&#125;<br><br><span class="hljs-comment">// 插入顶点</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertVertex</span><span class="hljs-params">(T vertex)</span>&#123;<br>    vertexs.add(vertex);<br>&#125;<br><br><span class="hljs-comment">// 插入边</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertEdge</span><span class="hljs-params">(<span class="hljs-type">int</span> v1, <span class="hljs-type">int</span> v2, <span class="hljs-type">int</span> weight)</span>&#123;<br>    edge[v1][v2] = weight;<br>    edge[v2][v1] = weight;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>方便大家学习，提供了<a href="https://github.com/Demo233/algorithm/blob/master/src/main/java/com/paic/graph/MatrixUDG.java">源代码</a></p>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>高效VIM编辑器</title>
    <link href="/2020/11/15/2020%E5%B9%B411%E6%9C%8815%E6%97%A513:38:15_%E9%AB%98%E6%95%88VIM%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <url>/2020/11/15/2020%E5%B9%B411%E6%9C%8815%E6%97%A513:38:15_%E9%AB%98%E6%95%88VIM%E7%BC%96%E8%BE%91%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>学习一些vim快捷键和自定义vim快捷键可以提高我们的开发效率</p><h2 id="Vim-中自定义快捷键"><a href="#Vim-中自定义快捷键" class="headerlink" title="Vim 中自定义快捷键"></a>Vim 中自定义快捷键</h2><p>map系列命令<br>这个命令的声明如下: :map {lhs} {rhs}。这个命令就是将{lhs}代表的按键映射成{rhs}所代表的按键。例如map L $就是将$键映射成L。此外需要注意的是map命令定义的快捷键是可以嵌套的，例如下面这样的命令:</p><p>map L $<br>map Y yL</p><p>就是将Y按键映射成了y$按键。</p><p>更多详情参考:<a href="https://www.cnblogs.com/boldness2012/p/12432792.html">https://www.cnblogs.com/boldness2012/p/12432792.html</a></p><h2 id="Vim默认设置"><a href="#Vim默认设置" class="headerlink" title="Vim默认设置"></a>Vim默认设置</h2><p>在<code>.vimrc</code>文件中添加下面内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim ~/.vimrc<br><br><span class="hljs-comment"># 启用高亮</span><br>syntax <span class="hljs-built_in">enable</span>                                                                                                           <br><span class="hljs-comment"># 设置行号</span><br><span class="hljs-built_in">set</span> number<br><span class="hljs-comment"># 设置卡尺</span><br><span class="hljs-built_in">set</span> ruler<br><span class="hljs-built_in">set</span> tabstop=4<br><span class="hljs-built_in">set</span> softtabstop=4<br><span class="hljs-built_in">set</span> shiftwidth=4<br><span class="hljs-comment"># 高亮当前行</span><br><span class="hljs-built_in">set</span> cursorline<br><span class="hljs-comment"># F4 格式化JSON内容</span><br>map &lt;F4&gt; &lt;Esc&gt;:%!python -m json.tool&lt;CR&gt;<br></code></pre></td></tr></table></figure><p>第8行是格式化json的快捷键设置，在vim模式下按F4即可格式化Json数据</p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker-Hadoop</title>
    <link href="/2020/11/15/2020%E5%B9%B411%E6%9C%8815%E6%97%A514:11:53_%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2hadoop/"/>
    <url>/2020/11/15/2020%E5%B9%B411%E6%9C%8815%E6%97%A514:11:53_%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2hadoop/</url>
    
    <content type="html"><![CDATA[<p>首先我们构建一个jdk1.8+centos基础镜像，由于网上已经有很多现成的轮子，这里就不自己造了</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs docker">docker pull ryaning/centos-ssh<br></code></pre></td></tr></table></figure><h2 id="一、构建基础镜像"><a href="#一、构建基础镜像" class="headerlink" title="一、构建基础镜像"></a>一、构建基础镜像</h2><p>如果镜像下载不下来，可以使用下面方法自己创建基础镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">编辑 Dockerfile</span><br>vi Dockerfile<br></code></pre></td></tr></table></figure><p>新增以下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">基础镜像</span><br>FROM ryaning/centos-ssh<br><span class="hljs-meta prompt_"># </span><span class="language-bash">作者</span><br>MAINTAINER  Ryan &lt;me@ryana.cn&gt;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">构建镜像</span><br>ADD jdk-8u162-linux-x64.tar.gz /usr/local/<br>RUN mv /usr/local/jdk1.8.0_162 /usr/local/jdk1.8<br>ENV JAVA_HOME /usr/local/jdk1.8<br>ENV PATH $JAVA_HOME/bin:$PATH<br><br>ADD hadoop-2.9.2.tar.gz /usr/local<br>RUN mv /usr/local/hadoop-2.9.2 /usr/local/hadoop<br>ENV HADOOP_HOME /usr/local/hadoop<br>ENV PATH $HADOOP_HOME/bin:$PATH<br><br>RUN yum install -y which sudo<br></code></pre></td></tr></table></figure><h2 id="二、-搭建hadoop集群"><a href="#二、-搭建hadoop集群" class="headerlink" title="二、 搭建hadoop集群"></a>二、 搭建hadoop集群</h2><h3 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h3><p>准备搭建一个具有三个节点的集群,1 master 2 slave</p><ul><li>master: hadoop0 ip: 192.168.10.10</li><li>salve1: hadoop1 ip: 192.168.10.11</li><li>salve2: hadoop2 ip: 192.168.10.12</li></ul><h3 id="配置IP"><a href="#配置IP" class="headerlink" title="配置IP"></a>配置IP</h3><p>docker 容器在启动时默认使用的是 bridge 模式，docker 容器启动后，会连接到一个名为 docker0 的虚拟网桥，故每次启动 docker 容器的 IP 都不是固定的，不方便管理，有时候需要进行固定 IP 映射，比如 docker 集群管理时。docker 在 1.9 版本版后，提供了创建自定义网络功能命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建自定义网络</span> <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">ip段为：192.168.10.1/24，名字为：hadoop</span><br>docker network create --subnet=192.168.10.1/24 hadoop<br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示自定义网络列表</span><br>docker network ls<br><br></code></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>运行3个 hadoop 容器，分别命名为 hadoop0，hadoop1，hadoop2，其中 hadoop0 作为 master， 并且映射了端口号，50070 和 8088，用来在浏览器中访问 hadoop WEB 界面的。</p><h4 id="命令说明："><a href="#命令说明：" class="headerlink" title="命令说明："></a>命令说明：</h4><ul><li>-e TZ&#x3D;”Asia&#x2F;Shanghai” 增加环境变量，指定时区</li><li>-v &#x2F;etc&#x2F;localtime:&#x2F;etc&#x2F;localtime:ro：挂载系统时间到容器内</li><li>–net hadoop –ip 192.168.10.10：配置 Hadoop 集群节点的固定 IP</li><li>–add-host hadoop1:192.168.10.11：除了需要配置好 Hadoop 集群节点的固定 IP 外，还需要修改 Hadoop 容器内部的 hosts 文件，设置主机名与 ip 的映射。在 docker 中直接修改 &#x2F;etc&#x2F;hosts 文件，在重启容器后会被重置、覆盖。因此需要通过容器启动脚本 docker run 的 –add-host 参数将主机和 ip 地址的对应关系传入，容器在启动后会写入 hosts 文件中。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">hadoop0</span><br>docker run --name hadoop0 \<br>--hostname hadoop0 \<br>--net hadoop --ip 192.168.10.10 \<br>--add-host hadoop1:192.168.10.11 \<br>--add-host hadoop2:192.168.10.12 \<br>-p 50070:50070 \<br>-p 8088:8088 \<br>-d -P ryaning/hadoop<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hadoop1</span><br>docker run --name hadoop1 \<br>--hostname hadoop1 \<br>--net hadoop --ip 192.168.10.11 \<br>--add-host hadoop0:192.168.10.10 \<br>--add-host hadoop2:192.168.10.12 \<br>-d -P ryaning/hadoop<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hadoop2</span><br>docker run --name hadoop2 \<br>--hostname hadoop2 \<br>--net hadoop --ip 192.168.10.12 \<br>--add-host hadoop0:192.168.10.10 \<br>--add-host hadoop1:192.168.10.11 \<br>-d -P ryaning/hadoop<br></code></pre></td></tr></table></figure><h3 id="设置-SSH-免密码登录"><a href="#设置-SSH-免密码登录" class="headerlink" title="设置 SSH 免密码登录"></a>设置 SSH 免密码登录</h3><p>前面已经为容器配置 IP 了，在进行 ssh 时需要输入要登陆的容器的 root 密码，Hadoop 集群要求集群间机器 SSH 连接时无密码登陆，下面讲述容器间如何配置 SSH 无密码登陆。</p><p>以 hadoop0 容器为例，hadoop1、hadoop2 容器同样需要修改。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入 hadoop0 容器内</span><br>docker exec -it hadoop0 bash<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">执行后会有多个输入提示，不用输入任何内容，全部直接回车即可</span><br>ssh-keygen<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">执行命令后需要输入登录密码，**默认为 123456**</span><br>ssh-copy-id -i /root/.ssh/id_rsa -p 22 root@hadoop0<br>ssh-copy-id -i /root/.ssh/id_rsa -p 22 root@hadoop1<br>ssh-copy-id -i /root/.ssh/id_rsa -p 22 root@hadoop2<br></code></pre></td></tr></table></figure><h3 id="修改-Hadoop-配置文件"><a href="#修改-Hadoop-配置文件" class="headerlink" title="修改 Hadoop 配置文件"></a>修改 Hadoop 配置文件</h3><p>要想真正的运行 hadoop 应用还需要修改 hadoop 运行参数；以 hadoop0 为例，进入到容器内 &#x2F;usr&#x2F;local&#x2F;hadoop&#x2F;etc&#x2F;hadoop 目录下，需要修改的可执行文件与配置文件包括：hadoop-env.sh、yarn-env.sh、core-site.xml、hdfs-site.xml、yarn-site.xml、mapred-site.xml。</p><ul><li>hadoop-env.sh</li></ul><p>注释掉原有的配置 export JAVA_HOME&#x3D;${JAVA_HOME}，修改成当前的 export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;jdk1.8。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">export JAVA_HOME=/usr/local/jdk1.8<br></code></pre></td></tr></table></figure><ul><li>yarn-env.sh</li></ul><p>同样是重新指定 export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;jdk1.8。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>export JAVA_HOME=/usr/local/jdk1.8<br><br></code></pre></td></tr></table></figure><ul><li>core-site.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指定 HDFS 中 NameNode 的地址 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fs.defaultFS<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdfs://hadoop0:9000<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指定 hadoop 运行时产生文件的存储目录 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.tmp.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/usr/local/hadoop/tmp<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fs.trash.interval<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1440<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><br></code></pre></td></tr></table></figure><ul><li>hdfs-site.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.replication<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.permissions<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>yarn-site.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>mapreduce_shuffle<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.auxservices.mapreduce.shuffle.class<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>org.apache.hadoop.mapred.ShuffleHandler<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop0:8032<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.scheduler.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop0:8030<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.resource-tracker.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop0:8031<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.admin.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop0:8033<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.webapp.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop0:8088<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>mapred-site.xml</li></ul><p>这个文件默认不存在，需要从 mapred-site.xml.template 复制过来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mv mapred-site.xml.template mapred-site.xml<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.framework.name<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>yarn<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>slaves 配置</li></ul><p>修改 hadoop0 中的从机（slaves）配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>vi /usr/local/hadoop/etc/hadoop/slaves<br></code></pre></td></tr></table></figure><p>删除原来的所有内容，修改为如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop1<br>hadoop2<br></code></pre></td></tr></table></figure><h3 id="hadoop-集群配置分发"><a href="#hadoop-集群配置分发" class="headerlink" title="hadoop 集群配置分发"></a>hadoop 集群配置分发</h3><p>在 hadoop0 中执行命令，将 hadoop0 中的配置复制到其他两个节点中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">scp -r /usr/local/hadoop hadoop1:/usr/local<br>scp -r /usr/local/hadoop hadoop2:/usr/local<br></code></pre></td></tr></table></figure><h2 id="三、启动"><a href="#三、启动" class="headerlink" title="三、启动"></a>三、启动</h2><p>第一次启动集群时，需要初始化</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">初始化</span><br>hdfs namenode -format<br><br></code></pre></td></tr></table></figure><p>出现类似下面命令说明格式化成功。</p><p><img src="https://raw.githubusercontent.com/Demo233/images/main/gitnote/2020/11/15/Snipaste_2020-11-15_14-51-19-1605424306303.png" alt="title"></p><blockquote><p>注：格式化操作不能重复执行。如果一定要重复格式化，带参数 -force 即可。</p></blockquote><h3 id="启动-hadoop-集群"><a href="#启动-hadoop-集群" class="headerlink" title="启动 hadoop 集群"></a>启动 hadoop 集群</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">/usr/local/hadoop 目录下执行</span><br>sbin/start-all.sh<br></code></pre></td></tr></table></figure><p>注：在主节点 hadoop0 启动 hadoop，从节点 hadoop1、hadoop2 会自动启动。</p><p>浏览器中访问</p><p><img src="https://raw.githubusercontent.com/Demo233/images/main/gitnote/2020/11/15/Snipaste_2020-11-15_15-13-58-1605424469022.png" alt="title"></p><h2 id="四、验证集群是否正常"><a href="#四、验证集群是否正常" class="headerlink" title="四、验证集群是否正常"></a>四、验证集群是否正常</h2><p>可以正常访问的话，说明集群启动成功了，但不一定能正常运行，还需要下面的实际验证。</p><h3 id="测试验证"><a href="#测试验证" class="headerlink" title="测试验证"></a>测试验证</h3><p>创建本地测试文件，在 &#x2F;opt 目录下创建测试文件目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir wcinput<br>cd wcinput<br>vi wc.input<br></code></pre></td></tr></table></figure><p>wc.input文件内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop mapreduce<br>hadoop yarn<br>hadoop hdfs<br>mapreduce spark<br>hadoop hello<br></code></pre></td></tr></table></figure><p>创建 HDFS 目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hdfs dfs -mkdir -p /user/hadoop/input<br></code></pre></td></tr></table></figure><p>上传文件，把测试文件上传到刚刚创建的目录中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hdfs dfs -put /opt/wcinput/wc.input /user/hadoop/input<br></code></pre></td></tr></table></figure><p>查看文件上传是否正确</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">hdfs dfs -ls /user/hadoop/input<br>[root@hadoop0 wcinput]# hdfs dfs -ls /user/hadoop/input<br>Found 1 items<br>-rw-r--r--   1 root supergroup         70 2019-01-21 10:07 /user/hadoop/input/wc.input<br>[root@hadoop0 wcinput]#<br></code></pre></td></tr></table></figure><p>运行 mapreduce 程序</p><p>hadoop 安装包中提供了一个示例程序，我们可以使用它对刚刚上传的文件进行测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop jar /usr/local/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.9.2.jar wordcount /user/hadoop/input /user/hadoop/output<br></code></pre></td></tr></table></figure><blockquote><p>注：在执行过程中，如果长时间处于 Running 状态不动，虽然没有报错，但实际上是出错了，后台在不断重试，需要到 logs 目录下（&#x2F;usr&#x2F;local&#x2F;hadoop&#x2F;logs）查看日志文件中的错误信息。</p></blockquote><p>查看输出结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">hdfs dfs -ls /user/hadoop/output<br>[root@hadoop0 wcinput]# hdfs dfs -ls /user/hadoop/output<br>Found 2 items<br>-rw-r--r--   1 root supergroup          0 2019-01-22 05:35 /user/hadoop/output/_SUCCESS<br>-rw-r--r--   1 root supergroup         51 2019-01-22 05:35 /user/hadoop/output/part-r-00000<br></code></pre></td></tr></table></figure><p>_SUCCESS 表示 HDFS 文件状态，生成的结果在 part-r-00000 中查看。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">hdfs dfs -cat /user/hadoop/output/part-r-00000<br>[root@hadoop0 wcinput]# hdfs dfs -cat /user/hadoop/output/part-r-00000<br>hadoop    4<br>hdfs    1<br>hello    1<br>mapreduce    2<br>spark    1<br>yarn    1<br>[root@hadoop0 wcinput]#<br></code></pre></td></tr></table></figure><p>以上就是使用 Docker 环境搭建 Hadoop 镜像容器，配置 Hadoop 集群，并启动和测试的实例，测试用的是 hadoop 官方给的一个 wordcount 统计，利用 hadoop 安装包里的 mapreduce 示例 jar 计算指定 HDFS 文件里的单词数，并将结果输出到指定 HDFS 目录。后面会介绍 HDFS 常用文件操作命令。</p><p>links: <a href="https://book.ryana.cn/hadoop/docker-install-hadoop.html">https://book.ryana.cn/hadoop/docker-install-hadoop.html</a></p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软链接解决磁盘不足</title>
    <link href="/2020/10/05/2020%E2%80%9310-05-%E8%BD%AF%E9%93%BE%E6%8E%A5%E8%A7%A3%E5%86%B3%E7%A3%81%E7%9B%98%E4%B8%8D%E8%B6%B3/"/>
    <url>/2020/10/05/2020%E2%80%9310-05-%E8%BD%AF%E9%93%BE%E6%8E%A5%E8%A7%A3%E5%86%B3%E7%A3%81%E7%9B%98%E4%B8%8D%E8%B6%B3/</url>
    
    <content type="html"><![CDATA[<p>本人使用Linux系统作为主系统，在装系统时，分区分的有些小，导致现在装点东西都很难办。</p><h2 id="1-操作系统"><a href="#1-操作系统" class="headerlink" title="1.操作系统"></a>1.操作系统</h2><p><img src="http://qgw3wcroi.hn-bkt.clouddn.com/snapshot.png" alt="xx"> </p><h2 id="2-问题"><a href="#2-问题" class="headerlink" title="2.问题"></a>2.问题</h2><p>因为ubuntu中安装软件，大部分都是这样<code>sudo apt-get install mysql</code> 往往我们都不自定义安装路径，这样导致我的其它磁盘空间很大，根目录空间严重不足。</p><p>网上有说清缓存、清理不用的软件、拓展系统分区，这些方案要么是不靠谱，要么是太过麻烦。</p><p>这个问题困扰我蛮久的，最近想到了一个办法，用软链接将大目录或文件链接到其它磁盘，来增加源磁盘空间。</p><p>操作很简单，大致思路如下</p><pre><code class="hljs">* 复制srcPath到targetPath （复制的时候要加 -a 参数复制源目录的权限、组等信息）* 备份srcPath （保证万无一失）* 建立targetPath 软链接</code></pre><h2 id="3-解决"><a href="#3-解决" class="headerlink" title="3.解决"></a>3.解决</h2><p>为了方便管理，在挂载的<code>/ssd</code>下面创建<strong>root</strong>目录，以后<code>/ssd/root</code>将作为target目录做统一处理。</p><p>下面写了一个简单的shell，方便操作，使用办法<code>sh lnTool.sh -src=/usr/lib/xxx</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">sh lnTool.sh -src=/usr/lib/xxx</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">移动src到target并创建软链接,解决目前空间不足问题</span><br><br>opts=$@<br>getparam()&#123;<br>arg=$1<br>echo $opts | xargs -n1 | cut -b 2- | awk -F&quot;=&quot; &#x27;&#123;if($1==&quot;&#x27;&quot;$arg&quot;&#x27;&quot;) print $2&#125;&#x27;<br>&#125;<br><br>src=$(getparam src)<br>target=/ssd/root$src<br><span class="hljs-meta prompt_"># </span><span class="language-bash">crete target <span class="hljs-built_in">dir</span></span><br>sudo mkdir -p $target<br><span class="hljs-meta prompt_"># </span><span class="language-bash">copy src to target</span><br>sudo cp -a $src/* $target<br><span class="hljs-meta prompt_"># </span><span class="language-bash">back src</span><br>sudo mv $src $src.bak<br><span class="hljs-meta prompt_"># </span><span class="language-bash">create soft <span class="hljs-built_in">link</span></span><br>sudo ln -s $target $src<br><br></code></pre></td></tr></table></figure><p>比如,发现<code>/usr/share/doc</code>目录很大，使用shell完成建立软链接 </p><p>直接运行 <code>sh lnTool.sh -src=/usr/share/doc</code>即可。</p><p>如果使用提供的<strong>shell</strong>的话，先<font color="red">做适当改动并拿几个文件试一下，以免出现问题</fornt>。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NIO</title>
    <link href="/2020/09/24/2020%E2%80%9309-24-NIO%E9%9D%9E%E9%98%BB%E5%A1%9EIO/"/>
    <url>/2020/09/24/2020%E2%80%9309-24-NIO%E9%9D%9E%E9%98%BB%E5%A1%9EIO/</url>
    
    <content type="html"><![CDATA[<p>BIO(Blocking I&#x2F;0) 为阻塞IO，NIO(Non-Blocking I&#x2F;O)为非阻塞IO。</p><p>不推荐以BIO构建生产应用，它有以下特点</p><ol><li>阻塞式I&#x2F;O</li><li>弹性伸缩能力差</li><li>多线程耗资源</li></ol><p>针对以上问题，NIO可以完美解决，下面为学习NIO，使用Java 原生API编写NIO聊天室，上生产的话参考封装NIO的Netty框架。</p><p>NioServer.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ml.yihao;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.InetSocketAddress;<br><span class="hljs-keyword">import</span> java.nio.ByteBuffer;<br><span class="hljs-keyword">import</span> java.nio.channels.*;<br><span class="hljs-keyword">import</span> java.nio.charset.Charset;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用Java NIO编写聊天程序</span><br><span class="hljs-comment"> * 服务端程序代码</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zyh</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 20-9-24 下午11:25</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NioServer</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ENCODING_UTF8</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;UTF-8&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">BUFFER_SIZE</span> <span class="hljs-operator">=</span> <span class="hljs-number">1024</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">hostname</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">8081</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 启动服务端</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-comment">// 1. 构造注册中心selector</span><br>        <span class="hljs-type">Selector</span> <span class="hljs-variable">selector</span> <span class="hljs-operator">=</span> Selector.open();<br><br>        <span class="hljs-comment">// 2. 创建ServerSocketChannel 并绑定IP 和Port 设置为非阻塞模式</span><br>        <span class="hljs-type">ServerSocketChannel</span> <span class="hljs-variable">serverSocketChannel</span> <span class="hljs-operator">=</span> ServerSocketChannel.open();<br>        serverSocketChannel.bind(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(hostname, port));<br>        serverSocketChannel.configureBlocking(<span class="hljs-literal">false</span>);<br><br>        <span class="hljs-comment">// 3. 注册</span><br>        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);<br><br>        <span class="hljs-comment">// 4. 调用selector 的select方法检测就绪状态</span><br>        <span class="hljs-keyword">for</span> (;;)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">select</span> <span class="hljs-operator">=</span> selector.select();<br>            <span class="hljs-keyword">if</span>(select == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-comment">// 5. 拿到就绪集合</span><br>            Set&lt;SelectionKey&gt; selectedKeys = selector.selectedKeys();<br><br>            Iterator&lt;SelectionKey&gt; iterator = selectedKeys.iterator();<br>            <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br><br>                <span class="hljs-type">SelectionKey</span> <span class="hljs-variable">selectionKey</span> <span class="hljs-operator">=</span> iterator.next();<br>                <span class="hljs-comment">// 6. 根据channel类型处理业务逻辑</span><br>                <span class="hljs-keyword">if</span>(selectionKey.isAcceptable())&#123;<br>                    <span class="hljs-comment">// 监听</span><br>                    acceptHandler(serverSocketChannel, selector);<br>                &#125;<br><br>                <span class="hljs-keyword">if</span>(selectionKey.isReadable())&#123;<br>                    readHandler(selectionKey , selector);<br>                &#125;<br><br>                iterator.remove();<br>            &#125;<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 当监听到accept事件时，需要将socket注册到selector上</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> selector</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ClosedChannelException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acceptHandler</span><span class="hljs-params">(ServerSocketChannel serverSocketChannel, Selector selector)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-type">SocketChannel</span> <span class="hljs-variable">socketChannel</span> <span class="hljs-operator">=</span> serverSocketChannel.accept();<br><br>        <span class="hljs-comment">// 如果不设置这个东西会怎么样?</span><br>        socketChannel.configureBlocking(<span class="hljs-literal">false</span>);<br><br>        socketChannel.register(selector, SelectionKey.OP_READ);<br><br>        socketChannel.write(Charset.forName(ENCODING_UTF8).encode(<span class="hljs-string">&quot;欢迎来到zyh搭建的聊天室！&quot;</span>));<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 监听到读的事件</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readHandler</span><span class="hljs-params">(SelectionKey selectionKey, Selector selector)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-type">SocketChannel</span> <span class="hljs-variable">socketChannel</span> <span class="hljs-operator">=</span> (SocketChannel)selectionKey.channel();<br>        <span class="hljs-comment">//socketChannel.read()</span><br>        <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">byteBuffer</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(BUFFER_SIZE);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">while</span>(socketChannel.read(byteBuffer) &gt; <span class="hljs-number">0</span>)&#123;<br><br>            <span class="hljs-comment">// 切换读模式</span><br>            byteBuffer.flip();<br><br>            result += Charset.forName(ENCODING_UTF8).decode(byteBuffer);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(result.length() &gt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-comment">// 广播数据</span><br>            <span class="hljs-comment">//System.out.println(&quot;:: 读取的数据为&quot; + result);</span><br>            broadcast(selector, socketChannel, result);<br>        &#125;<br>        <span class="hljs-comment">// 7. 处理业务 是业务而定是否需要再次注册channel</span><br>        socketChannel.register(selector, SelectionKey.OP_READ);<br>    &#125;<br><br>    <span class="hljs-comment">// 广播数据给所有连接</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">broadcast</span><span class="hljs-params">(Selector selector,SocketChannel sourceChannel, String msg)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        Set&lt;SelectionKey&gt; selectionKeys = selector.keys();<br>        Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext())&#123;<br>            <span class="hljs-type">SelectionKey</span> <span class="hljs-variable">selectionKey</span> <span class="hljs-operator">=</span> iterator.next();<br>            <span class="hljs-type">Channel</span> <span class="hljs-variable">targetChannel</span> <span class="hljs-operator">=</span>  selectionKey.channel();<br><br>            <span class="hljs-comment">// 如果targetChannel 是SocketChannel类型</span><br>            <span class="hljs-comment">// 如果targetChannel 不是发消息的Channel</span><br>            <span class="hljs-keyword">if</span>(targetChannel <span class="hljs-keyword">instanceof</span>  SocketChannel<br>                        &amp;&amp; targetChannel != sourceChannel)&#123;<br><br>                ((SocketChannel)targetChannel).write(Charset.forName(ENCODING_UTF8).encode(msg));<br>            &#125;<br><br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">NioServer</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioServer</span>();<br>        server.start();<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>NioClient.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ml.yihao;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.InetSocketAddress;<br><span class="hljs-keyword">import</span> java.nio.ByteBuffer;<br><span class="hljs-keyword">import</span> java.nio.channels.SelectionKey;<br><span class="hljs-keyword">import</span> java.nio.channels.Selector;<br><span class="hljs-keyword">import</span> java.nio.channels.SocketChannel;<br><span class="hljs-keyword">import</span> java.nio.charset.Charset;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.Objects;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用Java NIO编写聊天程序</span><br><span class="hljs-comment"> * 客户端端程序代码</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zyh</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 20-9-25 上午0:32</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NioClient</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ENCODING_UTF8</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;UTF-8&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">BUFFER_SIZE</span> <span class="hljs-operator">=</span> <span class="hljs-number">1024</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">hostname</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">8081</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-comment">// 链接服务端</span><br>        <span class="hljs-type">SocketChannel</span> <span class="hljs-variable">socketChannel</span> <span class="hljs-operator">=</span> SocketChannel.<br>                open(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(hostname, port));<br><br>        <span class="hljs-comment">// 单独开个线程接收服务端给的信息</span><br>        <span class="hljs-type">Selector</span> <span class="hljs-variable">selector</span> <span class="hljs-operator">=</span> Selector.open();<br>        socketChannel.configureBlocking(<span class="hljs-literal">false</span>);<br>        socketChannel.register(selector, SelectionKey.OP_READ);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NioClient</span>.ReadThread(selector)).start();<br><br>        <span class="hljs-comment">// 向服务端写数据</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">while</span>(scanner.hasNext())&#123;<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> scanner.next();<br>            socketChannel.write(Charset.forName(ENCODING_UTF8).encode(line));<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-type">NioClient</span> <span class="hljs-variable">nioClient</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioClient</span>();<br>        nioClient.start();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 客户端读数据的线程</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReadThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><br>        <span class="hljs-keyword">private</span> Selector selector;<br><br>        <span class="hljs-keyword">protected</span> <span class="hljs-title function_">ReadThread</span><span class="hljs-params">(Selector selector)</span>&#123;<br>            <span class="hljs-built_in">this</span>.selector = selector;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><br>            <span class="hljs-keyword">for</span> (;;)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">// 监测 注册中心channel就绪状态</span><br>                    <span class="hljs-type">int</span> <span class="hljs-variable">select</span> <span class="hljs-operator">=</span> selector.select();<br>                    <span class="hljs-keyword">if</span>(select == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br><br>                    <span class="hljs-comment">// 拿到selectionKey集合</span><br>                    Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();<br><br>                    <span class="hljs-comment">// 遍历判断channel类型</span><br>                    Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();<br>                    <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>                        <span class="hljs-type">SelectionKey</span> <span class="hljs-variable">selectionKey</span> <span class="hljs-operator">=</span> iterator.next();<br><br>                        <span class="hljs-keyword">if</span>(selectionKey.isReadable())&#123;<br>                            <span class="hljs-comment">// 读取客户端中的数据</span><br>                            readHanler(selectionKey, selector);<br>                        &#125;<br><br>                        <span class="hljs-comment">// 不移除会导致set 中的对象堆积</span><br>                        iterator.remove();<br>                    &#125;<br><br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 读取数据</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readHanler</span><span class="hljs-params">(SelectionKey selectionKey, Selector selector)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>            <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(BUFFER_SIZE);<br>            <span class="hljs-type">SocketChannel</span> <span class="hljs-variable">socketChannel</span> <span class="hljs-operator">=</span> (SocketChannel) selectionKey.channel();<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">while</span>(socketChannel.read(buffer) &gt; <span class="hljs-number">0</span>)&#123;<br><br>                buffer.flip();<br><br>                message += Charset.forName(ENCODING_UTF8).decode(buffer);<br>            &#125;<br><br>            <span class="hljs-keyword">if</span>(Objects.nonNull(message) &amp;&amp; message.length() &gt; <span class="hljs-number">0</span>)&#123;<br>                System.out.println(message);<br>            &#125;<br><br>            <span class="hljs-comment">// 重新注册Channel到selector上</span><br>            socketChannel.register(selector, SelectionKey.OP_READ);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NIO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker修改镜像存储位置</title>
    <link href="/2020/09/22/2020%E2%80%9309-22-docker%E4%BF%AE%E6%94%B9%E9%95%9C%E5%83%8F%E5%AD%98%E5%82%A8/"/>
    <url>/2020/09/22/2020%E2%80%9309-22-docker%E4%BF%AE%E6%94%B9%E9%95%9C%E5%83%8F%E5%AD%98%E5%82%A8/</url>
    
    <content type="html"><![CDATA[<p>早期安装ubuntu+win双系统给ubuntu划分存储过小，导致现在不够用，使用下面配置修改Docker镜像存储目录。</p><p>Docker 默认镜像存储路径为 <code>/var/lib/docker</code>，下面修改位置并重启服务</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>docker/daemon.json<br><br>&#123;<br>        <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;http://hub-mirror.c.163.com&quot;</span>],<br>        <span class="hljs-string">&quot;graph&quot;</span>: <span class="hljs-string">&quot;/media/zyh/SSD/root/var/lib/docker&quot;</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>修改服务后发现拉完镜像无法启动，原因是<code>/media/zyh/SSD</code>这个磁盘格式是<code>HPFS/NTFS/exFAT</code></p><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><p>将磁盘<code>/media/zyh/SSD</code>格式化为<code>ext4</code>格式，并挂载到<code>/</code>目录下即可</p><p>具体格式化磁盘的方法可以参考blog:<a href="https://www.cnblogs.com/bpdhpm/p/11384473.html">https://www.cnblogs.com/bpdhpm/p/11384473.html</a></p>]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>问题总结</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker</title>
    <link href="/2020/09/19/2020%E2%80%9309-19-Docker/"/>
    <url>/2020/09/19/2020%E2%80%9309-19-Docker/</url>
    
    <content type="html"><![CDATA[<p><img src="http://qgw3wcroi.hn-bkt.clouddn.com/1586333742105.png" alt="1586333742105"></p><blockquote><p>Author：Eric </p><p>Version：9.0.1</p><p>From : 转载</p></blockquote><p>看到Eric哥们在b站中分享的Docker视频，觉得讲的很好，这里提供一下讲义方便大家学习。</p><p>[TOC]</p><h3 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h3><hr><h4 id="1-1-环境不一致"><a href="#1-1-环境不一致" class="headerlink" title="1.1 环境不一致"></a>1.1 环境不一致</h4><blockquote><p>我本地运行没问题啊：由于环境不一致，导致相同的程序，运行结果却不一致。</p></blockquote><h4 id="1-2-隔离性"><a href="#1-2-隔离性" class="headerlink" title="1.2 隔离性"></a>1.2 隔离性</h4><blockquote><p>哪个哥们又写死循环了，怎么这么卡：在多用户的操作系统下，会因为其他用户的操作失误影响到你自己编写的程序。</p></blockquote><h4 id="1-3-弹性伸缩"><a href="#1-3-弹性伸缩" class="headerlink" title="1.3 弹性伸缩"></a>1.3 弹性伸缩</h4><blockquote><p>淘宝在双11，用户量暴增：需要很多很多的运维人员去增加部署的服务器，运维成本过高。</p></blockquote><h4 id="1-4-学习成本"><a href="#1-4-学习成本" class="headerlink" title="1.4 学习成本"></a>1.4 学习成本</h4><blockquote><p>学习一门技术，得先安装啊：学习每一门技术都要先安装响应的软件，但是还有他所依赖的各种环境，安装软件成本快高过学习成本啦。</p></blockquote><h3 id="二、Docker介绍"><a href="#二、Docker介绍" class="headerlink" title="二、Docker介绍"></a>二、Docker介绍</h3><hr><h4 id="2-1-Docker的由来"><a href="#2-1-Docker的由来" class="headerlink" title="2.1 Docker的由来"></a>2.1 Docker的由来</h4><blockquote><p>Docker 最初是 dotCloud 公司创始人Solomon Hykes 在法国期间发起的一个公司内部项目。</p><p>2010年的专门做PAAS平台，但是到了2013年的时候，像亚马逊，微软，Google都开始做PAAS平台。</p><p>到了2013年，公司资金链断裂，不得不倒闭，于是将公司内的核心技术对外开源，核心技术就是Docker。</p><p>由于开源了Docker，到了2014年的时候，得到了各轮融资，于是公司开始全神贯注的维护Docker。</p></blockquote><table><thead><tr><th align="center">Docker主要作者-Solomon</th></tr></thead><tbody><tr><td align="center"><img src="http://qgw3wcroi.hn-bkt.clouddn.com/1586340594252.png" alt="1586340594252"></td></tr></tbody></table><table><thead><tr><th align="center">现在Solomon已经离开了维护Docker的团队</th></tr></thead><tbody><tr><td align="center"><img src="http://qgw3wcroi.hn-bkt.clouddn.com/1586340639934.png" alt="1586340639934"></td></tr></tbody></table><h4 id="2-2-Docker的思想"><a href="#2-2-Docker的思想" class="headerlink" title="2.2 Docker的思想"></a>2.2 Docker的思想</h4><blockquote><ul><li><p>封装：将需要的操作系统，环境，软件封装到一个镜像中。</p></li><li><p>标准化：</p><ul><li>运输的标准化：Docker提供了中央仓库，所有官方的镜像都放在了这个中央仓库中，当需要使用某一个镜像时，通过相应的方式拉取即可。</li><li>命令的标准化：Docker提供了一些列的命令，帮助我们去获取镜像，管理容器等等操作。</li><li>提供了REST的API：基于标准REST的API衍生出了很多的图形化界面，如Rancher等。</li></ul></li><li><p>隔离性：Docker在运行镜像时，会在Linux的内核中，单独的开辟一片空间，这片空间不会影响到其他程序。</p></li></ul></blockquote><h3 id="三、Docker的安装"><a href="#三、Docker的安装" class="headerlink" title="三、Docker的安装"></a>三、Docker的安装</h3><hr><h4 id="3-1-下载Docker依赖的环境"><a href="#3-1-下载Docker依赖的环境" class="headerlink" title="3.1 下载Docker依赖的环境"></a>3.1 下载Docker依赖的环境</h4><blockquote><p>安装Docker，需要先将依赖的环境全部下载，就像Maven依赖JDK一样。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum -y install yum-utils device-mapper-persistent-data lvm2<br></code></pre></td></tr></table></figure><h4 id="3-2-指定Docker镜像源"><a href="#3-2-指定Docker镜像源" class="headerlink" title="3.2 指定Docker镜像源"></a>3.2 指定Docker镜像源</h4><blockquote><p>默认情况下，下载Docker会从国外服务器下载，速度较慢，我们可以设置为阿里云镜像源，速度更快。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure><h4 id="3-3-安装Docker"><a href="#3-3-安装Docker" class="headerlink" title="3.3 安装Docker"></a>3.3 安装Docker</h4><blockquote><p>采用yum的方式安装。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum makecache fast<br>yum -y install docker-ce<br></code></pre></td></tr></table></figure><p>Docker 安装不了可能是源的问题,我的机器是ubuntu，这里参考了链接完成了安装<a href="https://www.runoob.com/docker/ubuntu-docker-install.html">https://www.runoob.com/docker/ubuntu-docker-install.html</a></p><h4 id="3-4-启动Docker并测试"><a href="#3-4-启动Docker并测试" class="headerlink" title="3.4 启动Docker并测试"></a>3.4 启动Docker并测试</h4><blockquote><p>安装成功后，需要手动启动，设置为开机自启，并测试。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 启动Docker服务</span><br>systemctl start docker<br><span class="hljs-comment"># 设置开机自动启动</span><br>systemctl <span class="hljs-built_in">enable</span> docker<br><span class="hljs-comment"># 测试</span><br>docker run hello-world<br></code></pre></td></tr></table></figure><h3 id="四、Docker的中央仓库【重点】"><a href="#四、Docker的中央仓库【重点】" class="headerlink" title="四、Docker的中央仓库【重点】"></a>四、Docker的中央仓库【<code>重点</code>】</h3><hr><blockquote><ul><li><p>Docker官方的中央仓库：这个仓库是镜像最全的，但是下载速度较慢。</p><p>   <a href="https://hub.docker.com/">https://hub.docker.com/</a></p></li><li><p>国内的镜像网站：网易蜂巢，daoCloud等，下载速度快，但是镜像相对不全。</p><p>   <a href="https://c.163yun.com/hub#/home">https://c.163yun.com/hub#/home</a></p><p>   <a href="http://hub.daocloud.io/">http://hub.daocloud.io/</a>     （推荐使用）</p></li><li><p>在公司内部会采用私服的方式拉取镜像，需要添加配置，如下……</p></li></ul></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"># 需要创建或修改/etc/docker/daemon.json，并添加如下内容，<span class="hljs-string">&quot;ip:port&quot;</span>可以编写多个。<br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;registry-mirrors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;https://registry.docker-cn.com&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;insecure-registries&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;ip:port&quot;</span><span class="hljs-punctuation">]</span>   <br><span class="hljs-punctuation">&#125;</span><br># 重启docker服务<br>systemctl restart docker<br></code></pre></td></tr></table></figure><h3 id="五、镜像的操作"><a href="#五、镜像的操作" class="headerlink" title="五、镜像的操作"></a>五、镜像的操作</h3><hr><h4 id="5-1-拉取镜像"><a href="#5-1-拉取镜像" class="headerlink" title="5.1 拉取镜像"></a>5.1 拉取镜像</h4><blockquote><p>从中央仓库拉取镜像到本地</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull 镜像名称[:tag]<br><br><span class="hljs-comment"># 举个栗子：docker pull daocloud.io/library/tomcat:8.5.15-jre8</span><br></code></pre></td></tr></table></figure><h4 id="5-2-查看本地全部镜像"><a href="#5-2-查看本地全部镜像" class="headerlink" title="5.2 查看本地全部镜像"></a>5.2 查看本地全部镜像</h4><blockquote><p>查看本地已经安装过的镜像信息，包含标识，名称，版本，更新时间，大小</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker images<br></code></pre></td></tr></table></figure><h4 id="5-3-删除本地镜像"><a href="#5-3-删除本地镜像" class="headerlink" title="5.3 删除本地镜像"></a>5.3 删除本地镜像</h4><blockquote><p>镜像会占用磁盘空间，可以直接手动删除，表示通过查看获取</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker rmi 镜像的标识 | 镜像名称:tag<br>docker rmi b8dfe9ade316<br>docker rmi daocloud.io/library/tomcat:8.5.15-jre8<br></code></pre></td></tr></table></figure><h4 id="5-4-镜像的导入导出"><a href="#5-4-镜像的导入导出" class="headerlink" title="5.4 镜像的导入导出"></a>5.4 镜像的导入导出</h4><blockquote><ul><li>如果出现网络故障，可以采过硬盘的方式传输镜像，虽然不规范，但是有效。</li><li>但是这种方式导出的镜像名称和版本都是null，需要手动修改</li></ul></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 将本地的镜像导出</span><br>docker save -o 导出的路径 镜像<span class="hljs-built_in">id</span><br>doeker save -o /usr/local/abc.tar b8dfe9ade316<br><span class="hljs-comment"># 加载本地的镜像文件</span><br>docker load -i 镜像文件<br>docker load -i /usr/local/abc.tar<br><span class="hljs-comment"># 修改镜像名称</span><br>docker tag 镜像<span class="hljs-built_in">id</span> 新镜像名称:版本<br>docker tag b8dfe9ade316  mytomcat:1.0<br></code></pre></td></tr></table></figure><h3 id="六、容器操作【重点】"><a href="#六、容器操作【重点】" class="headerlink" title="六、容器操作【重点】"></a>六、容器操作【<code>重点</code>】</h3><hr><h4 id="6-1-运行容器"><a href="#6-1-运行容器" class="headerlink" title="6.1 运行容器"></a>6.1 运行容器</h4><blockquote><p>运行容器需要指定具体镜像，如果镜像不存在，会直接下载</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 简单操作</span><br>docker run 镜像的标识 | 镜像名称[:tag]<br>docker run b8dfe9ade316<br>docker run daocloud.io/library/tomcat:8.5.15-jre8<br><span class="hljs-comment"># 常用的参数</span><br>docker run -d -p 宿主机端口:容器端口 --name 容器名称 镜像的标识|镜像名称[:tag]<br>docker run -d -p 8090:8080 --name my_container b8dfe9ade316<br><span class="hljs-comment"># -d：代表后台运行容器</span><br><span class="hljs-comment"># -p 宿主机端口:容器端口：为了映射当前Linux的端口和容器的端口</span><br><span class="hljs-comment"># --name 容器名称：指定容器的名称</span><br></code></pre></td></tr></table></figure><h4 id="6-2-查看正在运行的容器"><a href="#6-2-查看正在运行的容器" class="headerlink" title="6.2 查看正在运行的容器"></a>6.2 查看正在运行的容器</h4><blockquote><p>查看全部正在运行的容器信息</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker ps [-qa]<br><span class="hljs-comment"># -a：查看全部的容器，包括没有运行</span><br><span class="hljs-comment"># -q：只查看容器的标识</span><br></code></pre></td></tr></table></figure><h4 id="6-3-查看容器日志"><a href="#6-3-查看容器日志" class="headerlink" title="6.3 查看容器日志"></a>6.3 查看容器日志</h4><blockquote><p>查看容器日志，以查看容器运行的信息</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker logs -f 容器<span class="hljs-built_in">id</span><br><span class="hljs-comment"># -f：可以滚动查看日志的最后几行</span><br></code></pre></td></tr></table></figure><h4 id="6-4-进入容器内容部"><a href="#6-4-进入容器内容部" class="headerlink" title="6.4 进入容器内容部"></a>6.4 进入容器内容部</h4><blockquote><p>可以进入容器内部进行操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker <span class="hljs-built_in">exec</span> -it 容器<span class="hljs-built_in">id</span> bash<br>docker <span class="hljs-built_in">exec</span> -it 容器名称 bash<br></code></pre></td></tr></table></figure><h4 id="6-5-复制内容到容器"><a href="#6-5-复制内容到容器" class="headerlink" title="6.5 复制内容到容器"></a>6.5 复制内容到容器</h4><blockquote><p>将宿主机的文件复制到容器内部的指定目录</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker <span class="hljs-built_in">cp</span> 文件名称 容器<span class="hljs-built_in">id</span>:容器内部路径<br></code></pre></td></tr></table></figure><h4 id="6-6-重启-amp-启动-amp-停止-amp-删除容器"><a href="#6-6-重启-amp-启动-amp-停止-amp-删除容器" class="headerlink" title="6.6 重启&amp;启动&amp;停止&amp;删除容器"></a>6.6 重启&amp;启动&amp;停止&amp;删除容器</h4><blockquote><p>容器的启动，停止，删除等操作，后续经常会使用到</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 重新启动容器</span><br>docker restart 容器<span class="hljs-built_in">id</span><br><br><span class="hljs-comment"># 启动停止运行的容器</span><br>docker start 容器<span class="hljs-built_in">id</span><br><br><span class="hljs-comment"># 停止指定的容器（删除容器前，需要先停止容器）</span><br>docker stop 容器<span class="hljs-built_in">id</span><br><span class="hljs-comment"># 停止全部容器</span><br>docker stop $(docker ps -qa)<br><br><span class="hljs-comment"># 删除指定容器</span><br>docker <span class="hljs-built_in">rm</span> 容器<span class="hljs-built_in">id</span><br><span class="hljs-comment"># 删除全部容器</span><br>docker <span class="hljs-built_in">rm</span> $(docker ps -qa)<br></code></pre></td></tr></table></figure><h3 id="七、Docker应用"><a href="#七、Docker应用" class="headerlink" title="七、Docker应用"></a>七、Docker应用</h3><hr><h4 id="7-1-Docker安装Tomcat"><a href="#7-1-Docker安装Tomcat" class="headerlink" title="7.1 Docker安装Tomcat"></a>7.1 Docker安装Tomcat</h4><blockquote><p>运行Tomcat容器，为部署SSM工程做准备</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d -p 8080:8080 --name tomcat daocloud.io/library/tomcat:8.5.15-jre8<br></code></pre></td></tr></table></figure><h4 id="7-2-Docker安装MySQL"><a href="#7-2-Docker安装MySQL" class="headerlink" title="7.2 Docker安装MySQL"></a>7.2 Docker安装MySQL</h4><blockquote><p>运行MySQL容器，为部署SSM工程做准备</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d -p 3366:3306 --name mysql -e MYSQL_ROOT_PASSWORD=root daocloud.io/library/mysql:5.7.4<br><br><span class="hljs-comment"># 宿主机中通过 3366连接 容器中的mysql</span><br>[root@localhost logs]<span class="hljs-comment"># mysql -uroot -P 3366 -proot -h 192.168.1.135</span><br></code></pre></td></tr></table></figure><h4 id="7-3-部署SSM工程"><a href="#7-3-部署SSM工程" class="headerlink" title="7.3 部署SSM工程"></a>7.3 部署SSM工程</h4><blockquote><ul><li>修改SSM工程环境，设置为Linux中Docker容器的信息</li><li>通过Maven的package重新打成war包</li><li>将Windows下的war包复制到Linux中</li><li>通过docker命令将宿主机的war包复制到容器内部</li><li>测试访问SSM工程</li></ul></blockquote><h3 id="八、数据卷【重点】"><a href="#八、数据卷【重点】" class="headerlink" title="八、数据卷【重点】"></a>八、数据卷【<code>重点</code>】</h3><hr><blockquote><ul><li><p>为部署SSM的工程，需要使用到Docker的cp命令将宿主机内的ssm.war文件复制到容器内部，操作麻烦。</p></li><li><p><a href="">数据卷</a>：</p></li><li><p>将宿主机的一个目录映射到容器的一个目录中。</p></li><li><p>可以在宿主机中操作目录中的内容，容器内部映射的文件会跟着一起改变。</p></li></ul></blockquote><h4 id="8-1-创建数据卷"><a href="#8-1-创建数据卷" class="headerlink" title="8.1 创建数据卷"></a>8.1 创建数据卷</h4><blockquote><p>创建数据卷之后，默认会存放在一个目录下 &#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;数据卷名称&#x2F;_data</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker volume create 数据卷名称<br></code></pre></td></tr></table></figure><h4 id="8-2-查看数据卷详情"><a href="#8-2-查看数据卷详情" class="headerlink" title="8.2 查看数据卷详情"></a>8.2 查看数据卷详情</h4><blockquote><p>查看数据卷的详细信息，可以查询到存放路径，创建时间等等</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker volume inspect 数据卷名称<br></code></pre></td></tr></table></figure><h4 id="8-3-查看全部数据卷"><a href="#8-3-查看全部数据卷" class="headerlink" title="8.3 查看全部数据卷"></a>8.3 查看全部数据卷</h4><blockquote><p>查看全部数据卷信息</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker volume <span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><h4 id="8-4-删除数据卷"><a href="#8-4-删除数据卷" class="headerlink" title="8.4 删除数据卷"></a>8.4 删除数据卷</h4><blockquote><p>删除指定数据卷</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker volume <span class="hljs-built_in">rm</span> 数据卷名称<br></code></pre></td></tr></table></figure><h4 id="8-5-容器映射数据卷"><a href="#8-5-容器映射数据卷" class="headerlink" title="8.5 容器映射数据卷"></a>8.5 容器映射数据卷</h4><blockquote><p>映射有两种方式：</p><ul><li>通过数据卷名称映射，如果数据卷不存在。Docker会帮你自动创建，会将容器内部自带的文件，存储在默认的存放路径中。</li><li>通过路径映射数据卷，直接指定一个路径作为数据卷的存放位置。但是这个路径下是空的。</li></ul></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 通过数据卷名称映射</span><br>docker run -v 数据卷名称:容器内部的路径 镜像<span class="hljs-built_in">id</span><br>docker run -v webapps2004:/usr/local/tomcat/webappss 镜像<span class="hljs-built_in">id</span><br><span class="hljs-comment"># 通过路径映射数据卷</span><br>docker run -v 路径:容器内部的路径 镜像<span class="hljs-built_in">id</span><br>docker run -v /usr/local/tomcat_webapps2004:/usr/local/tomcat/webapps 镜像<span class="hljs-built_in">id</span><br></code></pre></td></tr></table></figure><h3 id="九、Dockerfile自定义镜像【重点】"><a href="#九、Dockerfile自定义镜像【重点】" class="headerlink" title="九、Dockerfile自定义镜像【重点】"></a>九、Dockerfile自定义镜像【<code>重点</code>】</h3><hr><blockquote><p>我们可以从中央仓库下载一个镜像，也可以自己手动去制作一个镜像，需要通过Dockerfile去指定自定义镜像的信息</p></blockquote><h4 id="9-1-Dockerfile"><a href="#9-1-Dockerfile" class="headerlink" title="9.1 Dockerfile"></a>9.1 Dockerfile</h4><blockquote><p>创建自定义镜像就需要创建一个Dockerfile，如下为Dockerfile的常用配置</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">from: 指定当前自定义镜像依赖的环境<br>copy: 将相对路径下的内容复制到自定义镜像中<br>workdir: 声明镜像的默认工作目录<br>run: 执行的命令，可以编写多个<br>cmd: 需要执行的命令（在workdir下执行的，cmd可以写多个，但是只以最后一个为准）<br><br><span class="hljs-comment"># 举个例子，制作SSM容器镜像，而且ssm.war要放在Dockerfile的同级目录下</span><br>from daocloud.io/library/tomcat:8.5.15-jre8<br>copy ssm.war /usr/local/tomcat/webapps<br></code></pre></td></tr></table></figure><h4 id="9-2-通过Dockerfile制作镜像"><a href="#9-2-通过Dockerfile制作镜像" class="headerlink" title="9.2 通过Dockerfile制作镜像"></a>9.2 通过Dockerfile制作镜像</h4><blockquote><p>编写完Dockerfile后需要Dockerfile所在目录通过命令将其制作为镜像，注意最后的 <a href="">.</a>  代表当前目录。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker build -t 镜像名称[:tag] .<br></code></pre></td></tr></table></figure><h3 id="十-Docker-Compose【重点】"><a href="#十-Docker-Compose【重点】" class="headerlink" title="十. Docker-Compose【重点】"></a>十. Docker-Compose【<code>重点</code>】</h3><hr><blockquote><ul><li>运行一个容器，我们需要添加大量的参数，可以通过Docker-Compose文件配置参数。</li><li>参数信息通过docker-compose.yml文件去维护。</li><li>Docker-Compose可以批量管理容器。</li></ul></blockquote><h4 id="10-1-下载并安装Docker-Compose"><a href="#10-1-下载并安装Docker-Compose" class="headerlink" title="10.1 下载并安装Docker-Compose"></a>10.1 下载并安装Docker-Compose</h4><h5 id="10-1-1-下载Docker-Compose"><a href="#10-1-1-下载Docker-Compose" class="headerlink" title="10.1.1 下载Docker-Compose"></a>10.1.1 下载Docker-Compose</h5><blockquote><p>去github官网搜索docker-compose，下载1.24.1版本的Docker-Compose</p><p>下载路径：<a href="">https://github.com/docker/compose/releases/download/1.24.1/docker-compose-Linux-x86_64</a></p></blockquote><h5 id="10-1-2-设置权限"><a href="#10-1-2-设置权限" class="headerlink" title="10.1.2 设置权限"></a>10.1.2 设置权限</h5><blockquote><p>需要将DockerCompose文件的名称修改一下，给予DockerCompose文件一个可执行的权限</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mv</span> docker-compose-Linux-x86_64 docker-compose<br><span class="hljs-built_in">chmod</span> 777 docker-compose<br></code></pre></td></tr></table></figure><h5 id="10-1-3-移动到-x2F-usr-x2F-local-x2F-bin目录下"><a href="#10-1-3-移动到-x2F-usr-x2F-local-x2F-bin目录下" class="headerlink" title="10.1.3 移动到&#x2F;usr&#x2F;local&#x2F;bin目录下"></a>10.1.3 移动到&#x2F;usr&#x2F;local&#x2F;bin目录下</h5><blockquote><p> 方便后期操作，将docker-compose文件移动到了&#x2F;usr&#x2F;local&#x2F;bin</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mv</span> docker-compose /usr/local/bin<br></code></pre></td></tr></table></figure><h5 id="10-1-4-测试"><a href="#10-1-4-测试" class="headerlink" title="10.1.4 测试"></a>10.1.4 测试</h5><blockquote><p>在任意目录下输入docker-compose</p></blockquote><table><thead><tr><th align="center">测试效果</th></tr></thead><tbody><tr><td align="center"><img src="http://qgw3wcroi.hn-bkt.clouddn.com/1586420176720.png" alt="1586420176720"></td></tr></tbody></table><h4 id="10-2-Docker-Compose管理MySQL和Tomcat容器"><a href="#10-2-Docker-Compose管理MySQL和Tomcat容器" class="headerlink" title="10.2 Docker-Compose管理MySQL和Tomcat容器"></a>10.2 Docker-Compose管理MySQL和Tomcat容器</h4><blockquote><ul><li><p>yml文件以key: value方式来指定配置信息</p></li><li><p>多个配置信息以换行+缩进的方式来区分</p></li><li><p>在docker-compose.yml文件中，不要使用制表符</p></li></ul></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.1&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">mysql:</span>           <span class="hljs-comment"># 服务的名称</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span>   <span class="hljs-comment"># 代表只要docker启动，那么这个容器就跟着一起启动</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">daocloud.io/library/mysql:5.7.4</span>  <span class="hljs-comment"># 指定镜像路径</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">mysql</span>  <span class="hljs-comment"># 指定容器名称</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">3306</span><span class="hljs-string">:3306</span>   <span class="hljs-comment">#  指定端口号的映射</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-string">root</span>   <span class="hljs-comment"># 指定MySQL的ROOT用户登录密码</span><br>      <span class="hljs-attr">TZ:</span> <span class="hljs-string">Asia/Shanghai</span>        <span class="hljs-comment"># 指定时区</span><br>    <span class="hljs-attr">volumes:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">/opt/docker_mysql_tomcat/mysql_data:/var/lib/mysql</span>   <span class="hljs-comment"># 映射数据卷</span><br>  <span class="hljs-attr">tomcat:</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">daocloud.io/library/tomcat:8.5.15-jre8</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">tomcat</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">8080</span><span class="hljs-string">:8080</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">TZ:</span> <span class="hljs-string">Asia/Shanghai</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/opt/docker_mysql_tomcat/tomcat_webapps:/usr/local/tomcat/webapps</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/opt/docker_mysql_tomcat/tomcat_logs:/usr/local/tomcat/logs</span><br></code></pre></td></tr></table></figure><h4 id="10-3-使用docker-compose命令管理容器"><a href="#10-3-使用docker-compose命令管理容器" class="headerlink" title="10.3 使用docker-compose命令管理容器"></a>10.3 使用docker-compose命令管理容器</h4><blockquote><p>在docker-compose.yml文件目录下使用docker-compose的命令时 </p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 1. 基于docker-compose.yml启动管理的容器</span><br>docker-compose up -d<br><br><span class="hljs-comment"># 2. 关闭并删除容器</span><br>docker-compose down<br><br><span class="hljs-comment"># 3. 开启|关闭|重启已经存在的由docker-compose维护的容器</span><br>docker-compose start|stop|restart<br><br><span class="hljs-comment"># 4. 查看由docker-compose管理的容器</span><br>docker-compose ps<br><br><span class="hljs-comment"># 5. 查看日志</span><br>docker-compose logs -f<br></code></pre></td></tr></table></figure><h4 id="10-4-docker-compose配合Dockerfile使用"><a href="#10-4-docker-compose配合Dockerfile使用" class="headerlink" title="10.4 docker-compose配合Dockerfile使用"></a>10.4 docker-compose配合Dockerfile使用</h4><blockquote><p>使用docker-compose.yml文件以及Dockerfile文件在生成自定义镜像的同时启动当前镜像，并且由docker-compose去管理容器</p></blockquote><h5 id="10-4-1-docker-compose文件"><a href="#10-4-1-docker-compose文件" class="headerlink" title="10.4.1 docker-compose文件"></a>10.4.1 docker-compose文件</h5><blockquote><p>编写docker-compose.yml文件</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># yml文件</span><br><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.1&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">ssm:</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">build:</span>            <span class="hljs-comment"># 构建自定义镜像</span><br>      <span class="hljs-attr">context:</span> <span class="hljs-string">../</span>      <span class="hljs-comment"># 指定dockerfile文件的所在路径</span><br>      <span class="hljs-attr">dockerfile:</span> <span class="hljs-string">Dockerfile</span>   <span class="hljs-comment"># 指定Dockerfile文件名称</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">ssm:1.0.1</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">ssm</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">8081</span><span class="hljs-string">:8080</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">TZ:</span> <span class="hljs-string">Asia/Shanghai</span><br></code></pre></td></tr></table></figure><h5 id="10-4-2-Dockerfile文件"><a href="#10-4-2-Dockerfile文件" class="headerlink" title="10.4.2 Dockerfile文件"></a>10.4.2 Dockerfile文件</h5><blockquote><p>编写Dockerfile文件</p></blockquote><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">from</span> daocloud.io<span class="hljs-regexp">/library/</span>tomcat:<span class="hljs-number">8.5</span>.<span class="hljs-number">15</span>-jre8<br><span class="hljs-keyword">copy</span> ssm.war <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/tomcat/</span>webapps<br></code></pre></td></tr></table></figure><h5 id="10-4-3-运行"><a href="#10-4-3-运行" class="headerlink" title="10.4.3 运行"></a>10.4.3 运行</h5><blockquote><p>测试效果</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 可以直接启动基于docker-compose.yml以及Dockerfile文件构建的自定义镜像</span><br>docker-compose up -d<br><span class="hljs-comment"># 如果自定义镜像不存在，会帮助我们构建出自定义镜像，如果自定义镜像已经存在，会直接运行这个自定义镜像</span><br><br><span class="hljs-comment"># 重新构建自定义镜像</span><br>docker-compose build<br><br><span class="hljs-comment"># 运行当前内容，并重新构建</span><br>docker-compose up -d --build<br></code></pre></td></tr></table></figure><h3 id="十一-Docker-CI、CD"><a href="#十一-Docker-CI、CD" class="headerlink" title="十一. Docker CI、CD"></a>十一. Docker CI、CD</h3><hr><h4 id="11-1-CI、CD引言"><a href="#11-1-CI、CD引言" class="headerlink" title="11.1 CI、CD引言"></a>11.1 CI、CD引言</h4><blockquote><p>项目部署</p><ul><li>将项目通过maven进行编译打包</li><li>将文件上传到指定的服务器中</li><li>将war包放到tomcat的目录中</li><li>通过Dockerfile将Tomcat和war包转成一个镜像，由DockerCompose去运行容器</li></ul><p>项目更新后，需要将上述流程再次的从头到尾的执行一次，如果每次更新一次都执行一次上述操作，很费时，费力。我们就可以通过CI、CD帮助我们实现持续集成，持续交付和部署。</p></blockquote><h4 id="11-2-CI介绍"><a href="#11-2-CI介绍" class="headerlink" title="11.2 CI介绍"></a>11.2 CI介绍</h4><blockquote><p>CI（continuous intergration）持续集成</p><p>持续集成：编写代码时，完成了一个功能后，立即提交代码到Git仓库中，将项目重新的构建并且测试。</p><ul><li>快速发现错误。</li><li>防止代码偏离主分支。</li></ul></blockquote><h4 id="11-3-搭建Gitlab服务器"><a href="#11-3-搭建Gitlab服务器" class="headerlink" title="11.3 搭建Gitlab服务器"></a>11.3 搭建Gitlab服务器</h4><blockquote><p>实现CI，需要使用到Gitlab远程仓库，先通过Docker搭建Gitlab</p></blockquote><h5 id="11-3-1-准备工作"><a href="#11-3-1-准备工作" class="headerlink" title="11.3.1 准备工作"></a>11.3.1 准备工作</h5><blockquote><ul><li>创建一个全新的虚拟机，并且至少指定4G的运行内存，4G运行内存是Gitlab推荐的内存大小。</li><li>并且安装Docker以及Docker-Compose</li></ul></blockquote><h5 id="11-3-2-修改ssh的22端口"><a href="#11-3-2-修改ssh的22端口" class="headerlink" title="11.3.2 修改ssh的22端口"></a>11.3.2 修改ssh的22端口</h5><blockquote><p>将ssh的默认22端口，修改为60022端口，因为Gitlab需要占用22端口</p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">vi</span> /etc/ssh/sshd_config<br>  <span class="hljs-attribute">PORT</span> <span class="hljs-number">22</span> -&gt; <span class="hljs-number">60022</span><br><span class="hljs-attribute">systemctl</span> restart sshd<br></code></pre></td></tr></table></figure><h5 id="11-3-3-编写docker-compose-yml"><a href="#11-3-3-编写docker-compose-yml" class="headerlink" title="11.3.3 编写docker-compose.yml"></a>11.3.3 编写docker-compose.yml</h5><blockquote><p>docker-compose.yml文件去安装gitlab（下载和运行的时间比较长的）</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.1&#x27;</span><br><span class="hljs-attr">services:</span><br> <span class="hljs-attr">gitlab:</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">&#x27;twang2218/gitlab-ce-zh:11.1.4&#x27;</span><br>  <span class="hljs-attr">container_name:</span> <span class="hljs-string">&quot;gitlab&quot;</span><br>  <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>  <span class="hljs-attr">privileged:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">hostname:</span> <span class="hljs-string">&#x27;gitlab&#x27;</span><br>  <span class="hljs-attr">environment:</span><br>   <span class="hljs-attr">TZ:</span> <span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span><br>   <span class="hljs-attr">GITLAB_OMNIBUS_CONFIG:</span> <span class="hljs-string">|</span><br><span class="hljs-string">    external_url &#x27;http://192.168.199.110&#x27;</span><br><span class="hljs-string">    gitlab_rails[&#x27;time_zone&#x27;] = &#x27;Asia/Shanghai&#x27;</span><br><span class="hljs-string">    gitlab_rails[&#x27;smtp_enable&#x27;] = true</span><br><span class="hljs-string">    gitlab_rails[&#x27;gitlab_shell_ssh_port&#x27;] = 22</span><br><span class="hljs-string"></span>  <span class="hljs-attr">ports:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;80:80&#x27;</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;443:443&#x27;</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;22:22&#x27;</span><br>  <span class="hljs-attr">volumes:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">/opt/docker_gitlab/config:/etc/gitlab</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">/opt/docker_gitlab/data:/var/opt/gitlab</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">/opt/docker_gitlab/logs:/var/log/gitlab</span><br></code></pre></td></tr></table></figure><h4 id="11-4-搭建GitlabRunner"><a href="#11-4-搭建GitlabRunner" class="headerlink" title="11.4 搭建GitlabRunner"></a>11.4 搭建GitlabRunner</h4><h5 id="11-4-1-配置私服信息"><a href="#11-4-1-配置私服信息" class="headerlink" title="11.4.1 配置私服信息"></a>11.4.1 配置私服信息</h5><blockquote><p>创建或修改&#x2F;etc&#x2F;docker&#x2F;daemon.json，并添加如下内容。</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;registry-mirrors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;https://registry.docker-cn.com&quot;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;insecure-registries&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;baseservice.qfjava.cn:60001&quot;</span> <br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>重启两个服务</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl daemon-reload<br>systemctl restart docker<br></code></pre></td></tr></table></figure><h5 id="11-4-2-添加docker-compose-yml文件"><a href="#11-4-2-添加docker-compose-yml文件" class="headerlink" title="11.4.2 添加docker-compose.yml文件"></a>11.4.2 添加docker-compose.yml文件</h5><blockquote><ul><li>创建工作目录 &#x2F;opt&#x2F;docker_gitlab-runner</li><li>在 &#x2F;opt&#x2F;docker_gitlab-runner添加docker-compose.yml文件</li></ul></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.1&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">gitlab-runner:</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">environment</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">gitlab-runner</span><br>    <span class="hljs-attr">privileged:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./config:/etc/gitlab-runner</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/var/run/docker.sock:/var/run/docker.sock</span><br></code></pre></td></tr></table></figure><h5 id="11-4-3-在yml文件目录添加环境目录"><a href="#11-4-3-在yml文件目录添加环境目录" class="headerlink" title="11.4.3 在yml文件目录添加环境目录"></a>11.4.3 在yml文件目录添加环境目录</h5><blockquote><p>创建environment目录，在目录中逐个添加各个配置及软件</p></blockquote><blockquote><p>Dockerfile</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs awk">FROM baseservice.qfjava.cn:<span class="hljs-number">60001</span>/gitlab-runner:bleeding<br><span class="hljs-comment"># 修改软件源</span><br>RUN echo <span class="hljs-string">&#x27;deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse&#x27;</span> &gt; <span class="hljs-regexp">/etc/</span>apt/sources.list &amp;&amp; \<br>    echo <span class="hljs-string">&#x27;deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/</span>apt/sources.list &amp;&amp; \<br>    echo <span class="hljs-string">&#x27;deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/</span>apt/sources.list &amp;&amp; \<br>    echo <span class="hljs-string">&#x27;deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/</span>apt/sources.list &amp;&amp; \<br>    <span class="hljs-comment">#下面的地址需要根据实际情况变化</span><br>    wget https:<span class="hljs-regexp">//</span>http.kali.org<span class="hljs-regexp">/kali/</span>pool<span class="hljs-regexp">/main/</span>k<span class="hljs-regexp">/kali-archive-keyring/</span>kali-archive-keyring_2018.<span class="hljs-number">2</span>_all.deb --no-check-certificate &amp;&amp; \<br>    apt install -y ./kali-archive-keyring_2018.<span class="hljs-number">2</span>_all.deb &amp;&amp; \<br>    apt-get update -y &amp;&amp; \<br>    apt install -y  gnupg  &amp;&amp; \<br>    apt-get clean<br><br><span class="hljs-comment"># 安装 Docker</span><br>RUN curl -fsSL http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/ubuntu/g</span>pg | apt-key add - &amp;&amp; \<br>    apt-get install -y python-software-properties software-properties-common &amp;&amp; \<br>    echo <span class="hljs-string">&#x27;deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/</span>apt<span class="hljs-regexp">/sources.list.d/</span>docker.list &amp;&amp; \<br>    apt-get update -y &amp;&amp; \<br>    apt-get install -y docker-ce<br><br>COPY daemon.json <span class="hljs-regexp">/etc/</span>docker/daemon.json<br><br><span class="hljs-comment"># 安装 Docker Compose,因为下载不下来，所以我们本地上传一份docker-compose到environment目录</span><br>WORKDIR <span class="hljs-regexp">/usr/</span>local/bin<br><span class="hljs-comment">#RUN wget https://raw.githubusercontent.com/topsale/resources/master/docker/docker-compose</span><br>COPY docker-compose docker-compose<br>RUN chmod +x docker-compose<br><br><span class="hljs-comment"># 安装 Java</span><br>RUN mkdir -p <span class="hljs-regexp">/usr/</span>local/java<br>WORKDIR <span class="hljs-regexp">/usr/</span>local/java<br>COPY jdk-<span class="hljs-number">8</span>u231-linux-x64.tar.gz <span class="hljs-regexp">/usr/</span>local/java<br>RUN tar -zxvf jdk-<span class="hljs-number">8</span>u231-linux-x64.tar.gz &amp;&amp; \<br>    rm -fr jdk-<span class="hljs-number">8</span>u231-linux-x64.tar.gz<br><br><span class="hljs-comment"># 安装 Maven</span><br>RUN mkdir -p <span class="hljs-regexp">/usr/</span>local/maven<br>WORKDIR <span class="hljs-regexp">/usr/</span>local/maven<br><span class="hljs-comment"># RUN wget https://raw.githubusercontent.com/topsale/resources/master/maven/apache-maven-3.6.3-bin.tar.gz</span><br>COPY apache-maven-<span class="hljs-number">3.6</span>.<span class="hljs-number">3</span>-bin.tar.gz <span class="hljs-regexp">/usr/</span>local/maven<br>RUN tar -zxvf apache-maven-<span class="hljs-number">3.6</span>.<span class="hljs-number">3</span>-bin.tar.gz &amp;&amp; \<br>    rm -fr apache-maven-<span class="hljs-number">3.6</span>.<span class="hljs-number">3</span>-bin.tar.gz<br><span class="hljs-comment">#需要配置maven 私服的话,不需要就加#注释掉</span><br><span class="hljs-comment">#COPY settings.xml /usr/local/maven/apache-maven-3.6.3/conf/settings.xml</span><br><br><br><br><span class="hljs-comment"># 配置环境变量</span><br>ENV JAVA_HOME <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/java/</span>jdk1.<span class="hljs-number">8.0</span>_231<br>ENV MAVEN_HOME <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/maven/</span>apache-maven-<span class="hljs-number">3.6</span>.<span class="hljs-number">3</span><br>ENV PATH <span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$JAVA_HOME</span><span class="hljs-regexp">/bin:$MAVEN_HOME/</span>bin<br><br>WORKDIR /<br></code></pre></td></tr></table></figure><blockquote><p>daemon.json</p></blockquote><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<br>    <span class="hljs-string">&quot;https://registry.docker-cn.com&quot;</span><br>  ],<br>  <span class="hljs-string">&quot;insecure-registries&quot;</span>: [<br>    <span class="hljs-string">&quot;baseservice.qfjava.cn:60001&quot;</span> <br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>docker-compose可执行文件。</p></blockquote><blockquote><p><a href="">apache-maven-3.6.3-bin.tar.gz</a>，以及<a href="">jdk-8u231-linux-x64.tar.gz</a>压缩包文件。</p></blockquote><h5 id="11-4-4-设置Docker权限"><a href="#11-4-4-设置Docker权限" class="headerlink" title="11.4.4 设置Docker权限"></a>11.4.4 设置Docker权限</h5><blockquote><ul><li>在宿主机启动docker程序后先执行 <a href="">sudo chown root:root &#x2F;var&#x2F;run&#x2F;docker.sock</a>。</li><li>在<a href="">&#x2F;opt&#x2F;docker_gitlab-runner</a>目录中执行<a href="">docker-compose up -d –build</a>启动容器。</li><li>启动容器成功后，添加容器权限，保证容器可以使用宿主机的docker：<a href="">docker exec -it gitlab-runner usermod -aG root gitlab-runner</a></li></ul></blockquote><h5 id="11-4-5-注册Runner信息到gitlab"><a href="#11-4-5-注册Runner信息到gitlab" class="headerlink" title="11.4.5 注册Runner信息到gitlab"></a>11.4.5 注册Runner信息到gitlab</h5><blockquote><p>注册信息整个过程</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker <span class="hljs-built_in">exec</span> -it gitlab-runner gitlab-runner register<br><br><span class="hljs-comment"># 输入 GitLab 地址</span><br>Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):<br>http://192.168.199.109/  <span class="hljs-comment"># 根据gitlab地址添加</span><br><br><span class="hljs-comment"># 输入 GitLab Token</span><br>Please enter the gitlab-ci token <span class="hljs-keyword">for</span> this runner:<br>1Lxq_f1NRfCfeNbE5WRh<br><br><span class="hljs-comment"># 输入 Runner 的说明</span><br>Please enter the gitlab-ci description <span class="hljs-keyword">for</span> this runner:<br>可以为空<br><br><span class="hljs-comment"># 设置 Tag，可以用于指定在构建规定的 tag 时触发 ci</span><br>Please enter the gitlab-ci tags <span class="hljs-keyword">for</span> this runner (comma separated):<br>deploy<br><br><span class="hljs-comment"># 这里选择 true ，可以用于代码上传后直接执行（根据版本，也会没有次选项）</span><br>Whether to run untagged builds [<span class="hljs-literal">true</span>/false]:<br><span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 这里选择 false，可以直接回车，默认为 false（根据版本，也会没有次选项）</span><br>Whether to lock Runner to current project [<span class="hljs-literal">true</span>/false]:<br><span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 选择 runner 执行器，这里我们选择的是 shell</span><br>Please enter the executor: virtualbox, docker+machine, parallels, shell, ssh, docker-ssh+machine, kubernetes, docker, docker-ssh:<br>shell<br></code></pre></td></tr></table></figure><h4 id="11-5-整合项目入门测试"><a href="#11-5-整合项目入门测试" class="headerlink" title="11.5 整合项目入门测试"></a>11.5 整合项目入门测试</h4><h5 id="11-5-1-创建项目"><a href="#11-5-1-创建项目" class="headerlink" title="11.5.1 创建项目"></a>11.5.1 创建项目</h5><blockquote><p>创建maven工程，添加web.xml文件，编写html页面</p></blockquote><h5 id="11-5-2-编写-gitlab-ci-yml"><a href="#11-5-2-编写-gitlab-ci-yml" class="headerlink" title="11.5.2 编写.gitlab-ci.yml"></a>11.5.2 编写.gitlab-ci.yml</h5><blockquote><p>编写<a href="">.gitlab-ci.yml</a>文件</p></blockquote><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs subunit">stages:<br>  - test<br><br><span class="hljs-keyword">test:</span><br><span class="hljs-keyword">  </span>stage: test<br>  script:<br>    - echo first test ci   # 测试回声命令，测试效果<br></code></pre></td></tr></table></figure><h5 id="11-5-3-将maven工程推送到gitlab中"><a href="#11-5-3-将maven工程推送到gitlab中" class="headerlink" title="11.5.3 将maven工程推送到gitlab中"></a>11.5.3 将maven工程推送到gitlab中</h5><blockquote><p>执行git命令推送到Gitlab</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git push origin master<br></code></pre></td></tr></table></figure><h5 id="11-5-4-查看效果"><a href="#11-5-4-查看效果" class="headerlink" title="11.5.4 查看效果"></a>11.5.4 查看效果</h5><blockquote><p>可以在gitlab中查看到gitlab-ci.yml编写的内容</p></blockquote><table><thead><tr><th align="center">效果图</th></tr></thead><tbody><tr><td align="center"><img src="http://qgw3wcroi.hn-bkt.clouddn.com/1588671760385.png" alt="1588671760385"></td></tr></tbody></table><h4 id="11-6-完善项目配置"><a href="#11-6-完善项目配置" class="headerlink" title="11.6 完善项目配置"></a>11.6 完善项目配置</h4><blockquote><p>添加Dockerfile以及docker-compose.yml， 并修改<a href="">.gitlab-ci.yml</a>文件</p></blockquote><h5 id="11-6-1-创建Dockerfile"><a href="#11-6-1-创建Dockerfile" class="headerlink" title="11.6.1 创建Dockerfile"></a>11.6.1 创建Dockerfile</h5><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle"># Dockerfile<br><span class="hljs-keyword">FROM</span> daocloud.io<span class="hljs-regexp">/library/</span>tomcat:<span class="hljs-number">8.5</span>.<span class="hljs-number">15</span>-jre8<br><span class="hljs-keyword">COPY</span> testci.war <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/tomcat/</span>webapps<br></code></pre></td></tr></table></figure><h5 id="11-6-2-创建docker-compose-yml"><a href="#11-6-2-创建docker-compose-yml" class="headerlink" title="11.6.2 创建docker-compose.yml"></a>11.6.2 创建docker-compose.yml</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># docker-compose.yml</span><br><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.1&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">testci:</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">docker</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">testci</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">8080</span><span class="hljs-string">:8080</span><br></code></pre></td></tr></table></figure><h5 id="11-6-3-修改-gitlab-ci-yml"><a href="#11-6-3-修改-gitlab-ci-yml" class="headerlink" title="11.6.3 修改.gitlab-ci.yml"></a>11.6.3 修改.gitlab-ci.yml</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ci.yml</span><br>stages:<br>  - <span class="hljs-built_in">test</span><br><br><span class="hljs-built_in">test</span>:<br>  stage: <span class="hljs-built_in">test</span><br>  script:<br>    - <span class="hljs-built_in">echo</span> first <span class="hljs-built_in">test</span> ci<br>    - /usr/local/maven/apache-maven-3.6.3/bin/mvn package<br>    - <span class="hljs-built_in">cp</span> target/testci-1.0-SNAPSHOT.war docker/testci.war<br>    - docker-compose down<br>    - docker-compose up -d --build<br>    - docker rmi $(docker images -qf dangling=<span class="hljs-literal">true</span>)<br></code></pre></td></tr></table></figure><h5 id="11-6-4-测试"><a href="#11-6-4-测试" class="headerlink" title="11.6.4 测试"></a>11.6.4 测试</h5><table><thead><tr><th align="center">测试效果</th></tr></thead><tbody><tr><td align="center"><img src="http://qgw3wcroi.hn-bkt.clouddn.com/1588674040060.png" alt="1588674040060"></td></tr></tbody></table><h4 id="11-7-CD介绍"><a href="#11-7-CD介绍" class="headerlink" title="11.7 CD介绍"></a>11.7 CD介绍</h4><blockquote><p>CD（持续交付，持续部署）</p><p>持续交付：将代码交付给专业的测试团队去测试</p><p>持续部署：可以直接将指定好tag的代码直接部署到生产环境中</p></blockquote><table><thead><tr><th align="center">CICD图</th></tr></thead><tbody><tr><td align="center"><img src="http://qgw3wcroi.hn-bkt.clouddn.com/1588677492583.png" alt="1588677492583"></td></tr></tbody></table><h4 id="11-8-安装Jenkins"><a href="#11-8-安装Jenkins" class="headerlink" title="11.8 安装Jenkins"></a>11.8 安装Jenkins</h4><h5 id="11-8-1-编写docker-compose-yml"><a href="#11-8-1-编写docker-compose-yml" class="headerlink" title="11.8.1 编写docker-compose.yml"></a>11.8.1 编写docker-compose.yml</h5><blockquote><p>官网：<a href="https://www.jenkins.io/">https://www.jenkins.io/</a></p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.1&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">jenkins:</span><br>   <span class="hljs-attr">image:</span> <span class="hljs-string">jenkins/jenkins</span><br>   <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>   <span class="hljs-attr">container_name:</span> <span class="hljs-string">jenkins</span><br>   <span class="hljs-attr">ports:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-number">8888</span><span class="hljs-string">:8080</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-number">50000</span><span class="hljs-string">:50000</span><br>   <span class="hljs-attr">volumes:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">./data:/var/jenkins_home</span><br></code></pre></td></tr></table></figure><h5 id="11-8-2-运行并访问Jenkins"><a href="#11-8-2-运行并访问Jenkins" class="headerlink" title="11.8.2 运行并访问Jenkins"></a>11.8.2 运行并访问Jenkins</h5><blockquote><p>第一次运行时，会因为data目录没有权限，导致启动失败</p></blockquote><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">chmod</span> <span class="hljs-number">777</span> <span class="hljs-class"><span class="hljs-keyword">data</span></span><br></code></pre></td></tr></table></figure><blockquote><p>访问<a href="http://192.168.199.109:8888/">http://192.168.199.109:8888</a></p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">访问速度奇慢无比。。。。。<br></code></pre></td></tr></table></figure><blockquote><p>访问成功后，需要输入密码，可在日志中查看</p></blockquote><table><thead><tr><th>查看日志,以及Jenkins页面</th></tr></thead><tbody><tr><td><img src="http://qgw3wcroi.hn-bkt.clouddn.com/image-20200708232643961.png" alt="image-20200708232643961"></td></tr><tr><td><img src="http://qgw3wcroi.hn-bkt.clouddn.com/image-20200708232614918.png" alt="image-20200708232614918"></td></tr></tbody></table><table><thead><tr><th align="center">选择安装插件方式</th></tr></thead><tbody><tr><td align="center">手动选择插件.</td></tr></tbody></table><blockquote><p>查看需要实现安装<a href="">Publish Over SSH</a> 以及 <a href="">Git Parameter</a></p></blockquote><table><thead><tr><th align="center">安装插件</th></tr></thead><tbody><tr><td align="center"><img src="http://qgw3wcroi.hn-bkt.clouddn.com/image-20200708232754318.png" alt="image-20200708232754318"></td></tr><tr><td align="center"><img src="http://qgw3wcroi.hn-bkt.clouddn.com/image-20200708232800931.png" alt="image-20200708232800931"></td></tr></tbody></table><blockquote><p>安装成功后，需要指定上用户名和密码等信息</p></blockquote><table><thead><tr><th align="center">指定用户名密码信息</th></tr></thead><tbody><tr><td align="center"><img src="http://qgw3wcroi.hn-bkt.clouddn.com/image-20200708232842803.png" alt="image-20200708232842803"></td></tr><tr><td align="center"><img src="http://qgw3wcroi.hn-bkt.clouddn.com/image-20200708232910197.png" alt="image-20200708232910197"></td></tr><tr><td align="center"><img src="http://qgw3wcroi.hn-bkt.clouddn.com/image-20200708232922638.png" alt="image-20200708232922638"></td></tr></tbody></table><blockquote><p>登陆成功</p></blockquote><table><thead><tr><th align="center">登录成功</th></tr></thead><tbody><tr><td align="center"><img src="http://qgw3wcroi.hn-bkt.clouddn.com/1588681196639.png" alt="1588681196639"></td></tr></tbody></table><blockquote><p>登录成功后,还需要单独安装<a href="">Persistent Parameter</a>插件</p></blockquote><table><thead><tr><th align="center">安装方式及安装成功图</th></tr></thead><tbody><tr><td align="center"><img src="http://qgw3wcroi.hn-bkt.clouddn.com/image-20200708233023116.png" alt="image-20200708233023116"></td></tr><tr><td align="center"><img src="http://qgw3wcroi.hn-bkt.clouddn.com/image-20200708233031967.png" alt="image-20200708233031967"></td></tr></tbody></table><h4 id="11-9-配置Jenkins的目标服务器"><a href="#11-9-配置Jenkins的目标服务器" class="headerlink" title="11.9 配置Jenkins的目标服务器"></a>11.9 配置Jenkins的目标服务器</h4><blockquote><p>执行过程：代码提交到Gitlab，Jenkins会从Gitlab中拉取代码，并在Jenkins中打包并发布到目标服务器中。</p></blockquote><h5 id="11-9-1-点击左侧的系统设置"><a href="#11-9-1-点击左侧的系统设置" class="headerlink" title="11.9.1 点击左侧的系统设置"></a>11.9.1 点击左侧的系统设置</h5><table><thead><tr><th align="center">左侧导航</th></tr></thead><tbody><tr><td align="center"><img src="http://qgw3wcroi.hn-bkt.clouddn.com/1588681954779.png" alt="1588681954779"></td></tr></tbody></table><h5 id="11-9-2-选中中间区域的系统设置"><a href="#11-9-2-选中中间区域的系统设置" class="headerlink" title="11.9.2 选中中间区域的系统设置"></a>11.9.2 选中中间区域的系统设置</h5><table><thead><tr><th align="center">系统设置</th></tr></thead><tbody><tr><td align="center"><img src="http://qgw3wcroi.hn-bkt.clouddn.com/1588681970621.png" alt="1588681970621"></td></tr></tbody></table><h5 id="11-9-3-搜索Publish-over-SSH"><a href="#11-9-3-搜索Publish-over-SSH" class="headerlink" title="11.9.3 搜索Publish over SSH"></a>11.9.3 搜索Publish over SSH</h5><table><thead><tr><th align="center">Publish over SSH</th></tr></thead><tbody><tr><td align="center"><img src="http://qgw3wcroi.hn-bkt.clouddn.com/1588682011820.png" alt="1588682011820"></td></tr></tbody></table><h5 id="11-9-4-点击上图新增"><a href="#11-9-4-点击上图新增" class="headerlink" title="11.9.4 点击上图新增"></a>11.9.4 点击上图新增</h5><table><thead><tr><th>新增SSH连接</th></tr></thead><tbody><tr><td><img src="http://qgw3wcroi.hn-bkt.clouddn.com/1588682092002.png" alt="1588682092002"></td></tr></tbody></table><h4 id="11-10-配置GitLab免密码登录"><a href="#11-10-配置GitLab免密码登录" class="headerlink" title="11.10 配置GitLab免密码登录"></a>11.10 配置GitLab免密码登录</h4><blockquote><p>链接Gitlab需要使用密码，我们可以通过SSH的方式，免密码登陆Gitlab拉取代码，避免每次都输入密码。</p></blockquote><h5 id="11-10-1登录Jenkins容器内部"><a href="#11-10-1登录Jenkins容器内部" class="headerlink" title="11.10.1登录Jenkins容器内部"></a>11.10.1登录Jenkins容器内部</h5><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker exec -<span class="hljs-keyword">it</span> jenkins bash<br></code></pre></td></tr></table></figure><h5 id="11-10-2-输入生成SSH秘钥命令"><a href="#11-10-2-输入生成SSH秘钥命令" class="headerlink" title="11.10.2 输入生成SSH秘钥命令"></a>11.10.2 输入生成SSH秘钥命令</h5><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;邮箱（随便写）&quot;</span><br></code></pre></td></tr></table></figure><h5 id="11-10-3将秘钥复制到GitLab的SSH中"><a href="#11-10-3将秘钥复制到GitLab的SSH中" class="headerlink" title="11.10.3将秘钥复制到GitLab的SSH中"></a>11.10.3将秘钥复制到GitLab的SSH中</h5><table><thead><tr><th align="center">配置密钥</th></tr></thead><tbody><tr><td align="center"><img src="http://qgw3wcroi.hn-bkt.clouddn.com/1588683585249.png" alt="1588683585249"></td></tr></tbody></table><h4 id="11-11-配置JDK和Maven"><a href="#11-11-配置JDK和Maven" class="headerlink" title="11.11 配置JDK和Maven"></a>11.11 配置JDK和Maven</h4><blockquote><p>我们需要再Jenkins中将代码打包，需要依赖JDK和Maven的环境</p></blockquote><h5 id="11-11-1-复制软件到data目录下"><a href="#11-11-1-复制软件到data目录下" class="headerlink" title="11.11.1 复制软件到data目录下"></a>11.11.1 复制软件到data目录下</h5><table><thead><tr><th align="center">效果</th></tr></thead><tbody><tr><td align="center"><img src="http://qgw3wcroi.hn-bkt.clouddn.com/1588684490466.png" alt="1588684490466"></td></tr></tbody></table><h5 id="11-11-2-在监控界面中配置JDK和Maven"><a href="#11-11-2-在监控界面中配置JDK和Maven" class="headerlink" title="11.11.2 在监控界面中配置JDK和Maven"></a>11.11.2 在监控界面中配置JDK和Maven</h5><table><thead><tr><th align="center">配置环境变量</th></tr></thead><tbody><tr><td align="center"><img src="http://qgw3wcroi.hn-bkt.clouddn.com/1588684458028.png" alt="1588684458028"></td></tr></tbody></table><h5 id="11-11-3-手动拉取gitlab项目"><a href="#11-11-3-手动拉取gitlab项目" class="headerlink" title="11.11.3 手动拉取gitlab项目"></a>11.11.3 手动拉取gitlab项目</h5><blockquote><p> 使用SSH无密码连接时，第一次连接需要手动确定</p></blockquote><table><thead><tr><th align="center">手动拉取一次</th></tr></thead><tbody><tr><td align="center"><img src="http://qgw3wcroi.hn-bkt.clouddn.com/1588685220324.png" alt="1588685220324"></td></tr></tbody></table><h4 id="11-12-创建maven任务"><a href="#11-12-创建maven任务" class="headerlink" title="11.12 创建maven任务"></a>11.12 创建maven任务</h4><blockquote><p>实现通过Jenkins的Maven任务，自动去Gitlab拉取代码，并在本地打包，发布到目标服务器上</p></blockquote><h5 id="11-12-1-创建maven工程，推送到GitLab中"><a href="#11-12-1-创建maven工程，推送到GitLab中" class="headerlink" title="11.12.1 创建maven工程，推送到GitLab中"></a>11.12.1 创建maven工程，推送到GitLab中</h5><blockquote><p>随便创建一个即可……</p></blockquote><h5 id="11-12-2-Jenkins的监控页面中创建maven任务"><a href="#11-12-2-Jenkins的监控页面中创建maven任务" class="headerlink" title="11.12.2 Jenkins的监控页面中创建maven任务"></a>11.12.2 Jenkins的监控页面中创建maven任务</h5><table><thead><tr><th align="center">指定GitLab地址</th></tr></thead><tbody><tr><td align="center"><img src="http://qgw3wcroi.hn-bkt.clouddn.com/1588686481506.png" alt="1588686481506"></td></tr></tbody></table><table><thead><tr><th align="center">指定maven打包方式</th></tr></thead><tbody><tr><td align="center"><img src="http://qgw3wcroi.hn-bkt.clouddn.com/1588686489821.png" alt="1588686489821"></td></tr></tbody></table><h5 id="11-12-3-执行maven任务"><a href="#11-12-3-执行maven任务" class="headerlink" title="11.12.3 执行maven任务"></a>11.12.3 执行maven任务</h5><table><thead><tr><th align="center">立即构建，并查看日志</th></tr></thead><tbody><tr><td align="center"><img src="http://qgw3wcroi.hn-bkt.clouddn.com/1588686591351.png" alt="1588686591351"></td></tr></tbody></table><table><thead><tr><th align="center">控制台查看日志信息</th></tr></thead><tbody><tr><td align="center"><img src="http://qgw3wcroi.hn-bkt.clouddn.com/1588686553880.png" alt="1588686553880"></td></tr></tbody></table><h5 id="11-12-4-最终效果"><a href="#11-12-4-最终效果" class="headerlink" title="11.12.4 最终效果"></a>11.12.4 最终效果</h5><table><thead><tr><th align="center">打包成功</th></tr></thead><tbody><tr><td align="center"><img src="http://qgw3wcroi.hn-bkt.clouddn.com/1588687382594.png" alt="1588687382594"></td></tr></tbody></table><h4 id="11-13-实现持续交付持续部署"><a href="#11-13-实现持续交付持续部署" class="headerlink" title="11.13 实现持续交付持续部署"></a>11.13 实现持续交付持续部署</h4><blockquote><p>实现根据tag标签，实现持续交付和持续部署</p></blockquote><h5 id="11-13-1-安装Persistent-Parameter的插件"><a href="#11-13-1-安装Persistent-Parameter的插件" class="headerlink" title="11.13.1 安装Persistent Parameter的插件"></a>11.13.1 安装Persistent Parameter的插件</h5><table><thead><tr><th align="center">安装插件</th></tr></thead><tbody><tr><td align="center"><img src="http://qgw3wcroi.hn-bkt.clouddn.com/1588693533099.png" alt="1588693533099"></td></tr></tbody></table><h5 id="11-13-2-重新指定构建项目的方式"><a href="#11-13-2-重新指定构建项目的方式" class="headerlink" title="11.13.2 重新指定构建项目的方式"></a>11.13.2 重新指定构建项目的方式</h5><table><thead><tr><th align="center">根据标签构建项目</th></tr></thead><tbody><tr><td align="center"><img src="http://qgw3wcroi.hn-bkt.clouddn.com/1588696879059.png" alt="1588696879059"></td></tr></tbody></table><table><thead><tr><th align="center">自定义构建</th></tr></thead><tbody><tr><td align="center"><img src="http://qgw3wcroi.hn-bkt.clouddn.com/1588697752850.png" alt="1588697752850"></td></tr></tbody></table><h5 id="11-13-3-构建项目成功后，需要将内容发布到目标服务器"><a href="#11-13-3-构建项目成功后，需要将内容发布到目标服务器" class="headerlink" title="11.13.3 构建项目成功后，需要将内容发布到目标服务器"></a>11.13.3 构建项目成功后，需要将内容发布到目标服务器</h5><table><thead><tr><th align="center">发布服务器后执行的命令</th></tr></thead><tbody><tr><td align="center"><img src="http://qgw3wcroi.hn-bkt.clouddn.com/1588697770621.png" alt="1588697770621"></td></tr></tbody></table><h5 id="11-13-4-添加程序代码"><a href="#11-13-4-添加程序代码" class="headerlink" title="11.13.4 添加程序代码"></a>11.13.4 添加程序代码</h5><blockquote><p>指定目标服务器的Dockerfile以及docker-compose.yml文件。</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Dockerfile 文件</span><br><span class="hljs-string">FROM</span> <span class="hljs-string">daocloud.io/library/tomcat:8.5.15-jre8</span><br><span class="hljs-string">COPY</span> <span class="hljs-string">testcd-1.0-SNAPSHOT.war</span> <span class="hljs-string">/usr/local/tomcat/webapps</span><br><br><span class="hljs-comment"># docker-compose.yml文件</span><br><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.1&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">testcd:</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">docker</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">testcd</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">8081</span><span class="hljs-string">:8080</span><br></code></pre></td></tr></table></figure><h5 id="11-13-5-测试"><a href="#11-13-5-测试" class="headerlink" title="11.13.5 测试"></a>11.13.5 测试</h5><blockquote><p>在Jenkins中指定Tag后，Jenkins会从Gitlab拉取指定版本分支，并打包推送到目标服务器。</p></blockquote><table><thead><tr><th align="center">根据标签修改发布版本</th></tr></thead><tbody><tr><td align="center"><img src="http://qgw3wcroi.hn-bkt.clouddn.com/1588700462690.png" alt="1588700462690"></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Wow 插件开发-清理背包插件</title>
    <link href="/2020/07/24/2020%E2%80%9307-24-Wow%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    <url>/2020/07/24/2020%E2%80%9307-24-Wow%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<p><video src="http://qgw3wcroi.hn-bkt.clouddn.com/7mQ5-4zp4XoZ6kT3cSku-ig.gif.mp4" controls="controls"></video></p><p>在对话框中输入 “&#x2F;delete [轻弹丸]” 回车即可删除轻弹丸,有了这个就可以方便的删除掉背包的任意垃圾</p><h3 id="1-安装IDE"><a href="#1-安装IDE" class="headerlink" title="1.安装IDE"></a>1.安装IDE</h3><p>编辑器这里我推荐用sublime，因为它可以装格式化lua 代码插件，而且高亮显示关键字。如果你喜欢用Notepad++,Vscode，Editplus也无所谓，选择一个自己喜欢的。</p><p>Sublime3 [<a href="http://www.sublimetext.com/3]">http://www.sublimetext.com/3]</a></p><h3 id="2-编写Plugin"><a href="#2-编写Plugin" class="headerlink" title="2.编写Plugin"></a>2.编写Plugin</h3><p>打开Sublime 3 </p><p>执行：File -&gt; Open Folder ，选择WOW插件目录\World of Warcraft_classic_\Interface\AddOns</p><p>打开目录以后,创建一个MyDelete的目录，并在目录下创建两个文件MyDelete.toc和MyDelete.lua。</p><p>下面我们开始写代码,用的语言是Lua</p><p>第一个MyDelete.toc中包含了我们的插件描述信息，其中包含标题、作者、版本号、备注、lua脚本连接等，具体代码如下：</p><p>MyDelete.toc</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs clean">## Interface: <span class="hljs-number">32999</span><br>## Title: MyDelete<br>## Author: zyh<br>## Version: <span class="hljs-number">0.1</span><br>## Notes: 自动清理背包<br>## DefaultState: Enabled<br>## LoadOnDemand: <span class="hljs-number">0</span><br>## SavedVariables:<br>MyDelete.lua<br></code></pre></td></tr></table></figure><p>第二个MyDelete.lua 中包含了我们的核心代码部分，核心思想如下:</p><ul><li>Drop函数，注册&#x2F;delete 指令</li><li>DeleteItemAction函数，是&#x2F;delete 指令触发的函数，其核心思路是：遍历背包中的所有solt(槽)，匹配待删除物品，检测到物品以后使用PickupContainerItem和DeleteCursorItem两个API来丢弃物品</li><li>GetItemName函数，获取 Item Hyperlink (物品超链接)中的Item Name (物品名称)，这边Item Name和Item Hyperlink是两个概念。</li></ul><p>MyDelete.lua</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> <span class="hljs-constructor">Drop()</span><br><br>    SlashCmdList<span class="hljs-literal">[&quot;D<span class="hljs-identifier">eleteItem</span>&quot;]</span> = DeleteItemAction<br>    SLASH_DeleteItem1 = <span class="hljs-string">&quot;/delete&quot;</span><br>    print(<span class="hljs-string">&quot;MyDelete load finish&quot;</span>)<br><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-constructor">GetItemName(<span class="hljs-params">item</span>)</span><br><br>    itemName, itemLink, itemRarity, itemLevel, itemMinLevel, itemType, itemSubType, itemStackCount, itemEquipLoc, itemIcon, <br>    itemSellPrice, itemClassID, itemSubClassID, bindType, expacID, itemSetID, isCraftingReagent = <span class="hljs-constructor">GetItemInfo(<span class="hljs-params">item</span>)</span><br>    <br>    return itemName<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-constructor">DeleteItemAction(<span class="hljs-params">item</span>)</span><br>    <span class="hljs-keyword">if</span> item<span class="hljs-operator"> == </span><span class="hljs-string">&quot;&quot;</span> <span class="hljs-keyword">then</span> return <span class="hljs-keyword">end</span><br><br>    name = <span class="hljs-constructor">GetItemName(<span class="hljs-params">item</span>)</span><br>    <span class="hljs-keyword">for</span> b = <span class="hljs-number">0</span>, <span class="hljs-number">4</span> <span class="hljs-keyword">do</span><br>        p = <span class="hljs-constructor">GetContainerNumSlots(<span class="hljs-params">b</span>)</span><br>        <span class="hljs-keyword">for</span> i = <span class="hljs-number">1</span>, p <span class="hljs-keyword">do</span><br>            e = <span class="hljs-constructor">GetContainerItemLink(<span class="hljs-params">b</span>, <span class="hljs-params">i</span>)</span><br>            <span class="hljs-keyword">if</span> e <span class="hljs-keyword">and</span> <span class="hljs-built_in">string</span>.find(e, name) <span class="hljs-keyword">then</span><br>                <span class="hljs-constructor">PickupContainerItem(<span class="hljs-params">b</span>, <span class="hljs-params">i</span>)</span>;<br>                <span class="hljs-constructor">DeleteCursorItem()</span>;<br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br>local frame = <span class="hljs-constructor">CreateFrame(<span class="hljs-string">&quot;Frame&quot;</span>, <span class="hljs-params">nil</span>, UIParent)</span>;<br>frame:<span class="hljs-constructor">RegisterEvent(<span class="hljs-string">&quot;VARIABLES_LOADED&quot;</span>)</span>;<br>frame:<span class="hljs-constructor">SetScript(<span class="hljs-string">&quot;OnEvent&quot;</span>, Drop)</span>;<br></code></pre></td></tr></table></figure><p>将两个核心文件放到AddOns&#x2F;MyDelete目录下，重启WOW。进入游戏以后，先看一下“综合”频道有没有打出“MyDelete load finish”等字样，如果有，则插件已经生效。</p><p>如果你是粘贴的我的代码，你应该已经看到了“MyDelete load finish”</p><h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h3><p>下面我们来删除一些东西测试一下，<font color="red">请在操作之前务必用自己的小号或者腾空自己的背包</font>，不然删掉一些重要物品就玩大了。</p><p>到商店卖一些轻弹丸和重弹丸，或者找点便宜的道具。 输入<code>/delete</code> 在后面跟上轻弹丸的超链接(shift + 鼠标左键)，然后回车查看效果</p><h3 id="4-其他"><a href="#4-其他" class="headerlink" title="4.其他"></a>4.其他</h3><p>下面附上wow api地址，想了解的看一下<br>:[<a href="http://wowprogramming.com/docs/api.html]">http://wowprogramming.com/docs/api.html]</a></p><p>想给Sublime安装格式化LUA代码工具，连接地址:[<a href="https://github.com/Koihik/LuaFormatter]">https://github.com/Koihik/LuaFormatter]</a></p><p>有朋友跟我反应不想用超链接删除物品，喜欢打字，其实也好改，只需要该DeleteItemAction函数即可，如下所示</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> <span class="hljs-constructor">DeleteItemAction(<span class="hljs-params">item</span>)</span><br><br>    <span class="hljs-keyword">if</span> item<span class="hljs-operator"> == </span><span class="hljs-string">&quot;&quot;</span> <span class="hljs-keyword">then</span> return <span class="hljs-keyword">end</span><br><br>    --name = <span class="hljs-constructor">GetItemName(<span class="hljs-params">item</span>)</span><br>    <span class="hljs-keyword">for</span> b = <span class="hljs-number">0</span>, <span class="hljs-number">4</span> <span class="hljs-keyword">do</span><br>        p = <span class="hljs-constructor">GetContainerNumSlots(<span class="hljs-params">b</span>)</span><br>        <span class="hljs-keyword">for</span> i = <span class="hljs-number">1</span>, p <span class="hljs-keyword">do</span><br>            e = <span class="hljs-constructor">GetContainerItemLink(<span class="hljs-params">b</span>, <span class="hljs-params">i</span>)</span><br>            <span class="hljs-keyword">if</span> e <span class="hljs-keyword">and</span> <span class="hljs-built_in">string</span>.find(e, item ) <span class="hljs-keyword">then</span><br>                <span class="hljs-constructor">PickupContainerItem(<span class="hljs-params">b</span>, <span class="hljs-params">i</span>)</span>;<br>                <span class="hljs-constructor">DeleteCursorItem()</span>;<br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>这样改好以后输入&#x2F;rl 重新加载，输入 “&#x2F;delete 轻弹丸 “查看效果</p><p>Tips：可以结合宏一起使用比如我这样</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">/<span class="hljs-keyword">delete</span> 加固的宝箱<br>/<span class="hljs-keyword">delete</span> 新鲜的大鱼<br>/<span class="hljs-keyword">delete</span> 巨型蚌壳<br>/<span class="hljs-keyword">delete</span> <span class="hljs-number">21</span>磅重的龙虾<br>/<span class="hljs-keyword">delete</span> <span class="hljs-number">12</span>磅重的龙虾<br>/<span class="hljs-keyword">delete</span> <span class="hljs-number">9</span>磅重的龙虾<br>/<span class="hljs-keyword">delete</span> <span class="hljs-number">7</span>磅重的龙虾<br></code></pre></td></tr></table></figure><p><a href="https://bbs.nga.cn/read.php?&amp;tid=22813671">https://bbs.nga.cn/read.php?&amp;tid=22813671</a></p>]]></content>
    
    
    <categories>
      
      <category>游戏开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Wow</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线性回归(最小二乘法)</title>
    <link href="/2020/02/08/2020-02-08-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92(%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E6%B3%95)/"/>
    <url>/2020/02/08/2020-02-08-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92(%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E6%B3%95)/</url>
    
    <content type="html"><![CDATA[<p>前面介绍过线性回归，并使用了R语言实现了训练模型，完成了通过水的沸点来估计海拔高度的预测。<a href="http://hoey.tk/2018/10/07/2018-10-07-%E4%B8%80%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90/">链接</a></p><p>R语言封装了最小二乘法的具体实现。我们在调用时对其内部细节感触并不是很深，下面使用python实现 最小二乘法，加深对模型训练的理解。</p><p>0.导入数据</p><p>我们还是用前面准备好的数据,保存成a.csv</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">194</span>.<span class="hljs-number">5</span>,<span class="hljs-number">131</span>.<span class="hljs-number">79</span><br><span class="hljs-attribute">194</span>.<span class="hljs-number">3</span>,<span class="hljs-number">131</span>.<span class="hljs-number">79</span><br><span class="hljs-attribute">197</span>.<span class="hljs-number">9</span>,<span class="hljs-number">135</span>.<span class="hljs-number">02</span><br><span class="hljs-attribute">198</span>.<span class="hljs-number">4</span>,<span class="hljs-number">135</span>.<span class="hljs-number">55</span><br><span class="hljs-attribute">199</span>.<span class="hljs-number">4</span>,<span class="hljs-number">136</span>.<span class="hljs-number">46</span><br><span class="hljs-attribute">199</span>.<span class="hljs-number">9</span>,<span class="hljs-number">136</span>.<span class="hljs-number">83</span><br><span class="hljs-attribute">200</span>.<span class="hljs-number">9</span>,<span class="hljs-number">137</span>.<span class="hljs-number">82</span><br><span class="hljs-attribute">201</span>.<span class="hljs-number">1</span>,<span class="hljs-number">138</span>.<span class="hljs-number">00</span><br><span class="hljs-attribute">201</span>.<span class="hljs-number">4</span>,<span class="hljs-number">138</span>.<span class="hljs-number">06</span><br><span class="hljs-attribute">201</span>.<span class="hljs-number">3</span>,<span class="hljs-number">138</span>.<span class="hljs-number">05</span><br><span class="hljs-attribute">203</span>.<span class="hljs-number">6</span>,<span class="hljs-number">140</span>.<span class="hljs-number">04</span><br><span class="hljs-attribute">204</span>.<span class="hljs-number">6</span>,<span class="hljs-number">142</span>.<span class="hljs-number">44</span><br><span class="hljs-attribute">209</span>.<span class="hljs-number">5</span>,<span class="hljs-number">145</span>.<span class="hljs-number">47</span><br><span class="hljs-attribute">208</span>.<span class="hljs-number">6</span>,<span class="hljs-number">144</span>.<span class="hljs-number">34</span><br><span class="hljs-attribute">210</span>.<span class="hljs-number">7</span>,<span class="hljs-number">146</span>.<span class="hljs-number">30</span><br><span class="hljs-attribute">211</span>.<span class="hljs-number">9</span>,<span class="hljs-number">147</span>.<span class="hljs-number">54</span><br><span class="hljs-attribute">212</span>.<span class="hljs-number">2</span>,<span class="hljs-number">147</span>.<span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><p>编写python的<code>numpy</code>和<code>matplotlib.pyplot</code>，读取a.csv并且画出所有点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>f = <span class="hljs-string">&#x27;/tmp/a.csv&#x27;</span><br>array = np.genfromtxt(f,delimiter=<span class="hljs-string">&#x27;,&#x27;</span>)<br><br>x = array[:,<span class="hljs-number">0</span>]<br>y = array[:,<span class="hljs-number">1</span>]<br><br>plt.scatter(x,y,c=<span class="hljs-string">&#x27;r&#x27;</span>)<br>plt.show<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/02/08/bGNWdanpXxow5Rl.png" alt="1.png"></p><p>1.实现算法</p><p>下面定义一个fit方法，实现模型训练。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 设函数为y=ax+b 求出a,b</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fit</span>(<span class="hljs-params">x,y</span>):<br>  sum_xy = <span class="hljs-number">0</span><br>  sum_x = <span class="hljs-number">0</span><br>  sum_y = <span class="hljs-number">0</span><br>  sum_x2 = <span class="hljs-number">0</span><br>  n = x.shape[<span class="hljs-number">0</span>]<br><br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    sum_xy += x[i]*y[i]<br>    sum_x += x[i]<br>    sum_y += y[i]<br>    sum_x2 += x[i] ** <span class="hljs-number">2</span><br><br>  a = ((sum_xy/n) - (sum_x/n) * (sum_y/n)) / ((sum_x2/n) - (sum_x/n) * (sum_x/n))<br>  b = (sum_y/n) - (a * (sum_x/n))<br>  <span class="hljs-keyword">return</span> a,b<br><br></code></pre></td></tr></table></figure><p>为了方便看误差，我们定义计算损失函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">compute</span>(<span class="hljs-params">a,b,points</span>):<br>  x = points[:,<span class="hljs-number">0</span>]<br>  y = points[:,<span class="hljs-number">1</span>]<br><br>  pred_y = a * x + b<br>  n = y.shape[<span class="hljs-number">0</span>]<br>  <br>  total = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    total += math.fabs(y[i] - pred_y[i])<br>  <br>  <span class="hljs-keyword">return</span> total<br></code></pre></td></tr></table></figure><p>2.测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 调用fit方法完成模型训练</span><br>a,b = fit(x,y)<br><span class="hljs-comment"># 计算模型 误差</span><br>cost = compute(a,b,array)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a is: &quot;</span>, a)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;b is: &quot;</span>, b)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;cost is: &quot;</span>, cost)<br><br><span class="hljs-comment"># 画散点图</span><br>plt.scatter(x,y,c=<span class="hljs-string">&#x27;r&#x27;</span>)<br><br><span class="hljs-comment"># 针对指定的x画出预测的Y，画直线</span><br>pred_y = a * x + b<br>plt.plot(x,pred_y,c=<span class="hljs-string">&#x27;b&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/02/08/cM7DljBuhHJVo8z.png" alt="2.png"></p><p>我们发现算出来的斜率是0.8954625247967952,截距是-42.130870767876615</p><p>与R已封装的包，算得的结果很接近，这也证明了写的代码没啥问题！</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>KNN</title>
    <link href="/2020/02/08/2020-02-18-k%E6%9C%80%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95/"/>
    <url>/2020/02/08/2020-02-18-k%E6%9C%80%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>KNN是监督学习中解决分类问题的一种算法，又叫 K-Nearest Neighbor也叫K近邻算法。</p><p>它的一个基本思路是：如果一个样本在特征空间中，K个最近邻的样本中的大多数属于某一类型，那么这个样本也划分为这个类型。我们可以结合下图（图源自WIKI）。来进一步了解一下它是如何对样本点进行分类的。</p><p><img src="https://i.loli.net/2020/02/18/b1tvMYDg9p6INJO.png" alt="330px-KnnClassification.svg.png"></p><p>在图示中有两种点，一种蓝色正方形，一种红色三角形，那么现在请问绿色的圆形点会被分到哪一类？</p><p>情况一： 假定，找3个(K)离圆点最近的点。是蓝色正方形的概率为1&#x2F;3；是红色三角形的概率为2&#x2F;3。那么该点就是红色三角形这一类。</p><p>情况二： 假定，找5个(K)离圆点最近的点。是蓝色正方形的概率为3&#x2F;5；是红色三角形的概率为2&#x2F;5，那么该点就是蓝色正方形这一类。</p><p>由此可见，KNN算法中的K对结果的影响还是蛮大的，因此在训练模型阶段要选取一个合适的K值。</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>1）计算测试数据和个样本数据之间的距离<br>2）按照距离的递增关系排序<br>3）选择距离最小的K个点<br>4）确定前K个点所在类别的出现频率<br>5）返回前K个点中出现频率最高的类别作为测试数据的预测分类</p><h4 id="代码实现步骤"><a href="#代码实现步骤" class="headerlink" title="代码实现步骤"></a>代码实现步骤</h4><h5 id="0-引入依赖"><a href="#0-引入依赖" class="headerlink" title="0.引入依赖"></a>0.引入依赖</h5><p>这里引入sklearn里的数据集iris，其中有iris.data（150个样本),iris.target（每个样本的分类）</p><p>这里引入skelearn里的train_test_split将iris数据 切分数据集为<code>训练集</code>和<code>测试集</code></p><p>为了判断最终预测结果的好坏，我们使用了sklearn里的accuracy_score函数，它可以方便的计算准确率</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-keyword">from</span> sklearn.datasets <span class="hljs-keyword">import</span> load_iris <br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> accuracy_score<br></code></pre></td></tr></table></figure><h5 id="1-数据加载和预处理"><a href="#1-数据加载和预处理" class="headerlink" title="1. 数据加载和预处理"></a>1. 数据加载和预处理</h5><p>加载数据集iris，使用pandas中的DataFrame绘制出表格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">iris = load_iris()<br><br>df = pd.DataFrame(data = iris.data, columns = iris.feature_names)<br>df[<span class="hljs-string">&#x27;class&#x27;</span>] = iris.target<br>df[<span class="hljs-string">&#x27;class&#x27;</span>] = df[<span class="hljs-string">&#x27;class&#x27;</span>].<span class="hljs-built_in">map</span>(&#123;<span class="hljs-number">0</span>: iris.target_names[<span class="hljs-number">0</span>], <span class="hljs-number">1</span>: iris.target_names[<span class="hljs-number">1</span>], <span class="hljs-number">2</span>: iris.target_names[<span class="hljs-number">2</span>]&#125;)<br>df.head(<span class="hljs-number">10</span>)<br>df.describe()<br></code></pre></td></tr></table></figure><p>下面划分<code>训练集</code>和<code>测试集</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># x为样本点</span><br>x = iris.data<br><span class="hljs-comment"># y为预测分类</span><br>y = iris.target.reshape(-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># 划分训练集和测试集</span><br>x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=<span class="hljs-number">0.3</span>, random_state=<span class="hljs-number">35</span>, stratify=y)<br><br><span class="hljs-built_in">print</span>(x_train.shape, y_train.shape)<br><span class="hljs-built_in">print</span>(x_test.shape, y_test.shape)<br></code></pre></td></tr></table></figure><h5 id="2-核心算法实现"><a href="#2-核心算法实现" class="headerlink" title="2. 核心算法实现"></a>2. 核心算法实现</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 曼哈顿距离</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">l1_distance</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">return</span> np.<span class="hljs-built_in">sum</span>(np.<span class="hljs-built_in">abs</span>(a-b), axis=<span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># 欧几里得距离</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">l2_distance</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">return</span> np.sqrt( np.<span class="hljs-built_in">sum</span>((a-b) ** <span class="hljs-number">2</span>, axis=<span class="hljs-number">1</span>) )<br><br><span class="hljs-comment"># 分类器实现</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">kNN</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-comment"># 定义一个初始化方法，__init__ 是类的构造方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, n_neighbors = <span class="hljs-number">1</span>, dist_func = l1_distance</span>):<br>        self.n_neighbors = n_neighbors<br>        self.dist_func = dist_func<br>    <br>    <span class="hljs-comment"># 训练模型方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fit</span>(<span class="hljs-params">self, x, y</span>):<br>        self.x_train = x<br>        self.y_train = y<br>    <br>    <span class="hljs-comment"># 模型预测方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">predict</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-comment"># 初始化预测分类数组</span><br>        y_pred = np.zeros( (x.shape[<span class="hljs-number">0</span>], <span class="hljs-number">1</span>), dtype=self.y_train.dtype )<br>        <br>        <span class="hljs-comment"># 遍历输入的x数据点，取出每一个数据点的序号i和数据x_test</span><br>        <span class="hljs-keyword">for</span> i, x_test <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(x):<br>            <span class="hljs-comment"># x_test跟所有训练数据计算距离</span><br>            distances = self.dist_func(self.x_train, x_test)<br>            <br>            <span class="hljs-comment"># 得到的距离按照由近到远排序，取出索引值</span><br>            nn_index = np.argsort(distances)<br>            <br>            <span class="hljs-comment"># 选取最近的k个点，保存它们对应的分类类别</span><br>            nn_y = self.y_train[ nn_index[:self.n_neighbors] ].ravel()<br>            <br>            <span class="hljs-comment"># 统计类别中出现频率最高的那个，赋给y_pred[i]</span><br>            y_pred[i] = np.argmax( np.bincount(nn_y) )<br>        <br>        <span class="hljs-keyword">return</span> y_pred<br><br></code></pre></td></tr></table></figure><h5 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义一个knn实例</span><br>knn = kNN()<br><span class="hljs-comment"># 训练模型</span><br>knn.fit(x_train, y_train)<br><br><span class="hljs-comment"># 保存结果list</span><br>result_list = []<br><br><span class="hljs-comment"># 针对不同的参数选取，做预测</span><br><span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]:<br>    knn.dist_func = l1_distance <span class="hljs-keyword">if</span> p == <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> l2_distance<br>    <br>    <span class="hljs-comment"># 考虑不同的k取值，步长为2</span><br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>):<br>        knn.n_neighbors = k<br>        <span class="hljs-comment"># 传入测试数据，做预测</span><br>        y_pred = knn.predict(x_test)<br>        <span class="hljs-comment"># 求出预测准确率</span><br>        accuracy = accuracy_score(y_test, y_pred)<br>        result_list.append([k, <span class="hljs-string">&#x27;l1_distance&#x27;</span> <span class="hljs-keyword">if</span> p == <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;l2_distance&#x27;</span>, accuracy])<br>df = pd.DataFrame(result_list, columns=[<span class="hljs-string">&#x27;k&#x27;</span>, <span class="hljs-string">&#x27;距离函数&#x27;</span>, <span class="hljs-string">&#x27;预测准确率&#x27;</span>])<br>df<br></code></pre></td></tr></table></figure><p>最终结果如下图所示：</p><p><img src="https://i.loli.net/2020/02/18/DUvoZNPylTkWz9H.png" alt="result.png"></p><p>选择欧几里得距离 K&#x3D;5,7,9和选择曼哈顿距离 k&#x3D;5 取得的效果最好！</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>K-Means</title>
    <link href="/2020/02/06/2020%E2%80%9302-06-K%E5%9D%87%E5%80%BC%E8%81%9A%E7%B1%BB/"/>
    <url>/2020/02/06/2020%E2%80%9302-06-K%E5%9D%87%E5%80%BC%E8%81%9A%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<p>机器学习三大类，监督学习、无监督学习和强化学习。K均值(K-Means)是无监督学习中的一种聚类算法，能有有效的将数据划分子类。</p><p><img src="https://i.loli.net/2020/02/06/pYcgJ8LtbiWRCBk.gif" alt="K-means_convergence.gif"></p><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><p>打开新浪新闻首页，可以发现“要闻”一栏展示了目前最热门的一组新闻。类似的还有google news等</p><p><img src="https://i.loli.net/2020/02/06/dbgT9k2hpSnvHY5.png" alt="xlxw.png"></p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>以二维数据为例，描述一下k-means的实现思路：</p><pre><code class="hljs">1. 在二维平面区域内n个样本点中，首先任意选取m个点，称其为质心点2. 对n个样本点和m个质心点求距离（欧式距离），找到每个样本点离得最近的质心点3. 更新m个质心点的位置，重复第2步</code></pre><p>以下图为例，描述详细的划分流程</p><p><img src="https://i.loli.net/2020/02/06/NRheVH1ZnaBLw4A.png" alt="6step.png"></p><pre><code class="hljs">1. 在平面内n个样本点中，选2个质心点标记好x，对应b)2. 分别对n个样本点和2个质心点求距离，找到每个样本点离得最近的质心点;对应图c)  3. 更新2个质心点的位置对应图d)4. 重复第2步，找到每个样本点离得最近的质心点;对应图e)5. 重复第2步，找到每个样本点离得最近的质心点;对应图f)</code></pre><p>下面使用Python语言实现模型训练和预测，其中会使用到 <code>numpy</code>、<code>matplotlib.pyplot</code>、<code>sklearn.datasets</code>、<code>scipy.spatial.distance</code>，不熟悉的童鞋自行先去补一下，看起来事半功倍！</p><h5 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h5><p>思路：使用<code>sklearn.datasets</code>提供的数据来训练出模型。然后使用训练出的模型进行预测并验证模型的正确性！</p><p>引入依赖</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-keyword">from</span> sklearn.datasets.samples_generator <span class="hljs-keyword">import</span> make_blobs<br></code></pre></td></tr></table></figure><p>初始化数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># x 是n个样本点</span><br><span class="hljs-comment"># y 是每个样本点对应的质心点</span><br>x, y = make_blobs(n_samples=<span class="hljs-number">100</span>, centers=<span class="hljs-number">6</span>, random_state=<span class="hljs-number">1234</span>, cluster_std=<span class="hljs-number">0.6</span>)<br><span class="hljs-comment">#print(x)</span><br><span class="hljs-comment">#print(y)</span><br></code></pre></td></tr></table></figure><p>为了方便观察，我们画出图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.figure(figsize=(<span class="hljs-number">6</span>,<span class="hljs-number">6</span>))<br>plt.scatter(x[:,<span class="hljs-number">0</span>],x[:,<span class="hljs-number">1</span>], c=y)<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/02/06/WlrCbpR1dzGgwLF.png" alt="csh.png"></p><p>编写核心k-means代码，封装一个类K_Means</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> scipy.spatial.distance <span class="hljs-keyword">import</span> cdist<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">K_Means</span>(<span class="hljs-title class_ inherited__">object</span>):<br><br><span class="hljs-comment"># 初始化，参数n_clusters(k), 迭代次数max_iter ,初始质心 centroids</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,n_cluster=<span class="hljs-number">6</span>,n_iters=<span class="hljs-number">300</span>,centeroids=[]</span>):<br>self.n_cluster = n_cluster<br>self.n_iters = n_iters<br>self.centeroids = centeroids<br><br><span class="hljs-comment"># 训练模型</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fit</span>(<span class="hljs-params">self,data</span>):<br><span class="hljs-comment"># 1. 计算每个样本点和样每个质心点欧式距离</span><br>distances = cdist(data,self.centeroids)<br><br><span class="hljs-comment"># 2. 将distances排序，找到最小的那个距离的下标</span><br>c_ind = np.argmin(distances,axis=<span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># 3. 对每一类数据进行均值计算，更新质心点位置</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> self.n_cluster:<br><span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> c_ind:<br>self.centeroids[i] = np.mean(data[ c_ind == i ],axis = <span class="hljs-number">0</span>)<br><br><span class="hljs-comment"># 预测</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">predict</span>(<span class="hljs-params">self,samples</span>):<br>distances = cdist(samples,self.centeroids)<br><span class="hljs-keyword">return</span> np.argmin(distances,axis=<span class="hljs-number">1</span>)<br><br></code></pre></td></tr></table></figure><p>测试,为了方便观察我们先封装一个画子图方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 画子图函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">plotKMeans</span>(<span class="hljs-params">x,y,centroids,subplot,title</span>):<br>  <span class="hljs-comment"># 分配子图 121表示1行2列的子图中的第一个</span><br>  plt.subplot(subplot)<br>  plt.scatter(x[:,<span class="hljs-number">0</span>],x[:,<span class="hljs-number">1</span>],c=<span class="hljs-string">&#x27;r&#x27;</span>)<br>  <span class="hljs-comment"># 画出质心点</span><br>  plt.scatter(centroids[:,<span class="hljs-number">0</span>],centroids[:,<span class="hljs-number">1</span>],c=np.array(<span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>)),s=<span class="hljs-number">100</span>)<br>  plt.title(title)<br><br>kmeans = K_Means(max_iter=<span class="hljs-number">300</span>,centroids=np.array([[<span class="hljs-number">2</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">2</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">2</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">2</span>,<span class="hljs-number">5</span>],[<span class="hljs-number">2</span>,<span class="hljs-number">6</span>]]))<br><br>plt.figure(figsize=(<span class="hljs-number">16</span>,<span class="hljs-number">6</span>))<br>plotKMeans(x,y,kmeans.centroids,<span class="hljs-number">121</span>,<span class="hljs-string">&#x27;Init State&#x27;</span>)<br><span class="hljs-comment"># 开始聚类</span><br>kmeans.fit(x)<br>plotKMeans(x,y,kmeans.centroids,<span class="hljs-number">122</span>,<span class="hljs-string">&#x27;Final State&#x27;</span>)<br><br><span class="hljs-comment"># 预测新数据[0,0]和[10,7]的类别</span><br>x_new = np.array([[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">10</span>,<span class="hljs-number">7</span>]])<br>y_pred = kmeans.predict(x_new)<br><span class="hljs-comment"># 打印预测出的类别</span><br><span class="hljs-built_in">print</span>(y_pred)<br><span class="hljs-comment"># 质心点在二维坐标轴的位置</span><br><span class="hljs-built_in">print</span>(kmeans.centroids)<br><br>plt.scatter(x_new[:,<span class="hljs-number">0</span>],x_new[:,<span class="hljs-number">1</span>],s=<span class="hljs-number">100</span>,c=<span class="hljs-string">&#x27;black&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/02/06/qyoJAdVfBbZxpeS.png" alt="end.png"></p><p>预测的结果是[0,0]属于1; [10,7]属于5，1对应的群组是质心点[-2,0]所在的群组，而5对应的群组是质心点[9,7]所在的群组，显然是正确的。</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k-means</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>八皇后</title>
    <link href="/2019/12/15/2019%E2%80%9312-15-%E5%85%AB%E7%9A%87%E5%90%8E/"/>
    <url>/2019/12/15/2019%E2%80%9312-15-%E5%85%AB%E7%9A%87%E5%90%8E/</url>
    
    <content type="html"><![CDATA[<p>八皇后问题，是一个古老而著名的问题，是回溯算法的典型案例。该问题是国际西洋棋棋手马克斯·贝瑟尔于1848 年提出：在 8×8 格的国际象棋上摆放八个皇后，使其不能互相攻击，即：任意两个皇后都不能处于同一行、同一列或同一斜线上，问有多少种摆法?</p><p><img src="https://i.loli.net/2019/12/15/9ckTeuAQVwG1Rz7.jpg" alt="BF54C6BB-1CB9-4408-8438-95BC7819F8A8.jpeg"></p><p>在上个世纪，计算机不发达的时候，这个问题困惑着所有人。现在已经有相关算法算出最终结果是92种摆法。</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>1.第一个皇后先放第一行第一列</p><p>2.第二个皇后放在第二行第一列、然后判断是否 OK， 如果不 OK，继续放在第二列、第三列、依次把所有列都放完，找到一个合适</p><p>3.继续第三个皇后，还是第一列、第二列……直到第 8 个皇后也能放在一个不冲突的位置，算是找到了一个正确解</p><p>4.当得到一个正确解时，在栈回退到上一个栈时，就会开始回溯，即将第一个皇后，放到第一列的所有正确解，全部得到.</p><p>5.然后回头继续第一个皇后放第二列，后面继续循环执行 1,2,3,4 的步骤</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Queue8</span> &#123; <br><span class="hljs-comment">//定义一个 max 表示共有多少个皇后</span><br><span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>; <br><span class="hljs-comment">//定义数组 array, 保存皇后放置位置的结果,比如 arr = &#123;0 , 4, 7, 5, 2, 6, 1, 3&#125; </span><br><span class="hljs-type">int</span>[] array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[max];<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">judgeCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123; <br><span class="hljs-comment">//测试一把 ， 8 皇后是否正确</span><br><span class="hljs-type">Queue8</span> <span class="hljs-variable">queue8</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue8</span>(); <br>queue8.check(<span class="hljs-number">0</span>); <br>System.out.printf(<span class="hljs-string">&quot;一共有%d 解法&quot;</span>, count);<br>System.out.printf(<span class="hljs-string">&quot;一共判断冲突的次数%d 次&quot;</span>, judgeCount); <br><span class="hljs-comment">// 1.5w </span><br>&#125;<br> <br><span class="hljs-comment">//编写一个方法，放置第 n 个皇后</span><br><span class="hljs-comment">//特别注意： check 是 每一次递归时，进入到 check 中都有for(int i = 0; i &lt; max; i++)，因此会有回溯</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">check</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123; <br><span class="hljs-keyword">if</span>(n == max) &#123; <br><span class="hljs-comment">//n = 8 , 其实 8 个皇后就既然放好</span><br>print(); <br><span class="hljs-keyword">return</span>; <br>&#125; <br><span class="hljs-comment">//依次放入皇后，并判断是否冲突</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; max; i++) &#123; <br><span class="hljs-comment">//先把当前这个皇后 n , 放到该行的第 1 列</span><br>array[n] = i; <br><span class="hljs-comment">//判断当放置第 n 个皇后到 i 列时，是否冲突</span><br><span class="hljs-keyword">if</span>(judge(n)) &#123; <br><span class="hljs-comment">// 不冲突</span><br><span class="hljs-comment">//接着放 n+1 个皇后,即开始递归</span><br>check(n+<span class="hljs-number">1</span>);  <br>&#125; <br><span class="hljs-comment">//如果冲突，就继续执行 array[n] = i; 即将第 n 个皇后，放置在本行得 后移的一个位置</span><br>&#125; <br>&#125; <br><br><span class="hljs-comment">//查看当我们放置第 n 个皇后, 就去检测该皇后是否和前面已经摆放的皇后冲突</span><br><span class="hljs-comment">/** </span><br><span class="hljs-comment">* </span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> n 表示第 n 个皇后</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span> </span><br><span class="hljs-comment">*/</span> <br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">judge</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123; <br>judgeCount++; <br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123; <br><span class="hljs-comment">// 说明</span><br><span class="hljs-comment">//1. array[i] == array[n] 表示判断 第 n 个皇后是否和前面的 n-1 个皇后在同一列</span><br><span class="hljs-comment">//2. Math.abs(n-i) == Math.abs(array[n] - array[i]) 表示判断第 n 个皇后是否和第 i 皇后是否在同一斜线</span><br><span class="hljs-comment">// n = 1 放置第 2 列 1 n = 1 array[1] = 1 </span><br><span class="hljs-comment">// Math.abs(1-0) == 1 Math.abs(array[n] - array[i]) = Math.abs(1-0) = 1 </span><br><span class="hljs-comment">//3. 判断是否在同一行, 没有必要，n 每次都在递增</span><br><span class="hljs-keyword">if</span>(array[i] == array[n] || Math.abs(n-i) == Math.abs(array[n] - array[i]) ) &#123; <br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125; <br>&#125; <br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <br>&#125; <br><span class="hljs-comment">//写一个方法，可以将皇后摆放的位置输出</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123; <br>count++; <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123; <br>System.out.print(array[i] + <span class="hljs-string">&quot; &quot;</span>); <br>&#125; <br>System.out.println(); <br>&#125; <br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>递归</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>稀疏数组</title>
    <link href="/2019/12/15/2019%E2%80%9312-15-%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84/"/>
    <url>/2019/12/15/2019%E2%80%9312-15-%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<p>围棋或者五子棋程序中，存盘的操作必不可少。将整个棋盘存储下来会造成空间浪费，如果你遇到了类似问腿，可以使用一种数据结构-稀疏数组来解决此问题！</p><p>假如我们认为没放子的地方为0，黑子为1，蓝子为2，就有下面的映射关系。</p><p><img src="https://i.loli.net/2019/12/15/BdPhT31Ffsc8M6H.jpg" alt="519BAC54-3A92-4745-936C-3C923FDF10B9.jpeg"></p><p>因为该二维数组的很多值是默认值 0, 因此记录了很多没有意义的数据。</p><p>稀疏数组的处理方法是: </p><ul><li><ol><li>记录数组一共有几行几列，有多少个不同的值</li></ol></li><li><ol start="2"><li>把具有不同值的元素的行列及值记录在一个小规模的数组中，从而缩小程序的规模</li></ol></li></ul><p><img src="https://i.loli.net/2019/12/15/P76Jj1YKzWiUvoB.jpg" alt="E68E4440-A3A8-4183-B03B-428E73BDC0DD.jpeg"></p><p>代码实：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SparseArray</span> &#123; <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123; <br><span class="hljs-comment">// 创建一个原始的二维数组 11 * 11 </span><br><span class="hljs-comment">// 0: 表示没有棋子， 1 表示 黑子 2 表蓝子</span><br><span class="hljs-type">int</span> chessArr1[][] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">11</span>][<span class="hljs-number">11</span>]; <br>chessArr1[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>; <br>chessArr1[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] = <span class="hljs-number">2</span>; <br>chessArr1[<span class="hljs-number">4</span>][<span class="hljs-number">5</span>] = <span class="hljs-number">2</span>;<br><span class="hljs-comment">// 输出原始的二维数组</span><br>System.out.println(<span class="hljs-string">&quot;原始的二维数组~~&quot;</span>); <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>[] row : chessArr1) &#123; <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> data : row) &#123; <br>System.out.printf(<span class="hljs-string">&quot;%d\t&quot;</span>, data); <br>&#125; <br>System.out.println(); <br>&#125;<br><br><span class="hljs-comment">// 1. 先遍历二维数组 得到非 0 数据的个数</span><br><span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">11</span>; i++) &#123; <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">11</span>; j++) &#123; <br><span class="hljs-keyword">if</span> (chessArr1[i][j] != <span class="hljs-number">0</span>) &#123; <br>sum++; <br>&#125; <br>&#125; <br>&#125;<br> <br><span class="hljs-comment">// 2. 创建对应的稀疏数组</span><br><span class="hljs-type">int</span> sparseArr[][] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[sum + <span class="hljs-number">1</span>][<span class="hljs-number">3</span>]; <br><span class="hljs-comment">// 给稀疏数组赋值</span><br>sparseArr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">11</span>; <br>sparseArr[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">11</span>; <br>sparseArr[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] = sum;<br><span class="hljs-comment">// 遍历二维数组，将非 0 的值存放到sparseArr 中</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">//count 用于记录是第几个非 0 数据 </span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">11</span>; i++) &#123; <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">11</span>; j++) &#123; <br><span class="hljs-keyword">if</span> (chessArr1[i][j] != <span class="hljs-number">0</span>) &#123; <br>count++; <br>sparseArr[count][<span class="hljs-number">0</span>] = i; <br>sparseArr[count][<span class="hljs-number">1</span>] = j; <br>sparseArr[count][<span class="hljs-number">2</span>] = chessArr1[i][j]; <br>&#125; <br>&#125; <br>&#125; <br><span class="hljs-comment">// 输出稀疏数组的形式</span><br>System.out.println(); <br>System.out.println(<span class="hljs-string">&quot;得到稀疏数组为~~~~&quot;</span>); <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; sparseArr.length; i++) &#123; <br>System.out.printf(<span class="hljs-string">&quot;%d\t%d\t%d\t\n&quot;</span>, sparseArr[i][<span class="hljs-number">0</span>], sparseArr[i][<span class="hljs-number">1</span>], sparseArr[i][<span class="hljs-number">2</span>]); <br>&#125; <br>System.out.println(); <br><br><span class="hljs-comment">//将稀疏数组 --》 恢复成 原始的二维数</span><br><span class="hljs-comment">//1. 先读取稀疏数组的第一行，根据第一行的数据，创建原始的二维数组</span><br><span class="hljs-type">int</span> chessArr2[][] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[sparseArr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]][sparseArr[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]]; <br><span class="hljs-comment">//2. 在读取稀疏数组后几行的数据(从第二行开始)，并赋给 原始的二维数组 即可</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; sparseArr.length; i++) &#123; <br>chessArr2[sparseArr[i][<span class="hljs-number">0</span>]][sparseArr[i][<span class="hljs-number">1</span>]] = sparseArr[i][<span class="hljs-number">2</span>]; <br>&#125; <br><br><span class="hljs-comment">// 输出恢复后的二维数组</span><br>System.out.println(); <br>System.out.println(<span class="hljs-string">&quot;恢复后的二维数组&quot;</span>); <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>[] row : chessArr2) &#123; <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> data : row) &#123; <br>System.out.printf(<span class="hljs-string">&quot;%d\t&quot;</span>, data); <br>&#125;<br>System.out.println(); <br>&#125; <br>&#125; <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>迷宫问题</title>
    <link href="/2019/12/15/2019%E2%80%9312-15-%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/"/>
    <url>/2019/12/15/2019%E2%80%9312-15-%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>迷宫找路径问题被广泛应用到生活中。比如游戏，玩过LOL的会发现右下角的地图，其实它就是一个典型的找路径问题。</p><p><img src="https://i.loli.net/2019/12/15/qQW7wMRGbjlSnU6.jpg" alt="11074FCB-CF33-4522-AC7C-42C63236C275.jpeg"></p><p>下面用递归+回溯来说一下，如何找到这条路径。</p><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>需求如下图所示，有一个9x9的迷宫，从入口走到出口，如何确定一个有效路径？</p><p><img src="https://i.loli.net/2019/12/15/ROvjUFsabg4dilt.jpg" alt="9D0658E0-9AD5-4C54-8634-1196CF9F2610.jpeg"></p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>1.利用二维数组建立好地图的映射，问题就变成了，从[1，1]走到[8，8]</p><p>2.假定：0没走过 1墙 2可以走 3走不通</p><p>3.走路遵循 下-&gt;右-&gt;上-&gt;左，即先走下，下走不通走右，右走不通走上，上走不通走左 </p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Maze</span> &#123; <br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> HIGH_MAX=<span class="hljs-number">10</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> WIDTH_MAX=<span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-comment">// 先创建一个二维数组，模拟迷宫</span><br><span class="hljs-comment">// 地图</span><br><span class="hljs-type">int</span>[][] map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[HIGH_MAX][WIDTH_MAX]; <br><br><span class="hljs-comment">// 初始化所有的墙</span><br>init(map);<br>print(map);<br><br><span class="hljs-comment">//使用递归回溯给小球找路</span><br>setWay(map, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>); <br>print(map);<br>&#125; <br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] map)</span>&#123;<br><br><br><span class="hljs-comment">// 使用 1 表示墙</span><br><span class="hljs-comment">// 上下全部置为 1 </span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; HIGH_MAX; i++) &#123; <br>map[<span class="hljs-number">0</span>][i] = <span class="hljs-number">1</span>; <br>map[<span class="hljs-number">9</span>][i] = <span class="hljs-number">1</span>; <br>&#125; <br><span class="hljs-comment">// 左右全部置为 1 </span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; WIDTH_MAX; i++) &#123; <br>map[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>; <br>map[i][<span class="hljs-number">9</span>] = <span class="hljs-number">1</span>; <br>&#125; <span class="hljs-comment">//设置挡板, 1 表示</span><br>map[<span class="hljs-number">1</span>][<span class="hljs-number">3</span>] = <span class="hljs-number">1</span>; <br>map[<span class="hljs-number">1</span>][<span class="hljs-number">7</span>] = <span class="hljs-number">1</span>;<br>map[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] = <span class="hljs-number">1</span>;<br>map[<span class="hljs-number">2</span>][<span class="hljs-number">7</span>] = <span class="hljs-number">1</span>;<br>map[<span class="hljs-number">3</span>][<span class="hljs-number">5</span>] = <span class="hljs-number">1</span>;<br>map[<span class="hljs-number">3</span>][<span class="hljs-number">6</span>] = <span class="hljs-number">1</span>;<br>map[<span class="hljs-number">4</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>map[<span class="hljs-number">4</span>][<span class="hljs-number">3</span>] = <span class="hljs-number">1</span>;<br>map[<span class="hljs-number">4</span>][<span class="hljs-number">4</span>] = <span class="hljs-number">1</span>;<br>map[<span class="hljs-number">5</span>][<span class="hljs-number">4</span>] = <span class="hljs-number">1</span>;<br>map[<span class="hljs-number">6</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>map[<span class="hljs-number">6</span>][<span class="hljs-number">6</span>] = <span class="hljs-number">1</span>;<br>map[<span class="hljs-number">7</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>map[<span class="hljs-number">7</span>][<span class="hljs-number">3</span>] = <span class="hljs-number">1</span>;<br>map[<span class="hljs-number">7</span>][<span class="hljs-number">4</span>] = <span class="hljs-number">1</span>;<br>map[<span class="hljs-number">7</span>][<span class="hljs-number">7</span>] = <span class="hljs-number">1</span>;<br>map[<span class="hljs-number">7</span>][<span class="hljs-number">7</span>] = <span class="hljs-number">1</span>;<br>map[<span class="hljs-number">8</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br><br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] map)</span>&#123;<br><span class="hljs-comment">// 输出地图</span><br>System.out.println(<span class="hljs-string">&quot;地图的情况&quot;</span>); <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; WIDTH_MAX; i++) &#123; <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; HIGH_MAX; j++) &#123; <br>System.out.print(map[i][j] + <span class="hljs-string">&quot; &quot;</span>);<br>&#125; <br>System.out.println(); <br>&#125; <br>&#125;<br><br><span class="hljs-comment">//使用递归回溯来给小球找路</span><br><span class="hljs-comment">//说明</span><br><span class="hljs-comment">//1. map 表示地图</span><br><span class="hljs-comment">//2. i,j 表示从地图的哪个位置开始出发 (1,1) </span><br><span class="hljs-comment">//3. 如果小球能到 map[WIDTH_MAX-2][HIGH_MAX-2] 位置，则说明通路找到.</span><br><span class="hljs-comment">//4. 约定： 当 map[i][j] 为 0 表示该点没有走过 当为 1 表示墙； 2 表示通路可以走 ； 3 表示该点已经走过，但是走不通</span><br><span class="hljs-comment">//5. 在走迷宫时，需要确定一个策略(方法) 下-&gt;右-&gt;上-&gt;左 , 如果该点走不通，再回溯</span><br><span class="hljs-comment">/** </span><br><span class="hljs-comment">* </span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> map 表示地图</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> i 从哪个位置开始找</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> j </span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span> 如果找到通路，就返回 true, 否则返回 false </span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">setWay</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] map, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123; <br><span class="hljs-keyword">if</span>(map[WIDTH_MAX-<span class="hljs-number">2</span>][HIGH_MAX-<span class="hljs-number">2</span>] == <span class="hljs-number">2</span>) &#123; <br><span class="hljs-comment">// 通路已经找到 ok </span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <br>&#125; <span class="hljs-keyword">else</span> &#123; <br><span class="hljs-keyword">if</span>(map[i][j] == <span class="hljs-number">0</span>) &#123; <br><span class="hljs-comment">//如果当前这个点还没有走过</span><br><span class="hljs-comment">//按照策略 下-&gt;右-&gt;上-&gt;左走</span><br>map[i][j] = <span class="hljs-number">2</span>; <br><span class="hljs-comment">// 假定该点是可以走通.</span><br><span class="hljs-keyword">if</span>(setWay(map, i+<span class="hljs-number">1</span>, j)) &#123;<br><span class="hljs-comment">//向下走</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (setWay(map, i, j+<span class="hljs-number">1</span>)) &#123; <br><span class="hljs-comment">//向右走</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (setWay(map, i-<span class="hljs-number">1</span>, j)) &#123; <br><span class="hljs-comment">//向上</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (setWay(map, i, j-<span class="hljs-number">1</span>))&#123; <br><span class="hljs-comment">// 向左走</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <br>&#125; <span class="hljs-keyword">else</span> &#123; <br><span class="hljs-comment">//说明该点是走不通，是死路</span><br>map[i][j] = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <br>&#125; <br>&#125; <span class="hljs-keyword">else</span> &#123; <br><span class="hljs-comment">// 如果 map[i][j] != 0 , 可能是 1， 2， 3 </span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <br>&#125; <br>&#125; <br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>最终结果：</p><p><img src="https://i.loli.net/2019/12/15/E1Gq8AlD3Pg67IK.jpg" alt="188B5FE3-EBA9-4992-B231-CFE4CD0FB589.jpeg"></p>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>递归</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MacOS提示“打不开xxx,因为Apple无法检查其是否包含恶意软件...“</title>
    <link href="/2019/12/12/2019%E5%B9%B412%E6%9C%8812%E6%97%A523:12:30_MacOS%E6%8F%90%E7%A4%BA.md/"/>
    <url>/2019/12/12/2019%E5%B9%B412%E6%9C%8812%E6%97%A523:12:30_MacOS%E6%8F%90%E7%A4%BA.md/</url>
    
    <content type="html"><![CDATA[<p>当你的mac提示“打不开xxx,因为Apple无法检查其是否包含恶意软件…”时，一般是由于你下载了非App Store且不受苹果信任的开发者的软件，怎么解决呢？</p><p><img src="https://raw.githubusercontent.com/Demo233/images/main/gitnote/2020/12/12/1607786011409-1607786011410.png" alt="title"></p><p>其实很简单，只需要在设置-安全性与隐私-通用-允许从以下位置下载的应用-勾选“任何来源”，这时候有朋友就会说了，只有前两项怎么办？</p><p><img src="https://raw.githubusercontent.com/Demo233/images/main/gitnote/2020/12/12/1607786027557-1607786027559.png" alt="title"></p><p>其实这个选项在最近几个macOS版本中被隐藏了（具体版本未考究），只需要通过命令就可以打开</p><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><p><strong>1、在启动台-其他文件夹-终端，打开</strong></p><p><strong>2、输入命令：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo spctl --master-disable（复制粘贴进去）<br></code></pre></td></tr></table></figure><p>执行回车，然后输入电脑密码再回车即可（输密码是看不到的，直接输入就可以了）</p><p><img src="https://raw.githubusercontent.com/Demo233/images/main/gitnote/2020/12/12/1607786110113-1607786110114.png" alt="title"></p><p>之后就可以看到“任何来源”选项已经勾选，此时软件已经可以正常打开了。</p><p><strong>PS：关闭显示“任何来源”的命令是</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo spctl --master-enable<br></code></pre></td></tr></table></figure><p>操作方法与上面同</p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>PDF专业版安装教程</title>
    <link href="/2019/12/12/2019%E5%B9%B412%E6%9C%8812%E6%97%A523:11:41_PDF%E4%B8%93%E4%B8%9A%E7%89%88%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B.md/"/>
    <url>/2019/12/12/2019%E5%B9%B412%E6%9C%8812%E6%97%A523:11:41_PDF%E4%B8%93%E4%B8%9A%E7%89%88%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B.md/</url>
    
    <content type="html"><![CDATA[<h3 id="1-打开下载好的dmg包"><a href="#1-打开下载好的dmg包" class="headerlink" title="1.打开下载好的dmg包"></a>1.打开下载好的dmg包</h3><p><img src="https://raw.githubusercontent.com/Demo233/images/main/gitnote/2020/12/12/1607785674597-1607785674600.png" alt="title"></p><h3 id="2-弹出的命令窗口，按一下回车"><a href="#2-弹出的命令窗口，按一下回车" class="headerlink" title="2.弹出的命令窗口，按一下回车"></a>2.弹出的命令窗口，按一下回车</h3><p><img src="https://raw.githubusercontent.com/Demo233/images/main/gitnote/2020/12/12/1607785700115-1607785700116.png" alt="title"></p><h3 id="3-在弹出的窗口中，将pdf-expert拖入到applications"><a href="#3-在弹出的窗口中，将pdf-expert拖入到applications" class="headerlink" title="3.在弹出的窗口中，将pdf expert拖入到applications"></a>3.在弹出的窗口中，将pdf expert拖入到applications</h3><p><img src="https://raw.githubusercontent.com/Demo233/images/main/gitnote/2020/12/12/1607785719612-1607785719614.png" alt="title"></p><h3 id="4-前往应用程序"><a href="#4-前往应用程序" class="headerlink" title="4.前往应用程序"></a>4.前往应用程序</h3><p><img src="https://raw.githubusercontent.com/Demo233/images/main/gitnote/2020/12/12/1607785733994-1607785733995.png" alt="title"></p><h3 id="5-安装破解完成了"><a href="#5-安装破解完成了" class="headerlink" title="5.安装破解完成了"></a>5.安装破解完成了</h3><p><img src="https://raw.githubusercontent.com/Demo233/images/main/gitnote/2020/12/12/1607785758123-1607785758124.png" alt="title"></p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Anaconda IDEA</title>
    <link href="/2019/11/11/2019%E2%80%9311-12-Anacoda%20IDEA/"/>
    <url>/2019/11/11/2019%E2%80%9311-12-Anacoda%20IDEA/</url>
    
    <content type="html"><![CDATA[<p>好的优秀的IDEA可以提高生产效率，下面介绍一下Python的常用IDEA。</p><p>PyCharm：复杂大型的企业级应用。<br>IDLE、Sublime ： 300+行的代码程序。<br>Anaconda：适合科学计算和数据分析。</p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Anacoda免费开源、支持8000个第三方库、包含多个主流工具，适合数据计算领域开发。下面了解一下里面的基本组件。</p><p>我们可以上<a href="http://www.continuum.io上安装最新的anacoda/">www.continuum.io上安装最新的Anacoda</a> IDEA。</p><p>它可以装在linux、win、mac上。实际上，Anacoda只是帮我们集成各类python工具，比如下面三个组件：</p><ul><li>Conda： 与pip和maven类似，是一个包管理工具用于管理第三方包。</li><li>Spyder： 它可以编写python代码，并且支持调试运行。</li><li>IPython： 是一个功能强大的交互式shell，编写代码变得更方便，适合进行交互式数据可视化和GUI相关应用开发，便于做数据分析。</li></ul><h3 id="conda"><a href="#conda" class="headerlink" title="conda"></a>conda</h3><p>安装Anacoda ，打开Anacoda Navigator。在Environments一栏中可以看到默认的root环境空间，空间中已经包含了很多默认的第三方包。如果需要可以继续创建别的环境空间。</p><h3 id="Spyder"><a href="#Spyder" class="headerlink" title="Spyder"></a>Spyder</h3><p>Spyder有三个工作区，分别为编辑区、文本导航和帮助区、IPython区</p><p>文本导航和帮助区我们不经常使用，建议删除掉简化开发页面。</p><p>在tools -&gt; perference -&gt; syntax coloring中可以设置主题</p><h3 id="IPython"><a href="#IPython" class="headerlink" title="IPython"></a>IPython</h3><p>In [num] : In指的是输入的命令，num是IPython的行号<br>Out [num] : Out指的是输出值或结果</p><p>下面介绍一下IPython中常用的两个指令：？和%</p><p>？跟在变量的后面，可以打印更多的详细信息。<br>%run file.py 可以运行任意目录下的file.py文件。</p><p>除上面命令以外，IPython还有很多其他指令，如下图所示：</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Anaconda</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flink基本概念（一）</title>
    <link href="/2019/11/09/2019%E2%80%9311-08-Flink%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <url>/2019/11/09/2019%E2%80%9311-08-Flink%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<p>Flink是一个分布式、可拓展并行计算的流式计算引擎。大数据生态中，流式计算引擎还真不少，比如Spark、Storm；他们在处理数据时各有优缺点，那么Flink在流处理中，性能是不是要优于前两者，下面针对几个方面我们来快速的入个门。主要描述Flink中的基本概念。</p><h3 id="Job-Managers、Task-Managers、客户端（Clients）"><a href="#Job-Managers、Task-Managers、客户端（Clients）" class="headerlink" title="Job Managers、Task Managers、客户端（Clients）"></a>Job Managers、Task Managers、客户端（Clients）</h3><p>下面简单说一说Flink中比较重要的三个组件，它们分别是JobManagers，TaskManagers，Client。</p><p><img src="https://i.loli.net/2019/11/11/BYN6pwKzoUgJEXk.png" alt="1AB09791-ABB6-4B9E-B8CF-5772F8D835BB.png"></p><h4 id="1-什么是JobManager？"><a href="#1-什么是JobManager？" class="headerlink" title="1.什么是JobManager？"></a>1.什么是JobManager？</h4><p>Job Managers，是整个应用的Master。它负责调度任务，协调checkpoint，协调故障恢复等。一个Job至少会有一个Job Manager。高可用部署下会有多个JobManagers，其中一个作为leader，其余的处于standby状态。</p><h4 id="2-什么是TaskManagers？"><a href="#2-什么是TaskManagers？" class="headerlink" title="2.什么是TaskManagers？"></a>2.什么是TaskManagers？</h4><p>TaskManagers，是整个应用的Workers。它主要执行dataflow中的tasks（更准确来说应该是subtasks），并且缓存和交换数据streams。每个job至少会有一个taskmanager。</p><h4 id="3-什么是client？"><a href="#3-什么是client？" class="headerlink" title="3.什么是client？"></a>3.什么是client？</h4><p>client用户端主要负责提交DataFlow 到JobManager，取消或者更新Job。客户端的代码由Java或者Scala编写。运行代码指令如  flink run xxx.jar….</p><h4 id="4-怎么启动JobManagers和TaskManagers"><a href="#4-怎么启动JobManagers和TaskManagers" class="headerlink" title="4.怎么启动JobManagers和TaskManagers"></a>4.怎么启动JobManagers和TaskManagers</h4><p>JobManagers和TaskManagers有多种启动方式：直接在机器上启动（standalone cluster）；在容器或资源管理框架中启动，比如Mesos、Yarn。后续我们会使用Yarn取启动JobManager</p><h3 id="Task-和-SubTasks"><a href="#Task-和-SubTasks" class="headerlink" title="Task 和 SubTasks"></a>Task 和 SubTasks</h3><p>分布式计算中，Flink 将算子（operator）的 subtask 链接（chain）成 task。每个 task 由一个线程执行。把算子链接成 tasks 能够减少线程间切换和缓冲的开销，在降低延迟的同时提高了整体吞吐量。链接操作的配置详情可参考：<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.9/zh/dev/stream/operators/#task-chaining-and-resource-groups">chaining docs</a></p><p>下图的 dataflow 由五个 subtasks 执行，因此具有五个并行线程。</p><p><img src="https://i.loli.net/2019/11/11/gTNYUikXtphH9uz.png" alt="A290B58A-3250-43C5-848A-4865916DEB3E.png"></p><h3 id="Task-Slots和资源"><a href="#Task-Slots和资源" class="headerlink" title="Task Slots和资源"></a>Task Slots和资源</h3><h4 id="1-什么是slots（槽）？"><a href="#1-什么是slots（槽）？" class="headerlink" title="1.什么是slots（槽）？"></a>1.什么是slots（槽）？</h4><p>flink中一个TaskManager中至少有一个slot（槽），每个Slot代表了TasManager的一份固定资源子集。subtasks实际运行在slot内，划分资源意味着subtask之间不会竞争资源，但是也意味着它们只拥有固定的资源。这里没有CPU的隔离，只是划分任务的内存资源。</p><p><img src="https://i.loli.net/2019/11/11/Fg9VWTZyKt6NEwk.png" alt="CE0C1C58-70EE-47AE-9135-7A8885527B86.png"></p><h4 id="2-substasks怎么共享slot"><a href="#2-substasks怎么共享slot" class="headerlink" title="2.substasks怎么共享slot"></a>2.substasks怎么共享slot</h4><p>在代码中可以使用slotSharingGroup（）函数来设置共享槽，如果不设置默认为default。</p><p>默认情况下，Flink 允许 subtasks 共享 slots，即使它们是不同 tasks 的 subtasks，只要它们来自同一个 job。因此，一个 slot 可能会负责这个 job 的整个管道（pipeline）。允许 slot sharing 有两个好处：</p><ul><li><p>Flink 集群需要与 job 中使用的最高并行度一样多的 slots。这样不需要计算作业总共包含多少个 tasks（具有不同并行度）。</p></li><li><p>更好的资源利用率。在没有 slot sharing 的情况下，简单的 subtasks（source&#x2F;map()）将会占用和复杂的 subtasks （window）一样多的资源。通过 slot sharing，将示例中的并行度从 2 增加到 6 可以充分利用 slot 的资源，同时确保繁重的 subtask 在 TaskManagers 之间公平地获取资源。</p></li></ul><p><img src="https://i.loli.net/2019/11/11/g2wPquCrkO5exE1.png" alt="4B04802A-2045-468A-8085-B560661FD9C5.png"></p><p>参考资料:<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.9/concepts/runtime.html">https://ci.apache.org/projects/flink/flink-docs-release-1.9/concepts/runtime.html</a></p><h3 id="后续总结"><a href="#后续总结" class="headerlink" title="后续总结"></a>后续总结</h3><ul><li>Flink 部署方式，重点Flink on yarn</li><li>如何向yarn申请Flink运行资源（JobManager）</li><li>如何提交一个简单的Flink程序</li></ul>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Flink</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kafka源码刨析之Produer Metadata更新机制（二）</title>
    <link href="/2019/11/07/2019-11-07-Kafka%E6%BA%90%E7%A0%81%E5%88%A8%E6%9E%90%E4%B9%8BProduer%20Metadata%E6%9B%B4%E6%96%B0%E6%9C%BA%E5%88%B6%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2019/11/07/2019-11-07-Kafka%E6%BA%90%E7%A0%81%E5%88%A8%E6%9E%90%E4%B9%8BProduer%20Metadata%E6%9B%B4%E6%96%B0%E6%9C%BA%E5%88%B6%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>在上一篇文章中，已经介绍了 Producer 的发送模型，Producer <code>dosend()</code> 方法中的第一步，就是获取相关的 topic 的 metadata，但在上篇中并没有深入展开，因为这部分的内容比较多，所以本文单独一篇文章进行介绍，本文主要来讲述以下三个问题：</p><pre><code class="hljs">1. metadata 内容是什么；2. Producer 更新 metadata 的流程；3. Producer 在什么情况下会去更新 metadata；</code></pre><h3 id="Metadata-内容"><a href="#Metadata-内容" class="headerlink" title="Metadata 内容"></a>Metadata 内容</h3><p>Metadata 信息的内容可以通过源码看明白：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">// 这个类被 client 线程和后台 sender 所共享,它只保存了所有 topic 的部分数据,当我们请求一个它上面没有的 topic meta 时,它会通过发送 metadata update 来更新 meta 信息,</span><br><span class="hljs-comment">// 如果 topic meta 过期策略是允许的,那么任何 topic 过期的话都会被从集合中移除,</span><br><span class="hljs-comment">// 但是 consumer 是不允许 topic 过期的因为它明确地知道它需要管理哪些 topic</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Metadata</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">static</span> <span class="hljs-keyword">final</span> Logger log = LoggerFactory.<span class="hljs-built_in">getLogger</span>(Metadata.<span class="hljs-keyword">class</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> TOPIC_EXPIRY_MS = <span class="hljs-number">5</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> TOPIC_EXPIRY_NEEDS_UPDATE = <span class="hljs-number">-1L</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> refreshBackoffMs; <span class="hljs-comment">// metadata 更新失败时,为避免频繁更新 meta,最小的间隔时间,默认 100ms</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> metadataExpireMs; <span class="hljs-comment">// metadata 的过期时间, 默认 60,000ms</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> version; <span class="hljs-comment">// 每更新成功1次，version自增1,主要是用于判断 metadata 是否更新</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> lastRefreshMs; <span class="hljs-comment">// 最近一次更新时的时间（包含更新失败的情况）</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> lastSuccessfulRefreshMs; <span class="hljs-comment">// 最近一次成功更新的时间（如果每次都成功的话，与前面的值相等, 否则，lastSuccessulRefreshMs &lt; lastRefreshMs)</span><br>    <span class="hljs-keyword">private</span> Cluster cluster; <span class="hljs-comment">// 集群中一些 topic 的信息</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> needUpdate; <span class="hljs-comment">// 是都需要更新 metadata</span><br>    <span class="hljs-comment">/* Topics with expiry time */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;<span class="hljs-type">String</span>, Long&gt; topics; <span class="hljs-comment">// topic 与其过期时间的对应关系</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;Listener&gt; listeners; <span class="hljs-comment">// 事件监控者</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ClusterResourceListeners clusterResourceListeners; <span class="hljs-comment">//当接收到 metadata 更新时, ClusterResourceListeners的列表</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> needMetadataForAllTopics; <span class="hljs-comment">// 是否强制更新所有的 metadata</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> topicExpiryEnabled; <span class="hljs-comment">// 默认为 true, Producer 会定时移除过期的 topic,consumer 则不会移除</span><br>&#125;<br></code></pre></td></tr></table></figure><p>关于 topic 的详细信息（leader 所在节点、replica 所在节点、isr 列表）都是在<code>Cluster</code>实例中保存的。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// 并不是一个全集,metadata的主要组成部分</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cluster</span> &#123;<br><br>    <span class="hljs-comment">// 从命名直接就看出了各个变量的用途</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> boolean isBootstrapConfigured;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">List</span>&lt;<span class="hljs-type">Node</span>&gt; nodes; <span class="hljs-comment">// node 列表</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Set</span>&lt;<span class="hljs-type">String</span>&gt; unauthorizedTopics; <span class="hljs-comment">// 未认证的 topic 列表</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Set</span>&lt;<span class="hljs-type">String</span>&gt; internalTopics; <span class="hljs-comment">// 内置的 topic 列表</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Map</span>&lt;<span class="hljs-type">TopicPartition</span>, <span class="hljs-type">PartitionInfo</span>&gt; partitionsByTopicPartition; <span class="hljs-comment">// partition 的详细信息</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Map</span>&lt;<span class="hljs-type">String</span>, <span class="hljs-type">List</span>&lt;<span class="hljs-type">PartitionInfo</span>&gt;&gt; partitionsByTopic; <span class="hljs-comment">// topic 与 partition 的对应关系</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Map</span>&lt;<span class="hljs-type">String</span>, <span class="hljs-type">List</span>&lt;<span class="hljs-type">PartitionInfo</span>&gt;&gt; availablePartitionsByTopic; <span class="hljs-comment">//  可用（leader 不为 null）的 topic 与 partition 的对应关系</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Map</span>&lt;<span class="hljs-type">Integer</span>, <span class="hljs-type">List</span>&lt;<span class="hljs-type">PartitionInfo</span>&gt;&gt; partitionsByNode; <span class="hljs-comment">// node 与 partition 的对应关系</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Map</span>&lt;<span class="hljs-type">Integer</span>, <span class="hljs-type">Node</span>&gt; nodesById; <span class="hljs-comment">// node 与 id 的对应关系</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ClusterResource</span> clusterResource;<br>&#125;<br><br><br><span class="hljs-comment">// org.apache.kafka.common.PartitionInfo</span><br><span class="hljs-comment">// topic-partition: 包含 topic、partition、leader、replicas、isr</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PartitionInfo</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> topic;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> int partition;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Node</span> leader;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Node</span>[] replicas;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Node</span>[] inSyncReplicas;<br>&#125;<br></code></pre></td></tr></table></figure><p>Cluster 实例主要是保存：</p><pre><code class="hljs">1. ``broker.id`` 与 ``node`` 的对应关系；2. topic 与 partition （``PartitionInfo``）的对应关系；3. node 与 partition （``PartitionInfo``）的对应关系。</code></pre><h3 id="Producer-的-Metadata-更新流程"><a href="#Producer-的-Metadata-更新流程" class="headerlink" title="Producer 的 Metadata 更新流程"></a>Producer 的 Metadata 更新流程</h3><p>Producer 在调用 <code>dosend()</code> 方法时，第一步就是通过 <code>waitOnMetadata</code> 方法获取该 topic 的 metadata 信息.</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">// 等待 metadata 的更新<br>private ClusterAndWaitTime waitOnMetadata(String topic, <span class="hljs-type">Integer</span> <span class="hljs-keyword">partition</span>, long maxWaitMs) throws InterruptedException &#123;<br>    metadata.<span class="hljs-keyword">add</span>(topic);// 在 metadata 中添加 topic 后,如果 metadata 中没有这个 topic 的 meta，那么 metadata 的更新标志设置为了 <span class="hljs-keyword">true</span><br>    <span class="hljs-keyword">Cluster</span> <span class="hljs-keyword">cluster</span> = metadata.<span class="hljs-keyword">fetch</span>();<br>    <span class="hljs-type">Integer</span> partitionsCount = <span class="hljs-keyword">cluster</span>.partitionCountForTopic(topic);// 如果 topic 已经存在 meta 中,则返回该 topic 的 <span class="hljs-keyword">partition</span> 数,否则返回 <span class="hljs-keyword">null</span><br><br>    // 当前 metadata 中如果已经有这个 topic 的 meta 的话,就直接返回<br>    <span class="hljs-keyword">if</span> (partitionsCount != <span class="hljs-keyword">null</span> &amp;&amp; (<span class="hljs-keyword">partition</span> == <span class="hljs-keyword">null</span> || <span class="hljs-keyword">partition</span> &lt; partitionsCount))<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span> ClusterAndWaitTime(<span class="hljs-keyword">cluster</span>, <span class="hljs-number">0</span>);<br><br>    long <span class="hljs-keyword">begin</span> = <span class="hljs-type">time</span>.milliseconds();<br>    long remainingWaitMs = maxWaitMs;<br>    long elapsed;<br><br>    // 发送 metadata 请求,直到获取了这个 topic 的 metadata 或者请求超时<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-keyword">log</span>.trace(&quot;Requesting metadata update for topic &#123;&#125;.&quot;, topic);<br>        <span class="hljs-type">int</span> version = metadata.requestUpdate();// 返回当前版本号,初始值为<span class="hljs-number">0</span>,每次更新时会自增,并将 needUpdate 设置为 <span class="hljs-keyword">true</span><br>        sender.wakeup();// 唤起 sender，发送 metadata 请求<br>        try &#123;<br>            metadata.awaitUpdate(<span class="hljs-keyword">version</span>, remainingWaitMs);// 等待 metadata 的更新<br>        &#125; catch (TimeoutException ex) &#123;<br>            // Rethrow <span class="hljs-keyword">with</span> original maxWaitMs <span class="hljs-keyword">to</span> prevent logging <span class="hljs-keyword">exception</span> <span class="hljs-keyword">with</span> remainingWaitMs<br>            throw <span class="hljs-built_in">new</span> TimeoutException(&quot;Failed to update metadata after &quot; + maxWaitMs + &quot; ms.&quot;);<br>        &#125;<br>        <span class="hljs-keyword">cluster</span> = metadata.<span class="hljs-keyword">fetch</span>();<br>        elapsed = <span class="hljs-type">time</span>.milliseconds() - <span class="hljs-keyword">begin</span>;<br>        <span class="hljs-keyword">if</span> (elapsed &gt;= maxWaitMs)<br>            throw <span class="hljs-built_in">new</span> TimeoutException(&quot;Failed to update metadata after &quot; + maxWaitMs + &quot; ms.&quot;);// 超时<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">cluster</span>.unauthorizedTopics().contains(topic))// 认证失败，对当前 topic 没有 <span class="hljs-keyword">Write</span> 权限<br>            throw <span class="hljs-built_in">new</span> TopicAuthorizationException(topic);<br>        remainingWaitMs = maxWaitMs - elapsed;<br>        partitionsCount = <span class="hljs-keyword">cluster</span>.partitionCountForTopic(topic);<br>    &#125; <span class="hljs-keyword">while</span> (partitionsCount == <span class="hljs-keyword">null</span>);// 不停循环,直到 partitionsCount 不为 <span class="hljs-keyword">null</span>（即直到 metadata 中已经包含了这个 topic 的相关信息）<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">partition</span> != <span class="hljs-keyword">null</span> &amp;&amp; <span class="hljs-keyword">partition</span> &gt;= partitionsCount) &#123;<br>        throw <span class="hljs-built_in">new</span> KafkaException(<br>                String.format(&quot;Invalid partition given with record: %d is not in the range [0...%d).&quot;, <span class="hljs-keyword">partition</span>, partitionsCount));<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span> ClusterAndWaitTime(<span class="hljs-keyword">cluster</span>, elapsed);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果 metadata 中不存在这个 topic 的 metadata，那么就请求更新 metadata，如果 metadata 没有更新的话，方法就一直处在 <code>do ... while</code> 的循环之中，在循环之中，主要做以下操作：</p><pre><code class="hljs">1. ``metadata.requestUpdate()`` 将 metadata 的 ``needUpdate`` 变量设置为 true（强制更新），并返回当前的版本号（version），通过版本号来判断 metadata 是否完成更新；2. ``sender.wakeup()`` 唤醒 sender 线程，sender 线程又会去唤醒 NetworkClient 线程，NetworkClient 线程进行一些实际的操作（后面详细介绍）；3. ``metadata.awaitUpdate(version, remainingWaitMs)`` 等待 metadata 的更新。</code></pre><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">// 更新 metadata 信息（根据当前 version 值来判断）</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">void</span> <span class="hljs-title">awaitUpdate</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">int</span> lastVersion, <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> maxWaitMs)</span> throws InterruptedException </span>&#123;<br>    <span class="hljs-keyword">if</span> (maxWaitMs &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">IllegalArgumentException</span>(<span class="hljs-string">&quot;Max time to wait for metadata updates should not be &lt; 0 milli seconds&quot;</span>);<br>    &#125;<br>    <span class="hljs-type">long</span> begin = System.<span class="hljs-built_in">currentTimeMillis</span>();<br>    <span class="hljs-type">long</span> remainingWaitMs = maxWaitMs;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-keyword">this</span>.version &lt;= lastVersion) &#123;<span class="hljs-comment">// 不断循环,直到 metadata 更新成功,version 自增</span><br>        <span class="hljs-keyword">if</span> (remainingWaitMs != <span class="hljs-number">0</span>)<br>            <span class="hljs-built_in">wait</span>(remainingWaitMs);<span class="hljs-comment">// 阻塞线程，等待 metadata 的更新</span><br>        <span class="hljs-type">long</span> elapsed = System.<span class="hljs-built_in">currentTimeMillis</span>() - begin;<br>        <span class="hljs-keyword">if</span> (elapsed &gt;= maxWaitMs)<span class="hljs-comment">// timeout</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TimeoutException</span>(<span class="hljs-string">&quot;Failed to update metadata after &quot;</span> + maxWaitMs + <span class="hljs-string">&quot; ms.&quot;</span>);<br>        remainingWaitMs = maxWaitMs - elapsed;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 <code>Metadata.awaitUpdate()</code> 方法中，线程会阻塞在 <code>while</code> 循环中，直到 metadata 更新成功或者 timeout。</p><p>从前面可以看出，此时 Producer 线程会阻塞在两个 <code>while</code> 循环中，直到 metadata 信息更新，那么 metadata 是如何更新的呢？如果有印象的话，前面应该已经介绍过了，主要是通过 <code>sender.wakeup()</code>来唤醒 sender 线程，间接唤醒 NetworkClient 线程，NetworkClient 线程来负责发送 Metadata 请求，并处理 Server 端的响应。</p><p>在 Kafka 源码分析之 Producer 发送模型（一） 中介绍 Producer 发送模型时，在第五步 <code>sender</code> 线程会调用 <code>NetworkClient.poll()</code> 方法进行实际的操作，其源码如下：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public List&lt;ClientResponse&gt; poll(long timeout, long now) &#123;<br>        long metadataTimeout = metadataUpdater.maybe<span class="hljs-constructor">Update(<span class="hljs-params">now</span>)</span>;<span class="hljs-comment">// 判断是否需要更新 meta,如果需要就更新（请求更新 metadata 的地方）</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            this.selector.poll(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Utils</span>.</span></span>min(timeout, metadataTimeout, requestTimeoutMs));<br>        &#125; catch (IOException e) &#123;<br>            log.error(<span class="hljs-string">&quot;Unexpected error during I/O&quot;</span>, e);<br>        &#125;<br><br>        <span class="hljs-comment">// process completed actions</span><br>        long updatedNow = this.time.milliseconds<span class="hljs-literal">()</span>;<br>        List&lt;ClientResponse&gt; responses = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;<span class="hljs-literal">()</span>;<br>        handle<span class="hljs-constructor">AbortedSends(<span class="hljs-params">responses</span>)</span>;<br>        handle<span class="hljs-constructor">CompletedSends(<span class="hljs-params">responses</span>, <span class="hljs-params">updatedNow</span>)</span>;<span class="hljs-comment">// 通过 selector 中获取 Server 端的 response</span><br>        handle<span class="hljs-constructor">CompletedReceives(<span class="hljs-params">responses</span>, <span class="hljs-params">updatedNow</span>)</span>;<span class="hljs-comment">// 在返回的 handler 中，会处理 metadata 的更新</span><br>        handle<span class="hljs-constructor">Disconnections(<span class="hljs-params">responses</span>, <span class="hljs-params">updatedNow</span>)</span>;<br>        handle<span class="hljs-constructor">Connections()</span>;<br>        handle<span class="hljs-constructor">InitiateApiVersionRequests(<span class="hljs-params">updatedNow</span>)</span>;<br>        handle<span class="hljs-constructor">TimedOutRequests(<span class="hljs-params">responses</span>, <span class="hljs-params">updatedNow</span>)</span>;<br><br>        <span class="hljs-comment">// invoke callbacks</span><br>        <span class="hljs-keyword">for</span> (ClientResponse response : responses) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                response.on<span class="hljs-constructor">Complete()</span>;<br>            &#125; catch (Exception e) &#123;<br>                log.error(<span class="hljs-string">&quot;Uncaught error in request completion:&quot;</span>, e);<br>            &#125;<br>        &#125;<br>        return responses;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>在这个方法中，主要会以下操作：</p><ul><li><code>metadataUpdater.maybeUpdate(now)</code>：判断是否需要更新 Metadata，如果需要更新的话，先与 Broker 建立连接，然后发送更新 metadata 的请求；</li><li>处理 Server 端的一些响应，这里主要讨论的是 <code>handleCompletedReceives(responses, updatedNow)</code> 方法，它会处理 Server 端返回的 Metadata 结果。</li></ul><p>先看一下 <code>metadataUpdater.maybeUpdate()</code> 的具体实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">maybeUpdate</span><span class="hljs-params">(<span class="hljs-type">long</span> now)</span> &#123;<br>        <span class="hljs-comment">// should we update our metadata?</span><br>        <span class="hljs-comment">// metadata 是否应该更新</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">timeToNextMetadataUpdate</span> <span class="hljs-operator">=</span> metadata.timeToNextUpdate(now);<span class="hljs-comment">// metadata 下次更新的时间（需要判断是强制更新还是 metadata 过期更新,前者是立马更新,后者是计算 metadata 的过期时间）</span><br>        <span class="hljs-comment">// 如果一条 metadata 的 fetch 请求还未从 server 收到恢复,那么时间设置为 waitForMetadataFetch（默认30s）</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">waitForMetadataFetch</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.metadataFetchInProgress ? requestTimeoutMs : <span class="hljs-number">0</span>;<br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">metadataTimeout</span> <span class="hljs-operator">=</span> Math.max(timeToNextMetadataUpdate, waitForMetadataFetch);<br>        <span class="hljs-keyword">if</span> (metadataTimeout &gt; <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">// 时间未到时,直接返回下次应该更新的时间</span><br>            <span class="hljs-keyword">return</span> metadataTimeout;<br>        &#125;<br><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> leastLoadedNode(now);<span class="hljs-comment">// 选择一个连接数最小的节点</span><br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            log.debug(<span class="hljs-string">&quot;Give up sending metadata request since no node is available&quot;</span>);<br>            <span class="hljs-keyword">return</span> reconnectBackoffMs;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> maybeUpdate(now, node); <span class="hljs-comment">// 可以发送 metadata 请求的话,就发送 metadata 请求</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Add a metadata request to the list of sends if we can make one</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">// 判断是否可以发送请求,可以的话将 metadata 请求加入到发送列表中</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> <span class="hljs-title function_">maybeUpdate</span><span class="hljs-params">(<span class="hljs-type">long</span> now, Node node)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">nodeConnectionId</span> <span class="hljs-operator">=</span> node.idString();<br><br>        <span class="hljs-keyword">if</span> (canSendRequest(nodeConnectionId)) &#123;<span class="hljs-comment">// 通道已经 ready 并且支持发送更多的请求</span><br>            <span class="hljs-built_in">this</span>.metadataFetchInProgress = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 准备开始发送数据,将 metadataFetchInProgress 置为 true</span><br>            MetadataRequest.Builder metadataRequest; <span class="hljs-comment">// 创建 metadata 请求</span><br>            <span class="hljs-keyword">if</span> (metadata.needMetadataForAllTopics())<span class="hljs-comment">// 强制更新所有 topic 的 metadata（虽然默认不会更新所有 topic 的 metadata 信息，但是每个 Broker 会保存所有 topic 的 meta 信息）</span><br>                metadataRequest = MetadataRequest.Builder.allTopics();<br>            <span class="hljs-keyword">else</span> <span class="hljs-comment">// 只更新 metadata 中的 topics 列表（列表中的 topics 由 metadata.add() 得到）</span><br>                metadataRequest = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MetadataRequest</span>.Builder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(metadata.topics()));<br><br><br>            log.debug(<span class="hljs-string">&quot;Sending metadata request &#123;&#125; to node &#123;&#125;&quot;</span>, metadataRequest, node.id());<br>            sendInternalMetadataRequest(metadataRequest, nodeConnectionId, now);/ 发送 metadata 请求<br>            <span class="hljs-keyword">return</span> requestTimeoutMs;<br>        &#125;<br><br>        <span class="hljs-comment">// If there&#x27;s any connection establishment underway, wait until it completes. This prevents</span><br>        <span class="hljs-comment">// the client from unnecessarily connecting to additional nodes while a previous connection</span><br>        <span class="hljs-comment">// attempt has not been completed.</span><br>        <span class="hljs-keyword">if</span> (isAnyNodeConnecting()) &#123;<span class="hljs-comment">// 如果 client 正在与任何一个 node 的连接状态是 connecting,那么就进行等待</span><br>            <span class="hljs-comment">// Strictly the timeout we should return here is &quot;connect timeout&quot;, but as we don&#x27;t</span><br>            <span class="hljs-comment">// have such application level configuration, using reconnect backoff instead.</span><br>            <span class="hljs-keyword">return</span> reconnectBackoffMs;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (connectionStates.canConnect(nodeConnectionId, now)) &#123;<span class="hljs-comment">// 如果没有连接这个 node,那就初始化连接</span><br>            <span class="hljs-comment">// we don&#x27;t have a connection to this node right now, make one</span><br>            log.debug(<span class="hljs-string">&quot;Initialize connection to node &#123;&#125; for sending metadata request&quot;</span>, node.id());<br>            initiateConnect(node, now);<span class="hljs-comment">// 初始化连接</span><br>            <span class="hljs-keyword">return</span> reconnectBackoffMs;<br>        &#125;<br>        <span class="hljs-keyword">return</span> Long.MAX_VALUE;<br>    &#125;<br><br> <span class="hljs-comment">// 发送 Metadata 请求   </span><br> <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendInternalMetadataRequest</span><span class="hljs-params">(MetadataRequest.Builder builder,</span><br><span class="hljs-params">                                         String nodeConnectionId, <span class="hljs-type">long</span> now)</span> &#123;<br>    <span class="hljs-type">ClientRequest</span> <span class="hljs-variable">clientRequest</span> <span class="hljs-operator">=</span> newClientRequest(nodeConnectionId, builder, now, <span class="hljs-literal">true</span>);<span class="hljs-comment">// 创建 metadata 请求</span><br>    doSend(clientRequest, <span class="hljs-literal">true</span>, now);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>所以，每次 Producer 请求更新 metadata 时，会有以下几种情况：</p><pre><code class="hljs">1. 如果 node 可以发送请求，则直接发送请求；2. 如果该 node 正在建立连接，则直接返回；3. 如果该 node 还没建立连接，则向 broker 初始化链接。</code></pre><p>而 KafkaProducer 线程之前是一直阻塞在两个 while 循环中，直到 metadata 更新</p><pre><code class="hljs">1. sender 线程第一次调用 ``poll()`` 方法时，初始化与 node 的连接；2. sender 线程第二次调用 ``poll()`` 方法时，发送 ``Metadata`` 请求；3. sender 线程第三次调用 ``poll()`` 方法时，获取 ``metadataResponse``，并更新 metadata。</code></pre><p>经过上述 sender 线程三次调用 poll()方法，所请求的 metadata 信息才会得到更新，此时 Producer 线程也不会再阻塞，开始发送消息。</p><p><code>NetworkClient</code> 接收到 Server 端对 Metadata 请求的响应后，更新 Metadata 信息。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// 处理任何已经完成的接收响应</span><br>    <span class="hljs-keyword">private</span> void handle<span class="hljs-constructor">CompletedReceives(List&lt;ClientResponse&gt; <span class="hljs-params">responses</span>, <span class="hljs-params">long</span> <span class="hljs-params">now</span>)</span> &#123;<br>        <span class="hljs-keyword">for</span> (NetworkReceive receive : this.selector.completed<span class="hljs-constructor">Receives()</span>) &#123;<br>            String source = receive.source<span class="hljs-literal">()</span>;<br>            InFlightRequest req = inFlightRequests.complete<span class="hljs-constructor">Next(<span class="hljs-params">source</span>)</span>;<br>            AbstractResponse body = parse<span class="hljs-constructor">Response(<span class="hljs-params">receive</span>.<span class="hljs-params">payload</span>()</span>, req.header);<br>            log.trace(<span class="hljs-string">&quot;Completed receive from node &#123;&#125;, for key &#123;&#125;, received &#123;&#125;&quot;</span>, req.destination, req.header.api<span class="hljs-constructor">Key()</span>, body);<br>            <span class="hljs-keyword">if</span> (req.isInternalRequest<span class="hljs-operator"> &amp;&amp; </span>body instanceof MetadataResponse)<span class="hljs-comment">// 如果是 meta 响应</span><br>                metadataUpdater.handle<span class="hljs-constructor">CompletedMetadataResponse(<span class="hljs-params">req</span>.<span class="hljs-params">header</span>, <span class="hljs-params">now</span>, (MetadataResponse)</span> body);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (req.isInternalRequest<span class="hljs-operator"> &amp;&amp; </span>body instanceof ApiVersionsResponse)<br>                handle<span class="hljs-constructor">ApiVersionsResponse(<span class="hljs-params">responses</span>, <span class="hljs-params">req</span>, <span class="hljs-params">now</span>, (ApiVersionsResponse)</span> body); <span class="hljs-comment">// 如果是其他响应</span><br>            <span class="hljs-keyword">else</span><br>                responses.add(req.completed(body, now));<br>        &#125;<br>    &#125;<br><br>        <span class="hljs-comment">// 处理 Server 端对 Metadata 请求处理后的 response</span><br>        public void handle<span class="hljs-constructor">CompletedMetadataResponse(RequestHeader <span class="hljs-params">requestHeader</span>, <span class="hljs-params">long</span> <span class="hljs-params">now</span>, MetadataResponse <span class="hljs-params">response</span>)</span> &#123;<br>            this.metadataFetchInProgress = <span class="hljs-literal">false</span>;<br>            Cluster cluster = response.cluster<span class="hljs-literal">()</span>;<br>            <span class="hljs-comment">// check if any topics metadata failed to get updated</span><br>            Map&lt;String, Errors&gt; errors = response.errors<span class="hljs-literal">()</span>;<br>            <span class="hljs-keyword">if</span> (!errors.is<span class="hljs-constructor">Empty()</span>)<br>                log.warn(<span class="hljs-string">&quot;Error while fetching metadata with correlation id &#123;&#125; : &#123;&#125;&quot;</span>, requestHeader.correlation<span class="hljs-constructor">Id()</span>, errors);<br><br>            <span class="hljs-comment">// don&#x27;t update the cluster if there are no valid nodes...the topic we want may still be in the process of being</span><br>            <span class="hljs-comment">// created which means we will get errors and no nodes until it exists</span><br>            <span class="hljs-keyword">if</span> (cluster.nodes<span class="hljs-literal">()</span>.size<span class="hljs-literal">()</span> &gt; <span class="hljs-number">0</span>) &#123;<br>                this.metadata.update(cluster, now);<span class="hljs-comment">// 更新 meta 信息</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// 如果 metadata 中 node 信息无效,则不更新 metadata 信息</span><br>                log.trace(<span class="hljs-string">&quot;Ignoring empty metadata response with correlation id &#123;&#125;.&quot;</span>, requestHeader.correlation<span class="hljs-constructor">Id()</span>);<br>                this.metadata.failed<span class="hljs-constructor">Update(<span class="hljs-params">now</span>)</span>;<br>            &#125;<br>        &#125;<br><br></code></pre></td></tr></table></figure><p>Producer Metadata 的更新策略</p><p>Metadata 会在下面两种情况下进行更新</p><pre><code class="hljs">1. KafkaProducer 第一次发送消息时强制更新，其他时间周期性更新，它会通过 Metadata 的 lastRefreshMs, lastSuccessfulRefreshMs 这2个字段来实现；2. 强制更新： 调用 Metadata.requestUpdate() 将 needUpdate 置成了 true 来强制更新。</code></pre><p>在 NetworkClient 的 poll() 方法调用时，就会去检查这两种更新机制，只要达到其中一种，就行触发更新操作。</p><p>Metadata 的强制更新会在以下几种情况下进行：</p><pre><code class="hljs">1. initConnect 方法调用时，初始化连接；2. ``poll()`` 方法中对 ``handleDisconnections()`` 方法调用来处理连接断开的情况，这时会触发强制更新；3. ``poll()`` 方法中对 ``handleTimedOutRequests()`` 来处理请求超时时；4. 发送消息时，如果无法找到 partition 的 leader；5. 处理 Producer 响应（handleProduceResponse），如果返回关于 Metadata 过期的异常，比如：没有 topic-partition 的相关 meta 或者 client 没有权限获取其 metadata。</code></pre><p>强制更新主要是用于处理各种异常情况。</p><p>转自：<a href="https://zhuanlan.zhihu.com/p/66190242">https://zhuanlan.zhihu.com/p/66190242</a></p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kafka源码刨析之Produer发送模型（一）</title>
    <link href="/2019/11/07/2019%E2%80%9311-07-KafkaProducer%E6%BA%90%E7%A0%81%E5%88%A8%E6%9E%90/"/>
    <url>/2019/11/07/2019%E2%80%9311-07-KafkaProducer%E6%BA%90%E7%A0%81%E5%88%A8%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>kafka是一个分布式的消息中间件，目前应用十分广泛。看源码不仅可以了解其底层的细节，同时，在看代码时，也能跟着大神们学到很多的编程技巧。</p><h3 id="KafkaProducer的使用"><a href="#KafkaProducer的使用" class="headerlink" title="KafkaProducer的使用"></a>KafkaProducer的使用</h3><p>在Kafka中，Client端是由Java实现的，Server端是Scala实现的。下面我们从Client端开始，分析一下Kafaka中的Producer模型。开始之前我们先看一下怎么向Topic中生产数据。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">import</span> org.apache.kafka.clients.producer.KafkaProducer;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.producer.ProducerRecord;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.producer.Producer;<br><br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by matt on 16/7/26.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProducerTest</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">static</span> <span class="hljs-type">String</span> topicName;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">static</span> <span class="hljs-type">int</span> msgNum;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">static</span> <span class="hljs-type">int</span> key;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">String</span>[] args)</span> </span>&#123;<br>        Properties props = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Properties</span>();<br>        props.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;bootstrap.servers&quot;</span>, <span class="hljs-string">&quot;127.0.0.1:9092,127.0.0.2:9092&quot;</span>);<br>        props.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;key.serializer&quot;</span>,<span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);<br>        props.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;value.serializer&quot;</span>,<span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);<br>        topicName = <span class="hljs-string">&quot;test&quot;</span>;<br>        msgNum = <span class="hljs-number">10</span>; <span class="hljs-comment">// 发送的消息数</span><br><br>        Producer&lt;<span class="hljs-type">String</span>, <span class="hljs-type">String</span>&gt; producer = <span class="hljs-keyword">new</span> KafkaProducer&lt;&gt;(props);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; msgNum; i++) &#123;<br>            <span class="hljs-type">String</span> msg = i + <span class="hljs-string">&quot; This is matt&#x27;s blog.&quot;</span>;<br>            producer.<span class="hljs-built_in">send</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">ProducerRecord</span>&lt;<span class="hljs-type">String</span>, <span class="hljs-type">String</span>&gt;(topicName, msg));<br>        &#125;<br>        producer.<span class="hljs-built_in">close</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>从上面可以看到如何向Topic中生产数据，Kafka在这方面封装的很好，只需要两步就可以完成操作：</p><pre><code class="hljs">1. 初始化KafkaProducer类2. 调用send接口发送数据</code></pre><p>下面围绕着send接口开始展开。</p><h3 id="KafkaProducer中的send方法"><a href="#KafkaProducer中的send方法" class="headerlink" title="KafkaProducer中的send方法"></a>KafkaProducer中的send方法</h3><p>用户使用producer.send发送数据，我们看一下send()的实现</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><br><span class="hljs-comment">// 异步向一个 topic 发送数据</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Future&lt;RecordMetadata&gt; send(ProducerRecord&lt;K, V&gt; record) &#123;<br>    <span class="hljs-keyword">return</span> send(record, <span class="hljs-literal">null</span>);<br>&#125;<br><br><span class="hljs-comment">// 向 topic 异步地发送数据，当发送确认后唤起回调函数</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Future&lt;RecordMetadata&gt; send(ProducerRecord&lt;K, V&gt; record, Callback callback) &#123;<br>    <span class="hljs-comment">// intercept the record, which can be potentially modified; this method does not throw exceptions</span><br>    ProducerRecord&lt;K, V&gt; interceptedRecord = <span class="hljs-keyword">this</span>.interceptors == <span class="hljs-literal">null</span> ? record : <span class="hljs-keyword">this</span>.interceptors.onSend(record);<br>    <span class="hljs-keyword">return</span> doSend(interceptedRecord, callback);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>接口最后会走一个doSend()方法，接着追进去</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">private</span> Future&lt;RecordMetadata&gt; <span class="hljs-keyword">do</span><span class="hljs-constructor">Send(ProducerRecord&lt;K, V&gt; <span class="hljs-params">record</span>, Callback <span class="hljs-params">callback</span>)</span> &#123;<br>       TopicPartition tp = null;<br>       <span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-comment">// 1.确认数据要发送到的 topic 的 metadata 是可用的</span><br>           ClusterAndWaitTime clusterAndWaitTime = wait<span class="hljs-constructor">OnMetadata(<span class="hljs-params">record</span>.<span class="hljs-params">topic</span>()</span>, record.partition<span class="hljs-literal">()</span>, maxBlockTimeMs);<br>           long remainingWaitMs = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>max(<span class="hljs-number">0</span>, maxBlockTimeMs - clusterAndWaitTime.waitedOnMetadataMs);<br>           Cluster cluster = clusterAndWaitTime.cluster;<br>           <span class="hljs-comment">// 2.序列化 record 的 key 和 value</span><br>           byte<span class="hljs-literal">[]</span> serializedKey;<br>           <span class="hljs-keyword">try</span> &#123;<br>               serializedKey = keySerializer.serialize(record.topic<span class="hljs-literal">()</span>, record.key<span class="hljs-literal">()</span>);<br>           &#125; catch (ClassCastException cce) &#123;<br>               throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">SerializationException(<span class="hljs-string">&quot;Can&#x27;t convert key of class &quot;</span> + <span class="hljs-params">record</span>.<span class="hljs-params">key</span>()</span>.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">Name()</span> +<br>                       <span class="hljs-string">&quot; to class &quot;</span> + producerConfig.get<span class="hljs-constructor">Class(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG)</span>.get<span class="hljs-constructor">Name()</span> +<br>                       <span class="hljs-string">&quot; specified in key.serializer&quot;</span>);<br>           &#125;<br>           byte<span class="hljs-literal">[]</span> serializedValue;<br>           <span class="hljs-keyword">try</span> &#123;<br>               serializedValue = valueSerializer.serialize(record.topic<span class="hljs-literal">()</span>, record.value<span class="hljs-literal">()</span>);<br>           &#125; catch (ClassCastException cce) &#123;<br>               throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">SerializationException(<span class="hljs-string">&quot;Can&#x27;t convert value of class &quot;</span> + <span class="hljs-params">record</span>.<span class="hljs-params">value</span>()</span>.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">Name()</span> +<br>                       <span class="hljs-string">&quot; to class &quot;</span> + producerConfig.get<span class="hljs-constructor">Class(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG)</span>.get<span class="hljs-constructor">Name()</span> +<br>                       <span class="hljs-string">&quot; specified in value.serializer&quot;</span>);<br>           &#125;<br><br>           <span class="hljs-comment">// 3. 获取该 record 的 partition 的值（可以指定,也可以根据算法计算）</span><br>           <span class="hljs-built_in">int</span> partition = partition(record, serializedKey, serializedValue, cluster);<br>           <span class="hljs-built_in">int</span> serializedSize = Records.LOG_OVERHEAD + <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Record</span>.</span></span>record<span class="hljs-constructor">Size(<span class="hljs-params">serializedKey</span>, <span class="hljs-params">serializedValue</span>)</span>;<br>           ensure<span class="hljs-constructor">ValidRecordSize(<span class="hljs-params">serializedSize</span>)</span>; <span class="hljs-comment">// record 的字节超出限制或大于内存限制时,就会抛出 RecordTooLargeException 异常</span><br>           tp = <span class="hljs-keyword">new</span> <span class="hljs-constructor">TopicPartition(<span class="hljs-params">record</span>.<span class="hljs-params">topic</span>()</span>, partition);<br>           long timestamp = record.timestamp<span class="hljs-literal">()</span><span class="hljs-operator"> == </span>null ? time.milliseconds<span class="hljs-literal">()</span> : record.timestamp<span class="hljs-literal">()</span>; <span class="hljs-comment">// 时间戳</span><br>           log.trace(<span class="hljs-string">&quot;Sending record &#123;&#125; with callback &#123;&#125; to topic &#123;&#125; partition &#123;&#125;&quot;</span>, record, callback, record.topic<span class="hljs-literal">()</span>, partition);<br>           Callback interceptCallback = this.interceptors<span class="hljs-operator"> == </span>null ? callback : <span class="hljs-keyword">new</span> InterceptorCallback&lt;&gt;(callback, this.interceptors, tp);<br>           <span class="hljs-comment">// 4. 向 accumulator 中追加数据</span><br>           RecordAccumulator.RecordAppendResult result = accumulator.append(tp, timestamp, serializedKey, serializedValue,interceptCallback, remainingWaitMs);<br>           <span class="hljs-comment">// 5. 如果 batch 已经满了,唤醒 sender 线程发送数据</span><br>           <span class="hljs-keyword">if</span> (result.batchIsFull<span class="hljs-operator"> || </span>result.newBatchCreated) &#123;<br>               log.trace(<span class="hljs-string">&quot;Waking up the sender since topic &#123;&#125; partition &#123;&#125; is either full or getting a new batch&quot;</span>,record.topic<span class="hljs-literal">()</span>,partition);<br>               this.sender.wakeup<span class="hljs-literal">()</span>;<br>           &#125;<br>           return result.future;<br>       &#125; catch (ApiException e) &#123;<br>           log.debug(<span class="hljs-string">&quot;Exception occurred during message send:&quot;</span>, e);<br>           <span class="hljs-keyword">if</span> (callback != null)<br>               callback.on<span class="hljs-constructor">Completion(<span class="hljs-params">null</span>, <span class="hljs-params">e</span>)</span>;<br>           this.errors.record<span class="hljs-literal">()</span>;<br>           <span class="hljs-keyword">if</span> (this.interceptors != null)<br>               this.interceptors.on<span class="hljs-constructor">SendError(<span class="hljs-params">record</span>, <span class="hljs-params">tp</span>, <span class="hljs-params">e</span>)</span>;<br>           return <span class="hljs-keyword">new</span> <span class="hljs-constructor">FutureFailure(<span class="hljs-params">e</span>)</span>;<br>       &#125; catch (InterruptedException e) &#123;<br>           this.errors.record<span class="hljs-literal">()</span>;<br>           <span class="hljs-keyword">if</span> (this.i nterceptors != null)<br>               this.interceptors.on<span class="hljs-constructor">SendError(<span class="hljs-params">record</span>, <span class="hljs-params">tp</span>, <span class="hljs-params">e</span>)</span>;<br>           throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">InterruptException(<span class="hljs-params">e</span>)</span>;<br>       &#125; catch (BufferExhaustedException e) &#123;<br>           this.errors.record<span class="hljs-literal">()</span>;<br>           this.metrics.sensor(<span class="hljs-string">&quot;buffer-exhausted-records&quot;</span>).record<span class="hljs-literal">()</span>;<br>           <span class="hljs-keyword">if</span> (this.interceptors != null)<br>               this.interceptors.on<span class="hljs-constructor">SendError(<span class="hljs-params">record</span>, <span class="hljs-params">tp</span>, <span class="hljs-params">e</span>)</span>;<br>           throw e;<br>       &#125; catch (KafkaException e) &#123;<br>           this.errors.record<span class="hljs-literal">()</span>;<br>           <span class="hljs-keyword">if</span> (this.interceptors != null)<br>               this.interceptors.on<span class="hljs-constructor">SendError(<span class="hljs-params">record</span>, <span class="hljs-params">tp</span>, <span class="hljs-params">e</span>)</span>;<br>           throw e;<br>       &#125; catch (Exception e) &#123;<br>           <span class="hljs-keyword">if</span> (this.interceptors != null)<br>               this.interceptors.on<span class="hljs-constructor">SendError(<span class="hljs-params">record</span>, <span class="hljs-params">tp</span>, <span class="hljs-params">e</span>)</span>;<br>           throw e;<br>       &#125;<br>   &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在 dosend() 方法的实现上，一条 Record 数据的发送，可以分为以下五步：</p><pre><code class="hljs">1. 确认数据要发送到的 topic 的 metadata 是可用的（如果该 partition 的 leader 存在则是可用的，如果开启权限时，client 有相应的权限），如果没有 topic 的 metadata 信息，就需要获取相应的 metadata；2. 序列化 record 的 key 和 value；3. 获取该 record 要发送到的 partition（可以指定，也可以根据算法计算）；4. 向 accumulator 中追加 record 数据，数据会先进行缓存；5. 如果追加完数据后，对应的 RecordBatch 已经达到了 batch.size 的大小（或者batch 的剩余空间不足以添加下一条 Record），则唤醒 sender 线程发送数据。</code></pre><p>数据的发送过程，可以简单总结为以上五点，下面会这几部分的具体实现进行详细分析。</p><h2 id="发送的过程详解"><a href="#发送的过程详解" class="headerlink" title="发送的过程详解"></a>发送的过程详解</h2><h3 id="获取-topic-的-metadata-信息"><a href="#获取-topic-的-metadata-信息" class="headerlink" title="获取 topic 的 metadata 信息"></a>获取 topic 的 metadata 信息</h3><p>Producer 通过 waitOnMetadata() 方法来获取对应 topic 的 metadata 信息，这部分后面会单独抽出一篇文章来介绍，这里就不再详述，总结起来就是：在数据发送前，需要先该 topic 是可用的。</p><h3 id="key-和-value-的序列化"><a href="#key-和-value-的序列化" class="headerlink" title="key 和 value 的序列化"></a>key 和 value 的序列化</h3><p>Producer 端对 record 的 key 和 value 值进行序列化操作，在 Consumer 端再进行相应的反序列化，Kafka 内部提供的序列化和反序列化算法如下图所示：</p><p><img src="https://i.loli.net/2019/11/07/r4CtIEAcmhwN7xo.jpg" alt="D8B532DC-1C96-4778-875F-2466E5835EFA.jpeg"><br>Need support? Please accept cookies and refresh the page :-)</p><p>Kafka serialize &amp; deserialize</p><p>当然我们也是可以自定义序列化的具体实现，不过一般情况下，Kafka 内部提供的这些方法已经足够使用。</p><h3 id="获取-partition-值"><a href="#获取-partition-值" class="headerlink" title="获取 partition 值"></a>获取 partition 值</h3><p>关于 partition 值的计算，分为三种情况：</p><p>指明 partition 的情况下，直接将指明的值直接作为 partiton 值；<br>没有指明 partition 值但有 key 的情况下，将 key 的 hash 值与 topic 的 partition 数进行取余得到 partition 值；<br>既没有 partition 值又没有 key 值的情况下，第一次调用时随机生成一个整数（后面每次调用在这个整数上自增），将这个值与 topic 可用的 partition 总数取余得到 partition 值，也就是常说的 round-robin 算法。<br>具体实现如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">// 当 <span class="hljs-type">record</span> 中有 <span class="hljs-keyword">partition</span> 值时，直接返回，没有的情况下调用 partitioner 的类的 <span class="hljs-keyword">partition</span> 方法去计算（KafkaProducer.<span class="hljs-keyword">class</span>）<br>private <span class="hljs-type">int</span> <span class="hljs-keyword">partition</span>(ProducerRecord&lt;K, V&gt; <span class="hljs-type">record</span>, byte[] serializedKey, byte[] serializedValue, <span class="hljs-keyword">Cluster</span> <span class="hljs-keyword">cluster</span>) &#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-keyword">partition</span> = <span class="hljs-type">record</span>.<span class="hljs-keyword">partition</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">partition</span> != <span class="hljs-keyword">null</span> ?<br>            <span class="hljs-keyword">partition</span> :<br>            partitioner.<span class="hljs-keyword">partition</span>(<br>                    <span class="hljs-type">record</span>.topic(), <span class="hljs-type">record</span>.key(), serializedKey, <span class="hljs-type">record</span>.<span class="hljs-keyword">value</span>(), serializedValue, <span class="hljs-keyword">cluster</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>Producer 默认使用的<code>partitioner</code>是<code>org.apache.kafka.clients.producer.internals.DefaultPartitioner</code>，用户也可以自定义 partition 的策略，下面是这个类两个方法的具体实现：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-built_in">int</span> partition(String topic, Object key, byte<span class="hljs-literal">[]</span> keyBytes, Object value, byte<span class="hljs-literal">[]</span> valueBytes, Cluster cluster) &#123;<br>        List&lt;PartitionInfo&gt; partitions = cluster.partitions<span class="hljs-constructor">ForTopic(<span class="hljs-params">topic</span>)</span>;<br>        <span class="hljs-built_in">int</span> numPartitions = partitions.size<span class="hljs-literal">()</span>;<br>        <span class="hljs-keyword">if</span> (keyBytes<span class="hljs-operator"> == </span>null) &#123;<span class="hljs-comment">// 没有指定 key 的情况下</span><br>            <span class="hljs-built_in">int</span> nextValue = next<span class="hljs-constructor">Value(<span class="hljs-params">topic</span>)</span>; <span class="hljs-comment">// 第一次的时候产生一个随机整数,后面每次调用在之前的基础上自增;</span><br>            List&lt;PartitionInfo&gt; availablePartitions = cluster.available<span class="hljs-constructor">PartitionsForTopic(<span class="hljs-params">topic</span>)</span>;<br>            <span class="hljs-comment">// leader 不为 null,即为可用的 partition</span><br>            <span class="hljs-keyword">if</span> (availablePartitions.size<span class="hljs-literal">()</span> &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-built_in">int</span> part = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Utils</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">Positive(<span class="hljs-params">nextValue</span>)</span> % availablePartitions.size<span class="hljs-literal">()</span>;<br>                return availablePartitions.get(part).partition<span class="hljs-literal">()</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Utils</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">Positive(<span class="hljs-params">nextValue</span>)</span> % numPartitions;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// 有 key 的情况下,使用 key 的 hash 值进行计算</span><br>            return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Utils</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">Positive(Utils.<span class="hljs-params">murmur2</span>(<span class="hljs-params">keyBytes</span>)</span>) % numPartitions; <span class="hljs-comment">// 选择 key 的 hash 值</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 根据 topic 获取对应的整数变量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> next<span class="hljs-constructor">Value(String <span class="hljs-params">topic</span>)</span> &#123;<br>        AtomicInteger counter = topicCounterMap.get(topic);<br>        <span class="hljs-keyword">if</span> (null<span class="hljs-operator"> == </span>counter) &#123; <span class="hljs-comment">// 第一次调用时，随机产生</span><br>            counter = <span class="hljs-keyword">new</span> <span class="hljs-constructor">AtomicInteger(<span class="hljs-params">new</span> Random()</span>.next<span class="hljs-constructor">Int()</span>);<br>            AtomicInteger currentCounter = topicCounterMap.put<span class="hljs-constructor">IfAbsent(<span class="hljs-params">topic</span>, <span class="hljs-params">counter</span>)</span>;<br>            <span class="hljs-keyword">if</span> (currentCounter != null) &#123;<br>                counter = currentCounter;<br>            &#125;<br>        &#125;<br>        return counter.get<span class="hljs-constructor">AndIncrement()</span>; <span class="hljs-comment">// 后面再调用时，根据之前的结果自增</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这就是 Producer 中默认的 partitioner 实现。</p><h3 id="向-accumulator-写数据"><a href="#向-accumulator-写数据" class="headerlink" title="向 accumulator 写数据"></a>向 accumulator 写数据</h3><p>Producer 会先将 record 写入到 buffer 中，当达到一个 batch.size 的大小时，再唤起 sender 线程去发送 RecordBatch（第五步），这里先详细分析一下 Producer 是如何向 buffer 中写入数据的。</p><p>Producer 是通过 RecordAccumulator 实例追加数据，RecordAccumulator 模型如下图所示，一个重要的变量就是 ConcurrentMap&lt;TopicPartition, Deque<RecordBatch>&gt; batches，每个 TopicPartition 都会对应一个 Deque<RecordBatch>，当添加数据时，会向其 topic-partition 对应的这个 queue 最新创建的一个 RecordBatch 中添加 record，而发送数据时，则会先从 queue 中最老的那个 RecordBatch 开始发送。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">![C89D1394-<span class="hljs-number">08</span>D6-<span class="hljs-number">416</span>D-<span class="hljs-number">814</span>D-BC19D65091B2.jpeg](https:<span class="hljs-regexp">//i</span>.loli.net<span class="hljs-regexp">/2019/</span><span class="hljs-number">11</span><span class="hljs-regexp">/07/</span>C6bS5ieDGfnAOsg.jpg)<br></code></pre></td></tr></table></figure><p>Producer RecordAccumulator 模型</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// org.apache.kafka.clients.producer.internals.RecordAccumulator</span><br>     <span class="hljs-comment">// 向 accumulator 添加一条 record，并返回添加后的结果（结果主要包含: future metadata、batch 是否满的标志以及新 batch 是否创建）其中， maxTimeToBlock 是 buffer.memory 的 block 的最大时间</span><br>    public RecordAppendResult append(TopicPartition tp,<br>                                     long timestamp,<br>                                     byte<span class="hljs-literal">[]</span> key,<br>                                     byte<span class="hljs-literal">[]</span> value,<br>                                     Callback callback,<br>                                     long maxTimeToBlock) throws InterruptedException &#123;<br>        appendsInProgress.increment<span class="hljs-constructor">AndGet()</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Deque&lt;RecordBatch&gt; dq = get<span class="hljs-constructor">OrCreateDeque(<span class="hljs-params">tp</span>)</span>;<span class="hljs-comment">// 每个 topicPartition 对应一个 queue</span><br>            synchronized (dq) &#123;<span class="hljs-comment">// 在对一个 queue 进行操作时,会保证线程安全</span><br>                <span class="hljs-keyword">if</span> (closed)<br>                    throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">IllegalStateException(<span class="hljs-string">&quot;Cannot send after the producer is closed.&quot;</span>)</span>;<br>                RecordAppendResult appendResult = <span class="hljs-keyword">try</span><span class="hljs-constructor">Append(<span class="hljs-params">timestamp</span>, <span class="hljs-params">key</span>, <span class="hljs-params">value</span>, <span class="hljs-params">callback</span>, <span class="hljs-params">dq</span>)</span>; <span class="hljs-comment">// 追加数据</span><br>                <span class="hljs-keyword">if</span> (appendResult != null)<span class="hljs-comment">// 这个 topic-partition 已经有记录了</span><br>                    return appendResult;<br>            &#125;<br><br>            <span class="hljs-comment">// 为 topic-partition 创建一个新的 RecordBatch, 需要初始化相应的 RecordBatch，要为其分配的大小是: max（batch.size, 加上头文件的本条消息的大小）</span><br>            <span class="hljs-built_in">int</span> size = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>max(this.batchSize, Records.LOG_OVERHEAD + <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Record</span>.</span></span>record<span class="hljs-constructor">Size(<span class="hljs-params">key</span>, <span class="hljs-params">value</span>)</span>);<br>            log.trace(<span class="hljs-string">&quot;Allocating a new &#123;&#125; byte message buffer for topic &#123;&#125; partition &#123;&#125;&quot;</span>, size, tp.topic<span class="hljs-literal">()</span>, tp.partition<span class="hljs-literal">()</span>);<br>            ByteBuffer buffer = free.allocate(size, maxTimeToBlock);<span class="hljs-comment">// 给这个 RecordBatch 初始化一个 buffer</span><br>            synchronized (dq) &#123;<br>                <span class="hljs-keyword">if</span> (closed)<br>                    throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">IllegalStateException(<span class="hljs-string">&quot;Cannot send after the producer is closed.&quot;</span>)</span>;<br><br>                RecordAppendResult appendResult = <span class="hljs-keyword">try</span><span class="hljs-constructor">Append(<span class="hljs-params">timestamp</span>, <span class="hljs-params">key</span>, <span class="hljs-params">value</span>, <span class="hljs-params">callback</span>, <span class="hljs-params">dq</span>)</span>;<br>                <span class="hljs-keyword">if</span> (appendResult != null) &#123;<span class="hljs-comment">// 如果突然发现这个 queue 已经存在，那么就释放这个已经分配的空间</span><br>                    free.deallocate(buffer);<br>                    return appendResult;<br>                &#125;<br>                <span class="hljs-comment">// 给 topic-partition 创建一个 RecordBatch</span><br>                MemoryRecordsBuilder recordsBuilder = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">MemoryRecords</span>.</span></span>builder(buffer, compression, TimestampType.CREATE_TIME, this.batchSize);<br>                RecordBatch batch = <span class="hljs-keyword">new</span> <span class="hljs-constructor">RecordBatch(<span class="hljs-params">tp</span>, <span class="hljs-params">recordsBuilder</span>, <span class="hljs-params">time</span>.<span class="hljs-params">milliseconds</span>()</span>);<br>                <span class="hljs-comment">// 向新的 RecordBatch 中追加数据</span><br>                FutureRecordMetadata future = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Utils</span>.</span></span>not<span class="hljs-constructor">Null(<span class="hljs-params">batch</span>.<span class="hljs-params">tryAppend</span>(<span class="hljs-params">timestamp</span>, <span class="hljs-params">key</span>, <span class="hljs-params">value</span>, <span class="hljs-params">callback</span>, <span class="hljs-params">time</span>.<span class="hljs-params">milliseconds</span>()</span>));<br><br>                dq.add<span class="hljs-constructor">Last(<span class="hljs-params">batch</span>)</span>;<span class="hljs-comment">// 将 RecordBatch 添加到对应的 queue 中</span><br>                incomplete.add(batch);<span class="hljs-comment">// 向未 ack 的 batch 集合添加这个 batch</span><br>                <span class="hljs-comment">// 如果 dp.size()&gt;1 就证明这个 queue 有一个 batch 是可以发送了</span><br>                return <span class="hljs-keyword">new</span> <span class="hljs-constructor">RecordAppendResult(<span class="hljs-params">future</span>, <span class="hljs-params">dq</span>.<span class="hljs-params">size</span>()</span> &gt; <span class="hljs-number">1</span><span class="hljs-operator"> || </span>batch.is<span class="hljs-constructor">Full()</span>, <span class="hljs-literal">true</span>);<br>            &#125;<br>        &#125; finally &#123;<br>            appendsInProgress.decrement<span class="hljs-constructor">AndGet()</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>总结一下其 record 写入的具体流程如下图所示：</p><p><img src="https://i.loli.net/2019/11/07/bL3CzBcH7G1f2Pe.jpg" alt="2EC40DD6-2B51-4F00-B2C7-CB6242E47B8F.jpeg"></p><p>Producer RecordAccumulator record 写入流程</p><p>获取该 topic-partition 对应的 queue，没有的话会创建一个空的 queue；<br>向 queue 中追加数据，先获取 queue 中最新加入的那个 RecordBatch，如果不存在或者存在但剩余空余不足以添加本条 record 则返回 null，成功写入的话直接返回结果，写入成功；<br>创建一个新的 RecordBatch，初始化内存大小根据 max(batch.size, Records.LOG_OVERHEAD + Record.recordSize(key, value)) 来确定（防止单条 record 过大的情况）；<br>向新建的 RecordBatch 写入 record，并将 RecordBatch 添加到 queue 中，返回结果，写入成功。</p><h3 id="发送-RecordBatch"><a href="#发送-RecordBatch" class="headerlink" title="发送 RecordBatch"></a>发送 RecordBatch</h3><p>当 record 写入成功后，如果发现 RecordBatch 已满足发送的条件（通常是 queue 中有多个 batch，那么最先添加的那些 batch 肯定是可以发送了），那么就会唤醒 sender 线程，发送 RecordBatch。</p><p>sender 线程对 RecordBatch 的处理是在 run() 方法中进行的，该方法具体实现如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">void run(long now) &#123;<br>        Cluster cluster = metadata.fetch();<br>        <span class="hljs-comment">// 获取那些已经可以发送的 RecordBatch 对应的 nodes</span><br>        RecordAccumulator.ReadyCheckResult result = <span class="hljs-keyword">this</span>.accumulator.ready(cluster, now);<br><br>        <span class="hljs-comment">// 如果有 topic-partition 的 leader 是未知的,就强制 metadata 更新</span><br>        <span class="hljs-keyword">if</span> (!result.unknownLeaderTopics.isEmpty()) &#123;<br>            <span class="hljs-keyword">for</span> (String topic : result.unknownLeaderTopics)<br>                <span class="hljs-keyword">this</span>.metadata.add(topic);<br>            <span class="hljs-keyword">this</span>.metadata.requestUpdate();<br>        &#125;<br><br>        <span class="hljs-comment">// 如果与node 没有连接（如果可以连接,同时初始化该连接）,就证明该 node 暂时不能发送数据,暂时移除该 node</span><br>        Iterator&lt;Node&gt; iter = result.readyNodes.iterator();<br>        long notReadyTimeout = <span class="hljs-built_in">Long</span>.MAX_VALUE;<br>        <span class="hljs-keyword">while</span> (iter.hasNext()) &#123;<br>            Node node = iter.next();<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.client.ready(node, now)) &#123;<br>                iter.remove();<br>                notReadyTimeout = Math.min(notReadyTimeout, <span class="hljs-keyword">this</span>.client.connectionDelay(node, now));<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 返回该 node 对应的所有可以发送的 RecordBatch 组成的 batches（key 是 node.id）,并将 RecordBatch 从对应的 queue 中移除</span><br>        Map&lt;Integer, List&lt;RecordBatch&gt;&gt; batches = <span class="hljs-keyword">this</span>.accumulator.drain(cluster, result.readyNodes, <span class="hljs-keyword">this</span>.maxRequestSize, now);<br>        <span class="hljs-keyword">if</span> (guaranteeMessageOrder) &#123;<br>            <span class="hljs-comment">//记录将要发送的 RecordBatch</span><br>            <span class="hljs-keyword">for</span> (List&lt;RecordBatch&gt; batchList : batches.values()) &#123;<br>                <span class="hljs-keyword">for</span> (RecordBatch batch : batchList)<br>                    <span class="hljs-keyword">this</span>.accumulator.mutePartition(batch.topicPartition);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 将由于元数据不可用而导致发送超时的 RecordBatch 移除</span><br>        List&lt;RecordBatch&gt; expiredBatches = <span class="hljs-keyword">this</span>.accumulator.abortExpiredBatches(<span class="hljs-keyword">this</span>.requestTimeout, now);<br>        <span class="hljs-keyword">for</span> (RecordBatch expiredBatch : expiredBatches)<br>            <span class="hljs-keyword">this</span>.sensors.recordErrors(expiredBatch.topicPartition.topic(), expiredBatch.recordCount);<br><br>        sensors.updateProduceRequestMetrics(batches);<br><br>        long pollTimeout = Math.min(result.nextReadyCheckDelayMs, notReadyTimeout);<br>        <span class="hljs-keyword">if</span> (!result.readyNodes.isEmpty()) &#123;<br>            log.trace(<span class="hljs-string">&quot;Nodes with data ready to send: &#123;&#125;&quot;</span>, result.readyNodes);<br>            pollTimeout = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-comment">// 发送 RecordBatch</span><br>        sendProduceRequests(batches, now);<br><br>        <span class="hljs-keyword">this</span>.client.poll(pollTimeout, now); <span class="hljs-comment">// 关于 socket 的一些实际的读写操作（其中包括 meta 信息的更新）</span><br>    &#125;<br><br></code></pre></td></tr></table></figure><p>这段代码前面有很多是其他的逻辑处理，如：移除暂时不可用的 node、处理由于元数据不可用导致的超时RecordBatch，真正进行发送发送RecordBatch的是sendProduceRequests(batches, now)这个方法，具体是：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Transfer the record batches into a list of produce requests on a per-node basis</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> void send<span class="hljs-constructor">ProduceRequests(Map&lt;Integer, List&lt;RecordBatch&gt;&gt; <span class="hljs-params">collated</span>, <span class="hljs-params">long</span> <span class="hljs-params">now</span>)</span> &#123;<br>    <span class="hljs-keyword">for</span> (Map.Entry&lt;Integer, List&lt;RecordBatch&gt;&gt; entry : collated.entry<span class="hljs-constructor">Set()</span>)<br>        send<span class="hljs-constructor">ProduceRequest(<span class="hljs-params">now</span>, <span class="hljs-params">entry</span>.<span class="hljs-params">getKey</span>()</span>, acks, requestTimeout, entry.get<span class="hljs-constructor">Value()</span>);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Create a produce request from the given record batches</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">// 发送 produce 请求</span><br><span class="hljs-keyword">private</span> void send<span class="hljs-constructor">ProduceRequest(<span class="hljs-params">long</span> <span class="hljs-params">now</span>, <span class="hljs-params">int</span> <span class="hljs-params">destination</span>, <span class="hljs-params">short</span> <span class="hljs-params">acks</span>, <span class="hljs-params">int</span> <span class="hljs-params">timeout</span>, List&lt;RecordBatch&gt; <span class="hljs-params">batches</span>)</span> &#123;<br>    Map&lt;TopicPartition, MemoryRecords&gt; produceRecordsByPartition = <span class="hljs-keyword">new</span> HashMap&lt;&gt;(batches.size<span class="hljs-literal">()</span>);<br>    final Map&lt;TopicPartition, RecordBatch&gt; recordsByPartition = <span class="hljs-keyword">new</span> HashMap&lt;&gt;(batches.size<span class="hljs-literal">()</span>);<br>    <span class="hljs-keyword">for</span> (RecordBatch batch : batches) &#123;<br>        TopicPartition tp = batch.topicPartition;<br>        produceRecordsByPartition.put(tp, batch.records<span class="hljs-literal">()</span>);<br>        recordsByPartition.put(tp, batch);<br>    &#125;<br><br>    ProduceRequest.Builder requestBuilder =<br>            <span class="hljs-keyword">new</span> ProduceRequest.<span class="hljs-constructor">Builder(<span class="hljs-params">acks</span>, <span class="hljs-params">timeout</span>, <span class="hljs-params">produceRecordsByPartition</span>)</span>;<br>    RequestCompletionHandler callback = <span class="hljs-keyword">new</span> <span class="hljs-constructor">RequestCompletionHandler()</span> &#123;<br>        public void on<span class="hljs-constructor">Complete(ClientResponse <span class="hljs-params">response</span>)</span> &#123;<br>            handle<span class="hljs-constructor">ProduceResponse(<span class="hljs-params">response</span>, <span class="hljs-params">recordsByPartition</span>, <span class="hljs-params">time</span>.<span class="hljs-params">milliseconds</span>()</span>);<br>        &#125;<br>    &#125;;<br><br>    String nodeId = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String(<span class="hljs-params">destination</span>)</span>;<br>    ClientRequest clientRequest = client.<span class="hljs-keyword">new</span><span class="hljs-constructor">ClientRequest(<span class="hljs-params">nodeId</span>, <span class="hljs-params">requestBuilder</span>, <span class="hljs-params">now</span>, <span class="hljs-params">acks</span> != 0, <span class="hljs-params">callback</span>)</span>;<br>    client.send(clientRequest, now);<br>    log.trace(<span class="hljs-string">&quot;Sent produce request to &#123;&#125;: &#123;&#125;&quot;</span>, nodeId, requestBuilder);<br></code></pre></td></tr></table></figure><p>这段代码就简单很多，总来起来就是，将 batches 中 leader 为同一个 node 的所有 RecordBatch 放在一个请求中进行发送。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>本文是对 Kafka Producer 端发送模型的一个简单分析，下一篇文章将会详细介绍 metadata 相关的内容，包括 metadata 的内容以及在 Producer 端 metadata 的更新机制。</p><p>转自：<a href="https://zhuanlan.zhihu.com/p/66190242">https://zhuanlan.zhihu.com/p/66190242</a></p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>神经网络：基本分类[转]</title>
    <link href="/2019/08/20/2019%E2%80%9308-20-%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%EF%BC%9A%E5%9F%BA%E6%9C%AC%E5%88%86%E7%B1%BB%5B%E8%BD%AC%5D/"/>
    <url>/2019/08/20/2019%E2%80%9308-20-%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%EF%BC%9A%E5%9F%BA%E6%9C%AC%E5%88%86%E7%B1%BB%5B%E8%BD%AC%5D/</url>
    
    <content type="html"><![CDATA[<p>代码式例：<a href="https://colab.research.google.com/github/tensorflow/docs/blob/master/site/en/tutorials/keras/basic_classification.ipynb">Run in Gogle Colab</a> &#x2F; <a href="https://github.com/tensorflow/docs/blob/master/site/en/tutorials/keras/basic_classification.ipynb">View source on Github</a></p><p>本指南转自TensorFlow官网。主要训练了一个神经网络模型，来对服装图像进行分类，例如运动鞋和衬衫。如果您不了解所有细节也不需要担心，这是一个对完整TensorFlow项目的简要概述，相关的细节会在需要时进行解释</p><p>本指南使用<code>tf.keras</code>，这是一个用于在TensorFlow中构建和训练模型的高级API。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> absolute_import, division, print_function, unicode_literals<br><br><span class="hljs-comment"># 导入TensorFlow和tf.keras</span><br><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br><span class="hljs-keyword">from</span> tensorflow <span class="hljs-keyword">import</span> keras<br><br><span class="hljs-comment"># 导入辅助库</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-built_in">print</span>(tf.__version__)<br></code></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">2.0</span><span class="hljs-number">.0</span>-beta1<br></code></pre></td></tr></table></figure><h3 id="导入Fashion-MNIST数据集"><a href="#导入Fashion-MNIST数据集" class="headerlink" title="导入Fashion MNIST数据集"></a>导入Fashion MNIST数据集</h3><p>本指南使用Fashion MNIST 数据集，其中包含了10个类别中共70,000张灰度图像。图像包含了低分辨率（28 x 28像素）的单个服装物品，如下所示:<br><img src="https://i.loli.net/2019/08/20/jmXkbzvKDIF9fid.png" alt="Figure 1. Fashion-MNIST samples (by Zalando, MIT License)."></p><p>Fashion MNIST 旨在替代传统的MNIST数据集 — 它经常被作为机器学习在计算机视觉方向的”Hello, World”。MNIST数据集包含手写数字（0,1,2等）的图像，其格式与我们在此处使用的服装相同。</p><p>本指南使用Fashion MNIST进行多样化，因为它比普通的MNIST更具挑战性。两个数据集都相对较小，用于验证算法是否按预期工作。它们是测试和调试代码的良好起点。</p><p>我们将使用60,000张图像来训练网络和10,000张图像来评估网络模型学习图像分类任务的准确程度。您可以直接从TensorFlow使用Fashion MNIST，只需导入并加载数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">fashion_mnist = keras.datasets.fashion_mnist<br><br>(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()<br></code></pre></td></tr></table></figure><p>结果:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">Downloading data <span class="hljs-keyword">from</span> https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-labels-idx1-ubyte.gz<br><span class="hljs-number">32768</span>/<span class="hljs-number">29515</span> [=================================] - 0s 0us/step<br>Downloading data <span class="hljs-keyword">from</span> https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-images-idx3-ubyte.gz<br><span class="hljs-number">26427392</span>/<span class="hljs-number">26421880</span> [==============================] - 0s 0us/step<br>Downloading data <span class="hljs-keyword">from</span> https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-labels-idx1-ubyte.gz<br><span class="hljs-number">8192</span>/<span class="hljs-number">5148</span> [===============================================] - 0s 0us/step<br>Downloading data <span class="hljs-keyword">from</span> https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-images-idx3-ubyte.gz<br><span class="hljs-number">4423680</span>/<span class="hljs-number">4422102</span> [==============================] - 0s 0us/step<br></code></pre></td></tr></table></figure><p>加载数据集并返回四个NumPy数组:</p><ul><li>train_images和train_labels数组是训练集—这是模型用来学习的数据。</li><li>模型通过测试集进行测试, 即test_images与 test_labels两个数组。</li></ul><p>图像是28x28 NumPy数组，像素值介于0到255之间。labels是一个整数数组，数值介于0到9之间。这对应了图像所代表的服装的类别:</p><table><thead><tr><th>标签</th><th>类别</th></tr></thead><tbody><tr><td>0</td><td>T-shirt&#x2F;top</td></tr><tr><td>1</td><td>Trouser</td></tr><tr><td>2</td><td>Pullover</td></tr><tr><td>3</td><td>Dress</td></tr><tr><td>4</td><td>Coat</td></tr><tr><td>5</td><td>Sandal</td></tr><tr><td>6</td><td>Shirt</td></tr><tr><td>7</td><td>Sneaker</td></tr><tr><td>8</td><td>Bag</td></tr><tr><td>9</td><td>Ankle boot</td></tr></tbody></table><p>每个图像都映射到一个标签。由于类别名称不包含在数据集中,因此把他们存储在这里以便在绘制图像时使用:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">class_names = [<span class="hljs-string">&#x27;T-shirt/top&#x27;</span>, <span class="hljs-string">&#x27;Trouser&#x27;</span>, <span class="hljs-string">&#x27;Pullover&#x27;</span>, <span class="hljs-string">&#x27;Dress&#x27;</span>, <span class="hljs-string">&#x27;Coat&#x27;</span>,<span class="hljs-string">&#x27;Sandal&#x27;</span>, <span class="hljs-string">&#x27;Shirt&#x27;</span>, <span class="hljs-string">&#x27;Sneaker&#x27;</span>, <span class="hljs-string">&#x27;Bag&#x27;</span>, <span class="hljs-string">&#x27;Ankle boot&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="探索数据"><a href="#探索数据" class="headerlink" title="探索数据"></a>探索数据</h3><p>让我们在训练模型之前探索数据集的格式。以下显示训练集中有60,000个图像，每个图像表示为28 x 28像素:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">train_images.shape<br></code></pre></td></tr></table></figure><p>同样，训练集中有60,000个标签:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">len</span>(train_labels)<br></code></pre></td></tr></table></figure><p>每个标签都是0到9之间的整数:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">train_labels<br></code></pre></td></tr></table></figure><p>测试集中有10,000个图像。 同样，每个图像表示为28×28像素:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">test_images.shape<br></code></pre></td></tr></table></figure><p>测试集包含10,000个图像标签:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">len</span>(test_labels)<br></code></pre></td></tr></table></figure><h3 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h3><p>在训练网络之前必须对数据进行预处理。 如果您检查训练集中的第一个图像，您将看到像素值落在0到255的范围内:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.figure()<br>plt.imshow(train_images[<span class="hljs-number">0</span>])<br>plt.colorbar()<br>plt.grid(<span class="hljs-literal">False</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/20/baylZYDAmQNUT4L.png" alt="2.png"></p><p>在馈送到神经网络模型之前，我们将这些值缩放到0到1的范围。为此，我们将像素值值除以255。重要的是，对训练集和测试集要以相同的方式进行预处理:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">train_images = train_images / <span class="hljs-number">255.0</span><br><br>test_images = test_images / <span class="hljs-number">255.0</span><br></code></pre></td></tr></table></figure><p>显示训练集中的前25个图像，并在每个图像下方显示类名。验证数据格式是否正确，我们是否已准备好构建和训练网络。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.figure(figsize=(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">25</span>):<br>    plt.subplot(<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,i+<span class="hljs-number">1</span>)<br>    plt.xticks([])<br>    plt.yticks([])<br>    plt.grid(<span class="hljs-literal">False</span>)<br>    plt.imshow(train_images[i], cmap=plt.cm.binary)<br>    plt.xlabel(class_names[train_labels[i]])<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/20/kXFbnSYayO19lpZ.png" alt="3.png"></p><h3 id="构建模型"><a href="#构建模型" class="headerlink" title="构建模型"></a>构建模型</h3><p>构建神经网络需要配置模型的层，然后编译模型。</p><p><strong>设置网络层</strong></p><p>一个神经网络最基本的组成部分便是网络层。网络层从提供给他们的数据中提取表示，并期望这些表示对当前的问题更加有意义</p><p>大多数深度学习是由串连在一起的网络层所组成。大多数网络层，例如<code>tf.keras.layers.Dense</code>，具有在训练期间学习的参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">model = keras.Sequential([<br>    keras.layers.Flatten(input_shape=(<span class="hljs-number">28</span>, <span class="hljs-number">28</span>)),<br>    keras.layers.Dense(<span class="hljs-number">128</span>, activation=tf.nn.relu),<br>    keras.layers.Dense(<span class="hljs-number">10</span>, activation=tf.nn.softmax)<br>])<br></code></pre></td></tr></table></figure><p>网络中的第一层, <code>tf.keras.layers.Flatten</code>, 将图像格式从一个二维数组(包含着28x28个像素)转换成为一个包含着28 * 28 &#x3D; 784个像素的一维数组。可以将这个网络层视为它将图像中未堆叠的像素排列在一起。这个网络层没有需要学习的参数;它仅仅对数据进行格式化。</p><p>在像素被展平之后，网络由一个包含有两个tf.keras.layers.Dense网络层的序列组成。他们被称作稠密链接层或全连接层。 第一个Dense网络层包含有128个节点(或被称为神经元)。第二个(也是最后一个)网络层是一个包含10个节点的softmax层—它将返回包含10个概率分数的数组，总和为1。每个节点包含一个分数，表示当前图像属于10个类别之一的概率。</p><p><strong>编译模型</strong></p><p>在模型准备好进行训练之前，它还需要一些配置。这些是在模型的编译(compile)步骤中添加的:</p><ul><li>损失函数 —这可以衡量模型在培训过程中的准确程度。 我们希望将此函数最小化以”驱使”模型朝正确的方向拟合。</li><li>优化器 —这就是模型根据它看到的数据及其损失函数进行更新的方式。’</li><li>评价方式 —用于监控训练和测试步骤。以下示例使用准确率(accuracy)，即正确分类的图像的分数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">model.<span class="hljs-built_in">compile</span>(optimizer=<span class="hljs-string">&#x27;adam&#x27;</span>,<br>              loss=<span class="hljs-string">&#x27;sparse_categorical_crossentropy&#x27;</span>,<br>              metrics=[<span class="hljs-string">&#x27;accuracy&#x27;</span>])<br></code></pre></td></tr></table></figure><h3 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h3><p>训练神经网络模型需要以下步骤:</p><pre><code class="hljs">1. 将训练数据提供给模型 - 在本案例中，他们是train_images和train_labels数组。2. 模型学习如何将图像与其标签关联3. 我们使用模型对测试集进行预测, 在本案例中为test_images数组。我们验证预测结果是否匹配test_labels数组中保存的标签。4. 通过调用model.fit方法来训练模型 — 模型对训练数据进行&quot;拟合&quot;。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">model.fit(train_images, train_labels, epochs=<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><p>结果:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">WARNING: Logging before flag parsing goes to stderr.<br>W0703 <span class="hljs-number">00</span>:<span class="hljs-number">57</span>:<span class="hljs-number">16.227570</span> <span class="hljs-number">140360607328000</span> deprecation.py:<span class="hljs-number">323</span>] From /tmpfs/src/tf_docs_env/lib/python3<span class="hljs-number">.5</span>/site-packages/tensorflow/python/ops/math_grad.py:<span class="hljs-number">1250</span>: add_dispatch_support.&lt;<span class="hljs-built_in">locals</span>&gt;.wrapper (<span class="hljs-keyword">from</span> tensorflow.python.ops.array_ops) <span class="hljs-keyword">is</span> deprecated <span class="hljs-keyword">and</span> will be removed <span class="hljs-keyword">in</span> a future version.<br>Instructions <span class="hljs-keyword">for</span> updating:<br>Use tf.where <span class="hljs-keyword">in</span> <span class="hljs-number">2.0</span>, which has the same broadcast rule <span class="hljs-keyword">as</span> np.where<br><br>Train on <span class="hljs-number">60000</span> samples<br>Epoch <span class="hljs-number">1</span>/<span class="hljs-number">5</span><br><span class="hljs-number">60000</span>/<span class="hljs-number">60000</span> [==============================] - 5s 85us/sample - loss: <span class="hljs-number">0.4949</span> - accuracy: <span class="hljs-number">0.8267</span><br>Epoch <span class="hljs-number">2</span>/<span class="hljs-number">5</span><br><span class="hljs-number">60000</span>/<span class="hljs-number">60000</span> [==============================] - 6s 92us/sample - loss: <span class="hljs-number">0.3753</span> - accuracy: <span class="hljs-number">0.8641</span><br>Epoch <span class="hljs-number">3</span>/<span class="hljs-number">5</span><br><span class="hljs-number">60000</span>/<span class="hljs-number">60000</span> [==============================] - 5s 89us/sample - loss: <span class="hljs-number">0.3355</span> - accuracy: <span class="hljs-number">0.8784</span><br>Epoch <span class="hljs-number">4</span>/<span class="hljs-number">5</span><br><span class="hljs-number">60000</span>/<span class="hljs-number">60000</span> [==============================] - 4s 72us/sample - loss: <span class="hljs-number">0.3136</span> - accuracy: <span class="hljs-number">0.8855</span><br>Epoch <span class="hljs-number">5</span>/<span class="hljs-number">5</span><br><span class="hljs-number">60000</span>/<span class="hljs-number">60000</span> [==============================] - 4s 69us/sample - loss: <span class="hljs-number">0.2955</span> - accuracy: <span class="hljs-number">0.8921</span><br><br>&lt;tensorflow.python.keras.callbacks.History at <span class="hljs-number">0x7fa81c2c1b38</span>&gt;<br></code></pre></td></tr></table></figure><p>随着模型训练，将显示损失和准确率等指标。该模型在训练数据上达到约0.88(或88％)的准确度。</p><h3 id="评估准确率"><a href="#评估准确率" class="headerlink" title="评估准确率"></a>评估准确率</h3><p>接下来，比较模型在测试数据集上的执行情况:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">test_loss, test_acc = model.evaluate(test_images, test_labels)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Test accuracy:&#x27;</span>, test_acc)<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">10000</span>/<span class="hljs-number">10000</span> [==============================] - 1s 53us/sample - loss: <span class="hljs-number">0.3489</span> - accuracy: <span class="hljs-number">0.8713</span><br>Test accuracy: <span class="hljs-number">0.8713</span><br></code></pre></td></tr></table></figure><p>事实证明，测试数据集的准确性略低于训练数据集的准确性。训练精度和测试精度之间的差距是过拟合的一个例子。过拟合是指机器学习模型在新数据上的表现比在训练数据上表现更差。</p><h3 id="进行预测"><a href="#进行预测" class="headerlink" title="进行预测"></a>进行预测</h3><p>通过训练模型，我们可以使用它来预测某些图像。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">predictions = model.predict(test_images)<br></code></pre></td></tr></table></figure><p>在此，模型已经预测了测试集中每个图像的标签。我们来看看第一个预测:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">predictions[<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">array([<span class="hljs-number">6.6858855e-05</span>, <span class="hljs-number">2.5964803e-07</span>, <span class="hljs-number">5.3627105e-06</span>, <span class="hljs-number">4.5019146e-06</span>,<br>       <span class="hljs-number">2.7420206e-06</span>, <span class="hljs-number">4.7881842e-02</span>, <span class="hljs-number">2.3233067e-04</span>, <span class="hljs-number">5.4705784e-02</span>,<br>       <span class="hljs-number">8.5581087e-05</span>, <span class="hljs-number">8.9701480e-01</span>], dtype=float32)<br></code></pre></td></tr></table></figure><p>预测是10个数字的数组。这些描述了模型的”信心”，即图像对应于10种不同服装中的每一种。我们可以看到哪个标签具有最高的置信度值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">np.argmax(predictions[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><p>9</p><p>因此，模型最有信心的是这个图像是ankle boot，或者 class_names[9]。 我们可以检查测试标签，看看这是否正确:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">test_labels[<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><p>9</p><p>我们可以用图表来查看全部10个类别</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">plot_image</span>(<span class="hljs-params">i, predictions_array, true_label, img</span>):<br>  predictions_array, true_label, img = predictions_array[i], true_label[i], img[i]<br>  plt.grid(<span class="hljs-literal">False</span>)<br>  plt.xticks([])<br>  plt.yticks([])<br>  <br>  plt.imshow(img, cmap=plt.cm.binary)<br>  <br>  predicted_label = np.argmax(predictions_array)<br>  <span class="hljs-keyword">if</span> predicted_label == true_label:<br>    color = <span class="hljs-string">&#x27;blue&#x27;</span><br>  <span class="hljs-keyword">else</span>:<br>    color = <span class="hljs-string">&#x27;red&#x27;</span><br>  <br>  plt.xlabel(<span class="hljs-string">&quot;&#123;&#125; &#123;:2.0f&#125;% (&#123;&#125;)&quot;</span>.<span class="hljs-built_in">format</span>(class_names[predicted_label],<br>                                <span class="hljs-number">100</span>*np.<span class="hljs-built_in">max</span>(predictions_array),<br>                                class_names[true_label]),<br>                                color=color)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">plot_value_array</span>(<span class="hljs-params">i, predictions_array, true_label</span>):<br>  predictions_array, true_label = predictions_array[i], true_label[i]<br>  plt.grid(<span class="hljs-literal">False</span>)<br>  plt.xticks([])<br>  plt.yticks([])<br>  thisplot = plt.bar(<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>), predictions_array, color=<span class="hljs-string">&quot;#777777&quot;</span>)<br>  plt.ylim([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>])<br>  predicted_label = np.argmax(predictions_array)<br>  <br>  thisplot[predicted_label].set_color(<span class="hljs-string">&#x27;red&#x27;</span>)<br>  thisplot[true_label].set_color(<span class="hljs-string">&#x27;blue&#x27;</span>)<br></code></pre></td></tr></table></figure><p>让我们看看第0个图像，预测和预测数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">i = <span class="hljs-number">0</span><br>plt.figure(figsize=(<span class="hljs-number">6</span>,<span class="hljs-number">3</span>))<br>plt.subplot(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)<br>plot_image(i, predictions, test_labels, test_images)<br>plt.subplot(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)<br>plot_value_array(i, predictions,  test_labels)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/20/vJHqX6LogKsxzjW.png" alt="4.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">i = <span class="hljs-number">12</span><br>plt.figure(figsize=(<span class="hljs-number">6</span>,<span class="hljs-number">3</span>))<br>plt.subplot(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)<br>plot_image(i, predictions, test_labels, test_images)<br>plt.subplot(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)<br>plot_value_array(i, predictions,  test_labels)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/20/J7YiK4uWB68bLsG.png" alt="5.png"></p><p>让我们绘制几个图像及其预测结果。正确的预测标签是蓝色的，不正确的预测标签是红色的。该数字给出了预测标签的百分比(满分100)。请注意，即使非常自信，也可能出错。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># 绘制前X个测试图像，预测标签和真实标签</span><br><span class="hljs-comment"># 以蓝色显示正确的预测，红色显示不正确的预测</span><br>num_rows = <span class="hljs-number">5</span><br>num_cols = <span class="hljs-number">3</span><br>num_images = num_rows*num_cols<br>plt.figure(figsize=(<span class="hljs-number">2</span>*<span class="hljs-number">2</span>*num_cols, <span class="hljs-number">2</span>*num_rows))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_images):<br>  plt.subplot(num_rows, <span class="hljs-number">2</span>*num_cols, <span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>)<br>  plot_image(i, predictions, test_labels, test_images)<br>  plt.subplot(num_rows, <span class="hljs-number">2</span>*num_cols, <span class="hljs-number">2</span>*i+<span class="hljs-number">2</span>)<br>  plot_value_array(i, predictions, test_labels)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/20/vN8hQ4SVILftudE.png" alt="6.png"></p><p>最后，使用训练的模型对单个图像进行预测。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 从测试数据集中获取图像</span><br>img = test_images[<span class="hljs-number">0</span>]<br><br><span class="hljs-built_in">print</span>(img.shape)<br></code></pre></td></tr></table></figure><p>(28, 28)</p><p><code>tf.keras</code>模型经过优化，可以一次性对批量,或者一个集合的数据进行预测。因此，即使我们使用单个图像，我们也需要将其添加到列表中:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 将图像添加到批次中，即使它是唯一的成员。</span><br>img = (np.expand_dims(img,<span class="hljs-number">0</span>))<br><br><span class="hljs-built_in">print</span>(img.shape)<br></code></pre></td></tr></table></figure><p>(1, 28, 28)</p><p>现在来预测图像:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">predictions_single = model.predict(img)<br><br><span class="hljs-built_in">print</span>(predictions_single)<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">[[<span class="hljs-number">6.6858927e-05</span> <span class="hljs-number">2.5964729e-07</span> <span class="hljs-number">5.3627055e-06</span> <span class="hljs-number">4.5019060e-06</span> <span class="hljs-number">2.7420206e-06</span><br>  <span class="hljs-number">4.7881793e-02</span> <span class="hljs-number">2.3233047e-04</span> <span class="hljs-number">5.4705758e-02</span> <span class="hljs-number">8.5581087e-05</span> <span class="hljs-number">8.9701480e-01</span>]]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">plot_value_array(<span class="hljs-number">0</span>, predictions_single, test_labels)<br>plt.xticks(<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>), class_names, rotation=<span class="hljs-number">45</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/20/aEGWf5qzSgkbAQV.png" alt="9.png"></p><p>model.predict返回一个包含列表的列表，每个图像对应一个列表的数据。获取批次中我们(仅有的)图像的预测:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">prediction_result = np.argmax(predictions_single[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(prediction_result)<br></code></pre></td></tr></table></figure><p>9</p><p>而且，和之前一样，模型预测标签为9。</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>HiveSQL优化</title>
    <link href="/2019/08/17/2019%E2%80%9308-17-HiveSQL%E4%BC%98%E5%8C%96/"/>
    <url>/2019/08/17/2019%E2%80%9308-17-HiveSQL%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>下面列举一些常用的SQL优化方案</p><h2 id="sql引起的数据倾斜"><a href="#sql引起的数据倾斜" class="headerlink" title="sql引起的数据倾斜"></a>sql引起的数据倾斜</h2><p>数据倾斜会导致某个Reduce运行过慢影响到整体的运行时长。通常在join和group by时，会出现这样的问题</p><ol><li>join引起的数据倾斜,下面操作会将一个job变为两个job执行HQL<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">如果是<span class="hljs-built_in">join</span>过程出现倾斜，应该设置为<span class="hljs-literal">true</span></span><br>set hive.optimize.skewjoin=true;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">这个是<span class="hljs-built_in">join</span>的键对应的记录条数超过这个值则会进行优化</span><br>set hive.skewjoin.key=100000;<br></code></pre></td></tr></table></figure></li><li>group by key引起的数据倾斜<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">如果group by过程出现倾斜应该设置为<span class="hljs-literal">true</span></span><br>set hive.groupby.skewindata=true;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">这个是group的键对应的记录条数超过这个值则会进行优化</span><br>set hive.groupby.mapaggr.checkinterval=100000;<br></code></pre></td></tr></table></figure></li></ol><h2 id="mapjoin-map端执行join）"><a href="#mapjoin-map端执行join）" class="headerlink" title="mapjoin(map端执行join）"></a>mapjoin(map端执行join）</h2><p>针对应用场景合理使用MapJoin也很重要。Map Join可以解决数据倾斜问题，因为没有Reduce Task了;只运行Map Task，相比多运行Reduce Task来说省时间。</p><p>启动方式一：(自动)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">set.hive.auto.convert.join = true;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">默认值是25mb小表小于25mb自动启动mapjoin</span> <br>hive.mapjoin.smalltable.filesize=25000000<br></code></pre></td></tr></table></figure><p>启动方式二：(手动）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-comment">/*+mapjoin(A)*/</span> f.a,f.b <span class="hljs-keyword">from</span> A t <span class="hljs-keyword">join</span> B f <span class="hljs-keyword">on</span> (f.a<span class="hljs-operator">=</span>t.a)<br></code></pre></td></tr></table></figure><h2 id="bucketjoin"><a href="#bucketjoin" class="headerlink" title="bucketjoin"></a>bucketjoin</h2><p>合理利用桶分区很重要，因为它可以避免全表检索，在大数据场景中全表检索意味着什么应该可以想象…</p><p>在满足下面两个情况时使用：</p><ul><li>1.两个表以相同方式划分桶</li><li>2.两个表的桶个数是倍数关系</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">order</span>(cid <span class="hljs-type">int</span>,price <span class="hljs-type">float</span>) clustered <span class="hljs-keyword">by</span>(cid)   <span class="hljs-keyword">into</span> <span class="hljs-number">32</span> buckets;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> customer(id <span class="hljs-type">int</span>,<span class="hljs-keyword">first</span> string) clustered <span class="hljs-keyword">by</span>(id)   <span class="hljs-keyword">into</span> <span class="hljs-number">32</span><span class="hljs-operator">/</span><span class="hljs-number">64</span> buckets;<br><br><span class="hljs-keyword">select</span> price <span class="hljs-keyword">from</span> <span class="hljs-keyword">order</span> t <span class="hljs-keyword">join</span> customer s <span class="hljs-keyword">on</span> t.cid<span class="hljs-operator">=</span>s.id;<br></code></pre></td></tr></table></figure><h2 id="where条件优化"><a href="#where条件优化" class="headerlink" title="where条件优化"></a>where条件优化</h2><p>尽可能早的筛掉更多的数据。</p><p>优化前（关系数据库不用考虑会自动优化）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> m.cid,u.id <span class="hljs-keyword">from</span> <span class="hljs-keyword">order</span> m <span class="hljs-keyword">join</span> customer u <span class="hljs-keyword">on</span> m.cid <span class="hljs-operator">=</span>u.id <span class="hljs-keyword">where</span> m.dt<span class="hljs-operator">=</span><span class="hljs-string">&#x27;2019-08-18&#x27;</span>;<br></code></pre></td></tr></table></figure><p>优化后(where条件在map端执行而不是在reduce端执行）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> m.cid,u.id <span class="hljs-keyword">from</span> （<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">where</span> dt<span class="hljs-operator">=</span><span class="hljs-string">&#x27;2019-08-18&#x27;</span>） m <span class="hljs-keyword">join</span> customer u <span class="hljs-keyword">on</span> m.cid <span class="hljs-operator">=</span>u.id;<br></code></pre></td></tr></table></figure><h2 id="count-distinct优化"><a href="#count-distinct优化" class="headerlink" title="count distinct优化"></a>count distinct优化</h2><p>只有一个reduce，先去重再count负担比较大;解决方案是：启动两个job，一个job负责子查询(可以有多个reduce)，另一个job负责count(1)</p><p>优化前：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-keyword">distinct</span> id) <span class="hljs-keyword">from</span> tablename;<br></code></pre></td></tr></table></figure><p>优化后：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> id <span class="hljs-keyword">from</span> tablename) tmp;<br><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> tablename <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> id) tmp;<br><br><span class="hljs-keyword">set</span> mapred.reduce.tasks<span class="hljs-operator">=</span><span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><h2 id="合理使用union-all"><a href="#合理使用union-all" class="headerlink" title="合理使用union all"></a>合理使用union all</h2><p>优化前：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> a,<span class="hljs-built_in">sum</span>(b),<span class="hljs-built_in">count</span>(<span class="hljs-keyword">distinct</span> c),<span class="hljs-built_in">count</span>(<span class="hljs-keyword">distinct</span> d) <span class="hljs-keyword">from</span> test <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a;<br></code></pre></td></tr></table></figure><p>优化后：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> a,<span class="hljs-built_in">sum</span>(b) <span class="hljs-keyword">as</span> b,<span class="hljs-built_in">count</span>(c) <span class="hljs-keyword">as</span> c,<span class="hljs-built_in">count</span>(d) <span class="hljs-keyword">as</span> d <span class="hljs-keyword">from</span><br>（<br><span class="hljs-keyword">select</span> a, <span class="hljs-number">0</span> <span class="hljs-keyword">as</span> b,c,<span class="hljs-keyword">null</span> <span class="hljs-keyword">as</span> d <span class="hljs-keyword">from</span> test <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a,c<br><span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span><br><span class="hljs-keyword">select</span> a,<span class="hljs-number">0</span> <span class="hljs-keyword">as</span> b, <span class="hljs-keyword">null</span> <span class="hljs-keyword">as</span> c,d <span class="hljs-keyword">from</span> test <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a,d<br><span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span><br><span class="hljs-keyword">select</span> a, b,<span class="hljs-keyword">null</span> <span class="hljs-keyword">as</span> c ,<span class="hljs-keyword">null</span> <span class="hljs-keyword">as</span> d <span class="hljs-keyword">from</span> test) tmp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>HDMI连接Raspberry</title>
    <link href="/2019/07/29/2019%E2%80%9307-29-HDMI%E8%BF%9E%E6%8E%A5Raspberry/"/>
    <url>/2019/07/29/2019%E2%80%9307-29-HDMI%E8%BF%9E%E6%8E%A5Raspberry/</url>
    
    <content type="html"><![CDATA[<p>通常情况下，树莓派会自动检测显示器的类型并修改配置。但有时，自动检测的结果可能不正确。如果你的树莓派连接到电视上但没有任何显示的话，你要考虑手动修改树莓派的显示配置了</p><p><img src="https://i.loli.net/2019/07/30/5d3f1b5a7dc4c45534.jpeg" alt="https://i.loli.net/2019/07/30/5d3f1b5a7dc4c45534.jpeg"></p><p>下面我们手动修改&#x2F;boot&#x2F;config.txt文件。记得修改前备份一个，以下是参数文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">For more options and information see</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">http://rpf.io/configtxt</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Some settings may impact device functionality. See <span class="hljs-built_in">link</span> above <span class="hljs-keyword">for</span> details</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">uncomment <span class="hljs-keyword">if</span> you get no picture on HDMI <span class="hljs-keyword">for</span> a default <span class="hljs-string">&quot;safe&quot;</span> mode</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">hdmi_safe=1</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">uncomment this <span class="hljs-keyword">if</span> your display has a black border of unused pixels visible</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">and your display can output without overscan</span><br>disable_overscan=1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">uncomment the following to adjust overscan. Use positive numbers <span class="hljs-keyword">if</span> console</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">goes off screen, and negative <span class="hljs-keyword">if</span> there is too much border</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">overscan_left=16</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">overscan_right=16</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">overscan_top=16</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">overscan_bottom=16</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">uncomment to force a console size. By default it will be display<span class="hljs-string">&#x27;s size minus</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">overscan.</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-string">framebuffer_width=1280</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-string">framebuffer_height=720</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">uncomment if hdmi display is not detected and composite is being output</span></span><br>hdmi_force_hotplug=1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">uncomment to force a specific HDMI mode (this will force VGA)</span></span><br>hdmi_group=1<br>hdmi_mode=4<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">uncomment to force a HDMI mode rather than DVI. This can make audio work in</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">DMT (computer monitor) modes</span></span><br>hdmi_drive=2<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">uncomment to increase signal to HDMI, if you have interference, blanking, or</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">no display</span></span><br>config_hdmi_boost=4<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">uncomment for composite PAL</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-string">sdtv_mode=2</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-string">uncomment to overclock the arm. 700 MHz is the default.</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-string">arm_freq=800</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">Uncomment some or all of these to enable the optional hardware interfaces</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-string">dtparam=i2c_arm=on</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-string">dtparam=i2s=on</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-string">dtparam=spi=on</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">Uncomment this to enable the lirc-rpi module</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-string">dtoverlay=lirc-rpi</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">Additional overlays and parameters are documented /boot/overlays/README</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">Enable audio (loads snd_bcm2835)</span></span><br>dtparam=audio=on<br>start_x=1<br>gpu_mem=128<br>enable_uart=1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-string">disable_camera_led=1</span></span><br>hdmi_ignore_edid=0xa5000080<br></code></pre></td></tr></table></figure><p>看这个<a href="https://wenku.baidu.com/view/a8a1554e71fe910ef02df893.html">https://wenku.baidu.com/view/a8a1554e71fe910ef02df893.html</a>，学一下各个参数详解</p><p>学完之后了解一下怎么调hdmi_mode这个参数<a href="https://zhidao.baidu.com/question/519865882625562245.html">https://zhidao.baidu.com/question/519865882625562245.html</a></p>]]></content>
    
    
    <categories>
      
      <category>物联网</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Google Colab</title>
    <link href="/2019/07/23/2019%E2%80%9307-23-Google%20Colab/"/>
    <url>/2019/07/23/2019%E2%80%9307-23-Google%20Colab/</url>
    
    <content type="html"><![CDATA[<h3 id="训练模型太慢怎么办？"><a href="#训练模型太慢怎么办？" class="headerlink" title="训练模型太慢怎么办？"></a>训练模型太慢怎么办？</h3><p>训练模型的时间，好点的用1小时2小时，遇到稍复杂的得等1天甚至2天。训练后的模型，如果不满足要求，还得再反复调整，再来一遍…这简直是个噩梦有么有。去某宝、JD上搜一搜，一台上万谁买的起。对于我们这些穷得揭不开锅的苦比党来说，Google Colab可以说是我们的福音！</p><h3 id="Google-Golab"><a href="#Google-Golab" class="headerlink" title="Google Golab"></a>Google Golab</h3><p>Colaboratory 是一款研究工具，用于进行机器学习和研究。它是一个 Jupyter 笔记本环境，重点是它不需要进行任何设置就可以跑代码，而且性能方面Google提供了Tesla K80 GPU，很给力了。而且它还是永久免费的，仿佛发现了新大陆ヾ(≧O≦)〃，虽然不知道性能到底怎么样，但是跟我这用了5年的烂本子比，已经不知道好到哪去了。</p><h3 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h3><p>首先这是Google的东西，想用肯定得FQ，这没啥说的，访问下面链接<a href="https://colab.research.google.com/">Google Colab</a>。Google Colab 支持Python2和Python3语言;想用R和Scala的小伙伴得忍忍了，Google方面正在研发对他们的支持，后续会开方相关功能。</p><h3 id="记事本"><a href="#记事本" class="headerlink" title="记事本"></a>记事本</h3><p>写代码我们需要先建个“记事本”，可以通过下面两种方法建立:</p><p>1.第一次进入会弹出一个框，点框下面的 <font color="red">“NEW PYTHON 3 NOTBOOK”新建“记事本”<br><a href="https://i.loli.net/2019/07/23/5d3722e1577ab71988.png"><img src="https://i.loli.net/2019/07/23/5d3722e1577ab71988.png" alt="snapshot.png"></a></p><p>2.这个框关掉以后，左上角找到 File-&gt;New Python 3 Notbook<br><a href="https://i.loli.net/2019/07/23/5d372313881d457467.png"><img src="https://i.loli.net/2019/07/23/5d372313881d457467.png" alt="file.png"></a></p><h3 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h3><p>点击“CODE”创建一个代码片段，你可以创建多个代码片段。</p><p><a href="https://i.loli.net/2019/07/23/5d3728ac90b5852441.png"><img src="https://i.loli.net/2019/07/23/5d3728ac90b5852441.png" alt="2.png"></a></p><p>下面用Python3 测试一下环境是否正常,试着打印tensorflow版本号：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br><span class="hljs-built_in">print</span>(tf.__version__)<br></code></pre></td></tr></table></figure><p>点击画的红色框框运行代码<br><a href="https://i.loli.net/2019/07/23/5d372439cf26465483.png"><img src="https://i.loli.net/2019/07/23/5d372439cf26465483.png" alt="snapshot.png"></a></p><p>参考文档汇总:</p><p><a href="https://research.google.com/colaboratory/faq.html#browsers">官方问答</a>:<a href="https://research.google.com/colaboratory/faq.html#browsers">https://research.google.com/colaboratory/faq.html#browsers</a></p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>堆排序的应用-优先队列</title>
    <link href="/2019/07/18/2019%E2%80%9307-18-%E5%A0%86%E6%8E%92%E5%BA%8F%E7%9A%84%E5%BA%94%E7%94%A8-%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
    <url>/2019/07/18/2019%E2%80%9307-18-%E5%A0%86%E6%8E%92%E5%BA%8F%E7%9A%84%E5%BA%94%E7%94%A8-%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<p>堆排序在排序复杂性的研究中有着重要的地位，因为它是我们所知的唯一能够同时最优的利用空间和时间的方法-在最坏的情况下它能保证使用～2NlgN次比较和恒定的额外空间。</p><p>在开始了解优先队列之前我们先了解一下堆的特性：</p><p>一个大根堆有这么个特性，它的爸爸总是比它的俩孩子的值大;除了这个最基本的以外，你还要知道第k个元素的左孩子是2k，右孩子是2k+1;知道这个以后，下面我们需要实现两个方法，<font color="red">高效的删除最大元素和插入元素</font>。</p><p>如果新插入一个数，那么根据前面的特性，只需要不断循环的用自身和自己的爸爸（k&#x2F;2）比较大小，根据比较结果判断是否要交换位置即可;如果要删掉一个最大的数，只需要将根与最后一个数交换位置(因为根是大根堆中最大的数)，将其脱离堆结构，然后将根节点不断和它的孩子（2K、2K+1）比较大小，下沉到合适位置即可；</p><p>为了满足k,2k,2k+1的这种层级关系，后续将舍弃数组下标为0的位置，因为2*0会影响到这种层级关系的判断。</p><p>下面我们说一下下沉（sink）和上浮（swim）的实现方法</p><h3 id="上浮"><a href="#上浮" class="headerlink" title="上浮"></a>上浮</h3><p>如果堆的有序状态因为某个节点比它的父节点更大而被打破，那么我们就需要通过交换它和它的父节点来修复堆。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swim</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span>&#123;<br><br>    <span class="hljs-keyword">while</span>(k &gt; <span class="hljs-number">1</span> &amp;&amp; less(k/<span class="hljs-number">2</span>,k))&#123;<br>        exch(k/<span class="hljs-number">2</span>,k);<br>        k = k/<span class="hljs-number">2</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="下沉"><a href="#下沉" class="headerlink" title="下沉"></a>下沉</h3><p>与上浮相反，如果堆有序被打破，k节点想要下沉到合适的位置，代码应该这么写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sink</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span>&#123;<br><br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">2</span>*k &lt;= N)&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>*k;<br>        <span class="hljs-keyword">if</span>(j &lt; N &amp;&amp; less(j,j+<span class="hljs-number">1</span>)) j++;<br>        <span class="hljs-keyword">if</span>(!less(k,j)) <span class="hljs-keyword">break</span>;<br>        exch(k,j);<br>        k = j;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="基于堆的优先队列"><a href="#基于堆的优先队列" class="headerlink" title="基于堆的优先队列"></a>基于堆的优先队列</h3><p>下面我们实现一下堆的优先队列。优先队列由一个基于堆的完全二叉树表示，存储于数组pq[1…N]中,pq[0]不用，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MaxPQ</span>&lt;Key <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Comparable</span>&lt;Key&gt;&gt;&#123;<br><br>    <span class="hljs-keyword">private</span> Key[] pq;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MaxPQ</span><span class="hljs-params">(<span class="hljs-type">int</span> maxN)</span>&#123;<br>        pq = (Key[]) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparable</span>[maxN + <span class="hljs-number">1</span>];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">return</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span>= <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span> <span class="hljs-params">()</span>&#123;<br><br>        <span class="hljs-keyword">return</span> N;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(Key v)</span>&#123;<br><br>        pq[++N] = v;<br>        swim(N);<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Key <span class="hljs-title function_">delMax</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Key</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> pq[<span class="hljs-number">1</span>];<br>        exch(<span class="hljs-number">1</span>,N--);<br>        pq[N+<span class="hljs-number">1</span>] = <span class="hljs-literal">null</span>;<br>        sink(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> max;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">less</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j)</span>&#123;<br>        <span class="hljs-keyword">return</span> pq[i] &lt; pq[j];<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exch</span><span class="hljs-params">(i,j)</span>&#123;<br><br>        <span class="hljs-type">Key</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> pq[i];<br>        pq[i] = pq[j];<br>        pq[j] = t;<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swim</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span>&#123;<br>        ...<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sink</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span>&#123;<br>        ...<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>在insert()中，将N加1并把新元素添加到数组最后，然后用swim()恢复秩序。在delMax()中。从pq[1]中得到需要返回的元素，然后将pq[N]移动到pq[1],将N减一并用sink()恢复对的秩序。将pq[N+1]设为null，以便GC回收其所占空间。</p>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hive迁移老数据-动态分区</title>
    <link href="/2019/07/18/2019%E2%80%9307-17-%E8%BF%81%E7%A7%BB%E8%80%81%E6%95%B0%E6%8D%AE%E5%8A%A8%E6%80%81%E5%88%86%E5%8C%BA/"/>
    <url>/2019/07/18/2019%E2%80%9307-17-%E8%BF%81%E7%A7%BB%E8%80%81%E6%95%B0%E6%8D%AE%E5%8A%A8%E6%80%81%E5%88%86%E5%8C%BA/</url>
    
    <content type="html"><![CDATA[<p>现在有个hive表 dw_revisit_user_d ，创建的时候没有加partitioned by,现在想拓展表中的datestr当分区列。要怎么保证原来数据不丢，并且让原来的数据按datestr分区，以后的数据也按datestr分区？</p><p><a href="https://i.loli.net/2019/07/18/5d2fe458aa59551956.png"><img src="https://i.loli.net/2019/07/18/5d2fe458aa59551956.png" alt="9DA3BBF8-75B6-4788-8EE9-015C14D84DDD.png"></a></p><p>我们可以使用select..insert + 动态分区解决问题</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> hive.exec.dynamic.partition.mode<span class="hljs-operator">=</span>nonstrict;<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_1(datestr string,u_id string,acc_cnt <span class="hljs-type">bigint</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> t_1 <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;2019-07-17&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-number">22</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> t_1 <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;2019-07-17&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-number">24</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> t_1 <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;2019-07-16&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-number">255</span>);<br><br><span class="hljs-keyword">insert</span> overwrite <span class="hljs-keyword">table</span> t_2 <span class="hljs-keyword">partition</span> (datestr)<br><span class="hljs-keyword">select</span> u_id,acc_cnt,datestr <span class="hljs-keyword">from</span> t_1 <span class="hljs-keyword">where</span> datestr <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;2019-07-17&#x27;</span>;<br><br><span class="hljs-keyword">insert</span> overwrite <span class="hljs-keyword">table</span> t_2 <span class="hljs-keyword">partition</span> (datestr)<br><span class="hljs-keyword">select</span> u_id,acc_cnt,datestr <span class="hljs-keyword">from</span> t_1 <span class="hljs-keyword">where</span> datestr <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;2019-07-16&#x27;</span>;<br><br></code></pre></td></tr></table></figure><p>加上下面这句话，不带where直接自动匹配datestr</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> hive.exec.dynamici.partition<span class="hljs-operator">=</span><span class="hljs-literal">true</span>;<br><span class="hljs-keyword">insert</span> overwrite <span class="hljs-keyword">table</span> t_2 <span class="hljs-keyword">partition</span> (datestr)<br><span class="hljs-keyword">select</span> u_id,acc_cnt,datestr <span class="hljs-keyword">from</span> t_1;<br></code></pre></td></tr></table></figure><p>之后删掉t_1 修改t_2为t_1就行了</p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hive</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ceph集群搭建</title>
    <link href="/2019/07/17/2019-07-17-ceph/"/>
    <url>/2019/07/17/2019-07-17-ceph/</url>
    
    <content type="html"><![CDATA[<p>作者林文杰；结构图如下图所示</p><p><a href="https://i.loli.net/2019/07/17/5d2eedf4bfdf563876.png"><img src="https://i.loli.net/2019/07/17/5d2eedf4bfdf563876.png" alt="ceph.png"></a></p><h3 id="1、Selinux、防火墙和hostname文件"><a href="#1、Selinux、防火墙和hostname文件" class="headerlink" title="1、Selinux、防火墙和hostname文件"></a>1、Selinux、防火墙和hostname文件</h3><p>将&#x2F;etc&#x2F;selinux&#x2F;config文件下SELINUX&#x3D;disabled</p><p>关闭防火墙或者开通6789和6800：7300的端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/hostname<br></code></pre></td></tr></table></figure><h3 id="2、配置用户"><a href="#2、配置用户" class="headerlink" title="2、配置用户"></a>2、配置用户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">useradd -m bdipceph<br>passwd bdipceph<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">设置su权限</span><br>echo &quot;bdipceph ALL = (root) NOPASSWD:ALL&quot; | tee /etc/sudoers.d/bdipceph<br>chmod 0440 /etc/sudoers.d/bdipceph<br></code></pre></td></tr></table></figure><h3 id="3、将各节点写入hosts"><a href="#3、将各节点写入hosts" class="headerlink" title="3、将各节点写入hosts"></a>3、将各节点写入hosts</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo 192.168.140.130 ceph130 &gt;&gt; /etc/hosts<br>echo 192.168.140.133 ceph133 &gt;&gt; /etc/hosts<br>echo 192.168.140.134 ceph134 &gt;&gt; /etc/hosts<br></code></pre></td></tr></table></figure><h3 id="4、配置免密"><a href="#4、配置免密" class="headerlink" title="4、配置免密"></a>4、配置免密</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>su bdipceph<br>ssh-keygen -t rsa<br>ssh-copy-id ceph130<br>ssh-copy-id ceph133<br>ssh-copy-id ceph134<br></code></pre></td></tr></table></figure><h3 id="5、安装ntp服务和配置yum仓库"><a href="#5、安装ntp服务和配置yum仓库" class="headerlink" title="5、安装ntp服务和配置yum仓库"></a>5、安装ntp服务和配置yum仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/yum.repo.d/CentOS-ceph.repo<br><br></code></pre></td></tr></table></figure><p>下面做参考</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">[Ceph]</span><br><span class="hljs-attr">name</span>=<span class="hljs-string">Ceph packages for $basearch</span><br><span class="hljs-attr">baseurl</span>=<span class="hljs-string">https://mirrors.aliyun.com/ceph/rpm-jewel/el7/$basearch</span><br><span class="hljs-attr">enabled</span>=<span class="hljs-string">1</span><br><span class="hljs-attr">gpgcheck</span>=<span class="hljs-string">1</span><br><span class="hljs-attr">type</span>=<span class="hljs-string">rpm-md</span><br><span class="hljs-attr">gpgkey</span>=<span class="hljs-string">https://mirrors.aliyun.com/ceph/keys/release.asc</span><br><span class="hljs-attr">priority</span>=<span class="hljs-string">1</span><br><span class="hljs-attr">[Ceph-noarch]</span><br><span class="hljs-attr">name</span>=<span class="hljs-string">Ceph noarch packages</span><br><span class="hljs-attr">baseurl</span>=<span class="hljs-string">https://mirrors.aliyun.com/ceph/rpm-jewel/el7/noarch</span><br><span class="hljs-attr">enabled</span>=<span class="hljs-string">1</span><br><span class="hljs-attr">gpgcheck</span>=<span class="hljs-string">1</span><br><span class="hljs-attr">type</span>=<span class="hljs-string">rpm-md</span><br><span class="hljs-attr">gpgkey</span>=<span class="hljs-string">https://mirrors.aliyun.com/ceph/keys/release.asc</span><br><span class="hljs-attr">priority</span>=<span class="hljs-string">1</span><br><span class="hljs-attr">[ceph-source]</span><br><span class="hljs-attr">name</span>=<span class="hljs-string">Ceph source packages</span><br><span class="hljs-attr">baseurl</span>=<span class="hljs-string">https://mirrors.aliyun.com/ceph/rpm-jewel/el7/SRPMS</span><br><span class="hljs-attr">enabled</span>=<span class="hljs-string">1</span><br><span class="hljs-attr">gpgcheck</span>=<span class="hljs-string">1</span><br><span class="hljs-attr">type</span>=<span class="hljs-string">rpm-md</span><br><span class="hljs-attr">gpgkey</span>=<span class="hljs-string">https://mirrors.aliyun.com/ceph/keys/release.asc</span><br></code></pre></td></tr></table></figure><h3 id="6、安装存储集群"><a href="#6、安装存储集群" class="headerlink" title="6、安装存储集群"></a>6、安装存储集群</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>yum install ceph-deploy<br>su cephd<br>mkdir ~/my-cluster<br>ceph-deploy new ceph133<br>osd pool default size = 2<br>ceph-deploy install ceph130 ceph133 ceph134<br>ceph-deploy mon create-initial<br>ceph-deploy osd prepare ceph133:/var/local/osd0 ceph134:/var/local/osd1<br>ceph-deploy osd activate ceph133:/var/local/osd0 ceph134:/var/local/osd1<br>ceph-deploy admin ceph130 ceph133 ceph134<br>chmod +r /etc/ceph/ceph.client.admin.keyring<br>ceph health<br></code></pre></td></tr></table></figure><h3 id="7、删除osd"><a href="#7、删除osd" class="headerlink" title="7、删除osd"></a>7、删除osd</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">ceph osd out 1<br>systemctl stop ceph-osd@1<br>ceph osd crush remove osd.1<br>ceph auth del osd.1<br>ceph osd rm osd.1<br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除旧文件夹</span><br>rm -rf /var/local/osd1<br><span class="hljs-meta prompt_">#</span><span class="language-bash">调整权重</span><br>ceph osd crush reweight osd.1 0<br></code></pre></td></tr></table></figure><h3 id="8、配置文件修改发送"><a href="#8、配置文件修改发送" class="headerlink" title="8、配置文件修改发送"></a>8、配置文件修改发送</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ceph-deploy --overwrite-conf config push bdipceph104 bdipceph106 bdipceph108<br></code></pre></td></tr></table></figure><h3 id="9、配置文件内容"><a href="#9、配置文件内容" class="headerlink" title="9、配置文件内容"></a>9、配置文件内容</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">设置日志文件大小</span><br>osd journal size = 1024<br><span class="hljs-meta prompt_">#</span><span class="language-bash">设置节点数量</span><br>osd pool default size = 3<br><span class="hljs-meta prompt_">#</span><span class="language-bash">设置副本数量</span><br>osd pool default min size = 2<br><span class="hljs-meta prompt_">#</span><span class="language-bash">设置ext4能够使用</span><br>osd max object name len = 256<br>osd max object namespace len = 64<br></code></pre></td></tr></table></figure><h3 id="10、创建块设备"><a href="#10、创建块设备" class="headerlink" title="10、创建块设备"></a>10、创建块设备</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">创建映像foo大小4G</span><br>rbd create --size 4096 foo<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查询映像</span><br>rbd ls<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查询单个映像信息</span><br>rbd info foo<br><span class="hljs-meta prompt_">#</span><span class="language-bash">扩大映像大小</span><br>rbd resize --size 8192 foo<br>resize2fs /dev/rbd0<br><span class="hljs-meta prompt_">#</span><span class="language-bash">减小映像大小(会损坏数据)</span><br>rbd resize --size 4096 foo --allow-shrink<br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除映像</span><br>rbd rm foo<br><span class="hljs-meta prompt_">#</span><span class="language-bash">linux环境需要执行下面这条命令</span><br>rbd feature disable foo exclusive-lock object-map fast-diff deep-flatten<br><span class="hljs-meta prompt_">#</span><span class="language-bash">映射块设备</span><br>rbd map foo --name client.admin <br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看已映射块设备</span><br>rbd showmapped<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">取消块设备映射</span><br>rbd unmap /dev/rbd0<br>mkfs.ext4 /dev/rbd0<br><br></code></pre></td></tr></table></figure><h3 id="11、创建块设备快照"><a href="#11、创建块设备快照" class="headerlink" title="11、创建块设备快照"></a>11、创建块设备快照</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">创建快照</span><br>rbd snap create rbd/foo@snapfoo<br><span class="hljs-meta prompt_">#</span><span class="language-bash">罗列快照</span><br>rbd snap ls rbd/foo<br><span class="hljs-meta prompt_">#</span><span class="language-bash">回滚快照</span><br>rbd snap rollback rbd/foo@snapfoo<br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除快照</span><br>rbd snap rm rbd/foo@snapfoo<br><span class="hljs-meta prompt_">#</span><span class="language-bash">清除快照</span><br>rbd snap purge rbd/foo<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ceph</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Export requires a --table or a --call argument</title>
    <link href="/2019/07/16/2019%E2%80%9307-16-Export-requires-a--table-or-a--call-argument/"/>
    <url>/2019/07/16/2019%E2%80%9307-16-Export-requires-a--table-or-a--call-argument/</url>
    
    <content type="html"><![CDATA[<p>参考官方文档<a href="http://sqoop.apache.org/docs/1.4.6/SqoopUserGuide.html#_failed_exports">10. sqoop-export</a>使用Sqoop导入数据到RDSMS数据库，结果报错；错误也是让人摸不着头脑，命令中是有这些参数的。</p><p><a href="https://i.loli.net/2019/07/16/5d2d42330c66764831.png"><img src="https://i.loli.net/2019/07/16/5d2d42330c66764831.png" alt="1.png"></a></p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>做下面修改，在值的左右加上<font color="red">双引号</font>即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">--connect &quot;jdbc:sqlserver://ip:port;database=database&quot; \<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>问题总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分布式幂等性设计</title>
    <link href="/2019/07/15/2019%E2%80%9307-15-%E5%88%86%E5%B8%83%E5%BC%8F%E5%B9%82%E7%AD%89%E6%80%A7%E8%AE%BE%E8%AE%A1/"/>
    <url>/2019/07/15/2019%E2%80%9307-15-%E5%88%86%E5%B8%83%E5%BC%8F%E5%B9%82%E7%AD%89%E6%80%A7%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h3 id="幂等性"><a href="#幂等性" class="headerlink" title="幂等性"></a>幂等性</h3><p>幂等性指的是，请求一次或者是多次资源应该具有相同的副作用。  </p><h3 id="重要性"><a href="#重要性" class="headerlink" title="重要性"></a>重要性</h3><p>在一些业务场景下，幂等性显得很重要；比如金融系统、电商系统，这些都是很敏感的系统，作为软件开发者，我们有必要了解一下它。 </p><ul><li>订单创建接口，第一次调用超时了，如果再调用一次会不会再创建一个订单？  </li><li>购买商品时，减库存接口超时了，再调一次会不会扣减2个库存？  </li><li>当一笔订单开始支付，支付请求发出后，服务端发生了扣钱操作，接口响应超时了，调用方再重试一次，会不会多扣一笔钱？</li></ul><p>下面我们介绍一下怎么解决上面所述的问题。</p><h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><p>通常我们有两个方法来保证幂等性。也就是不管调用接口多少次，都要产生相同的副作用：  </p><ul><li>下游做一个查询接口，上游系统发现请求超时后，调用查询接口。发现成功了，逻辑里面什么都不用做；如果发现失败了，走失败流程进行后续处理保证最终结果正确。</li><li>把这个查询操作交给下游系统，上游系统只负责重试，下游系统要在代码上保证一次或多次请求结果是一样的.</li></ul><p>第一种没什么好说的，很好实现；第二种则需要利用一个全局ID来辅助完成。由于我们的系统是一个分布式的，要做到全局唯一貌有点小难度，分布式中，子系统很多。该由谁来维护这个全局ID？这里介绍一下Twitter 的开源项目Snowflake。它是一个分布式ID的生成算法，可以帮我们完成这个工作，你可以通过阅读下面这个文章来交接它<a href="https://www.cnblogs.com/haoxinyue/p/5208136.html">https://www.cnblogs.com/haoxinyue/p/5208136.html</a> </p>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>希尔、归并、堆、快速排序</title>
    <link href="/2019/07/08/2019%E2%80%9307-03-%E5%B8%8C%E5%B0%94%E3%80%81%E5%BD%92%E5%B9%B6%E3%80%81%E5%A0%86%E3%80%81%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <url>/2019/07/08/2019%E2%80%9307-03-%E5%B8%8C%E5%B0%94%E3%80%81%E5%BD%92%E5%B9%B6%E3%80%81%E5%A0%86%E3%80%81%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>下面我们介绍一下时间复杂度为O（nlogn）的时间复杂度:<font color="red">希尔排序、归并排序、堆排序、快速排序</font></p><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><ol><li><p>将0～（n-1）的无序列表，映射为大根堆，根据大根堆的特性，堆顶为最大值;</p></li><li><p>将堆顶与堆的最后一个元素交换位置，并将其脱离堆结构，放在数组n-1位置上;</p></li><li><p>重新调整大根堆，重复步骤2，得到第n-2的数</p></li><li><p>直到堆元素个数为1，即整个堆排序完成。</p></li></ol><p>图解流程访问下面链接中的 <a href="https://www.cs.usfca.edu/~galles/visualization/HeapSort.html">Data Structure Visualizations</a></p><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><p>希尔排序是插入排序的进化版，插入排序的每次迁移步长为1,而希尔排序则通过动态调整步长，进而提高排序效率。假如选定步长为3下面说一下排序过程</p><ol><li><p>在0～（N-1）的无序序列中，数组中位置0、1、2三个数将被直接跳过。取3位置的数（a）和0位置上的数（b）比较。如果b&gt;a,则结束比较;如果b&lt;a,则交换b和a的位置，继续使用b和-3位置上的数比较，发现-3数组越界，结束比较;</p></li><li><p>取位置4上的数和位置1上的数比较，重复上面过程;</p></li><li><p>一直到最后一个位置n与n-3比较后结束步长为3的排序过程;</p></li><li><p>让步长减1继续完成上面1、2、3的步骤，知道步长&#x3D;0,结束整个希尔排序过程;</p></li></ol><p>图解流程访问下面链接中的Shell Sort <a href="https://www.cs.usfca.edu/~galles/visualization/ComparisonSort.html">Data Structure Visualizations</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(Comparable[] a)</span> &#123;<br><br>    <span class="hljs-comment">// 希尔排序其实是插入排序的一种优化</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> a.length;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">// 自定义w的规则</span><br>    <span class="hljs-keyword">while</span>(w &lt; len / <span class="hljs-number">3</span>) &#123;<br>        w = <span class="hljs-number">3</span>*w + <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//开始进行排序</span><br>    <span class="hljs-keyword">while</span>(w &gt;= <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> w ; i &lt; len ; i ++)&#123;<br>            <span class="hljs-comment">// 将a[i]插入到a[i-w]、a[i-2*w]、a[i-3*w]....</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i ; j &gt;= w &amp;&amp; less(a[j],a[j-w]) ; j -=w )&#123;<br>                exch(a,j,j-w);<br>            &#125;<br>        &#125;<br>        w = w / <span class="hljs-number">3</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><ol><li><p>在0～（n-1）的无序列表中，将大小为1的有序区间，合并为大小为2的有序区间;</p></li><li><p>将大小为2的有序区间合并为大小为4的有序区间;</p></li><li><p>直到有序区间大小容纳所有的数，归并排序完成;</p></li></ol><p>图解流程访问下面链接中的Merge Sort <a href="https://www.cs.usfca.edu/~galles/visualization/ComparisonSort.html">Data Structure Visualizations</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Comparable[] aux;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(Comparable[] a)</span> &#123;<br>    aux = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparable</span>[a.length];<br>    sort(a,<span class="hljs-number">0</span>,a.length-<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">// 自上而下的归并排序</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(Comparable[] a,<span class="hljs-type">int</span> lo,<span class="hljs-type">int</span> hi)</span> &#123;<br><br>    <span class="hljs-keyword">if</span>(hi &lt;= lo) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// a[lo...mid] 和 a[mid+1....hi]</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> lo + (hi - lo)/<span class="hljs-number">2</span>;<br>    sort(a,lo,mid);<br>    sort(a,mid+<span class="hljs-number">1</span>,hi);<br>    merge(a,lo,mid,hi);<br><br>&#125;<br><br><span class="hljs-comment">// 合并 a[lo...mid] 和 a[mid+1....hi]</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">merge</span><span class="hljs-params">(Comparable[] a, <span class="hljs-type">int</span> lo, <span class="hljs-type">int</span> mid, <span class="hljs-type">int</span> hi)</span> &#123;<br><br>    <span class="hljs-comment">// 初始化两个指针</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> lo;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> mid + <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">// 将a复制到辅助数组aux</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> lo; k &lt;= hi; k++) &#123;<br>        aux[k] = a[k];<br>    &#125;<br>    <span class="hljs-comment">// 开始拿两个指针对应的数进行比较</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> lo; k &lt;= hi; k++) &#123;<br>        <span class="hljs-comment">// j对应的数 比i小，将比较小的放在第k位置</span><br>        <span class="hljs-keyword">if</span>(j &gt; hi)&#123;<br>            a[k] = aux[i++];<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i &gt; mid)&#123;<span class="hljs-comment">// 如果左边用完了，直接将右序列中的数放在k位置</span><br>            a[k] = aux[j++];<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(less(aux[j],aux[i]))&#123; <span class="hljs-comment">// 如果右边用完了，直接将左序列中的数放在k位置</span><br>            a[k] = aux[j++];<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            a[k] = aux[i++];<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>利用分治的思想，要对大小为N的无序序列排序，将其分为a[lo]-a[j-1],a[j],a[j+1]-a[hi]三部分，保证a[lo]-a[j-1]中的数永远小于等于a[j];a[j+1]-a[hi]中的数永远大于a[j];</p><p>在分别递归的对a[lo]-a[j-1]和a[j+1]-a[hi]重复上面的步骤。</p><p>下面我们说一下什么叫划分过程，划分过程就是怎么将小于等于a[j]的数放到a[j]的左边，大于a[j]的数放在了a[j]的右边：</p><ol><li><p>选择一个数a[lo]，初始化左指针 i &#x3D; lo ，右指针 j &#x3D; hi；</p></li><li><p>i指针往右移，找到大于等于a[lo]的数(a);j指针往左移，找到小于a[lo]的数b。交换a和b的位置,然后i继续往右移，j继续往左移，直到两者交汇。</p></li><li><p>将a[lo]与a[j]交换位置</p></li></ol><p>图解流程访问下面链接中的Quick Sort <a href="https://www.cs.usfca.edu/~galles/visualization/ComparisonSort.html">Data Structure Visualizations</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(Comparable[] a)</span> &#123;<br>    sort(a,<span class="hljs-number">0</span>,a.length-<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">// 快速排序</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(Comparable[] a,<span class="hljs-type">int</span> lo ,<span class="hljs-type">int</span> hi)</span> &#123;<br><br>    <span class="hljs-keyword">if</span>(hi &lt;= lo) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// 找到j,分别对a[lo..j-1]和a[j+1...hi]进行递归快速的排序</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> partition(a,lo,hi);<br>    <span class="hljs-comment">// sort左序列\ sort右序列</span><br>    sort(a,lo,j-<span class="hljs-number">1</span>);<br>    sort(a,j+<span class="hljs-number">1</span>,hi);<br>&#125;<br><br><span class="hljs-comment">// 对a[lo...hi] 进行划分排序</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">partition</span><span class="hljs-params">(Comparable[] a, <span class="hljs-type">int</span> lo, <span class="hljs-type">int</span> hi)</span> &#123;<br>    <span class="hljs-comment">// 定义两个指针</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> lo;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> hi + <span class="hljs-number">1</span>;<br>    <span class="hljs-type">Comparable</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> a[lo];<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-comment">// 从左边往右边一直找到第一个比v大的数</span><br>        <span class="hljs-keyword">while</span>(less(a[++i],v))<span class="hljs-keyword">if</span>(i == hi)<span class="hljs-keyword">break</span>;<br>        <span class="hljs-comment">// 从右边往左边一直找到第一个比v小的数</span><br>        <span class="hljs-keyword">while</span>(less(v,a[--j]) )<span class="hljs-keyword">if</span>(j == lo)<span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span>(i &gt;= j) <span class="hljs-keyword">break</span>;<br>        exch(a,i,j);<br>    &#125;<br>    <span class="hljs-comment">// 比较完成后将j和lo位置上的数互换</span><br>    exch(a,lo,j);<br>    <span class="hljs-keyword">return</span> j;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>排序空间复杂度与稳定性</title>
    <link href="/2019/07/08/2019%E2%80%9307-08-%E6%8E%92%E5%BA%8F%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%B8%8E%E7%A8%B3%E5%AE%9A%E6%80%A7/"/>
    <url>/2019/07/08/2019%E2%80%9307-08-%E6%8E%92%E5%BA%8F%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%B8%8E%E7%A8%B3%E5%AE%9A%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<p>8种经典排序算法已经整理完成，下面说一下他们的空间复杂度</p><h3 id="O（1）"><a href="#O（1）" class="headerlink" title="O（1）"></a>O（1）</h3><p>插入排序、冒泡排序、选择排序、希尔排序、堆排序</p><h3 id="O（n）～O（logn）"><a href="#O（n）～O（logn）" class="headerlink" title="O（n）～O（logn）"></a>O（n）～O（logn）</h3><p>快速排序</p><h3 id="O（N）"><a href="#O（N）" class="headerlink" title="O（N）"></a>O（N）</h3><p>归并排序</p><blockquote><p>这里有一些网上和书上说可以将归并排序的空间复杂度优化到O（1），这边通过手摇算法确实可以使得空间复杂度达到O（1），但是时间复杂度会上升。</p></blockquote><h3 id="O（M）"><a href="#O（M）" class="headerlink" title="O（M）"></a>O（M）</h3><p>计数排序、基数排序</p><blockquote><p>这个M代表的是桶的数量</p></blockquote><h3 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h3><p>所谓不稳定性，指的是相同元素经过排序后，改变了原数组中数的位置，即为不稳定的排序算法。</p><p>8种排序算法中，有选择排序、快速排序、希尔排序和堆排序他们是不稳定的排序算法</p><p>那么我们下面说一下，对于序列（5,5,5,1），为什么他们会是不稳定的排序算法</p><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><p>选择排序，会将1与第一个5进行交换位置，导致相同元素排序后位置改变。</p><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p>对于快排而言，开始任意选择一个数，假如选到了第二个5,那么小于等于它的都将会被放到第二个5的左边，导致相同元素排序后位置改变。</p><h4 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h4><p>假如希尔排序的步长选为2,在1和第二个5比较以后，会和它交换位置，导致相同元素排序后位置改变。</p><h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4><p>将上面元素映射为大根堆，堆顶元素会和最后一个元素交换位置，导致相同元素排序后位置改变。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol><li><p>在解决工程问题时，通常会使用多个排序算法相结合的套路，来解决问题。面对问题时要活学活用，比如使用计数排序解决按身高排序的问题很高效，但是放在解决按工资排序的问题上就不是那么好了。</p></li><li><p>一般，对于数量不大的情况下，通常选取时间复杂度为O（n^2）的插入排序算法</p></li><li><p>对于数量很大的情况下，通常选取快速排序，或者是其他的时间复杂度为O（nlogn）的排序算法</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>计数和基数排序</title>
    <link href="/2019/07/08/2019%E2%80%9307-08-%E8%AE%A1%E6%95%B0%E5%92%8C%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
    <url>/2019/07/08/2019%E2%80%9307-08-%E8%AE%A1%E6%95%B0%E5%92%8C%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>O（N）的排序算法也叫不比较的排序算法，它的思想源于桶排序，其中比较经典的两个例子<font color="red">计数排序和基数排序</font>，它们的时间复杂度趋向于O（n）</p><p>你可能会纳闷，不比较也能排序？下面我们介绍一下这两种经典排序算法</p><h3 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h3><p>假如要给公司员工按身高排序。</p><ol><li><p>我们知道员工身高大部分在160，180 之间，建立100～300一共200个桶。</p></li><li><p>遍历所有员工，按身高把员工放到匹配的桶中</p></li><li><p>分别倒出100～300号桶中的员工，这就是一个按身高排好序的序列。</p></li></ol><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><p>给下面序列 （124，220，044，120，334，666，001，099）排序，其中都为10进制数；</p><ol><li><p>建立 0～9 共10个桶</p></li><li><p>根据上面数的个位，分别放到对应的桶中，比如124，个位是4，就放到4对应的桶中；</p></li><li><p>依次倒出所有数，再根据数的十位，分别放到对应的桶中；</p></li><li><p>依次倒出所有数，再根据数的百位，分别放到对应的桶中；</p></li><li><p>依次倒出所有的数，该序列就是从小到大的有序序列；</p></li></ol><p>下面这个网站中可以给你一些好的桶排序的思想，如果有时间，不妨看一下图解<br><a href="https://www.cs.usfca.edu/~galles/visualization/BucketSort.html">Bucket Sort</a><br><a href="https://www.cs.usfca.edu/~galles/visualization/CountingSort.html">Counting Sort</a><br><a href="https://www.cs.usfca.edu/~galles/visualization/RadixSort.html">Radix Sort</a></p>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>冒泡、插入、选择排序</title>
    <link href="/2019/07/03/2019-07-03-%E5%86%92%E6%B3%A1%E3%80%81%E6%8F%92%E5%85%A5%E3%80%81%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
    <url>/2019/07/03/2019-07-03-%E5%86%92%E6%B3%A1%E3%80%81%E6%8F%92%E5%85%A5%E3%80%81%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>下面我们来理一下时间复杂度为O（n^2）的排序算法：<font color="red">冒泡排序、插入排序和选择排序</font></p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><ol><li><p>在0～（N-1）的大小区间中，数组位置0和数组位置1上的进行比较，如果0位置上的大于1位置上的，交换他们的位置，否则不动；紧接着位置1上的和位置2上的进行比较，如果1位置上的大于2位置上的，交换他们的位置，如此反复第一轮下来，数组中最大的那个数会被放到数组的最后面。</p></li><li><p>将0～（N-1）的区间缩小为0～（N-2），反复上述过程。第二轮下来后，最大的会被放到倒数第二个位置。</p></li><li><p>以此类推完成后面各轮过程，直到数组区间大小为1，即整个过程结束。</p></li></ol><p>图解流程访问下面链接中的Bubble Sort <a href="https://www.cs.usfca.edu/~galles/visualization/ComparisonSort.html">Data Structure Visualizations</a></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">less</span><span class="hljs-params">(a <span class="hljs-type">int</span>, b <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> a&lt;b<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">exch</span><span class="hljs-params">(a *<span class="hljs-type">int</span>, b *<span class="hljs-type">int</span>)</span></span>&#123;<br><br>temp := *a<br>*a = *b<br>*b = temp<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">bsort</span><span class="hljs-params">(a *[10]<span class="hljs-type">int</span>)</span></span>&#123;<br><br>count := <span class="hljs-built_in">len</span>(a)<br><span class="hljs-comment">//fmt.Println(count)</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; count; i++ &#123;<br><span class="hljs-keyword">for</span> j := i + <span class="hljs-number">1</span>; j &lt; count; j++ &#123;<br><span class="hljs-keyword">if</span> less(a[j], a[i]) &#123;<br>exch(&amp;(*a)[j],&amp;(*a)[i])<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br><span class="hljs-keyword">var</span> a = [<span class="hljs-number">10</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">3</span>,<span class="hljs-number">14</span>,<span class="hljs-number">2232</span>,<span class="hljs-number">4</span>,<span class="hljs-number">54</span>,<span class="hljs-number">62</span>,<span class="hljs-number">351</span>,<span class="hljs-number">422</span>,<span class="hljs-number">123</span>,<span class="hljs-number">34</span>&#125;<br>fmt.Println(a)<br><span class="hljs-comment">//fmt.Println(count)</span><br>bsort(&amp;a)<br>fmt.Println(a)<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><ol><li><p>数组0位置（a）和数组1位置（b）上的数进行比较，如果后者b比前者a小，将b与a交换位置，紧接着b再和数组-1上的位置进行比较，发现数组越越界，结束第一轮的过程。</p></li><li><p>将待处理区间的大小缩小为1～（N-1），数组1位置上的数（a）与数组2位置上的数（b<br>）进行比较，同样的，如果后者b比前者a小，就将两个数进行交换，继续拿数组1位置上的数与数0位置上的数进行比较直到不满足后者小于前者，或者数组越界为止。结束第二轮的过程。</p></li><li><p>反复上面的过程直到待比较区间大小为1停止整个插入排序。</p></li></ol><p>图解流程访问下面链接中的Insertion Sort <a href="https://www.cs.usfca.edu/~galles/visualization/ComparisonSort.html">Data Structure Visualizations</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(Comparable[] a)</span>&#123;<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> a.length;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span> ; i &lt; len ; i++)&#123;<br>        <span class="hljs-comment">// 将a[i] 插入到 a[i - 1] , a[i - 2], a[ i - 3]</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i ; j &gt;= <span class="hljs-number">1</span> &amp;&amp; less(a[j],a[j-<span class="hljs-number">1</span>]) ; j -= <span class="hljs-number">1</span>)&#123;<br>            exch(a,j,j-<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><ol><li><p>在0～（N-1）的比较区间中，从头到尾依次比较找出最小的数，放在位置0上，将区间长度变为1～（N-1）</p></li><li><p>在1～（N-1）的比较区间中，从头到尾依次比较找出最小的数，放在位置1上，将区间长度变为2～（N-1）</p></li><li><p>反复上述过程知道比较区间大小为0，结束整个排序过程。</p></li></ol><p>图解流程访问下面链接中的Selection Sort <a href="https://www.cs.usfca.edu/~galles/visualization/ComparisonSort.html">Data Structure Visualizations</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(Comparable[] a)</span>&#123;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> a.length;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; len ; i++)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> i;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span> ; j &lt; len  ; j++)&#123;<br>                <span class="hljs-keyword">if</span>( less(a[j],a[min]) ) min = j;<br>            &#125;<br>            exch (a,i,min);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>最好、最坏、平均 、均摊时间复杂度</title>
    <link href="/2019/07/03/2019-07-03-%E6%9C%80%E5%A5%BD%E3%80%81%E6%9C%80%E5%9D%8F%E3%80%81%E5%B9%B3%E5%9D%87%20%E3%80%81%E5%9D%87%E6%91%8A%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    <url>/2019/07/03/2019-07-03-%E6%9C%80%E5%A5%BD%E3%80%81%E6%9C%80%E5%9D%8F%E3%80%81%E5%B9%B3%E5%9D%87%20%E3%80%81%E5%9D%87%E6%91%8A%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<p>较为复杂的分析方法大致可分为四类、分别为：<font color="red">最好时间复杂度、最坏时间复杂度、平均时间复杂度和均摊时间复杂度</font>。</p><p>这里有一段代码，针对它下面分别来说一下怎么算着四种时间复杂度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// i的取值范围是 0～n</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> element)</span> &#123;<br>  <span class="hljs-keyword">if</span> (i &gt;= len) &#123;<br>    <span class="hljs-type">int</span> new_array[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[len*<span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; len; ++j) &#123;<br>      new_array[j] = array[j];<br>    &#125;<br>    array = new_array;<br>    len = <span class="hljs-number">2</span> * len;<br>  &#125;<br>  array[i] = element;<br>  ++i;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="最好、最坏时间复杂度"><a href="#最好、最坏时间复杂度" class="headerlink" title="最好、最坏时间复杂度"></a>最好、最坏时间复杂度</h3><p>最好时间复杂度，言明直意，就是在最好情况下求得的时间复杂度，对于上面代码，针对长度为N的数组添加一个元素的最好时间复杂度为O（1）</p><p>在最好情况下，数组空间很充足，可以直接将数组添加到第i位置</p><p>在最坏情况下，数组空间不够，所以要重新申请一个2倍大小的数组空间，把原来array数组中的数据依次copy到new_array，因此最坏的时间复杂度应该是O（N）</p><h3 id="平均时间复杂度"><a href="#平均时间复杂度" class="headerlink" title="平均时间复杂度"></a>平均时间复杂度</h3><p>最好、坏的时间复杂度局限性很大，有时不能准确说明问题，针对这种情况，我们用代码执行各种情况的加权平均值来说明问题。</p><p>假设数组的大小为N，i的取值范围为0～N，在0～n-1时间复杂度为O（1），在i等于N的时候时间复杂度为O（N），i的取值有1&#x2F;（n-1）种可能性，所以有：</p><p><a href="https://i.loli.net/2019/07/03/5d1c9ddc07f6c71312.jpeg"><img src="https://i.loli.net/2019/07/03/5d1c9ddc07f6c71312.jpeg" alt="06D6CABC-665D-422E-B3A6-CB2C6F1076C9.jpeg"></a></p><p>最终平均时间复杂度是O（1）</p><h3 id="均摊时间复杂度"><a href="#均摊时间复杂度" class="headerlink" title="均摊时间复杂度"></a>均摊时间复杂度</h3><p>网上有好多说平均时间复杂度就是均摊时间复杂度，它们并没有什么区别，不管他们俩是否一样，这边有两个tip来帮助我们算出均摊时间复杂度</p><ol><li>在N种情况中，如果第被低阶复杂度占去了半壁江山，那么通过均摊更高阶的复杂度到低阶上，最终结果为低阶复杂度。</li><li>假如你发现低阶复杂度和高阶复杂度出现规律性的交替，那么通常最终结果为低阶复杂度。</li></ol><p>根据上面的tips。很快就得出它的均摊时间复杂度为O（1）</p><h3 id="为什么要引入这4种复杂度？"><a href="#为什么要引入这4种复杂度？" class="headerlink" title="为什么要引入这4种复杂度？"></a>为什么要引入这4种复杂度？</h3><p>一般我们用不到到这些分析方法，针对某些场景，如果普通的分析方法不能论证我们的论点，那么使用它们往往可以使论点更具有说服力。</p>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>C和C++的参数传递</title>
    <link href="/2019/07/02/2019-07-02-C%E5%92%8CC++%E7%9A%84%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92/"/>
    <url>/2019/07/02/2019-07-02-C%E5%92%8CC++%E7%9A%84%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92/</url>
    
    <content type="html"><![CDATA[<p>下面是值传递，a和b的值会被传入到swap1中，如果你修改了这个值，main方法中的值是不会改变的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">swap1</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %d ,ptr = %p\n&quot;</span>, a, &amp;a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b = %d ,ptr = %p\n&quot;</span>, b, &amp;b);<br><span class="hljs-type">int</span> tmp = b;<br>b = a;<br>a = tmp;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %d ,ptr = %p\n&quot;</span>, a, &amp;a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b = %d ,ptr = %p\n\n&quot;</span>, b, &amp;b);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;swap leave\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> x = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> y = <span class="hljs-number">2</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x = %d, ptr = %p\n&quot;</span>, x, &amp;x);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;y = %d, ptr = %p\n\n&quot;</span>, y, &amp;y);<br>swap1(x, y);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x = %d, ptr = %p\n&quot;</span>, x, &amp;x);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;y = %d, ptr = %p\n\n&quot;</span>, y, &amp;y);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>下面是地址传递，顾名思义传到swap中的是寄存器的地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">swap2</span><span class="hljs-params">(<span class="hljs-type">int</span> *a, <span class="hljs-type">int</span> *b)</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %d ,ptr = %p\n&quot;</span>, a, &amp;a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b = %d ,ptr = %p\n&quot;</span>, b, &amp;b);<br><span class="hljs-type">int</span> tmp = *b;<br>*b = *a;<br>*a = tmp;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %d ,ptr = %p\n&quot;</span>, a, &amp;a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b = %d ,ptr = %p\n\n&quot;</span>, b, &amp;b);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;swap leave\n&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>C++的出现优化了C语言中的地址传递，因为那真的不太友好。这个和Java很相似</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">swap3</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;a, <span class="hljs-type">int</span> &amp;b)</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;swap enter\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %d, ptr = %p\n&quot;</span>, a, &amp;a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b = %d, ptr = %p\n&quot;</span>, b, &amp;b);<br><br><span class="hljs-type">int</span> tmp = b;<br>b = a;<br>a = tmp;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %d, ptr = %p\n&quot;</span>, a, &amp;a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b = %d, ptr = %p\n&quot;</span>, b, &amp;b);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;swap leave\n&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>时间空间复杂度</title>
    <link href="/2019/07/01/2019-07-01-%E6%97%B6%E9%97%B4%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    <url>/2019/07/01/2019-07-01-%E6%97%B6%E9%97%B4%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<p>算法与数据结构相辅相成，谁也离不开谁，学算法和数据结构可以说让我很痛苦，当然对于聪明的你来说，这可能不是什么难事,哈哈哈。这下面的图是算法的整个知识体系图，通过让我们对整个算法体系有个初步了解。</p><p><a href="https://i.loli.net/2019/07/01/5d197b9bcad7383009.jpg"><img src="https://i.loli.net/2019/07/01/5d197b9bcad7383009.jpg" alt="sf_1.jpg"></a></p><p>我总结了20个最常用的、最基础数据结构与算法,他们分别是10个数据结构：<font color="red">数组、</font><font color="red">链表、</font><font color="red">栈、</font><font color="red">队列、</font><font color="red">散列表、</font><font color="red">二叉树、</font><font color="red">堆、</font><font color="red">跳表、</font><font color="red">图、</font><font color="red">Trie树；10个算法：<font color="red">递归、</font><font color="red">排序、</font><font color="red">二分查找、</font><font color="red">搜索、</font><font color="red">哈希算法、</font><font color="red">贪心算法、</font><font color="red">分治算法、</font><font color="red">回溯算法、</font><font color="red">动态规划、</font><font color="red">字符串匹配</font>算法。</p><p>如果想学好算法，就得掌握怎么分析代码的性能。业界中常用时间复杂度和空间复杂度来坑量，类似O(1)、O(n)、O(n^2)等。如果说不会求时间和空间复杂度，那只能说你和算法无缘了！下面我们来理理到底应该怎么算，另外算这些东西不需要什么很高深的数学，只需要高中数学知识就足够了。下面会牵扯到一些对数运算，如果你忘了，建议你回去复习一下。</p><h3 id="大O复杂度表示法"><a href="#大O复杂度表示法" class="headerlink" title="大O复杂度表示法"></a>大O复杂度表示法</h3><p>这里有段非常简单的代码，求1,2,3…n的累加和。现在，我就带你一块来估算一下这段代码的执行时间。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">cal</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (; i &lt;= n; ++i) &#123;<br>sum = sum + i;<br>&#125;<br><span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure><p>假设每行代码执行的时间都一样，为unit_time。在这个假设的基础之上，这段代码的总执行时间是多少呢？</p><p>第2、3行代码分别需要1个unit_time的执行时间，第4、5行都运行了n遍，所以需要2n * unit_time的执行时间，所以这段代码总的执行时间就是(2n+2) * unit_time。可以看出来，<strong>所有代码的执行时间T(n)与每行代码的执行次数成正比</strong></p><p>按照这个分析思路，我们再来看这段代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">cal</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (; i &lt;= n; ++i) &#123;<br>j = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (; j &lt;= n; ++j) &#123;<br>sum = sum +  i * j;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们依旧假设每个语句的执行时间是unit_time。那这段代码的总执行时间T(n)是多少呢？</p><p>第2、3、4行代码，每行都需要1个unit_time的执行时间，第5、6行代码循环执行了n遍，需要2n * unit_time的执行时间，第7、8行代码循环执行了n^2 遍，所以需要 2n^2 * unit_time的执行时间。所以，整段代码总的执行时间T(n) &#x3D; (2n ^ 2 + 2n+3)*unit_time</p><p>尽管我们不知道unit_time的具体值，但是通过这两段代码执行时间的推导过程，我们可以得到一个非常重要的规律，那就是，<font color="red">所有代码的执行时间T(n)与每行代码的执行次数n成正比</font>。</p><p>我们可以把这个规律总结成一个公式。注意，大O就要登场了！</p><p><a href="https://i.loli.net/2019/07/01/5d1990ab0c2ec77731.png"><img src="https://i.loli.net/2019/07/01/5d1990ab0c2ec77731.png" alt="sf_2.png"></a></p><p>我来具体解释一下这个公式。其中，T(n)我们已经讲过了，它表示代码执行的时间；n表示数据规模的大小；f(n)表示每行代码执行的次数总和。因为这是一个公式，所以用f(n)来表示。公式中的O，表示代码的执行时间T(n)与f(n)表达式成正比。</p><p>所以，第一个例子中的T(n) &#x3D; O(2n+2)，第二个例子中的T(n) &#x3D; O(2n^2+2n+3)。这就是<strong>大O时间复杂度表示法</strong>。大O时间复杂度实际上并不具体表示代码真正的执行时间，而是表示<strong>代码执行时间随数据规模增长的变化趋势</strong>，所以，也叫作<strong>渐进时间复杂度</strong>（asymptotic time complexity），简称<strong>时间复杂度</strong>。</p><p>当n很大时，你可以把它想象成10000、100000。而公式中的<font color="red">低阶、常量、系数三部分并不左右增长趋势，所以都可以忽略</font>。我们只需要记录一个最大量级就可以了，如果用大O表示法表示刚讲的那两段代码的时间复杂度，就可以记为：T(n) &#x3D; O(n)； T(n) &#x3D; O(n^2)。</p><h3 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h3><p>前面介绍了大O时间复杂度的由来和表示方法。现在我们来看下，如何分析一段代码的时间复杂度？我这儿有三个比较实用的方法可以分享给你。</p><h4 id="1-只关注循环执行次数最多的一段代码"><a href="#1-只关注循环执行次数最多的一段代码" class="headerlink" title="1.只关注循环执行次数最多的一段代码"></a>1.只关注循环执行次数最多的一段代码</h4><p>我刚才说了，大O这种复杂度表示方法只是表示一种变化趋势。我们通常会忽略掉公式中的常量、低阶、系数，只需要记录一个最大阶的量级就可以了。所以，<strong>我们在分析一个算法、一段代码的时间复杂度的时候，也只关注循环执行次数最多的那一段代码就可以了</strong>。这段核心代码执行次数的n的量级，就是整段要分析代码的时间复杂度。</p><p>为了便于你理解，我还拿前面的例子来说明。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">cal</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (; i &lt;= n; ++i) &#123;<br>sum = sum + i;<br>&#125;<br><span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中第2、3行代码都是常量级的执行时间，与n的大小无关，所以对于复杂度并没有影响。循环执行次数最多的是第4、5行代码，所以这块代码要重点分析。前面我们也讲过，这两行代码被执行了n次，所以总的时间复杂度就是O(n)。</p><h4 id="2-加法法则：总复杂度等于量级最大的那段代码的复杂度"><a href="#2-加法法则：总复杂度等于量级最大的那段代码的复杂度" class="headerlink" title="2.加法法则：总复杂度等于量级最大的那段代码的复杂度"></a>2.加法法则：总复杂度等于量级最大的那段代码的复杂度</h4><p>我这里还有一段代码。你可以先试着分析一下，然后再往下看跟我的分析思路是否一样</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">cal</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br><span class="hljs-type">int</span> sum_1 = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> p = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (; p &lt; <span class="hljs-number">100</span>; ++p) &#123;<br>sum_1 = sum_1 + p;<br>&#125;<br><br><span class="hljs-type">int</span> sum_2 = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> q = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (; q &lt; n; ++q) &#123;<br>sum_2 = sum_2 + q;<br>&#125;<br><br><span class="hljs-type">int</span> sum_3 = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (; i &lt;= n; ++i) &#123;<br>j = <span class="hljs-number">1</span>; <br><span class="hljs-keyword">for</span> (; j &lt;= n; ++j) &#123;<br>sum_3 = sum_3 +  i * j;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> sum_1 + sum_2 + sum_3;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个代码分为三部分，分别是求sum_1、sum_2、sum_3。我们可以分别分析每一部分的时间复杂度，然后把它们放到一块儿，再取一个量级最大的作为整段代码的复杂度。</p><p>第一段的时间复杂度是多少呢？这段代码循环执行了100次，所以是一个常量的执行时间，跟n的规模无关。</p><p>这里我要再强调一下，即便这段代码循环10000次、100000次，只要是一个已知的数，跟n无关，照样也是常量级的执行时间。当n无限大的时候，就可以忽略。尽管对代码的执行时间会有很大影响，但是回到时间复杂度的概念来说，它表示的是一个算法执行效率与数据规模增长的变化趋势，所以不管常量的执行时间多大，我们都可以忽略掉。因为它本身对增长趋势并没有影响。</p><p>那第二段代码和第三段代码的时间复杂度是多少呢？答案是O(n)和O(n^2)，你应该能容易就分析出来，我就不啰嗦了。</p><p>综合这三段代码的时间复杂度，我们取其中最大的量级。所以，整段代码的时间复杂度就为O(n^2)。也就是说：<strong>总的时间复杂度就等于量级最大的那段代码的时间复杂度</strong>。那我们将这个规律抽象成公式就是：</p><p>如果T1(n)&#x3D;O(f(n))，T2(n)&#x3D;O(g(n))；那么T(n)&#x3D;T1(n)+T2(n)&#x3D;max(O(f(n)), O(g(n))) &#x3D;O(max(f(n), g(n))).</p><h4 id="3-乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积"><a href="#3-乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积" class="headerlink" title="3.乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积"></a>3.乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积</h4><p>我刚讲了一个复杂度分析中的加法法则，这儿还有一个<strong>乘法法则</strong>。类比一下，你应该能“猜到”公式是什么样子的吧？</p><p>如果T1(n)&#x3D;O(f(n))，T2(n)&#x3D;O(g(n))；那么T(n)&#x3D;T1(n) * T2(n) &#x3D; O(f(n)) * O(g(n)) &#x3D; O(f(n) * g(n)).</p><p>也就是说，假设T1(n) &#x3D; O(n)，T2(n) &#x3D; O(n^2)，则T1(n) * T2(n) &#x3D; O(n^3)。落实到具体的代码上，我们可以把乘法法则看成是<strong>嵌套循环</strong>，我举个例子给你解释一下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">cal</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br><span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>; <br><span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (; i &lt; n; ++i) &#123;<br>ret = ret + f(i);<br>&#125; <br>&#125; <br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (; i &lt; n; ++i) &#123;<br>sum = sum + i;<br>&#125; <br><span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们单独看cal()函数。假设f()只是一个普通的操作，那第4～6行的时间复杂度就是，T1(n) &#x3D; O(n)。但f()函数本身不是一个简单的操作，它的时间复杂度是T2(n) &#x3D; O(n)，所以，整个cal()函数的时间复杂度就是，T(n) &#x3D; T1(n) * T2(n) &#x3D; O(n*n) &#x3D; O(n^2)。</p><p>我刚刚讲了三种复杂度的分析技巧。不过，你并不用刻意去记忆。实际上，复杂度分析这个东西关键在于“熟练”。你只要多看案例，多分析，就能做到“无招胜有招”。</p><h3 id="几种常见时间复杂度实例分析"><a href="#几种常见时间复杂度实例分析" class="headerlink" title="几种常见时间复杂度实例分析"></a>几种常见时间复杂度实例分析</h3><p>虽然代码千差万别，但是常见的复杂度量级并不多。我稍微总结了一下，这些复杂度量级几乎涵盖了你今后可以接触的所有代码的复杂度量级。</p><p><a href="https://i.loli.net/2019/07/01/5d1992d63e0b039265.jpg"><img src="https://i.loli.net/2019/07/01/5d1992d63e0b039265.jpg" alt="sf_3.jpg"></a></p><p>对于刚罗列的复杂度量级，我们可以粗略地分为两类，<strong>多项式量级</strong>和<strong>非多项式量级</strong>。其中，非多项式量级只有两个：O(2^n)和O(n!)。</p><p>当数据规模n越来越大时，非多项式量级算法的执行时间会急剧增加，求解问题的执行时间会无限增长。所以，非多项式时间复杂度的算法其实是非常低效的算法。因此，关于NP时间复杂度我就不展开讲了。我们主要来看几种常见的<strong>多项式时间复杂度</strong>。</p><h4 id="1-O-1"><a href="#1-O-1" class="headerlink" title="1. O(1)"></a>1. O(1)</h4><p>首先你必须明确一个概念，O(1)只是常量级时间复杂度的一种表示方法，并不是指只执行了一行代码。比如这段代码，即便有3行，它的时间复杂度也是O(1），而不是O(3)。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> i = <span class="hljs-number">8</span>;<br><span class="hljs-type">int</span> j = <span class="hljs-number">6</span>;<br><span class="hljs-type">int</span> sum = i + j;<br></code></pre></td></tr></table></figure><p>我稍微总结一下，只要代码的执行时间不随n的增大而增长，这样代码的时间复杂度我们都记作O(1)。或者说，**一般情况下，只要算法中不存在循环语句、递归语句，即使有成千上万行的代码，其时间复杂度也是Ο(1)**。</p><h4 id="2-O-logn-、O-nlogn"><a href="#2-O-logn-、O-nlogn" class="headerlink" title="2. O(logn)、O(nlogn)"></a>2. O(logn)、O(nlogn)</h4><p>对数阶时间复杂度非常常见，同时也是最难分析的一种时间复杂度。我通过一个例子来说明一下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">i=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (i &lt;= n)  &#123;<br>    i = i * <span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>根据我们前面讲的复杂度分析方法，第三行代码是循环执行次数最多的。所以，我们只要能计算出这行代码被执行了多少次，就能知道整段代码的时间复杂度。</p><p>从代码中可以看出，变量i的值从1开始取，每循环一次就乘以2。当大于n时，循环结束。还记得我们高中学过的等比数列吗？实际上，变量i的取值就是一个等比数列。如果我把它一个一个列出来，就应该是这个样子的：</p><p><a href="https://i.loli.net/2019/07/01/5d19935fd6bd034165.jpg"><img src="https://i.loli.net/2019/07/01/5d19935fd6bd034165.jpg" alt="sf_4.jpg"></a></p><p>所以，我们只要知道x值是多少，就知道这行代码执行的次数了。通过2 ^ x&#x3D;n求解x这个问题我们想高中应该就学过了，我就不多说了。$x&#x3D;\log n$ <font color="red">(以2为底)</font>所以，这段代码的时间复杂度就是：$O(\log n)$<font color="red">(以2为底)</font></p><p>现在，把代码稍微改下，你再看看，这段代码的时间复杂度是多少？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">i=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (i &lt;= n)  &#123;<br>    i = i * <span class="hljs-number">3</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>根据我刚刚讲的思路，很简单就能看出来，这段代码的时间复杂度为$O(logn)$ <font color="red">(以3为底)</font>。</p><p>实际上，不管是以2为底、以3为底，还是以10为底，我们可以把所有对数阶的时间复杂度都记为$O(logn)$<font color="red">(以2为底)</font>。为什么呢，我知道有些人忘了，下面我帮你论证了一下，用对数的换底公式就可以了！</p><p><a href="https://i.loli.net/2019/07/01/5d19a5c4ada8311497.jpg"><img src="https://i.loli.net/2019/07/01/5d19a5c4ada8311497.jpg" alt="sf_6.jpg"></a></p><p>基于我们前面的一个理论：**在采用大O标记复杂度的时候，可以忽略系数，即O(Cf(n)) &#x3D; O(f(n))**。所以，$O(logn)$ <font color="red">(以2为底)</font> 就等于$O(logn)$ <font color="red">(以3为底)</font>。因此，在对数阶时间复杂度的表示方法里，我们忽略对数的“底”，统一表示为$O(logn)$。</p><p>如果你理解了我前面讲的$O(logn)$，那$O(nlogn)$就很容易理解了。还记得我们刚讲的乘法法则吗？如果一段代码的时间复杂度是$O(logn)$，我们循环执行n遍，时间复杂度就是$O(nlogn)$了。而且，$O(nlogn)$也是一种非常常见的算法时间复杂度。比如，归并排序、快速排序的时间复杂度都是$O(nlogn)$。</p><h4 id="3-O-m-n-、O-m-n"><a href="#3-O-m-n-、O-m-n" class="headerlink" title="3.O(m+n)、O(m*n)"></a>3.O(m+n)、O(m*n)</h4><p>我们再来讲一种跟前面都不一样的时间复杂度，代码的复杂度<strong>由两个数据的规模</strong>来决定。老规矩，先看代码！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">cal</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span> &#123;<br><span class="hljs-type">int</span> sum_1 = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (; i &lt; m; ++i) &#123;<br>sum_1 = sum_1 + i;<br>&#125;<br><br><span class="hljs-type">int</span> sum_2 = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (; j &lt; n; ++j) &#123;<br>sum_2 = sum_2 + j;<br>&#125;<br><br><span class="hljs-keyword">return</span> sum_1 + sum_2;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>从代码中可以看出，m和n是表示两个数据规模。我们无法事先评估m和n谁的量级大，所以我们在表示复杂度的时候，就不能简单地利用加法法则，省略掉其中一个。所以，上面代码的时间复杂度就是O(m+n)。</p><p>针对这种情况，原来的加法法则就不正确了，我们需要将加法规则改为：T1(m) + T2(n) &#x3D; O(f(m) + g(n))。但是乘法法则继续有效：T1(m)*T2(n) &#x3D; O(f(m) * f(n))。</p><h3 id="空间复杂度分析"><a href="#空间复杂度分析" class="headerlink" title="空间复杂度分析"></a>空间复杂度分析</h3><p>前面，咱们花了很长时间讲大O表示法和时间复杂度分析，理解了前面讲的内容，空间复杂度分析方法学起来就非常简单了</p><p>前面我讲过，时间复杂度的全称是<strong>渐进时间复杂度，表示算法的执行时间与数据规模之间的增长关系</strong>。类比一下，空间复杂度全称就是<strong>渐进空间复杂度</strong>（asymptotic space complexity），<strong>表示算法的存储空间与数据规模之间的增长关系</strong>。</p><p>我还是拿具体的例子来给你说明。（这段代码有点“傻”，一般没人会这么写，我这么写只是为了方便给你解释。）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span>[] a = new <span class="hljs-type">int</span>[n];<br><span class="hljs-keyword">for</span> (i; i &lt;n; ++i) &#123;<br>a[i] = i * i;<br>&#125;<br><br><span class="hljs-keyword">for</span> (i = n<span class="hljs-number">-1</span>; i &gt;= <span class="hljs-number">0</span>; --i) &#123;<br>print out a[i]<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>跟时间复杂度分析一样，我们可以看到，第2行代码中，我们申请了一个空间存储变量i，但是它是常量阶的，跟数据规模n没有关系，所以我们可以忽略。第3行申请了一个大小为n的int类型数组，除此之外，剩下的代码都没有占用更多的空间，所以整段代码的空间复杂度就是O(n)。</p><p>我们常见的空间复杂度就是O(1)、O(n)、O(n2 )，像O(logn)、O(nlogn)这样的对数阶复杂度平时都用不到。而且，空间复杂度分析比时间复杂度分析要简单很多。所以，对于空间复杂度，掌握刚我说的这些内容已经足够了。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>基础复杂度分析的知识到此就讲完了，我们来总结一下。</p><p>复杂度也叫渐进复杂度，包括时间复杂度和空间复杂度，用来分析算法执行效率与数据规模之间的增长关系，可以粗略地表示，越高阶复杂度的算法，执行效率越低。常见的复杂度并不多，从低阶到高阶有：O(1)、O(logn)、O(n)、O(nlogn)、O(n2 )。等你学完整个专栏之后，你就会发现几乎所有的数据结构和算法的复杂度都跑不出这几个。</p><p><a href="https://i.loli.net/2019/07/01/5d199477cc53579735.jpg"><img src="https://i.loli.net/2019/07/01/5d199477cc53579735.jpg" alt="sf_5.jpg"></a></p><p>复杂度分析并不难，关键在于多练。 之后讲后面的内容时，我还会带你详细地分析每一种数据结构和算法的时间、空间复杂度。只要跟着我的思路学习、练习，你很快就能和我一样，每次看到代码的时候，简单的一眼就能看出其复杂度，难的稍微分析一下就能得出答案。</p><p>转自《数据结构与算法之美》–王争</p>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hbase读写操作</title>
    <link href="/2019/06/28/2019-06-28-Hbase%E8%AF%BB%E5%86%99%E6%93%8D%E4%BD%9C/"/>
    <url>/2019/06/28/2019-06-28-Hbase%E8%AF%BB%E5%86%99%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>HDFS、MR解决了分布式存储和分布式计算问题，但是由于HDFS的随机读写能力太差，所以不能直接作为数据库。Hbase是为了应对这点而诞生的，它是一个高性能、高可靠、可伸缩、面向列的分布式存储数据库，结合Zookeeper可以解决HDFS随机读写能力差的问题。那么它到底是怎么解决随机读写能力太差的问题呢？试想一下如果想要1S 往某个文件中插入100条记录，如果没有HBase，用Java代码写会是一种什么样的操作？可能我们需要100次的IO才能搞定。但上面假设一层缓冲层用来缓存一下， 当缓冲池满了以后再往文件中写，会不会好很多？</p><p>以Mysql为例，我们都知道Mysql的表，库等数据最终都会落在磁盘上，Mysql只不过是架设在OS文件系统上的一款解析软件而已，帮准你用流完成文件的读写。HDFS相当于OS文件系统，HBase和Mysql一样相当于一个解析器。</p><h3 id="Hbase架构图"><a href="#Hbase架构图" class="headerlink" title="Hbase架构图"></a>Hbase架构图</h3><p>被网上的图片坑的很，HLog组件应该归属于HRegionServer管，但是图中却把HLog画到了HRegion中，也有可能是版本问题？</p><p><a href="https://i.loli.net/2019/06/28/5d16122ace33729145.png"><img src="https://i.loli.net/2019/06/28/5d16122ace33729145.png" alt="832D942C-0F84-4A35-B616-DE77FC9CA2CC.png"></a></p><p>下面的图摘自《HBase权威指南》</p><p><a href="https://i.loli.net/2019/06/28/5d1612c8393c545109.png"><img src="https://i.loli.net/2019/06/28/5d1612c8393c545109.png" alt="DB1A798C-2F6D-43FB-B609-FBF8824B8FFD.png"></a></p><h3 id="写操作"><a href="#写操作" class="headerlink" title="写操作"></a>写操作</h3><p>当Client向HRegionServer发起put请求时，其将会交给对应的HRegion来处理</p><p>首先HRegion会看是否需要写入HLog（WAL用于做数据恢复和数据回滚）</p><p>当数据持久化到HLog后，数据会被直接写到MemStore中，并检查MemStore是否满了，如果满了，数据会被刷到HDFS上以HFile文件类型存储，这个操作由另一个HRegionServer的线程处理，同时会保存最后写入序号，系统就知道哪些数据被持久化了。</p><p>摘自《HBase权威指南》–8.2.2写路径</p><h3 id="读操作"><a href="#读操作" class="headerlink" title="读操作"></a>读操作</h3><p>很纳闷为啥HBase权威指南里面没找到读数据的章节，下面摘自网络流转的说法，具体需要看一下源码验证</p><p>首先Client向HRegionServer发送Get请求，HRegion将其请求提交给对应的HRegion</p><p>HRegion会先从MemStore中找，如果找到则返回，如果没有或者数据不全，则去StoreFile中寻找</p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HBase</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>轻办公神器</title>
    <link href="/2019/06/28/2019-06-28-%E8%BD%BB%E5%8A%9E%E5%85%AC%E7%A5%9E%E5%99%A8/"/>
    <url>/2019/06/28/2019-06-28-%E8%BD%BB%E5%8A%9E%E5%85%AC%E7%A5%9E%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>推荐APP Termiuus、Working copy、Textastic</p><p><a href="https://i.loli.net/2019/06/28/5d161118d453868515.jpeg"><img src="https://i.loli.net/2019/06/28/5d161118d453868515.jpeg" alt="D8631229-E250-4C80-8342-EFC21F09C042.jpeg"></a></p><p><a href="https://i.loli.net/2019/06/28/5d16123cf046f65815.jpeg"><img src="https://i.loli.net/2019/06/28/5d16123cf046f65815.jpeg" alt="D615F0B3-A693-4B22-BDCD-373B0311B150.jpeg"></a></p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>分布式缓存小结</title>
    <link href="/2019/05/13/2019-05-13-%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98%E6%80%BB%E7%BB%93/"/>
    <url>/2019/05/13/2019-05-13-%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>缓存是提高服务访问速度的最有效的途径之一，下面对缓存的基本原理以及使用做一个小结。</p><h2 id="缓存的基本原理"><a href="#缓存的基本原理" class="headerlink" title="缓存的基本原理"></a>缓存的基本原理</h2><p>缓存指将数据存储在相对较高访问速度的存储介质中，以供系统处理;缓存的本质是一个内存Hash表，数据缓存是以KV形式存储在内存的Hash表中，Hash表数据读写的时间复杂度为O(1)，可以参考下图加深理解，图片摘自-《大型网站技术架构：核心原理与案例分析》</p><p><img src="https://i.loli.net/2019/05/13/5cd984ed8ac5f82181.jpeg" alt="webwxgetmsgimg (2).jpeg"></p><p>下图为是应用到代码中时的逻辑图</p><p><img src="https://i.loli.net/2019/05/13/5cd984ed8a2e348536.jpeg" alt="webwxgetmsgimg (1).jpeg"></p><h2 id="合理使用缓存"><a href="#合理使用缓存" class="headerlink" title="合理使用缓存"></a>合理使用缓存</h2><p>缓存虽然有很多好处，但是不合理的使用缓存反而会帮倒忙，成为系统累赘。作为一个合格的开发者，有必要搞清楚其应用点，以及在应用时的注意事项，下面对其进行简单小结。</p><ul><li>频繁修改的数据</li></ul><p>频繁修改的数据不宜存入缓存，如果你这么做了，数据在存入缓存后，应用还来不及访问，就已经再次失效了，途增系统负担。</p><ul><li>没有热点访问的数据</li></ul><p>内存往往是有限的，在往内存存储时，若 redis 检测到已经没有足够空间再容纳新增加数据时，会将长期未使用的数据清理出缓存。试想一下缓存被大量非热点数据，会是怎么样的？可能数据还没有再次被访问就已经被挤出缓存。在为数据做缓存时要遵守二八原则，大部分访问的数据没有集中在小部分数据上，那么缓存就没有意义了。</p><ul><li>数据的不一致性和脏读</li></ul><p>我们会见到某购物平台店家修改了商品，但前台并未实时更新数据，这种现象称为数据的<strong>不一致和脏读</strong>。缓存内会给数据设置过­期时间，当数据过期后会重新加载数据库数­据到缓存，所以往往会有一定延时。在互联网行业中，这种延时是可以被接受的。但假如产品人员表示非要优化，那么也有应对方案，就是做实时更新同步缓存，但这种做法会带来更多的系统开销和数据一致性问题。</p><ul><li>缓存的高可用</li></ul><p>在公司中，可能会发现对于业务场景，单台 redis 缓存服务即可满足日常需要。但随着业务不断扩展，可能就会带来很多问题。比如当 redis 服务宕机时，整个服务器的业务压力会落在数据­库服务器上。这种压力的突然飙升很有可能造成服务宕机，而且这种宕机并不是简单的直接重起服务就可以解决的。对于这种问题一些人可能会使用热备服务器去解决，当主缓存服务宕掉后，自动切换到备份缓存服务器，但是这样做 违背了缓存设计的初衷，正确的做法应该是使用<strong>分布式缓存</strong>，数据会被缓存在多台机器上，当某台机器不可用时只是部分数据不可用，重新启动即可。</p><ul><li>缓存预热</li></ul><p>缓存中存放的是热点数据，热点数据又是缓存系统利用LRU算法对不断访问的数据筛选淘汰出来的，这个过程需要花费较长的时间。新启动的缓存系统如果没有任何数据，在重建缓存数据过程中，系统的性能和数据库负载都不会太好，那么最好在缓存系统启动时就把数据加载好，这种手段叫<strong>缓存的预热</strong>。例如淘宝双十一，开发人员会提前一个月预热大量的缓存数据。</p><ul><li>缓存穿透</li></ul><p>对于访问数据库没有的数据，可能一些开发人员的做法是直接返回到前台，但是这种做法是不正确的。正确的做法应是将其<strong>key缓存起来value 设置为NULL</strong>即可。</p>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hbase ThriftServer访问内网HBase</title>
    <link href="/2019/05/10/2019-05-10-Hbase-ThriftServer%E8%AE%BF%E9%97%AE%E5%86%85%E7%BD%91HBase/"/>
    <url>/2019/05/10/2019-05-10-Hbase-ThriftServer%E8%AE%BF%E9%97%AE%E5%86%85%E7%BD%91HBase/</url>
    
    <content type="html"><![CDATA[<p>本地集群环境架构结构如下图所示:</p><p><img src="https://i.loli.net/2019/05/10/5cd54df270f9f.png" alt="架构图.png"></p><p>实现thriftClient与thriftServer通信，实现访问内网HBase集群</p><p>118.166.152.33和101.118.124.111 分别为公网IP,192.168.5.2&#x2F;3&#x2F;4分别为内网IP</p><h3 id="域名映射"><a href="#域名映射" class="headerlink" title="域名映射"></a>域名映射</h3><p>首先我们要做的是将ThriftServer服务的通信端口9000 映射到内网中，这边映射成了公网的9000端口</p><h3 id="thrift"><a href="#thrift" class="headerlink" title="thrift"></a>thrift</h3><p>下面是Thrift的百度百科</p><blockquote><p>Thrift是一种接口描述语言和二进制通讯协议，它被用来定义和创建跨语言的服务。它被当作一个远程过程调用（RPC）框架来使用，是由Facebook为“大规模跨语言服务开发”而开发的。</p></blockquote><p>Thrift支持众多通讯协议：</p><ul><li>TBinaryProtocol – 一种简单的二进制格式，简单，但没有为空间效率而优化。比文本协议处理起来更快，但更难于调试。</li><li>TCompactProtocol – 更紧凑的二进制格式，处理起来通常同样高效。</li></ul><p>想了解更多<a href="https://baike.baidu.com/item/thrift/3879058?fr=aladdin">百度百科</a></p><p>支持的传输协议有：</p><ul><li>TFramedTransport – 当使用一个非阻塞服务器时，要求使用这个传输协议。它按帧来发送数据，其中每一帧的开头是长度信息。</li><li>TSocket – 使用阻塞的套接字I&#x2F;O来传输。</li></ul><p>想了解更多<a href="https://baike.baidu.com/item/thrift/3879058?fr=aladdin">百度百科</a></p><p>HBase ThriftServer有下面两个参数用来指定是否使用TFramedTransport协议,默认是false这边CDH中不用开启</p><p>hbase.regionserver.thrift.framed</p><blockquote><p>Use Thrift TFramedTransport on the server side. This is the recommended transport for thrift servers and requires a similar setting on the client side. Changing this to false will select the default transport, vulnerable to DoS when malformed requests are issued due to THRIFT-601.</p></blockquote><p>hbase.regionserver.thrift.compact</p><blockquote><p>Use Thrift TCompactProtocol binary serialization protocol.</p></blockquote><p>下面参数用来配置Thrift Gateway的认证，如果你配了这个东西就必须用doAs完成认证才能完成通信</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hbase.regionserver.thrift.http<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hbase.thrift.support.proxyuser<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true/value&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><p>想了解更多<a href="http://hbase.apache.org/1.2/book.html">Configure the Thrift Gateway to Use the doAs Feature</a>，看59.6章节</p><p>我这边都没有开启如下图</p><p><img src="https://i.loli.net/2019/05/10/5cd552448d4f2.png" alt="thrift.png"></p><h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><p>客户端可以用python或者是Java与ThriftServer进行通信。值得一提的是python3 在访问时会抛异常，这边初步查了一下也有解决方案，这边就先用python2.7进行测试，下面是代码示例:</p><p><strong>python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><br><span class="hljs-keyword">from</span> common <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> thrift.transport <span class="hljs-keyword">import</span> TSocket<br><span class="hljs-keyword">from</span> thrift.protocol <span class="hljs-keyword">import</span> TBinaryProtocol<br><span class="hljs-keyword">from</span> thrift.transport <span class="hljs-keyword">import</span> TTransport<br><span class="hljs-keyword">from</span> hbase <span class="hljs-keyword">import</span> Hbase<br><br><span class="hljs-comment"># Connect to HBase Thrift server</span><br>transport = TTransport.TBufferedTransport(TSocket.TSocket(<span class="hljs-string">&quot;101.118.124.111&quot;</span>, <span class="hljs-string">&quot;9090&quot;</span>))<br>protocol = TBinaryProtocol.TBinaryProtocolAccelerated(transport)<br><br><span class="hljs-comment"># Create and open the client connection</span><br>client = Hbase.Client(protocol)<br>transport.<span class="hljs-built_in">open</span>()<br><br>rows = client.getRow(<span class="hljs-string">&quot;cars&quot;</span>, <span class="hljs-string">&quot;row1&quot;</span>)<br><br><span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> rows:<br>        rowKey = row.row<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Got row:&quot;</span> + rowKey);<br><br><span class="hljs-comment"># Close the client connection</span><br>transport.close()<br></code></pre></td></tr></table></figure><p><strong>java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bim.hbase;<br><br><br><span class="hljs-keyword">import</span> org.apache.hadoop.hbase.thrift.generated.AlreadyExists;<br><span class="hljs-keyword">import</span> org.apache.hadoop.hbase.thrift.generated.Hbase;<br><span class="hljs-keyword">import</span> org.apache.hadoop.hbase.thrift.generated.ColumnDescriptor;<br><span class="hljs-keyword">import</span> org.apache.thrift.transport.*;<br><span class="hljs-keyword">import</span> org.apache.thrift.protocol.*;<br><span class="hljs-keyword">import</span> org.apache.thrift.protocol.TCompactProtocol;<br><span class="hljs-keyword">import</span> org.apache.thrift.transport.TFramedTransport;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.nio.ByteBuffer;<br><span class="hljs-keyword">import</span> java.nio.charset.Charset;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HbaseThriftTest</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String host;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Integer port;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            in = HbaseThriftTest.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;system.properties&quot;</span>);<br>            properties.load(in);<br>            host = properties.getProperty(<span class="hljs-string">&quot;hbase.thrift.host&quot;</span>);<br>            port = Integer.parseInt(properties.getProperty(<span class="hljs-string">&quot;hbase.thrift.port&quot;</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span>(in != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    in.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        init();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">Proto</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;binary&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">TableName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;t1&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">ColFamily</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;rowkey002&quot;</span>;<br><br>        <span class="hljs-comment">// setup the hbase thrift connection</span><br>        TTransport Transport;<br>        Transport = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TSocket</span>(host, port);<br>        <span class="hljs-type">TCompactProtocol</span> <span class="hljs-variable">FProtocol</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TCompactProtocol</span>(Transport);<br>        Hbase.<span class="hljs-type">Client</span> <span class="hljs-variable">Client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hbase</span>.Client(FProtocol);<br>        <span class="hljs-keyword">if</span> (Proto.equals(<span class="hljs-string">&quot;binary&quot;</span>)) &#123;<br>            <span class="hljs-type">TProtocol</span> <span class="hljs-variable">Protocol</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TBinaryProtocol</span>(Transport, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>);<br>            Client = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hbase</span>.Client(Protocol);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( Proto.equals(<span class="hljs-string">&quot;framed&quot;</span>)) &#123;<br>            Transport = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TFramedTransport</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TSocket</span>(host, port));<br>            <span class="hljs-type">TProtocol</span> <span class="hljs-variable">Protocol</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TBinaryProtocol</span>(Transport, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>);<br>            Client = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hbase</span>.Client(Protocol);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( ! Proto.equals(<span class="hljs-string">&quot;compact&quot;</span>)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Protocol must be compact or framed or binary&quot;</span>);<br>        &#125;<br>        Transport.open();<br><br>        <span class="hljs-comment">// prepare the column family</span><br>        List&lt;ColumnDescriptor&gt; Columns = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ColumnDescriptor&gt;();<br>        <span class="hljs-type">ColumnDescriptor</span> <span class="hljs-variable">col</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ColumnDescriptor</span>();<br>        col.name = ByteBuffer.wrap(ColFamily.getBytes());<br>        Columns.add(col);<br><br>        <span class="hljs-comment">// dump existing tables</span><br>        System.out.println(<span class="hljs-string">&quot;#~ Dumping Existing tables&quot;</span>);<br>        <span class="hljs-keyword">for</span> (ByteBuffer tn : Client.getTableNames()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;-- found: &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(tn.array(), Charset.forName(<span class="hljs-string">&quot;UTF-8&quot;</span>)));<br>        &#125;<br><br>        <span class="hljs-comment">// create the new table</span><br>        System.out.println(<span class="hljs-string">&quot;#~ Creating table: &quot;</span> + TableName);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Client.createTable(ByteBuffer.wrap(TableName.getBytes()), Columns);<br>        &#125; <span class="hljs-keyword">catch</span> (AlreadyExists ae) &#123;<br>            System.out.println(<span class="hljs-string">&quot;WARN: &quot;</span> + ae.message);<br>        &#125;<br><br>        Transport.close();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>下面是system.properties</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">hbase.thrift.host=101.118.124.111<br>hbase.thrift.port=9090<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hbase</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分布式系统的知识结构总结</title>
    <link href="/2019/05/09/2019-05-09-%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%9F%A5%E8%AF%86%E7%BB%93%E6%9E%84%E6%80%BB%E7%BB%93/"/>
    <url>/2019/05/09/2019-05-09-%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%9F%A5%E8%AF%86%E7%BB%93%E6%9E%84%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>构件分布式系统的目的是增加系统容量，提高系统可用性。转换成技术方面就是完成下面两件事</p><ul><li><p>大流量处理。所谓大流量处理就是利用集群技术将大量的并发请求分发到不同机器上</p></li><li><p>关键业务保护。提高系统可用性，所以需要将故障隔离起来，防止雪崩效应引起的整体服务无法正常服务。</p></li></ul><p>说白了就是干两件事，一是提高系统架构的吞吐量，服务更多的并发流量；二是为了提高系统的稳定性，让系统的可用性更高；下面从<strong>系统的性能</strong>和<strong>系统的稳定性</strong>来说一下在分布式下需要完成的事情。</p><h3 id="系统性能"><a href="#系统性能" class="headerlink" title="系统性能"></a>系统性能</h3><p>系统性能可以从下面五个方面入手来做整体优化，他们分别是：</p><ul><li>缓存</li><li>负载均衡</li><li>异步</li><li>数据分区</li><li>数据镜像</li></ul><h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h4><p>从前台到后台再到数据库，都有缓存。缓存是提高服务响应速度的最直接手段，在分布式环境中，可以使用MemCache、redis来构件分布式缓存。目前从市面上看来大家都更喜欢redis，这其中需要一个Proxy来做缓存的分片和路由。</p><h4 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h4><p>负载均衡是水平拓展的关键技术，它可以是多台机器共同分担一部分流量请求。</p><h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4><p>异步这块主要是通过异步队列对请求做排队处理，这边有很多业务场景，比如可以把前端并发请求的峰值给“削平”了，让后端通过自己能够处理的速度来处理请求，进而来增加系统的吞吐量，但这通常比较适用于实时性不是很高的场景；引入消息队列后，可能会出现消息丢失的问题，这就被迫我们不得不去做消息的持久化，持久化会造成有“状态”的节点，从而增加服务调度的难度。</p><h4 id="数据分区-x2F-镜像"><a href="#数据分区-x2F-镜像" class="headerlink" title="数据分区&#x2F;镜像"></a>数据分区&#x2F;镜像</h4><p>数据分区和数据镜像可以放在一起，数据分区就是将数据按照某种固定的方式分成多个区。比如按照地区来分，这样需要一个数据路由的中间件，不同地区来访问不同区域的数据库，来减少数据库的压力。但是这样会造成跨库的join和跨库的事务异常复杂。而数据镜像是将数据复制成多分，这样就不需要数据中间件了，可以在任意节点上进行读写， 内部会进行自动数据同步，但是数据镜像中最大的问题就是数据一致性问题。</p><p>对于一般公司来说，在初期会使用读写分离的数据镜像方式，然而后期会采用分库分表的方式。</p>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CDH5.15 权限管理</title>
    <link href="/2019/04/30/2019-04-30-CDH-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    <url>/2019/04/30/2019-04-30-CDH-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>CDH默认会给我们创建很多角色用户，这边对于开发和管理来说十分不方便。这边将所有的用户修改为ROOT</p><h3 id="HDFS"><a href="#HDFS" class="headerlink" title="HDFS"></a>HDFS</h3><p>下面描述一下怎么修改HDFS</p><p><img src="https://i.loli.net/2019/04/30/5cc7f41d6fedb.png" alt="1.png"><br><img src="https://i.loli.net/2019/04/30/5cc7f41d76977.png" alt="2.png"><br><img src="https://i.loli.net/2019/04/30/5cc7f41d5ef76.png" alt="3.png"></p><p>执行下面指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chown -R root:root /var/run/hdfs-sockets<br></code></pre></td></tr></table></figure><h3 id="YARN"><a href="#YARN" class="headerlink" title="YARN"></a>YARN</h3><p>搜索“用户”、“系统组”、“mapred”、“hadoop”修改为root</p><p><img src="https://i.loli.net/2019/04/30/5cc7f4ff9cc06.png" alt="48.png"></p><h3 id="其他组件"><a href="#其他组件" class="headerlink" title="其他组件"></a>其他组件</h3><p>最后修改ZooKeeper，Hive，Impala，Hbase，Spark，Sqoop2，Flume，Kafka等的用户和系统组为root。</p><p>搜索“用户”、“组”修改为root</p><h3 id="将角色加到root组中"><a href="#将角色加到root组中" class="headerlink" title="将角色加到root组中"></a>将角色加到root组中</h3><p>CDH给我们建的角色在&#x2F;etc&#x2F;passwd中可以体现</p><p>找出所有的相关角色把他们加到root组中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">usermod -a -G datacenter hue<br>usermod -a -G datacenter yarn<br>usermod -a -G datacenter flume<br>usermod -a -G datacenter impala<br>usermod -a -G datacenter spark<br>usermod -a -G datacenter zookeeper<br>usermod -a -G datacenter mapred<br>usermod -a -G datacenter sqoop<br>usermod -a -G datacenter hive<br>usermod -a -G datacenter sqoop2<br>usermod -a -G datacenter oozie<br>usermod -a -G datacenter hbase<br>usermod -a -G datacenter hdfs<br>usermod -a -G datacenter kudu<br>usermod -a -G datacenter httpfs<br>usermod -a -G datacenter root<br></code></pre></td></tr></table></figure><h3 id="修改HDFS"><a href="#修改HDFS" class="headerlink" title="修改HDFS"></a>修改HDFS</h3><p>hdfs dfs -chown -R root:root &#x2F;</p><p>重启集群服务即可，后续如果还有权限问题需要按提示进行修改即可</p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CDH</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>chrome auto proxy</title>
    <link href="/2019/04/28/2019-04-28-chrome-auto-proxy/"/>
    <url>/2019/04/28/2019-04-28-chrome-auto-proxy/</url>
    
    <content type="html"><![CDATA[<p>到google应用商店下载Proxy SwitchyOmega 下面进行相关配置</p><p><a href="https://i.loli.net/2019/04/28/5cc55a54b0cc0.png"><img src="https://i.loli.net/2019/04/28/5cc55a54b0cc0.png" alt="1.png"></a></p><p><a href="https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt">点我下载</a></p><p><a href="https://i.loli.net/2019/04/28/5cc55a54cca52.png"><img src="https://i.loli.net/2019/04/28/5cc55a54cca52.png" alt="2.png"></a></p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CDH5.15.0 hbase hue 配置后Error</title>
    <link href="/2019/04/27/2019-04-27-CDH15-5-0-hbase-hue/"/>
    <url>/2019/04/27/2019-04-27-CDH15-5-0-hbase-hue/</url>
    
    <content type="html"><![CDATA[<p>在CDM hue的配置界面搜索 hue_safety将下面代码加入到“值”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[hbase]<br>hbase_conf_dir=&#123;&#123;HBASE_CONF_DIR&#125;&#125;<br>thrift_transport=buffered<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/06/30/5d18569ef1e8014353.jpg"></p><p>在CDM Hbase的配置界面搜索 core-site.xml将下面代码加入到“值”</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.proxyuser.hue.hosts<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.proxyuser.hue.groups<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.proxyuser.hbase.hosts<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.proxyuser.hbase.groups<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><p>除此之外想看更多配置可以参考 <a href="https://blog.csdn.net/zhangshenghang/article/details/85776134">https://blog.csdn.net/zhangshenghang/article/details/85776134</a></p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CDH Error: JAVA_HOME is not set and could not be found.</title>
    <link href="/2019/04/26/2019-04-26-CDH-Error-JAVA-HOME-is-not-set-and-could-not-be-found/"/>
    <url>/2019/04/26/2019-04-26-CDH-Error-JAVA-HOME-is-not-set-and-could-not-be-found/</url>
    
    <content type="html"><![CDATA[<h3 id="错误一"><a href="#错误一" class="headerlink" title="错误一"></a>错误一</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hdfs dfs -mkdir -p /flume/mysql<br>Permission denied: user=root, access=WRITE, inode=&quot;/&quot;:hdfs:supergroup:drwxr-xr-x<br></code></pre></td></tr></table></figure><p>执行命令的用户没有执行权限。直接给当前用户授权。（这种想法是不正确的，不要为了简化输入命令，就试图修改这些东西）正确的做法应该是。切换指定用户执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@cdh1 data]#sudo -u hdfs  hadoop fs -mkdir /newFile<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@cdh1 data]#sudo -u hdfs  dfhs dfs  -mkdir /newFile<br></code></pre></td></tr></table></figure><p>更简单的是，先进入这个用户，su hdfs</p><h3 id="错误二"><a href="#错误二" class="headerlink" title="错误二"></a>错误二</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -u hdfs hdfs dfs -mkdir -p /flume/mysql  <br>Error: JAVA_HOME is not set and could not be found.<br>java -version<br>java version &quot;1.8.0_91&quot;<br></code></pre></td></tr></table></figure><p>确实已经设置了JAVA_HOME ，而且在linux shell 执行 echo $JAVA_HOME  也是有输出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">find / -name cloudera-config.sh<br>/*/*/*/cloudera-manager/cm-5.10.0/lib64/cmf/service/common/cloudera-config.sh<br>local JAVA8_HOME_CANDIDATES=(<br>    &#x27;/usr/java/jdk1.8&#x27;<br>    &#x27;/usr/java/jre1.8&#x27;<br>    &#x27;/usr/lib/jvm/j2sdk1.8-oracle&#x27;<br>    &#x27;/usr/lib/jvm/j2sdk1.8-oracle/jre&#x27;<br>    &#x27;/usr/lib/jvm/java-8-oracle&#x27;<br>)<br></code></pre></td></tr></table></figure><p>解决办法:</p><p>建立一个已经有的JAVA_HOME  链接到 &#x2F;usr&#x2F;java&#x2F;jdk1.8 就好了！<br>目标位置：&#x2F;usr&#x2F;java&#x2F;jdk1.8<br>原文件：&#x2F;<em>&#x2F;</em>&#x2F;jdk1.8.0_91</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">ln -s 源文件 目标文件<br>ln -s /*/*/jdk1.8.0_91 /usr/java/jdk1.8<br>sudo -u hdfs hdfs dfs -mkdir -p /flume/mysql<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CDH</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TProtocolException: Bad version in readMessageBegin</title>
    <link href="/2019/04/26/2019-04-26-TProtocolException-Bad-version-in-readMessageBegin/"/>
    <url>/2019/04/26/2019-04-26-TProtocolException-Bad-version-in-readMessageBegin/</url>
    
    <content type="html"><![CDATA[<p>链接thrift异常 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">org.apache.thrift.protocol.TProtocolException: Bad version in readMessageBegin<br>        at org.apache.thrift.protocol.TBinaryProtocol.readMessageBegin(TBinaryProtocol.java:<span class="hljs-number">223</span>)<br>        at org.apache.thrift.TBaseProcessor.process(TBaseProcessor.java:<span class="hljs-number">27</span>)<br>        at org.apache.hadoop.hbase.thrift.TBoundedThreadPoolServer$ClientConnnection.run(TBoundedThreadPoolServer.java:<span class="hljs-number">289</span>)<br>        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="hljs-number">1149</span>)<br>        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="hljs-number">624</span>)<br>        at java.lang.Thread.run(Thread.java:<span class="hljs-number">748</span>)<br><span class="hljs-number">2019</span>-<span class="hljs-number">04</span>-<span class="hljs-number">26</span> <span class="hljs-number">11</span>:<span class="hljs-number">04</span>:<span class="hljs-number">02</span>,<span class="hljs-number">472</span> ERROR org.apache.hadoop.hbase.thrift.TBoundedThreadPoolServer: Thrift error occurred during processing of message.<br>org.apache.thrift.protocol.TProtocolException: Bad version in readMessageBegin<br>        at org.apache.thrift.protocol.TBinaryProtocol.readMessageBegin(TBinaryProtocol.java:<span class="hljs-number">223</span>)<br>        at org.apache.thrift.TBaseProcessor.process(TBaseProcessor.java:<span class="hljs-number">27</span>)<br>        at org.apache.hadoop.hbase.thrift.TBoundedThreadPoolServer$ClientConnnection.run(TBoundedThreadPoolServer.java:<span class="hljs-number">289</span>)<br>        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="hljs-number">1149</span>)<br>        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="hljs-number">624</span>)<br>        at java.lang.Thread.run(Thread.java:<span class="hljs-number">748</span>)<br></code></pre></td></tr></table></figure><p>去CDH中的Hbase面板中检查<em>hbase.regionserver.thrift.compact</em>和<em>hbase.regionserver.thrift.framed</em>是否启用</p><p>hbase.regionserver.thrift.framed</p><p>Description:</p><blockquote><p>Use Thrift TFramedTransport on the server side. This is the recommended transport for thrift servers and requires a similar setting on the client side. Changing this to false will select the default transport, vulnerable to DoS when malformed requests are issued due to THRIFT-601.</p></blockquote><p>hbase.regionserver.thrift.compact</p><p>Description</p><blockquote><p>Use Thrift TCompactProtocol binary serialization protocol.</p></blockquote><p>增加ThriftServer堆栈大小到2G并保存</p><p>重启ThriftServer服务即可</p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hbase</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RDD DataSet和DataFrame的区别和应用场景</title>
    <link href="/2019/04/24/2019-04-24-RDD-DataSet%E5%92%8CDataFrame%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    <url>/2019/04/24/2019-04-24-RDD-DataSet%E5%92%8CDataFrame%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
    
    <content type="html"><![CDATA[<p>在spark中，RDD、DataFrame、Dataset是最常用的数据类型，本博文给出笔者在使用的过程中体会到的区别和各自的优势。</p><h2 id="共性"><a href="#共性" class="headerlink" title="共性"></a>共性</h2><p>1、 RDD、DataFrame和Dataset全都是spark平台下的分布式弹性数据集，为处理超大型数据提供便利；</p><p>2、 三者都有惰性机制，在进行创建、转换，如map方法时，不会立即执行，只有在遇到Action如foreach时，三者才会开始遍历运算，极端情况下，如果代码里面有创建、转换，但是后面没有在Action中使用对应的结果，在执行时会被直接跳过，如</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> sparkconf = <span class="hljs-keyword">new</span> <span class="hljs-type">SparkConf</span>().setMaster(<span class="hljs-string">&quot;local&quot;</span>).setAppName(<span class="hljs-string">&quot;test&quot;</span>).set(<span class="hljs-string">&quot;spark.port.maxRetries&quot;</span>,<span class="hljs-string">&quot;1000&quot;</span>)<br><span class="hljs-keyword">val</span> spark = <span class="hljs-type">SparkSession</span>.builder().config(sparkconf).getOrCreate()<br><span class="hljs-keyword">val</span> rdd=spark.sparkContext.parallelize(<span class="hljs-type">Seq</span>((<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">1</span>), (<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-number">1</span>), (<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">1</span>)))<br>rdd.map&#123;line=&gt;<br>    println(<span class="hljs-string">&quot;运行&quot;</span>)<br>    line._1<br>&#125;<br></code></pre></td></tr></table></figure><p>map中的println(“运行”)并不会运行。</p><p>3、三者都会根据spark的内存情况自动缓存运算，这样即使数据量很大，也不用担心会内存溢出。</p><p>4、三者都有partition的概念</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">var</span> predata=data.repartition(<span class="hljs-number">24</span>).mapPartitions&#123;<br>    <span class="hljs-type">PartLine</span> =&gt; &#123;<br>        <span class="hljs-type">PartLine</span>.map&#123;<br>            line =&gt;<br>            println(“转换操作”)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样对每一个分区进行操作时，就跟在操作数组一样，不但数据量比较小，而且可以方便的将map中的运算结果拿出来，如果直接用map，map中对外面的操作是无效的</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> rdd=spark.sparkContext.parallelize(<span class="hljs-type">Seq</span>((<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">1</span>), (<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-number">1</span>), (<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">1</span>)))<br><span class="hljs-keyword">var</span> flag=<span class="hljs-number">0</span><br><span class="hljs-keyword">val</span> test=rdd.map&#123;line=&gt;<br>    println(<span class="hljs-string">&quot;运行&quot;</span>)<br>    flag+=<span class="hljs-number">1</span><br>    println(flag)<br>    line._1<br>&#125;<br>println(test.count)<br>println(flag)<br></code></pre></td></tr></table></figure><p>结果如下:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs">运行<br>1<br>运行<br>2<br>运行<br>3<br>3<br>0<br></code></pre></td></tr></table></figure><p>不使用partition时，对map之外的操作无法对map之外的变量造成影响。</p><p>5、三者有许多共同的函数，如filter，排序等。</p><p>6、在对DataFrame和Dataset进行操作许多操作都需要这个包进行支持。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">//这里的spark是SparkSession的变量名</span><br><span class="hljs-keyword">import</span> spark.implicits._<br></code></pre></td></tr></table></figure><p>7、DataFrame和Dataset均可使用模式匹配获取各个字段的值和类型。</p><p>DataFrame:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scala">testDF.map&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-type">Row</span>(col1:<span class="hljs-type">String</span>,col2:<span class="hljs-type">Int</span>)=&gt;<br>    println(col1);println(col2)<br>    col1<br>    <span class="hljs-keyword">case</span> _=&gt;<br>    <span class="hljs-string">&quot;&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>为了提高稳健性，最好后面有一个_通配操作，这里提供了DataFrame一个解析字段的方法。</p><p>Dataset:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">case</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Coltest</span>(<span class="hljs-params">col1:<span class="hljs-type">String</span>,col2:<span class="hljs-type">Int</span></span>)<span class="hljs-keyword">extends</span> <span class="hljs-title">Serializable</span> <span class="hljs-comment">//定义字段名和类型</span></span><br>testDS.map&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-type">Coltest</span>(col1:<span class="hljs-type">String</span>,col2:<span class="hljs-type">Int</span>)=&gt;<br>    println(col1);println(col2)<br>    col1<br>    <span class="hljs-keyword">case</span> _=&gt;<br>    <span class="hljs-string">&quot;&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><h4 id="RDD"><a href="#RDD" class="headerlink" title="RDD"></a>RDD</h4><p>1、RDD一般和spark mlib同时使用。</p><p>2、RDD不支持sparkSQL操作。</p><p>DataFrame:</p><p>1、与RDD和Dataset不同，DataFrame每一行的类型固定为Row，只有通过解析才能获取各个字段的值，如</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scala">testDF.foreach&#123;<br>    line =&gt;<br>    <span class="hljs-keyword">val</span> col1=line.getAs[<span class="hljs-type">String</span>](<span class="hljs-string">&quot;col1&quot;</span>)<br>    <span class="hljs-keyword">val</span> col2=line.getAs[<span class="hljs-type">String</span>](<span class="hljs-string">&quot;col2&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>每一列的值没法直接访问。</p><p>2、DataFrame与Dataset一般与spark ml同时使用。</p><p>3、DataFrame与Dataset均支持sparksql的操作，比如select，groupby之类，还能注册临时表&#x2F;视窗，进行sql语句操作，如</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scala">dataDF.createOrReplaceTempView(<span class="hljs-string">&quot;tmp&quot;</span>)<br>spark.sql(<span class="hljs-string">&quot;select ROW,DATE from tmp where DATE is not null order by DATE&quot;</span>).show(<span class="hljs-number">100</span>,<span class="hljs-literal">false</span>)<br></code></pre></td></tr></table></figure><p>4、DataFrame与Dataset支持一些特别方便的保存方式，比如保存成csv，可以带上表头，这样每一列的字段名一目了然。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">//保存</span><br><span class="hljs-keyword">val</span> saveoptions = <span class="hljs-type">Map</span>(<span class="hljs-string">&quot;header&quot;</span> -&gt; <span class="hljs-string">&quot;true&quot;</span>, <span class="hljs-string">&quot;delimiter&quot;</span> -&gt; <span class="hljs-string">&quot;t&quot;</span>, <span class="hljs-string">&quot;path&quot;</span> -&gt; <span class="hljs-string">&quot;hdfs://172.xx.xx.xx:9000/test&quot;</span>)<br>datawDF.write.format(<span class="hljs-string">&quot;com.databricks.spark.csv&quot;</span>).mode(<span class="hljs-type">SaveMode</span>.<span class="hljs-type">Overwrite</span>).options(saveoptions).save()<br><span class="hljs-comment">//读取</span><br><span class="hljs-keyword">val</span> options = <span class="hljs-type">Map</span>(<span class="hljs-string">&quot;header&quot;</span> -&gt; <span class="hljs-string">&quot;true&quot;</span>, <span class="hljs-string">&quot;delimiter&quot;</span> -&gt; <span class="hljs-string">&quot;t&quot;</span>, <span class="hljs-string">&quot;path&quot;</span> -&gt; <span class="hljs-string">&quot;hdfs://172.xx.xx.xx:9000/test&quot;</span>)<br><span class="hljs-keyword">val</span> datarDF= spark.read.options(options).format(<span class="hljs-string">&quot;com.databricks.spark.csv&quot;</span>).load()<br></code></pre></td></tr></table></figure><p>利用这样的保存方式，可以方便的获得字段名和列的对应，而且分隔符（delimiter）可以自由指定。</p><p>Dataset:</p><p>这里主要对比Dataset和DataFrame，因为Dataset和DataFrame拥有完全相同的成员函数，区别只是每一行的数据类型不同。</p><p>DataFrame也可以叫Dataset[Row],每一行的类型是Row，不解析，每一行究竟有哪些字段，各个字段又是什么类型都无从得知，只能用上面提到的getAS方法或者共性中的第七条提到的模式匹配拿出特定字段。</p><p>而Dataset中，每一行是什么类型是不一定的，在自定义了case class之后可以很自由的获得每一行的信息。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">case</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Coltest</span>(<span class="hljs-params">col1:<span class="hljs-type">String</span>,col2:<span class="hljs-type">Int</span></span>)<span class="hljs-keyword">extends</span> <span class="hljs-title">Serializable</span> <span class="hljs-comment">//定义字段名和类型</span></span><br><span class="hljs-comment">//rdd</span><br><span class="hljs-comment">//(&quot;a&quot;, 1)</span><br><span class="hljs-comment">//(&quot;b&quot;, 1)</span><br><span class="hljs-comment">//(&quot;a&quot;, 1)</span><br><span class="hljs-keyword">val</span> test: <span class="hljs-type">Dataset</span>[<span class="hljs-type">Coltest</span>]=rdd.map&#123;line=&gt;<br>    <span class="hljs-type">Coltest</span>(line._1,line._2)<br>&#125;.toDS<br>test.map&#123;<br>    line=&gt;<br>    println(line.col1)<br>    println(line.col2)<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看出，Dataset在需要访问列中的某个字段时是非常方便的，然而，如果要写一些适配性很强的函数时，如果使用Dataset，行的类型又不确定，可能是各种case class，无法实现适配，这时候用DataFrame即Dataset[Row]就能比较好的解决问题。</p><p>转化：</p><p>RDD、DataFrame、Dataset三者有许多共性，有各自适用的场景常常需要在三者之间转换。</p><p>DataFrame&#x2F;Dataset转RDD：</p><p>这个转换很简单</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> rdd1=testDF.rdd<br><span class="hljs-keyword">val</span> rdd2=testDS.rdd<br></code></pre></td></tr></table></figure><p>RDD转DataFrame：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">import</span> spark.implicits._<br><span class="hljs-keyword">val</span> testDF = rdd.map &#123;line=&gt;<br>    (line._1,line._2)<br>&#125;.toDF(<span class="hljs-string">&quot;col1&quot;</span>,<span class="hljs-string">&quot;col2&quot;</span>)<br></code></pre></td></tr></table></figure><p>一般用元组把一行的数据写在一起，然后在toDF中指定字段名。</p><p>RDD转Dataset：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">import</span> spark.implicits._<br><span class="hljs-keyword">case</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Coltest</span>(<span class="hljs-params">col1:<span class="hljs-type">String</span>,col2:<span class="hljs-type">Int</span></span>)<span class="hljs-keyword">extends</span> <span class="hljs-title">Serializable</span> <span class="hljs-comment">//定义字段名和类型</span></span><br><span class="hljs-keyword">val</span> testDS = rdd.map &#123;line=&gt;<br>    <span class="hljs-type">Coltest</span>(line._1,line._2)<br>&#125;.toDS<br></code></pre></td></tr></table></figure><p>可以注意到，定义每一行的类型（case class）时，已经给出了字段名和类型，后面只要往case class里面添加值即可。</p><p>Dataset转DataFrame：</p><p>这个也很简单，因为只是把case class封装成Row。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">import</span> spark.implicits._<br><span class="hljs-keyword">val</span> testDF = testDS.toDF<br></code></pre></td></tr></table></figure><p>DataFrame转Dataset：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">import</span> spark.implicits._<br><span class="hljs-keyword">case</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Coltest</span>(<span class="hljs-params">col1:<span class="hljs-type">String</span>,col2:<span class="hljs-type">Int</span></span>)<span class="hljs-keyword">extends</span> <span class="hljs-title">Serializable</span> <span class="hljs-comment">//定义字段名和类型</span></span><br><span class="hljs-keyword">val</span> testDS = testDF.as[<span class="hljs-type">Coltest</span>]<br></code></pre></td></tr></table></figure><p>这种方法就是在给出每一列的类型后，使用as方法，转成Dataset，这在数据类型是DataFrame又需要针对各个字段处理时极为方便。</p><p>特别注意：</p><p>在使用一些特殊的操作时，一定要加上 import spark.implicits._ 不然toDF、toDS无法使用。</p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spark</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CDH5.15.0升级spark1.6到2.3</title>
    <link href="/2019/04/23/2019-04-23-CDH5-15%E5%8D%87%E7%BA%A7spark1-6%E5%88%B02-3/"/>
    <url>/2019/04/23/2019-04-23-CDH5-15%E5%8D%87%E7%BA%A7spark1-6%E5%88%B02-3/</url>
    
    <content type="html"><![CDATA[<p>CDH5.15.0安装集群以后，默认安装的spark是1.6版本。添加的时候没有spark2,因为spark1.6好多新功能都不能使用，所以这边对其进行升级。</p><p><img src="https://i.loli.net/2019/07/04/5d1d69cb0b5ff24388.jpg"></p><h2 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h2><ul><li>parcel、parcel.sha和manifest.json</li><li>csd</li></ul><p>下载parcel等文件<a href="http://archive.cloudera.com/spark2/parcels/latest/">点我下载</a></p><p><img src="https://i.loli.net/2019/07/04/5d1d69e88534d47724.jpg"></p><p>下载csd文件<a href="http://archive.cloudera.com/spark2/csd/">点我下载</a></p><p><img src="https://i.loli.net/2019/07/04/5d1d69fa3667539128.jpg"></p><blockquote><p>关于版本，csd和parcel的版本要对应上本例子中都是cloudera1;parcel的版本要选择适合自己操作系统的，本例中使用的是centos7,所以下载el7</p></blockquote><p>下载好所有文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">SPARK2_ON_YARN-2.4.0.cloudera1.jar<br>SPARK2-2.4.0.cloudera1-1.cdh5.13.3.p0.1007356-el7.parcel<br>SPARK2-2.4.0.cloudera1-1.cdh5.13.3.p0.1007356-el7.parcel.sha1<br>manifest.json<br></code></pre></td></tr></table></figure><h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h2><p>将SPARK2_ON_YARN-2.4.0.cloudera1.jar上传到主节点的*&#x2F;opt&#x2F;cloudera&#x2F;csd&#x2F;*</p><blockquote><p>没有目录的话创建一个</p></blockquote><p>将其余文件上传到主节点的*&#x2F;opt&#x2F;cloudera&#x2F;parcel-repo&#x2F;*</p><blockquote><p>目录下面如果有重名文件必须删掉，如果没有则不用管</p></blockquote><h2 id="重启CSM"><a href="#重启CSM" class="headerlink" title="重启CSM"></a>重启CSM</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">在主节点运行</span><br>/opt/cm-5.15.0/etc/init.d/cloudera-scm-server start<br><span class="hljs-meta prompt_"># </span><span class="language-bash">在所有节点运行</span><br>/opt/cm-5.15.0/etc/init.d/cloudera-scm-agent start<br></code></pre></td></tr></table></figure><h2 id="激活安装"><a href="#激活安装" class="headerlink" title="激活安装"></a>激活安装</h2><p>到cloudera manager界面 主机-》parcel-》SPARK2 做激活</p><p><img src="https://i.loli.net/2019/07/04/5d1d6a09c0b3660389.jpg"></p><p>按照正常操作添加SPARK2到集群即可</p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>到node1节点下运行<em>spark-shell</em>发现报错</p><p><img src="https://i.loli.net/2019/07/04/5d1d6a1f16b6d99646.jpg"></p><p>首先我们得知道下面这些事情</p><ul><li>CDH安装目录 &#x2F;opt&#x2F;cloudera&#x2F;parcels&#x2F;CDH&#x2F;</li><li>SPARK2安装目录 &#x2F;opt&#x2F;cloudera&#x2F;parcels&#x2F;SPARK2</li><li>所有配置文件目录为 &#x2F;etc&#x2F;</li></ul><p>将CDH中spark配置文件拷贝到SPARK2的配置文件中,并配置spark-env.sh文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp /opt/cloudera/parcels/CDH/etc/spark/conf.dist/* /opt/cloudera/parcels/SPARK2/etc/spark2/conf.dist/<br></code></pre></td></tr></table></figure><p>检查一下配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /opt/cloudera/parcels/SPARK2/etc/spark2/conf.dist/spark-env.sh<br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加下面内容到*spark-env.sh*中</span><br>export SPARK_DIST_CLASSPATH=$(hadoop classpath) //指定hadoop class文件目录<br>export HADOOP_CONF_DIR=/etc/hadoop/conf //指定hadoop配置文件目录<br></code></pre></td></tr></table></figure><p>将Spark2加入到环境变量中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/profile<br><span class="hljs-meta prompt_">#</span><span class="language-bash">添加如下内容</span><br>export HADOOP_CONF_DIR=/etc/hadoop/conf<br>export SPARK_HOME=/opt/cloudera/parcels/SPARK2/lib/spark2<br>export PATH=$SPARK_HOME/bin:$PATH<br></code></pre></td></tr></table></figure><h4 id="spark-on-yarn测试"><a href="#spark-on-yarn测试" class="headerlink" title="spark on yarn测试"></a>spark on yarn测试</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /opt/cloudera/parcels/SPARK2/lib/spark2/examples/jars<br><br>spark-submit --class org.apache.spark.examples.SparkPi \<br>    --master yarn \<br>    --deploy-mode cluster \<br>    --driver-memory 4g \<br>    --executor-memory 2g \<br>    --executor-cores 1 \<br>    --queue thequeue \<br>    ./spark-examples_2.11-2.4.0.cloudera1.jar \<br>    10<br></code></pre></td></tr></table></figure><p>到yarn上查看任务<a href="http://zhaoyihao.iok.la:8088/cluster">http://zhaoyihao.iok.la:8088/cluster</a></p><p><img src="https://i.loli.net/2019/07/04/5d1d6a3b1930714583.jpg"></p><h4 id="Spark-SQL-操作Hive测试"><a href="#Spark-SQL-操作Hive测试" class="headerlink" title="Spark SQL 操作Hive测试"></a>Spark SQL 操作Hive测试</h4><p>这里有一个参数特别重要<em>spark.sql.warehouse.dir</em>下面是官方解释</p><blockquote><p>When working with Hive, one must instantiate SparkSession with Hive support, including connectivity to a persistent Hive metastore, support for Hive serdes, and Hive user-defined functions. Users who do not have an existing Hive deployment can still enable Hive support. When not configured by the hive-site.xml, the context automatically creates metastore_db in the current directory and creates a directory configured by spark.sql.warehouse.dir, which defaults to the directory spark-warehouse in the current directory that the Spark application is started. Note that the hive.metastore.warehouse.dir property in hive-site.xml is deprecated since Spark 2.0.0. Instead, use spark.sql.warehouse.dir to specify the default location of database in warehouse. You may need to grant write privilege to the user who starts the Spark application.</p></blockquote><p>大概的意思是，使用hive需要sparksession设置支持选项，如果用户集群里，没有部署好的hive，sparksession也能够提供hive支持，在这种情况下，如果没有hive-site.xml文件，sparkcontext会自动在当前目录创建元数据db,并且会在spark.sql.warehouse.dir表示的位置创建一个目录，用户存放table数据，所以spark.sql.warehouse.dir是一个用户存放hive table文件的一个目录，因为是一个目录地址，难免会收到操作系统的影响，因为不同的文件系统的前缀是不一样了，为了适配性，spark鼓励在code中设置该选项，而不是在hive-site.xml中设置该选项。</p><p>1.如果没有部署好的hive，spark确实是会使用内置的hive，但是spark会将所有的元信息都放到spark_home&#x2F;bin 目录下，也就是为什么配置了spark.sql.warehouse.dir 却不起作用的原因。而且，就算部署了hive，也需要让spark识别hive，否则spark，还是会使用spark默认的hive</p><p>2.只有在部署好的hive情况下，使用spark.sql.warehouse.dir才会生效，而且spark会默认覆盖hive的配置项。</p><p>下面摘自官方文档</p><blockquote><p>Configuration of Hive is done by placing your hive-site.xml, core-site.xml (for security configuration), and hdfs-site.xml (for HDFS configuration) file in conf&#x2F;. <a href="http://spark.apache.org/docs/latest/sql-data-sources-hive-tables.html">http://spark.apache.org/docs/latest/sql-data-sources-hive-tables.html</a></p></blockquote><p>到cloudera manager 下载hvie的客户端配置，将hive-site.xml，core-site.xml，hdfs-site.xml复制到*&#x2F;opt&#x2F;cloudera&#x2F;parcels&#x2F;SPARK2-2.4.0.cloudera1-1.cdh5.13.3.p0.1007356&#x2F;lib&#x2F;spark2&#x2F;conf*目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp /etc/hadoop/conf/hdfs-site.xml /opt/cloudera/parcels/SPARK2/lib/spark2/conf/<br>cp /etc/hadoop/conf/core-site.xml /opt/cloudera/parcels/SPARK2/lib/spark2/conf/<br>cp /etc/hive/conf/hive-site.xml /opt/cloudera/parcels/SPARK2/lib/spark2/conf/<br></code></pre></td></tr></table></figure><p>进入spark-shell</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> spark = <span class="hljs-type">SparkSession</span><br>    .builder()<br>    .appName(<span class="hljs-string">&quot;Spark Hive Example&quot;</span>)<br>    <span class="hljs-comment">//在实例化sparkSession时指定hive的warehouse</span><br>    .config(<span class="hljs-string">&quot;spark.sql.warehouse.dir&quot;</span>, <span class="hljs-string">&quot;/user/hive/warehouse&quot;</span>)<br>    <span class="hljs-comment">//调用enableHiveSupport开启hive的支持</span><br>    .enableHiveSupport()<br>    .getOrCreate()<br><br><span class="hljs-keyword">import</span> spark.implicits._<br><span class="hljs-keyword">import</span> spark.sql<br><br>sql(<span class="hljs-string">&quot;CREATE TABLE IF NOT EXISTS src (key INT, value STRING) USING hive&quot;</span>)<br>sql(<span class="hljs-string">&quot;LOAD DATA LOCAL INPATH &#x27;examples/src/main/resources/kv1.txt&#x27; INTO TABLE src&quot;</span>)<br><br><span class="hljs-comment">// Queries are expressed in HiveQL</span><br>sql(<span class="hljs-string">&quot;SELECT * FROM src&quot;</span>).show()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CDH</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CDH5.15.x 启动服务Time out</title>
    <link href="/2019/04/17/2019-04-17-CDH5-15-x-time-out/"/>
    <url>/2019/04/17/2019-04-17-CDH5-15-x-time-out/</url>
    
    <content type="html"><![CDATA[<p>环境: CDH 5.15.0 + centos7</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Command aborted because <span class="hljs-keyword">of</span> <span class="hljs-keyword">exception</span>: Command timed-<span class="hljs-keyword">out</span> <span class="hljs-keyword">after</span> <span class="hljs-number">150</span> seconds<br></code></pre></td></tr></table></figure><p>这是由于服务端集群未禁用ipv6导致</p><p>使用ifconfig命令查看网卡信息，如果出现<strong>inet6 fe80::20c:29ff:fed0:3514</strong>，说明机器开启了ipv6<br><img src="https://i.loli.net/2019/04/27/5cc427c43c480.png" alt="1.png"></p><p>编辑**&#x2F;etc&#x2F;sysctl.conf**配置</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">net<span class="hljs-selector-class">.ipv6</span><span class="hljs-selector-class">.conf</span><span class="hljs-selector-class">.all</span>.disable_ipv6=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>编辑**&#x2F;etc&#x2F;sysconfig&#x2F;network**配置</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">NETWORKING_IPV6</span>=<span class="hljs-literal">no</span><br></code></pre></td></tr></table></figure><p>编辑**&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-eno16777736**</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">IPV6INIT</span>=<span class="hljs-literal">no</span><br></code></pre></td></tr></table></figure><p>执行sysctl -p或者reboot重启命令</p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CDH</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java.lang.NoClassDefFoundError scala/Product$class</title>
    <link href="/2019/04/16/2019-04-16-spark-idea-windows-scala-Product/"/>
    <url>/2019/04/16/2019-04-16-spark-idea-windows-scala-Product/</url>
    
    <content type="html"><![CDATA[<p>环境：windows 7 + idea + scala + spark</p><p>本地运行以后报下面错误</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">Exception in thread <span class="hljs-string">&quot;main&quot;</span> java.lang.NoClassDefFoundError: scala/Product$<span class="hljs-keyword">class</span><br><span class="hljs-title class_">at</span> org.apache.spark.SparkConf$DeprecatedConfig.&lt;init&gt;(SparkConf.scala:<span class="hljs-number">682</span>)<br>at org.apache.spark.SparkConf$.&lt;init&gt;(SparkConf.scala:<span class="hljs-number">539</span>)<br>at org.apache.spark.SparkConf$.&lt;clinit&gt;(SparkConf.scala)<br>at org.apache.spark.SparkConf.set(SparkConf.scala:<span class="hljs-number">72</span>)<br>at org.apache.spark.SparkConf.setAppName(SparkConf.scala:<span class="hljs-number">87</span>)<br>at com.bim.WordCount$.main(WordCount.scala:<span class="hljs-number">9</span>)<br>at com.bim.WordCount.main(WordCount.scala)<br>Caused by: java.lang.ClassNotFoundException: scala.Product$<span class="hljs-keyword">class</span><br><span class="hljs-title class_">at</span> java.net.URLClassLoader.findClass(URLClassLoader.java:<span class="hljs-number">381</span>)<br>at java.lang.ClassLoader.loadClass(ClassLoader.java:<span class="hljs-number">424</span>)<br>at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:<span class="hljs-number">335</span>)<br>at java.lang.ClassLoader.loadClass(ClassLoader.java:<span class="hljs-number">357</span>)<br>... <span class="hljs-number">7</span> more<br></code></pre></td></tr></table></figure><p>Spark和Scala的版本是有对应关系的，下面有个查看关系的小技巧，去<a href="https://mvnrepository.com/">https://mvnrepository.com/</a>中搜索<strong>spark</strong>，进入<strong>Spark Project Core</strong>查看即可</p><p><img src="https://i.loli.net/2019/07/04/5d1d69bd4be7880206.jpg"></p><p>下面分别引入<strong>spark-core</strong>和<strong>spark-sql</strong>（不需要的话可以不引）运行即可。</p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spark</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java.lang.ArrayIndexOutOfBoundsException 10582</title>
    <link href="/2019/04/16/2019-04-16-spark-idea-windows-array-index-out-of-bounds-exception/"/>
    <url>/2019/04/16/2019-04-16-spark-idea-windows-array-index-out-of-bounds-exception/</url>
    
    <content type="html"><![CDATA[<p>环境：windows 7 + idea + scala 1.12.6 + spark 2.4.0</p><p>在IDEA中运行报下面错误</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">Exception in thread <span class="hljs-string">&quot;main&quot;</span> java.lang.ArrayIndexOutOfBoundsException: <span class="hljs-number">10582</span><br>at com.thoughtworks.paranamer.BytecodeReadingParanamer$ClassReader.accept(BytecodeReadingParanamer.java:<span class="hljs-number">563</span>)<br>at com.thoughtworks.paranamer.BytecodeReadingParanamer$ClassReader.access$<span class="hljs-number">200</span>(BytecodeReadingParanamer.java:<span class="hljs-number">338</span>)<br>at com.thoughtworks.paranamer.BytecodeReadingParanamer.lookupParameterNames(BytecodeReadingParanamer.java:<span class="hljs-number">103</span>)<br>at com.thoughtworks.paranamer.CachingParanamer.lookupParameterNames(CachingParanamer.java:<span class="hljs-number">90</span>)<br>at com.fasterxml.jackson.<span class="hljs-keyword">module</span>.scala.introspect.BeanIntrospector$.getCtorParams(BeanIntrospector.scala:<span class="hljs-number">44</span>)<br>at com.fasterxml.jackson.<span class="hljs-keyword">module</span>.scala.introspect.BeanIntrospector$.$anonfun$apply$<span class="hljs-number">1</span>(BeanIntrospector.scala:<span class="hljs-number">58</span>)<br>at com.fasterxml.jackson.<span class="hljs-keyword">module</span>.scala.introspect.BeanIntrospector$.$anonfun$apply$<span class="hljs-number">1</span>$adapted(BeanIntrospector.scala:<span class="hljs-number">58</span>)<br>at scala.collection.TraversableLike.$anonfun$flatMap$<span class="hljs-number">1</span>(TraversableLike.scala:<span class="hljs-number">241</span>)<br>at scala.collection.Iterator.foreach(Iterator.scala:<span class="hljs-number">944</span>)<br>at scala.collection.Iterator.foreach$(Iterator.scala:<span class="hljs-number">944</span>)<br>at scala.collection.AbstractIterator.foreach(Iterator.scala:<span class="hljs-number">1432</span>)<br>at scala.collection.IterableLike.foreach(IterableLike.scala:<span class="hljs-number">71</span>)<br>    ...<br><br></code></pre></td></tr></table></figure><p>下面是pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ml.yihao<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spark<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scala.version</span>&gt;</span>2.12.6<span class="hljs-tag">&lt;/<span class="hljs-name">scala.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">spark.version</span>&gt;</span>2.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">spark.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hadoop.version</span>&gt;</span>2.6.4<span class="hljs-tag">&lt;/<span class="hljs-name">hadoop.version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.scala-lang<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>scala-library<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;scala.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.spark<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spark-core_2.12<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spark.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.hadoop<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hadoop-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;hadoop.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.spark<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spark-sql_2.12<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spark.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.38<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--&lt;dependency&gt;--&gt;</span><br>      <span class="hljs-comment">&lt;!--&lt;groupId&gt;com.thoughtworks.paranamer&lt;/groupId&gt;--&gt;</span><br>      <span class="hljs-comment">&lt;!--&lt;artifactId&gt;paranamer&lt;/artifactId&gt;--&gt;</span><br>      <span class="hljs-comment">&lt;!--&lt;version&gt;2.8&lt;/version&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;/dependency&gt;--&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">sourceDirectory</span>&gt;</span>src/main/scala<span class="hljs-tag">&lt;/<span class="hljs-name">sourceDirectory</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">testSourceDirectory</span>&gt;</span>src/test/scala<span class="hljs-tag">&lt;/<span class="hljs-name">testSourceDirectory</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.alchim31.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>scala-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>testCompile<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-shade-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>shade<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">filters</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">artifact</span>&gt;</span>*:*<span class="hljs-tag">&lt;/<span class="hljs-name">artifact</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>META-INF/*.SF<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>META-INF/*.DSA<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>META-INF/*.RSA<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                  <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">filters</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="red">解决</font>：在pom.xml中添加paranamer即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.thoughtworks.paranamer<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>paranamer<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spark</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>B-树</title>
    <link href="/2019/03/27/2019-03-27-B-%E6%A0%91/"/>
    <url>/2019/03/27/2019-03-27-B-%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<p>B+树，称为B加树；那么对于B-树，谁要是读成B减树，那就太丢人了咯，它虽然带着减号，但是要读成B树。</p><p>B+树和B-树是一种基础的数据结构，做为开发人员一定要掌握。</p><h3 id="什么是B-树"><a href="#什么是B-树" class="headerlink" title="什么是B-树"></a>什么是B-树</h3><p>首先大家都知道数据库有索引，索引被映射成二叉索引树，被存在于磁盘之上。那么下面我们来看看为啥数据库要使用B-树？换二叉搜索树行不行？</p><p>从算法逻辑上来讲，二叉搜索树的查找速度和比较次数都是最小的，但是数据库的实现并没有用二叉搜索树，而是用了B-树和B+树，下面来说一下里面的门道。</p><p>数据库操作数据要进行频繁的“磁盘IO”，因此在设计之初要充分考虑到如何优化磁盘IO造成的读写效率问题。数据库索引存于磁盘之上，当数据量比较大的时候，索引的大小可能有几个G甚至更多。当利用索引查询的时候，肯定不能将全部都加载到内存，能做的只有逐一加载每个磁盘页，这里的磁盘页对应索引树的节点。</p><p><img src="https://i.loli.net/2019/07/02/5d1ab0d03aa4913594.jpg"></p><p><strong>探究一下如果索引树使用二叉搜索树实现，会是一种什么样的情况，假设树的高度是4，查找的值是10</strong></p><p><img src="https://i.loli.net/2019/07/02/5d1ab0d39485597326.jpg" alt="二叉搜索树"></p><p>第1次IO<br><img src="https://i.loli.net/2019/07/02/5d1ab0d86ee3a87924.jpg"></p><p>第2次IO<br><img src="https://i.loli.net/2019/07/02/5d1ab0dc1ffda84614.jpg"></p><p>第3次IO<br><img src="https://i.loli.net/2019/07/02/5d1ab0dfa6c6715048.jpg"></p><p>第4次IO<br><img src="https://i.loli.net/2019/07/02/5d1ab0e339f3b63743.jpg"></p><blockquote><p>查找了4次命中结果，因此磁盘IO的次数是由树的高度决定。为了减少磁盘IO次数，下面使用B-树来将二叉搜索树进行“瘦身”，以此来减少IO次数！</p></blockquote><p>下面来具体介绍一下B-树（Balance Tree），一个m阶的B树具有如下几个特征：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">根结点至少有两个子女。<br>每个中间节点都包含k-<span class="hljs-number">1</span>个元素和k个孩子，其中 m/<span class="hljs-number">2</span> &lt;<span class="hljs-operator">=</span> k &lt;<span class="hljs-operator">=</span> m<br>每一个叶子节点都包含k-<span class="hljs-number">1</span>个元素，其中 m/<span class="hljs-number">2</span> &lt;<span class="hljs-operator">=</span> k &lt;<span class="hljs-operator">=</span> m<br>所有的叶子结点都位于同一层。<br>每个节点中的元素从小到大排列，节点当中k-<span class="hljs-number">1</span>个元素正好是k个孩子包含的元素的值域分划。<br></code></pre></td></tr></table></figure><p><strong>以3阶 B-树为例，来认识一下B-树的具体结构。树中的具体元素和上图二叉搜索树节点一样。</strong></p><p><img src="https://i.loli.net/2019/07/02/5d1ab0e6731ab38634.jpg"></p><blockquote><p>这棵树中，重点看（2,6）节点，该节点有两个元素2和6，又有三个孩子1，（3,5），8；其中1小于元素2，（3,5）在元素2,6之间，8大于（3,5），符合B-树的几个特征。</p></blockquote><p><img src="https://i.loli.net/2019/07/02/5d1ab0e9a3d7c91565.jpg"></p><h3 id="B-树的查找"><a href="#B-树的查找" class="headerlink" title="B-树的查找"></a>B-树的查找</h3><p>假如要查的值为5</p><p><img src="https://i.loli.net/2019/07/02/5d1ab0ed4084d64780.jpg"></p><p><img src="https://i.loli.net/2019/07/04/5d1d699ca263a23393.jpg"></p><p><img src="https://i.loli.net/2019/07/02/5d1ab0f44922323956.jpg"></p><p><img src="https://i.loli.net/2019/07/02/5d1ab0f79956647010.jpg"></p><p><img src="https://i.loli.net/2019/07/02/5d1ab0fb07cbf47646.jpg"></p><p><img src="https://i.loli.net/2019/07/02/5d1ab0fe6963189584.jpg"></p><p>通过整个流程可以看出 B-树 在查询中比较次数其实不比二叉树少，尤其当单一节点中的元素数量很多时。</p><p>可是相比磁盘IO的速度，内存中比较耗时几乎可以忽略，所以只要树的高度足够低，IO次数足够少，就可以提升查找性能。</p><p>相比之下节点内部元素多一些也没有关系，仅仅是多了几次内存交互，只要不超过磁盘页的大小即可，这也是B-树的重要优势之一。</p><h3 id="B-树的插入"><a href="#B-树的插入" class="headerlink" title="B-树的插入"></a>B-树的插入</h3><p>B-树插入新节点过程比较复杂，而且分很多种情况。这边举一个最典型例子，加入我们要插入的值是4</p><p>自顶向下查找4的节点位置，发现4应当插入到节点元素3，5之间。</p><p><img src="https://i.loli.net/2019/07/04/5d1d69a750f9091341.jpg"></p><p>节点3，5已经是两元素节点，无法再增加。父亲节点 2， 6 也是两元素节点，也无法再增加。根节点9是单元素节点，可以升级为两元素节点。于是拆分节点3，5与节点2，6，让根节点9升级为两元素节点4，9。节点6独立为根节点的第二个孩子。</p><p><img src="https://i.loli.net/2019/07/04/5d1d69ab37d0463859.jpg"></p><h3 id="B-树的删除"><a href="#B-树的删除" class="headerlink" title="B-树的删除"></a>B-树的删除</h3><p>下面演示一下B-树删除元素11的过程</p><p>自顶向下查找元素11的节点位置。</p><p><img src="https://i.loli.net/2019/07/04/5d1d69af90f5355361.jpg"></p><p>删除11后，节点12只有一个孩子，不符合B树规范。因此找出12,13,15三个节点的中位数13，取代节点12，而节点12自身下移成为第一个孩子。（这个过程称为左旋）</p><p><img src="https://i.loli.net/2019/07/04/5d1d69b389aa498449.jpg"></p><p><img src="https://i.loli.net/2019/07/04/5d1d69b8a5f1478125.jpg"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>B-树主要应用于文件系统以及部分数据库索引，比如MongoDB。</p><p>大部分关系型数据库，比如myslq，则使用B+树作为索引。</p>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>IDEA 无法创建 scala</title>
    <link href="/2019/03/21/2019-03-21-2017IDEA-%E6%97%A0%E6%B3%95%E5%88%9B%E5%BB%BA-scala/"/>
    <url>/2019/03/21/2019-03-21-2017IDEA-%E6%97%A0%E6%B3%95%E5%88%9B%E5%BB%BA-scala/</url>
    
    <content type="html"><![CDATA[<p>IDEA 无法创建Scala class</p><p>找到根目录下的 spark.iml在里面添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">orderEntry</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;library&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;scala-sdk-2.12.6&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;application&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>问题总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ClouderaManager操作指南</title>
    <link href="/2019/03/19/2019-03-19-ClouderaManager%E6%89%8B%E5%86%8C/"/>
    <url>/2019/03/19/2019-03-19-ClouderaManager%E6%89%8B%E5%86%8C/</url>
    
    <content type="html"><![CDATA[<p>作者 ： 张帅</p><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h2><p>构建企业级别的大数据平台不是一件简单的事情，要从多个方面进行考虑，如硬件环境、软件环境。Hadoop生态圈的产品众多，部署、安装、运维、监控等工作异常琐碎，尤其当某个组件出现问题，由于机器的数量、组件的分布情况，往往会使得运维人员无从下手。</p><p>目前市面上Hadoop的发型版本主要有三种：</p><pre><code class="hljs">1. Apache Hadoop2. CDH(Cloudera Distribution Hadoop)3. HDP(Hortonworks Data Platform)</code></pre><p>首先，Apache Hadoop是最正统的发行版本，版本更新快，新特性增加的多，但相对而言Bug较多，组件之间的兼容性也较差。</p><p>其次，CDH版本会将Hadoop的各个组件进行打包，形成一个发布版本，针对该版本下的各个组件进行一系列测试，补丁修复，优化策略等，保证了CDH大版本下各个Hadoop组件之间的良好协作性。大部分公司均使用该系列。</p><p>最后，HDP版本是Hortonworks公司针对Hadoop的发行版本，暂时没有过多的了解。</p><hr><p>CDH的公司Cloudera推出了Cloudera Manager用于CDH版本集群的管理。Cloudera Manager是一款管理CDH集群的端到端的应用产品，可以通过管理界面可视化的对集群中的一系列组件进行统一的管理：部署、安装、配置、监控等。</p><p>简单来说，Cloudera Manager有四大功能：</p><pre><code class="hljs">1. 管理：对集群进行管理，如添加、删除节点等操作。2. 监控：监控集群的健康情况，对设置的各种指标和系统运行情况进行全面监控。3. 诊断：对集群出现的问题进行诊断，对出现的问题给出建议解决方案。4. 集成：对hadoop的多组件进行整合。</code></pre><p>Cloudera Manager的核心是Cloudera Manager Server，简称CMS。CMS提供了管理端Web界面，统一针对其他节点进行控制，如图所示</p><p><img src="https://i.loli.net/2019/07/02/5d1ab0965fecb43192.jpg"></p><p><strong>组件介绍</strong></p><pre><code class="hljs">1. Agent，Agent安装在集群中的各个节点上，用于启动、结束进程，安装、配置组件，监控节点等2. Management Service，由一系列的角色构成，角色有监控、预警、报告等3. Database，存储了配置和监控信息4. Cloudera Repository，Cloudera Manager用于分发的软件仓库</code></pre><h2 id="2-前置准备工作"><a href="#2-前置准备工作" class="headerlink" title="2 前置准备工作"></a>2 前置准备工作</h2><p><strong>操作系统尽量和要使用Cloudera Manager版本匹配，可以参考官方给出的Cloudera Manager与操作系统的兼容性参照表。</strong></p><p><a href="http://archive.cloudera.com/cm5">Cloudera Manager官方下载</a></p><p><a href="http://archive.cloudera.com/cdh5/cdh/5/">Cloudera CDH 各个组件官方下载</a></p><p><a href="https://www.cloudera.com/documentation/enterprise/release-notes/topics/rn_consolidated_pcm.html#cm_cdh_compatibility">CDH Requirements for Cloudera Manager</a></p><h3 id="2-1-关于RAID-0的说明"><a href="#2-1-关于RAID-0的说明" class="headerlink" title="2.1 关于RAID 0的说明"></a>2.1 关于RAID 0的说明</h3><p>尽管建议采用RAID(Redundant Array of Independent Disk,即磁盘阵列)作为NameNode的存储器以保护元数据，但是若将RAID作为datanode的存储设备则不会给HDFS带来益处。HDFS所提供的节点间数据复制技术已可满足数据备份需求，无需使用RAID的冗余机制。</p><p>此外，尽管RAID条带化技术(RAID 0)被广泛用户提升性能，但是其速度仍然比用在HDFS里的JBOD(Just a Bunch Of Disks)配置慢。JBOD在所有磁盘之间循环调度HDFS块。RAID 0的读写操作受限于磁盘阵列中最慢盘片的速度，而JBOD的磁盘操作均独立，因而平均读写速度高于最慢盘片的读写速度。需要强调的是，各个磁盘的性能在实际使用中总存在相当大的差异，即使对于相同型号的磁盘。针对某一雅虎集群的评测报告<a href="http://markmail.org/message/xmzc45zi25htr7ry">点我</a>表明，在一个测试(Gridmix)中，JBOD比RAID 0 快10%；在另一测试(HDFS写吞吐量)中，JBOD比RAID 0 快30%。</p><p>最后，若JBOD配置的某一磁盘出现故障，HDFS可以忽略该磁盘，继续工作。而RAID的某一盘片故障会导致整个磁盘阵列不可用，进而使相应节点失效。</p><p><a href="https://zh.hortonworks.com/blog/why-not-raid-0-its-about-time-and-snowflakes/">https://zh.hortonworks.com/blog/why-not-raid-0-its-about-time-and-snowflakes/</a></p><p><em>备注：我们实际生成环境使用的是RAID5，12块4T硬盘，可用空间为40T。虽然有可能因为RAID卡的损坏导致节点故障，但是RAID卡极大程度的提高了IO性能，并且在逻辑上将12块硬盘映射为了一块大磁盘。单块磁盘故障不会影响到节点的状态。</em></p><h3 id="2-2-IP地址"><a href="#2-2-IP地址" class="headerlink" title="2.2 IP地址"></a>2.2 IP地址</h3><p>尽可能的将集群部署在同一网段中，避免夸路由进行数据交互。</p><h3 id="2-3-主机名及映射"><a href="#2-3-主机名及映射" class="headerlink" title="2.3 主机名及映射"></a>2.3 主机名及映射</h3><p>主机名映射为全限定名称和短名称的形式，例如：<br>​<br>​192.168.15.193 datacenter01.aisino.com datacenter01</p><h3 id="2-4-启动级别"><a href="#2-4-启动级别" class="headerlink" title="2.4 启动级别"></a>2.4 启动级别</h3><p>启动级别尽可能设置为3，避免其他图形界面消耗机器资源。</p><h3 id="2-5-防火墙和selinux"><a href="#2-5-防火墙和selinux" class="headerlink" title="2.5 防火墙和selinux"></a>2.5 防火墙和selinux</h3><p>关闭防火墙的原因是一些动态任务（YARN、Spark Executor）在运行时动态分配端口号，如果开启防火墙的话会导致任务无法连接，导致任务执行失败。</p><p>selinux记得要关闭。</p><h3 id="2-6-配置系统文件打开数量以及用户最大进程数量"><a href="#2-6-配置系统文件打开数量以及用户最大进程数量" class="headerlink" title="2.6 配置系统文件打开数量以及用户最大进程数量"></a>2.6 配置系统文件打开数量以及用户最大进程数量</h3><pre><code class="hljs">vi /etc/security/limits.conf* soft nofile 65536* hard nofile 65536* soft nproc 16384* hard nproc 16384</code></pre><p><em>注意，星号表示所有用户</em></p><h3 id="2-7-配置NTP服务"><a href="#2-7-配置NTP服务" class="headerlink" title="2.7 配置NTP服务"></a>2.7 配置NTP服务</h3><p>Cloudera Manager要求各个节点都启动NTP服务，保证集群内各节点之间的时间同步，由于是分布式架构，节点与节点之间时刻保持通信，如果节点之间时间差别过大，会导致通信故障，从而节点造成宕机。</p><h3 id="2-8-配置SSH"><a href="#2-8-配置SSH" class="headerlink" title="2.8 配置SSH"></a>2.8 配置SSH</h3><p>所有节点都需要配置SSH免密登录（包括自己）。</p><h2 id="3-安装Cloudera-Manager"><a href="#3-安装Cloudera-Manager" class="headerlink" title="3 安装Cloudera Manager"></a>3 安装Cloudera Manager</h2><p><strong>本次安装环境为CDH-5.7.0版本</strong></p><h3 id="3-1-下载安装包"><a href="#3-1-下载安装包" class="headerlink" title="3.1 下载安装包"></a>3.1 下载安装包</h3><pre><code class="hljs">1. 下载Cloudera Manager安装包http://archive.cloudera.com/cm5/cm/5/cloudera-manager-centos7-cm5.7.0_x86_64.tar.gz2. 下载Parcel离线包http://archive.cloudera.com/cdh5/parcels/5.7.0/CDH-5.7.0-1.cdh5.7.0.p0.45-el7.parcelhttp://archive.cloudera.com/cdh5/parcels/5.7.0/CDH-5.7.0-1.cdh5.7.0.p0.45-el7.parcel.sha1http://archive.cloudera.com/cdh5/parcels/5.7.0/manifest.json</code></pre><h3 id="3-2-安装yum依赖"><a href="#3-2-安装yum依赖" class="headerlink" title="3.2 安装yum依赖"></a>3.2 安装yum依赖</h3><pre><code class="hljs">yum install -y chkconfig python bind-utils psmisc libxslt zlib sqliteyum install -y cyrus-sasl-plain cyrus-sasl-gssapi fuse portmap fuse-libsyum install -y redhat-lsb bind-utils libxsltyum install -y protobuf snappy</code></pre><h3 id="3-3-安装MySQL数据库"><a href="#3-3-安装MySQL数据库" class="headerlink" title="3.3 安装MySQL数据库"></a>3.3 安装MySQL数据库</h3><p>Cloudera Manager需要将配置信息以及监控信息存储至数据库中，这里采用MySQL数据。</p><h3 id="3-4-MySQL驱动包路径"><a href="#3-4-MySQL驱动包路径" class="headerlink" title="3.4 MySQL驱动包路径"></a>3.4 MySQL驱动包路径</h3><p>必须将MySQL驱动包复制至&#x2F;usr&#x2F;share&#x2F;java目录下，并且驱动包的名称必须为mysql-connector-java.jar。</p><p><strong>注意，所有节点都需要MySQL驱动包</strong></p><h3 id="3-5-在MySQL中创建数据库"><a href="#3-5-在MySQL中创建数据库" class="headerlink" title="3.5 在MySQL中创建数据库"></a>3.5 在MySQL中创建数据库</h3><pre><code class="hljs">create database hive DEFAULT CHARSET utf8 COLLATE utf8_general_ci;create database hue DEFAULT CHARSET utf8 COLLATE utf8_general_ci;create database monitor DEFAULT CHARSET utf8 COLLATE utf8_general_ci;create database oozie DEFAULT CHARSET utf8 COLLATE utf8_general_ci;create database cloudera DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</code></pre><h3 id="3-6-解压Cloudera-Manager安装包"><a href="#3-6-解压Cloudera-Manager安装包" class="headerlink" title="3.6 解压Cloudera Manager安装包"></a>3.6 解压Cloudera Manager安装包</h3><p>Cloudera Manager Server服务安装在Manager1服务器上，因此需要将Cloudera Manager的压缩包以及所有Parcel文件上传至服务器，并将Cloudera Manager压缩包解压至&#x2F;opt&#x2F;cloudera-manager目录下</p><h3 id="3-7-创建用户"><a href="#3-7-创建用户" class="headerlink" title="3.7 创建用户"></a>3.7 创建用户</h3><p>在所有节点上创建cloudera-scm用户：<br>​<br>​useradd –system –home&#x3D;&#x2F;opt&#x2F;cloudera-manager&#x2F;cm-5.7.0&#x2F;run&#x2F;cloudera-scm-server –no-create-home –shell&#x3D;&#x2F;bin&#x2F;false –comment “Cloudera SCM User” cloudera-scm</p><h3 id="3-8-创建Cloudera-Manager-Server元数据目录"><a href="#3-8-创建Cloudera-Manager-Server元数据目录" class="headerlink" title="3.8 创建Cloudera Manager Server元数据目录"></a>3.8 创建Cloudera Manager Server元数据目录</h3><p>在主节点上需要创建Cloudera Manager Server的元数据目录：</p><pre><code class="hljs">mkdir /var/cloudera-scm-serverchown cloudera-scm:cloudera-scm /var/cloudera-scm-serverchown cloudera-scm:cloudera-scm /opt/cloudera-manager</code></pre><h3 id="3-9-复制cloudera-manager目录到其他节点"><a href="#3-9-复制cloudera-manager目录到其他节点" class="headerlink" title="3.9 复制cloudera-manager目录到其他节点"></a>3.9 复制cloudera-manager目录到其他节点</h3><p>首先将&#x2F;opt&#x2F;cloudera-manager&#x2F;cm-5.7.0&#x2F;etc&#x2F;cloudera-scm-agent&#x2F;config.ini文件中server_host配置项的地址更改为主节点的地址</p><p>将主节点上&#x2F;opt&#x2F;cloudera-manager目录复制至其他集群节点下，命令如下：</p><pre><code class="hljs">scp -r /opt/cloudera-manager 主机:/opt/</code></pre><h3 id="3-10-创建Parcel目录"><a href="#3-10-创建Parcel目录" class="headerlink" title="3.10 创建Parcel目录"></a>3.10 创建Parcel目录</h3><p>在主节点上创建Parcel包的存储目录，命令如下：</p><pre><code class="hljs">mkdir -p /opt/cloudera/parcel-repochown cloudera-scm:cloudera-scm /opt/cloudera/parcel-repo</code></pre><p>将以下文件复制到该目录下</p><ul><li>CDH-5.7.0-1.cdh5.7.0.p0.45-el7.parcel</li><li>CDH-5.7.0-1.cdh5.7.0.p0.45-el7.parcel.sha1</li><li>manifest.json</li></ul><p>将<strong>CDH-5.7.0-1.cdh5.7.0.p0.45-el7.parcel.sha1</strong>文件的名称修改为<strong>CDH-5.7.0-1.cdh5.7.0.p0.45-el7.parcel.sha</strong></p><h3 id="3-11-创建Parcel包分发目录"><a href="#3-11-创建Parcel包分发目录" class="headerlink" title="3.11 创建Parcel包分发目录"></a>3.11 创建Parcel包分发目录</h3><p>Cloudera Manager在安装的过程中，需要将安装包复制到集群的各个节点上，因此需要在集群各个节点上事先创建Parcel包的分发目录。</p><p>在所有节点上：</p><pre><code class="hljs">mkdir -p /opt/cloudera/parcelschown cloudera-scm:cloudera-scm /opt/cloudera/parcels</code></pre><h3 id="3-12-初始化CSM数据库脚本"><a href="#3-12-初始化CSM数据库脚本" class="headerlink" title="3.12 初始化CSM数据库脚本"></a>3.12 初始化CSM数据库脚本</h3><p>在主节点上，执行初始化脚本：</p><pre><code class="hljs">/opt/cloudera-manager/cm-5.7.0/share/cmf/schema/scm_prepare_database.sh mysql -hmanager1 -uroot -p123456 --scm-host manager1 scmdbn scmdbu scmdbp</code></pre><p>说明：这个脚本就是用来创建和配置CMS需要的数据库的脚本。</p><p>各参数是指：</p><p>mysql：数据库用的是mysql，如果安装过程中用的oracle，那么该参数就应该改为oracle。</p><p>-hmanager1：数据库建立在manager1主机上面。也就是主节点上面。</p><p>-uroot：root身份运行mysql。</p><p>-123456：mysql的root密码是123456。</p><p>–scm-host manager1：CMS的主机，一般是和mysql安装的主机是在同一个主机上。</p><p>最后三个参数是：数据库名，数据库用户名，数据库密码。</p><p><strong>我的实际环境中采用如下命令</strong></p><pre><code class="hljs">/opt/cloudera-manager/cm-5.7.0/share/cmf/schema/scm_prepare_database.sh mysql -hlocalhost -uroot -p -P13066 --scm-host localhost cloudera root BIM@123%$#qwe </code></pre><h3 id="3-13-配置与启动Cloudera-Manager-Server"><a href="#3-13-配置与启动Cloudera-Manager-Server" class="headerlink" title="3.13 配置与启动Cloudera Manager Server"></a>3.13 配置与启动Cloudera Manager Server</h3><p>首先将Cloudera Manager Server的启动脚本复制到&#x2F;etc&#x2F;init.d&#x2F;目录下：<br>​<br>​cp <br>​&#x2F;opt&#x2F;cloudera-manager&#x2F;cm-5.7.0&#x2F;etc&#x2F;init.d&#x2F;cloudera-scm-server <br>​&#x2F;etc&#x2F;init.d&#x2F;cloudera-scm-server</p><p>配置&#x2F;etc&#x2F;init.d&#x2F;cloudera-scm-server：</p><pre><code class="hljs">vi /etc/init.d/cloudera-scm-server找到CMF_DEFAULTS配置项，进行修改。CMF_DEFAULTS=$&#123;CMF_DEFAULTS:-/opt/cloudera-manager/cm-5.7.0/etc/default&#125;</code></pre><p>启动Cloudera Manager Server：</p><pre><code class="hljs">service cloudera-scm-server startchkconfig cloudera-scm-server on</code></pre><h3 id="3-14-配置与启动Cloudera-Manager-Agent"><a href="#3-14-配置与启动Cloudera-Manager-Agent" class="headerlink" title="3.14 配置与启动Cloudera Manager Agent"></a>3.14 配置与启动Cloudera Manager Agent</h3><p>在所有节点上创建agent的运行时目录：</p><pre><code class="hljs">mkdir /opt/cloudera-manager/cm-5.7.0/run/cloudera-scm-agent</code></pre><p>将Cloudera Manager Agent的启动脚本复制到&#x2F;etc&#x2F;init.d&#x2F;目录下：</p><pre><code class="hljs">cp \/opt/cloudera-manager/cm-5.7.0/etc/init.d/cloudera-scm-agent \/etc/init.d/cloudera-scm-agent</code></pre><p>配置Cloudera Manager Agent：</p><pre><code class="hljs">vi /etc/init.d/cloudera-scm-agent 找到CMF_DEFAULTS配置项，进行修改。CMF_DEFAULTS=$&#123;CMF_DEFAULTS:-/opt/cloudera-manager/cm-5.7.0/etc/default&#125;</code></pre><p>启动Cloudera Manager Agent：</p><pre><code class="hljs">service cloudera-scm-agent startchkconfig cloudera-scm-agent on</code></pre><h3 id="3-15-日志文件路径"><a href="#3-15-日志文件路径" class="headerlink" title="3.15 日志文件路径"></a>3.15 日志文件路径</h3><p>启动Server或Agent由于各种原因可能会导致启动失败，因此需要查看日志文件定位错误信息，进行修复。</p><p>Server的日志文件位于：</p><pre><code class="hljs">/opt/cloudera-manager/cm-5.7.0/log/cloudera-scm-server</code></pre><p>Agent的日志文件位于：</p><pre><code class="hljs">/opt/cloudera-manager/cm-5.7.0/log/cloudera-scm-agent</code></pre><h3 id="3-16-进入Cloudera-Manager-Server管理页面"><a href="#3-16-进入Cloudera-Manager-Server管理页面" class="headerlink" title="3.16 进入Cloudera Manager Server管理页面"></a>3.16 进入Cloudera Manager Server管理页面</h3><p>当Server与Agent全部启动完成后，可以访问CMS的WEB管理页面<a href="http://localhost:7180/" title="例子">example link</a>，如图所示。</p><p><img src="https://i.loli.net/2019/07/02/5d1ab09925de940367.jpg"></p><p><em>账户密码均为admin</em></p><h2 id="4-安装CDH"><a href="#4-安装CDH" class="headerlink" title="4 安装CDH"></a>4 安装CDH</h2><p><em>在Cloudera Manager Server的WEB管理页面中，可以批量进行组件的安装、配置等，下面开始安装CDH各种组件。</em></p><h3 id="4-1-接受协议"><a href="#4-1-接受协议" class="headerlink" title="4.1 接受协议"></a>4.1 接受协议</h3><p>首次登陆时，会自动弹出“接受协议”页面，接受即可。</p><p><img src="https://i.loli.net/2019/07/02/5d1ab09f809b038392.jpg"></p><h3 id="4-2-选择版本"><a href="#4-2-选择版本" class="headerlink" title="4.2 选择版本"></a>4.2 选择版本</h3><p>选择版本时，选择免费版本即可。</p><p><img src="https://i.loli.net/2019/07/02/5d1ab0a42f11c22720.jpg"></p><h3 id="4-3-查看当前已管理主机"><a href="#4-3-查看当前已管理主机" class="headerlink" title="4.3 查看当前已管理主机"></a>4.3 查看当前已管理主机</h3><p>如果Agent正产启动，在“当前管理的主机”页面会显示所有管理主机，否则请检查Agent是否正常启动。</p><p><img src="https://i.loli.net/2019/07/02/5d1ab0a96fb1b57373.jpg"></p><p>选择所有主机，点击“继续”按钮。</p><h3 id="4-4-等待系统分发Parcel包"><a href="#4-4-等待系统分发Parcel包" class="headerlink" title="4.4 等待系统分发Parcel包"></a>4.4 等待系统分发Parcel包</h3><p>Cloudera Manager会将Parcel包分发至各个节点，等待几分钟即可。</p><p><img src="https://i.loli.net/2019/07/02/5d1ab0ada696c71741.jpg"></p><p><strong>注意，在分发Parcel包的过程中，可以会出现分发失败的问题，查看相应的Agent日志，定位错误，进行修复。</strong></p><p><strong>比较常见的一个错误是Python脚本出现问题，需要进行一些修改，参见链接：</strong><br><a href="http://www.jianshu.com/p/0d70a67b66b2">http://www.jianshu.com/p/0d70a67b66b2</a></p><h4 id="4-5-等待检查主机正确性"><a href="#4-5-等待检查主机正确性" class="headerlink" title="4.5 等待检查主机正确性"></a>4.5 等待检查主机正确性</h4><p>Parcel包分发完成后，Cloudera Manager会检查主机的的正确性，包括一些优化的配置、要关闭的属性等，该步骤非常重要，一定要根据检查结果对主机进行配置修复，否则在以后的过程中会出现各种不可预料问题。</p><p><img src="https://i.loli.net/2019/07/02/5d1ab0b07998314628.jpg"></p><h3 id="4-6-选择要安装的组件"><a href="#4-6-选择要安装的组件" class="headerlink" title="4.6 选择要安装的组件"></a>4.6 选择要安装的组件</h3><p>主机正确性检查完成后，就可以进入安装环节了，Cloudera Manager会要求你选择要安装的组件。</p><p><img src="https://i.loli.net/2019/07/02/5d1ab0b607b8288865.jpg"></p><p><strong>选择“自定义服务”，选择集群中要安装的组件。</strong></p><p><img src="https://i.loli.net/2019/07/02/5d1ab0be6732e32844.jpg"></p><h3 id="4-7-设置数据库"><a href="#4-7-设置数据库" class="headerlink" title="4.7 设置数据库"></a>4.7 设置数据库</h3><p>选择完成要安装的组件后，需要为Cloudera Manager配置运行时数据库环境，如图所示。</p><p><img src="https://i.loli.net/2019/07/02/5d1ab0c3709f785092.jpg"></p><p>配置的数据库在前面的步骤中已经提前创建完成。</p><h3 id="4-8-设置组件的基本运行环境"><a href="#4-8-设置组件的基本运行环境" class="headerlink" title="4.8 设置组件的基本运行环境"></a>4.8 设置组件的基本运行环境</h3><p>该步骤主要用于设置组件的基本运行环境，例如NameNode的节点、DataNode的节点、数据存放的目录等，该步骤根据实际的物理环境进行设置即可。</p><h3 id="4-9-等待启动集群"><a href="#4-9-等待启动集群" class="headerlink" title="4.9 等待启动集群"></a>4.9 等待启动集群</h3><p>在集群的启动过程中，可能会因为权限或其他问题导致某些服务启动失败，只需要根据错误信息进行修复，即可启动完成。</p><p><img src="https://i.loli.net/2019/07/02/5d1ab0c78f62f95988.jpg"></p><h3 id="4-10-启动成功"><a href="#4-10-启动成功" class="headerlink" title="4.10 启动成功"></a>4.10 启动成功</h3><p>集群启动成功后，可在首页查看集群的总览。</p><p><img src="https://i.loli.net/2019/07/02/5d1ab0cd36cd412231.jpg"></p><h3 id="4-11-其他"><a href="#4-11-其他" class="headerlink" title="4.11 其他"></a>4.11 其他</h3><p>后续可以启动HDFS的HA、YARN的HA以及优化各个组件的配置等。</p><p>感谢张帅分享。</p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CDH</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用户行为指分析</title>
    <link href="/2019/03/15/2019-03-15-%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E6%8C%87%E5%88%86%E6%9E%90/"/>
    <url>/2019/03/15/2019-03-15-%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E6%8C%87%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>构件企业级别的大数据平台并不是一件容易的事情，起步阶段要想的全面一些，从多个方面进行考虑。例如关于硬件环境？Hadoop生态圈的产品众多，到底要选择那些组件？另外部署、安装、运维、监控等工作异常繁琐，怎么解决后期管理问题？针对这些问题，下面从软硬件、后期运维和业务的角度来阐述详细规划。</p><h3 id="2-软件支持"><a href="#2-软件支持" class="headerlink" title="2. 软件支持"></a>2. 软件支持</h3><p>1） 首先我们说说关于<em>Hadoop</em>的发行版，目前<em>Hadoop</em>的发行版主要有三种，我们怎么选?</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> Apahce 基金会 Hadoop<br><span class="hljs-bullet">2.</span> CDH (Cloudera Distribution Hadoop)<br><span class="hljs-bullet">3.</span> HDP （Hortonworks Data Platform）<br></code></pre></td></tr></table></figure><ul><li><p>Hadoop属于Apache基金会的顶级项目，<em>Apahce</em>版本迭代速度很快，新特性很多，相对的bug就会很多，组件与组件之间的兼容性也会很差。在实际中大部分它的使用者多为进行学术研究，喜欢爱折腾的那号人，所以这个版本不首选。</p></li><li><p>Cloudera 针对<em>Apahce Hadoop</em>在每个大版本变化后进行一次打包，很好的解决了系统不稳定的问题。与此同时，Cloudera公司推出的<em>Cloudera Manager</em>版本集群管理工具，它可以完成一键部署集群，一键拓展，监控，自动诊断等操作。最重要的是CDH的文档很丰富，解决问题的速度也会很高。目前知晓的使用此发行版的公司有：360、东方航空等，这个版本是目前<strong>首选</strong>。</p></li><li><p>HDP版本是<em>Hortonworks</em>公司针对<em>Hadoop</em>的发行版本，目前也是比较小众的一个，现阶段还处于探索发展阶段，所以不首选。</p></li></ul><p>有了自动化部署Cloudera Manager ,后期运维就能轻松的多，而且里面的自动诊断功能也是相当nice！</p><p>2） 关于具体应用组件Flume、Hadoop、Kafka、Hive、Spark、Redis、Mysql、Sqlserver、Sqoop、Hue、Oozie</p><h3 id="3-硬件支持"><a href="#3-硬件支持" class="headerlink" title="3. 硬件支持"></a>3. 硬件支持</h3><p>配置Hadoop集群至少要求有三台Server，一台为主服务器，三台为从服务器。主服务器上会跑大量后台进程，所以主服务器的配置要远远优于从服务器。</p><p>**主服务器 ** 最少1台</p><table><thead><tr><th align="center">硬件类型</th><th align="center">要求</th></tr></thead><tbody><tr><td align="center">OS</td><td align="center">linux</td></tr><tr><td align="center">硬盘</td><td align="center">1~4TB</td></tr><tr><td align="center">CPU</td><td align="center">2个频率为2~2.5GHz的四核或六核</td></tr><tr><td align="center">内存</td><td align="center">16~32GB</td></tr></tbody></table><p>**从服务器 **最少两台</p><table><thead><tr><th align="center">硬件类型</th><th align="center">要求</th></tr></thead><tbody><tr><td align="center">OS</td><td align="center">linux</td></tr><tr><td align="center">硬盘</td><td align="center">1~2TB</td></tr><tr><td align="center">CPU</td><td align="center">2个频率为2~2.5GHz的四核或六核</td></tr><tr><td align="center">内存</td><td align="center">4~16GB</td></tr></tbody></table><h3 id="4-如何进行网站流量分析"><a href="#4-如何进行网站流量分析" class="headerlink" title="4. 如何进行网站流量分析"></a>4. 如何进行网站流量分析</h3><p>下面对平台初期统计指标做一个梳理，另外会介绍一下统计指标的方向。</p><h3 id="4-1-指标举例"><a href="#4-1-指标举例" class="headerlink" title="4.1 指标举例"></a>4.1 指标举例</h3><p>需求：今日，昨天，前天 所有来访者，平均请求的页面数</p><p>需求：按照来源及时间维度统计PVS，并按照PV大小倒序排序</p><p>需求：按照时间维度，比如，统计一天内各小时产生最多pvs的来源topN</p><p>需求：统计每日最热门的功能top10</p><p>需求：按照时间维度比如小时来统计独立访客及其产生的pv</p><p>需求：将每天的新访客统计出来</p><p>需求：查询今日所有回头访客及其访问次数</p><p>需求：统计出每天所有用户访问网站的平均次数</p><p>需求：回头&#x2F;单次访客的访问比重，比如当日回头客占比</p><p>需求：人均访问频度</p><p>需求：漏斗模型统计，以模型上传业务来评估模型转化设计的合理性。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">step1:</span> 开启本地化组建<br><span class="hljs-symbol">step2:</span> 选择模型、选择目录<br><span class="hljs-symbol">step3:</span> 设置各种参数，勾选模型对比（或者是其他操作）<br><span class="hljs-symbol">step4:</span> 进行模型转换<br><span class="hljs-symbol">step5:</span> 进行模型上传<br><span class="hljs-symbol">step6:</span> 模型浏览<br><br>六步为一个业务指标，我们可以拓展下面业务指标<br>**<span class="hljs-number">1</span>) 查询每一个步骤的总访问人数**<br>**<span class="hljs-number">2</span>) 查询每一步骤相对于路径起点人数的比例**<br>**<span class="hljs-number">3</span>) 查询每一步骤相对于上一步骤的漏出率**<br></code></pre></td></tr></table></figure><p>​</p><p>除了上面一些指标以外，可以从下面方向入手，发掘一些有价值的数据报表。部分参考<strong>《网站分析实战——如何以数据驱动决策，提升网站价值》</strong> <em>王彦平，吴盛锋编著</em></p><h3 id="4-2-关于统计统计方向"><a href="#4-2-关于统计统计方向" class="headerlink" title="4.2 关于统计统计方向"></a>4.2 关于统计统计方向</h3><p><strong>1） 基础分析（PV,IP,UV）</strong></p><p><strong>趋势分析</strong>：根据选定的时段，提供网站流量数据，通过流量趋势变化形态，为您分析网站访客的访问规律、网站发展状况提供参考。</p><p><strong>对比分析</strong>：根据选定的两个对比时段，提供网站流量在时间上的纵向对比报表，帮您发现网站发展状况、发展规律、流量变化率等。</p><p><strong>当前在线</strong>：提供当前时刻站点上的访客量，以及最近15分钟流量、来源、受访、访客变化情况等，方便用户及时了解当前网站流量状况。</p><p><strong>访问明细</strong>：提供最近7日的访客访问记录，可按每个PV或每次访问行为（访客的每次会话）显示，并可按照来源、搜索词等条件进行筛选。 通过访问明细，用户可以详细了解网站流量的累计过程，从而为用户快速找出流量变动原因提供最原始、最准确的依据。</p><hr><p><strong>2)来源分析</strong></p><p><strong>来源分类</strong>：提供不同来源形式（直接输入、搜索引擎、其他外部链接、站内来源）、不同来源项引入流量的比例情况。通过精确的量化数据，帮助用户分析什么类型的来路产生的流量多、效果好，进而合理优化推广方案。</p><p><strong>搜索引擎</strong>：提供各搜索引擎以及搜索引擎子产品引入流量的比例情况。从搜索引擎引入流量的的角度，帮助用户了解网站的SEO、SEM效果，从而为制定下一步SEO、SEM计划提供依据。</p><p><strong>搜索词</strong>：提供访客通过搜索引擎进入网站所使用的搜索词，以及各搜索词引入流量的特征和分布。帮助用户了解各搜索词引入流量的质量，进而了解访客的兴趣关注点、网站与访客兴趣点的匹配度，为优化SEO方案及SEM提词方案提供详细依据。</p><p><strong>最近7日的访客搜索记录</strong>，可按每个PV或每次访问行为（访客的每次会话）显示，并可按照访客类型、地区等条件进行筛选。为您搜索引擎优化提供最详细的原始数据。</p><p><strong>来路域名</strong>：提供具体来路域名引入流量的分布情况，并可按“社会化媒体”、“搜索引擎”、“邮箱”等网站类型对来源域名进行分类。 帮助用户了解哪类推广渠道产生的流量多、效果好，进而合理优化网站推广方案。</p><p><strong>来路页面</strong>：提供具体来路页面引入流量的分布情况。 尤其对于通过流量置换、包广告位等方式从其他网站引入流量的用户，该功能可以方便、清晰地展现广告引入的流量及效果，为优化推广方案提供依据。</p><p><strong>来源升降榜</strong>：提供开通统计后任意两日的TOP10000搜索词、来路域名引入流量的对比情况，并按照变化的剧烈程度提供排行榜。 用户可通过此功能快速找到哪些来路对网站流量的影响比较大，从而及时排查相应来路问题。</p><hr><p><strong>3) 受访分析</strong></p><p><strong>受访域名</strong>：提供访客对网站中各个域名的访问情况。 一般情况下，网站不同域名提供的产品、内容各有差异，通过此功能用户可以了解不同内容的受欢迎程度以及网站运营成效。</p><p><strong>受访页面</strong>：提供访客对网站中各个页面的访问情况。 站内入口页面为访客进入网站时浏览的第一个页面，如果入口页面的跳出率较高则需要关注并优化；站内出口页面为访客访问网站的最后一个页面，对于离开率较高的页面需要关注并优化。</p><p><strong>受访升降榜</strong>：提供开通统计后任意两日的TOP10000受访页面的浏览情况对比，并按照变化的剧烈程度提供排行榜。 可通过此功能验证经过改版的页面是否有流量提升或哪些页面有巨大流量波动，从而及时排查相应问题。</p><p><strong>热点图</strong>：记录访客在页面上的鼠标点击行为，通过颜色区分不同区域的点击热度；支持将一组页面设置为”关注范围”，并可按来路细分点击热度。 通过访客在页面上的点击量统计，可以了解页面设计是否合理、广告位的安排能否获取更多佣金等。</p><p><strong>用户视点</strong>：提供受访页面对页面上链接的其他站内页面的输出流量，并通过输出流量的高低绘制热度图，与热点图不同的是，所有记录都是实际打开了下一页面产生了浏览次数（PV）的数据，而不仅仅是拥有鼠标点击行为。</p><p><strong>访问轨迹</strong>：提供观察焦点页面的上下游页面，了解访客从哪些途径进入页面，又流向了哪里。 通过上游页面列表比较出不同流量引入渠道的效果；通过下游页面列表了解用户的浏览习惯，哪些页面元素、内容更吸引访客点击。</p><hr><p><strong>4) 访客分析</strong></p><p><strong>地区运营商</strong>：提供各地区访客、各网络运营商访客的访问情况分布。 地方网站、下载站等与地域性、网络链路等结合较为紧密的网站，可以参考此功能数据，合理优化推广运营方案。</p><p><strong>终端详情</strong>：提供网站访客所使用的浏览终端的配置情况。 参考此数据进行网页设计、开发，可更好地提高网站兼容性，以达到良好的用户交互体验。</p><p><strong>新老访客</strong>：当日访客中，历史上第一次访问该网站的访客记为当日新访客；历史上已经访问过该网站的访客记为老访客。 新访客与老访客进入网站的途径和浏览行为往往存在差异。该功能可以辅助分析不同访客的行为习惯，针对不同访客优化网站，例如为制作新手导航提供数据支持等。</p><p><strong>忠诚度</strong>：从访客一天内回访网站的次数（日访问频度）与访客上次访问网站的时间两个角度，分析访客对网站的访问粘性、忠诚度、吸引程度。 由于提升网站内容的更新频率、增强用户体验与用户价值可以有更高的忠诚度，因此该功能在网站内容更新及用户体验方面提供了重要参考。</p><p><strong>活跃度</strong>：从访客单次访问浏览网站的时间与网页数两个角度，分析访客在网站上的活跃程度。 由于提升网站内容的质量与数量可以获得更高的活跃度，因此该功能是网站内容分析的关键指标之一。</p><hr><p><strong>5) 转化路径分析</strong></p><p><em>转化定义:访客在您的网站完成了某项您期望的活动，记为一次转化，如注册或下载。</em></p><p>目标示例</p><ul><li><p>获得用户目标：在线注册、创建账号等。</p></li><li><p>咨询目标：咨询、留言、电话等。</p></li><li><p>互动目标：模型转化、模型分享等。</p></li><li><p>收入目标：购买简约版、付款等。</p></li></ul><p>转化数据的应用</p><ul><li><p>在报告的自定义指标中勾选转化指标，实时掌握网站的推广及运营情况。</p></li><li><p>结合“全部来源”、“转化路径”、“页面上下游”等报告分析访问漏斗，提高转化率。</p></li><li><p>对“转化目标”设置价值，预估转化收益，衡量ROI。</p></li></ul><p><strong>路径分析</strong>：根据设置的特定路线，监测某一流程的完成转化情况，算出每步的转换率和流失率数据，如注册流程，购买流程等。</p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>二叉数（三）</title>
    <link href="/2019/03/11/2019-03-11-%E4%BA%8C%E5%8F%89%E6%95%B0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2019/03/11/2019-03-11-%E4%BA%8C%E5%8F%89%E6%95%B0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>下面使用Java实现<code>中序非递归遍历二叉树</code>，开始之前我们先梳理一下它的执行逻辑。</p><ol><li>申请一个桟记为stack.初始化一个指针cur指向头节点。</li><li>以头节点为起始，将树的整个左边界压入到桟中。及不断的另cur&#x3D;cur.left,重复步骤2</li><li>如果cur.left为空，弹出stack桟顶元素，并打印桟顶元素的值，桟顶元素记为node,另cur&#x3D;node.right重复步骤2</li><li>直到cur指向的node为空并且stack为空时，结束该过程。</li></ol><p><img src="https://tva1.sinaimg.cn/large/0066vfZIly1g0wzxo8jnjg30cv080hdt.gif" alt="中序遍历二叉树"></p><p>下面是Java代码实现：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">public</span> static <span class="hljs-literal">void</span> inOrder1(BiTree tree)&#123;<br>    <span class="hljs-built_in">Stack</span>&lt;BiTree&gt; <span class="hljs-built_in">stack</span> = <span class="hljs-literal">new</span> <span class="hljs-built_in">Stack</span>&lt;&gt;();<br>    <span class="hljs-keyword">while</span>(tree != <span class="hljs-built_in">null</span> || !<span class="hljs-built_in">stack</span>.empty())&#123;<br>        <span class="hljs-keyword">if</span>(tree!=<span class="hljs-built_in">null</span>)&#123;<br>            <span class="hljs-built_in">stack</span>.push(tree);<br>            tree = tree.lChild;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            BiTree node = <span class="hljs-built_in">stack</span>.pop();<br>            System.out.print(node.<span class="hljs-built_in">data</span>);<br>            tree = node.rChild;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>二叉树（二）</title>
    <link href="/2019/03/10/2019-03-10-%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2019/03/10/2019-03-10-%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>下面使用Java实现先序非递归遍历二叉树，开始之前我们先梳理一下它的执行逻辑。</p><ol><li>首先申请一个新的桟，记为stack。</li><li>每次将头节点head压入stack中</li><li>每次从stack中弹出桟顶节点，记为cur，然后打印cur节点的值。如果cur右孩子不为空的话，将cur的右孩子先压入stack中。最后如果cur的左孩子不为空的话，将cur的左孩子压入stack中。</li><li>不断重复步骤3,直到stack为空，全部过程结束。</li></ol><p><img src="https://tva1.sinaimg.cn/large/0066vfZIly1g0wxk309ytg30bn06y4qp.gif" alt="先序遍历二叉树"></p><p>下面是Java代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 先序遍历</span><br><span class="hljs-comment">* 非递归</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preOrder1</span><span class="hljs-params">(BiTree tree)</span>&#123;<br>    Stack&lt;BiTree&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>    <span class="hljs-keyword">if</span>(tree != <span class="hljs-literal">null</span>)&#123;<br>        stack.push(tree);<br>        <span class="hljs-keyword">while</span>(!stack.empty())&#123;<br>            <span class="hljs-type">BiTree</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> stack.pop();<br>            <span class="hljs-keyword">while</span>(node != <span class="hljs-literal">null</span>)&#123;<br>                System.out.print(node.data);<br>                <span class="hljs-keyword">if</span>(node.rChild != <span class="hljs-literal">null</span>)<br>                    stack.push(node.rChild);<br>                node = node.lChild;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>二叉树（一）</title>
    <link href="/2019/03/09/2019-03-09-%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2019/03/09/2019-03-09-%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>树是在实际编程中经常遇到的数据结构，它的逻辑很简单：除了根节点以外，每个节点只有一个父节点，根节点没有父节点;除了叶节点之外所有节点都有一个或多个子节点，叶节点没有子节点。</p><p>树的前、中、后序遍历是比较基础，同时也是必须要掌握的几个点，它们分别有递归、和非递归的解法。递归相对简单一点，非递归相对复杂一些。</p><p>下面用Java语言分别实现树的前、中、后序递归遍历，另外这边拓展（递归创建二叉树、求树的深度）两个解法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> BiTree;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zyh</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 19-3-9 下午12:06</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BiTree</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Object data;<br>    <span class="hljs-keyword">private</span> BiTree lChild;<br>    <span class="hljs-keyword">private</span> BiTree rChild;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BiTree</span><span class="hljs-params">(Object data,BiTree lChild,BiTree rChild)</span>&#123;<br>        <span class="hljs-built_in">this</span>.data = data;<br>        <span class="hljs-built_in">this</span>.lChild = lChild;<br>        <span class="hljs-built_in">this</span>.rChild = rChild;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 中序遍历二叉数 左根右</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> tree</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inOrderTraverse</span><span class="hljs-params">(BiTree tree)</span>&#123;<br>        <span class="hljs-keyword">if</span>(tree != <span class="hljs-literal">null</span>) &#123;<br>            inOrderTraverse(tree.lChild);<br>            System.out.print(tree.data);<br>            inOrderTraverse(tree.rChild);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 后续遍历二叉数 左右根</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> tree</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterOrderTraverse</span><span class="hljs-params">(BiTree tree)</span>&#123;<br>        <span class="hljs-keyword">if</span>(tree != <span class="hljs-literal">null</span>)&#123;<br>            afterOrderTraverse(tree.lChild);<br>            afterOrderTraverse(tree.rChild);<br>            System.out.print(tree.data);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 先须遍历二叉数 根左右</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> tree</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preOrderTraverse</span><span class="hljs-params">(BiTree tree)</span>&#123;<br>        <span class="hljs-keyword">if</span>(tree != <span class="hljs-literal">null</span>)&#123;<br>            System.out.print(tree.data);<br>            preOrderTraverse(tree.lChild);<br>            preOrderTraverse(tree.rChild);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 递归创建二叉数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> scanner</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> BiTree <span class="hljs-title function_">createBiTree</span><span class="hljs-params">(Scanner scanner)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-keyword">if</span>(data == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BiTree</span>(data,createBiTree(scanner),createBiTree(scanner));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 求二叉数的深度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> tree</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title function_">depth</span><span class="hljs-params">(BiTree tree)</span>&#123;<br>        <span class="hljs-keyword">if</span>(tree == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> depth(tree.lChild);<br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> depth(tree.rChild);<br>            <span class="hljs-keyword">if</span>(m &gt; n)&#123;<br>                <span class="hljs-keyword">return</span> m+<span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">return</span> n+<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span>  <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">BiTree</span> <span class="hljs-variable">tree</span> <span class="hljs-operator">=</span> createBiTree(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in));<br>        System.out.println();<br>        System.out.println(<span class="hljs-string">&quot;--------------递归：中序遍历二叉数------------------&quot;</span>);<br>        inOrderTraverse(tree);<br>        System.out.println();<br>        System.out.println(<span class="hljs-string">&quot;--------------递归：先序遍历二叉数------------------&quot;</span>);<br>        preOrderTraverse(tree);<br>        System.out.println();<br>        System.out.println(<span class="hljs-string">&quot;--------------递归：后序遍历二叉数------------------&quot;</span>);<br>        afterOrderTraverse(tree);<br><br>        System.out.println();<br>        System.out.println(<span class="hljs-string">&quot;--------------递归：求二叉树的深度------------------&quot;</span>);<br>        System.out.println(depth(tree));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>参考:参考: <a href="http://book.knowsky.com/book_1030305.htm">Data Structure (2nd Edition) 第五章</a><a href="http://book.knowsky.com/book_1030305.htm">http://book.knowsky.com/book_1030305.htm</a></p>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>搭建日志收集服务器</title>
    <link href="/2019/01/24/2019-1-24-%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2019/01/24/2019-1-24-%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>业务目标：前台报表需要按项目ID、按同IP下的不同用户进行统计，所以这里就不能再使用nginx日志了。为了解决这一问题，搭建日志收集服务器。</p><p>1.安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y install gcc perl pcre-devel openssl openssl-devel<br></code></pre></td></tr></table></figure><p>2.上传LuaJIT-2.0.4.tar.gz并安装LuaJIT</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -zxvf LuaJIT-2.0.4.tar.gz -C /usr/local/src/<br>cd /usr/local/src/LuaJIT-2.0.4/<br>make &amp;&amp; make install PREFIX=/usr/local/luajit<br></code></pre></td></tr></table></figure><p>3.设置环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">export LUAJIT_LIB=/usr/local/luajit/lib<br>export LUAJIT_INC=/usr/local/luajit/include/luajit-2.0<br></code></pre></td></tr></table></figure><p>4.创建modules保存nginx的模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p /usr/local/nginx/modules<br></code></pre></td></tr></table></figure><p>5.上传openresty-1.9.7.3.tar.gz和依赖的模块lua-nginx-module-0.10.0.tar、ngx_devel_kit-0.2.19.tar、ngx_devel_kit-0.2.19.tar、echo-nginx-module-0.58.tar.gz</p><p>6.将依赖的模块直接解压到&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;modules目录即可，不需要编译安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -zxvf lua-nginx-module-0.10.0.tar.gz -C /usr/local/nginx/modules/<br>tar -zxvf set-misc-nginx-module-0.29.tar.gz -C /usr/local/nginx/modules/<br>tar -zxvf ngx_devel_kit-0.2.19.tar.gz -C /usr/local/nginx/modules/<br>tar -zxvf echo-nginx-module-0.58.tar.gz -C /usr/local/nginx/modules/<br></code></pre></td></tr></table></figure><p>7.解压openresty-1.9.7.3.tar.gz</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs she">tar -zxvf openresty-1.9.7.3.tar.gz -C /usr/local/src/<br>cd /usr/local/src/openresty-1.9.7.3/<br></code></pre></td></tr></table></figure><p>8.编译安装openresty</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./configure --prefix=/usr/local/openresty --with-luajit &amp;&amp; make &amp;&amp; make install<br></code></pre></td></tr></table></figure><p>9.上传nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -zxvf nginx-1.8.1.tar.gz -C /usr/local/src/<br>cd /usr/local/src/nginx-1.8.1/<br></code></pre></td></tr></table></figure><p>10.编译nginx并支持其他模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">./configure --prefix=/usr/local/nginx \<br>--with-ld-opt=&quot;-Wl,-rpath,/usr/local/luajit/lib&quot; \<br>    --add-module=/usr/local/nginx/modules/ngx_devel_kit-0.2.19 \<br>    --add-module=/usr/local/nginx/modules/lua-nginx-module-0.10.0 \<br>    --add-module=/usr/local/nginx/modules/set-misc-nginx-module-0.29 \<br>    --add-module=/usr/local/nginx/modules/echo-nginx-module-0.58 <br>make -j2<br>make install<br></code></pre></td></tr></table></figure><p>11.修改nginx配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs shell">worker_processes  2;<br><br>events &#123;<br>    worker_connections  1024;<br>&#125;<br><br>http &#123;<br>    include       mime.types;<br>    default_type  application/octet-stream;<br><br>    log_format tick &quot;$msec^A$remote_addr^A$u_domain^A$u_url^A$u_title^A$u_referrer^A$u_sh^A$u_sw^A$u_cd^A$u_lang^A$http_user_agent^A$u_utrace^A$u_account&quot;;<br>    <br>    access_log  logs/access.log  tick;<br><br>    sendfile        on;<br><br>    keepalive_timeout  65;<br><br>    server &#123;<br>        listen       8099;<br>        server_name  localhost;<br>location /1.gif &#123;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">伪装成gif文件</span><br>default_type image/gif;    <br><span class="hljs-meta prompt_">#</span><span class="language-bash">本身关闭access_log，通过subrequest记录<span class="hljs-built_in">log</span></span><br>access_log off;<br><br>access_by_lua &quot;<br>-- 用户跟踪cookie名为__utrace<br>local uid = ngx.var.cookie___utrace        <br>if not uid then<br>-- 如果没有则生成一个跟踪cookie，算法为md5(时间戳+IP+客户端信息)<br>uid = ngx.md5(ngx.now() .. ngx.var.remote_addr .. ngx.var.http_user_agent)<br>end <br>ngx.header[&#x27;Set-Cookie&#x27;] = &#123;&#x27;__utrace=&#x27; .. uid .. &#x27;; path=/&#x27;&#125;<br>if ngx.var.arg_domain then<br>-- 通过subrequest到/i-log记录日志，将参数和用户跟踪cookie带过去<br>ngx.location.capture(&#x27;/i-log?&#x27; .. ngx.var.args .. &#x27;&amp;utrace=&#x27; .. uid)<br>end <br>&quot;;  <br><br><span class="hljs-meta prompt_">#</span><span class="language-bash">此请求不缓存</span><br>add_header Expires &quot;Fri, 01 Jan 1980 00:00:00 GMT&quot;;<br>add_header Pragma &quot;no-cache&quot;;<br>add_header Cache-Control &quot;no-cache, max-age=0, must-revalidate&quot;;<br><br><span class="hljs-meta prompt_">#</span><span class="language-bash">返回一个1×1的空gif图片</span><br>empty_gif;<br>&#125;   <br><br>location /i-log &#123;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">内部location，不允许外部直接访问</span><br>internal;<br><br><span class="hljs-meta prompt_">#</span><span class="language-bash">设置变量，注意需要unescape</span><br>set_unescape_uri $u_domain $arg_domain;<br>set_unescape_uri $u_url $arg_url;<br>set_unescape_uri $u_title $arg_title;<br>set_unescape_uri $u_referrer $arg_referrer;<br>set_unescape_uri $u_sh $arg_sh;<br>set_unescape_uri $u_sw $arg_sw;<br>set_unescape_uri $u_cd $arg_cd;<br>set_unescape_uri $u_lang $arg_lang;<br>set_unescape_uri $u_utrace $arg_utrace;<br>set_unescape_uri $u_account $arg_account;<br><br><span class="hljs-meta prompt_">#</span><span class="language-bash">打开日志</span><br>log_subrequest on;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">记录日志到ma.log，实际应用中最好加buffer，格式为tick</span><br>access_log /var/nginx_logs/ma.log tick;<br><br><span class="hljs-meta prompt_">#</span><span class="language-bash">输出空字符串</span><br>echo &#x27;&#x27;;<br>&#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>12.在nginx&#x2F;html目录下添加一个ma.js (118.89.108.139:8099是nginx访问地址)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> params = &#123;&#125;;<br>    <span class="hljs-comment">//Document对象数据</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">document</span>) &#123;<br>        params.<span class="hljs-property">domain</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-property">domain</span> || <span class="hljs-string">&#x27;&#x27;</span>; <br>        params.<span class="hljs-property">url</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-property">URL</span> || <span class="hljs-string">&#x27;&#x27;</span>; <br>        params.<span class="hljs-property">title</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> || <span class="hljs-string">&#x27;&#x27;</span>; <br>        params.<span class="hljs-property">referrer</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-property">referrer</span> || <span class="hljs-string">&#x27;&#x27;</span>; <br>    &#125;   <br>    <span class="hljs-comment">//Window对象数据</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">window</span> &amp;&amp; <span class="hljs-variable language_">window</span>.<span class="hljs-property">screen</span>) &#123;<br>        params.<span class="hljs-property">sh</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">screen</span>.<span class="hljs-property">height</span> || <span class="hljs-number">0</span>;<br>        params.<span class="hljs-property">sw</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">screen</span>.<span class="hljs-property">width</span> || <span class="hljs-number">0</span>;<br>        params.<span class="hljs-property">cd</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">screen</span>.<span class="hljs-property">colorDepth</span> || <span class="hljs-number">0</span>;<br>    &#125;   <br>    <span class="hljs-comment">//navigator对象数据</span><br>    <span class="hljs-keyword">if</span>(navigator) &#123;<br>        params.<span class="hljs-property">lang</span> = navigator.<span class="hljs-property">language</span> || <span class="hljs-string">&#x27;&#x27;</span>; <br>    &#125;   <br>    <span class="hljs-comment">//解析_maq配置</span><br>    <span class="hljs-keyword">if</span>(_maq) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> _maq) &#123;<br>            <span class="hljs-keyword">switch</span>(_maq[i][<span class="hljs-number">0</span>]) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;_setAccount&#x27;</span>:<br>                    params.<span class="hljs-property">account</span> = _maq[i][<span class="hljs-number">1</span>];<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-attr">default</span>:<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;   <br>        &#125;   <br>    &#125;   <br>    <span class="hljs-comment">//拼接参数串</span><br>    <span class="hljs-keyword">var</span> args = <span class="hljs-string">&#x27;&#x27;</span>; <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> params) &#123;<br>        <span class="hljs-keyword">if</span>(args != <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>            args += <span class="hljs-string">&#x27;&amp;&#x27;</span>;<br>        &#125;   <br>        args += i + <span class="hljs-string">&#x27;=&#x27;</span> + <span class="hljs-built_in">encodeURIComponent</span>(params[i]);<br>    &#125;   <br> <br>    <span class="hljs-comment">//通过Image对象请求后端脚本</span><br>    <span class="hljs-keyword">var</span> img = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>); <br>    img.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;http://118.89.108.139:8099/log.gif?&#x27;</span> + args;<br>&#125;)();<br></code></pre></td></tr></table></figure><p>13.在要统计的页面添加js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br><span class="hljs-keyword">var</span> _maq = _maq || [];<br>_maq.<span class="hljs-title function_">push</span>([<span class="hljs-string">&#x27;_setAccount&#x27;</span>, <span class="hljs-string">&#x27;zyh&#x27;</span>]);<br> <br>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">var</span> ma = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>); <br>ma.<span class="hljs-property">type</span> = <span class="hljs-string">&#x27;text/javascript&#x27;</span>;<br>ma.<span class="hljs-property">async</span> = <span class="hljs-literal">true</span>;<br>ma.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;http://118.89.108.139:8099/ma.js&#x27;</span>;<br><span class="hljs-keyword">var</span> s = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;script&#x27;</span>)[<span class="hljs-number">0</span>]; <br>s.<span class="hljs-property">parentNode</span>.<span class="hljs-title function_">insertBefore</span>(ma, s);<br>&#125;)();<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Flume</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实时告警系统（二）</title>
    <link href="/2018/12/06/2018-12-06-%E5%AE%9E%E6%97%B6%E5%91%8A%E8%AD%A6%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2018/12/06/2018-12-06-%E5%AE%9E%E6%97%B6%E5%91%8A%E8%AD%A6%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>下面记录环境搭建过程，以及其中遇到的困难，方便后续查询。</p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>准备3台centos6.7 :storm1（192.168.1.19）、storm2（192.168.1.20）、storm3（192.168.1.21）</p><p>所需要的组件：jdk8、zookeeper、kafka、redis、storm</p><h4 id="1-创建虚拟机"><a href="#1-创建虚拟机" class="headerlink" title="1.创建虚拟机"></a>1.创建虚拟机</h4><p>这一步创建三台虚拟机,我这边使用的是virtualbox，你也可以使用VM虚拟机。</p><p><a href="http://www.zonegood.com/2018-12-02-VirtualBox%E5%AE%89%E8%A3%85CentOS6.7/">安装CentOS虚拟机</a><a href="http://www.zonegood.com/2018-12-02-VirtualBox%E5%AE%89%E8%A3%85CentOS6.7/">http://www.zonegood.com/2018-12-02-VirtualBox%E5%AE%89%E8%A3%85CentOS6.7/</a></p><h4 id="2-部署zookeeper集群"><a href="#2-部署zookeeper集群" class="headerlink" title="2.部署zookeeper集群"></a>2.部署zookeeper集群</h4><p>安装zookeeper需要jdk8的支持，所以提前安装好jdk8</p><p><a href="http://www.zonegood.com/2018-04-15-hadoop-zookeeper%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E5%8F%8A%E5%85%B6%E4%BD%BF%E7%94%A8/">部署zookeeper集群</a><a href="http://www.zonegood.com/2018-04-15-hadoop-zookeeper%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E5%8F%8A%E5%85%B6%E4%BD%BF%E7%94%A8/">http://www.zonegood.com/2018-04-15-hadoop-zookeeper%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E5%8F%8A%E5%85%B6%E4%BD%BF%E7%94%A8/</a></p><h4 id="3-部署storm集群"><a href="#3-部署storm集群" class="headerlink" title="3.部署storm集群"></a>3.部署storm集群</h4><p><a href="http://www.zonegood.com/2018-12-02-%E9%83%A8%E7%BD%B2storm%E9%9B%86%E7%BE%A4/">部署storm集群</a><a href="http://www.zonegood.com/2018-12-02-%E9%83%A8%E7%BD%B2storm%E9%9B%86%E7%BE%A4/">http://www.zonegood.com/2018-12-02-%E9%83%A8%E7%BD%B2storm%E9%9B%86%E7%BE%A4/</a></p><h4 id="4-部署kafka集群"><a href="#4-部署kafka集群" class="headerlink" title="4.部署kafka集群"></a>4.部署kafka集群</h4><p><a href="http://www.zonegood.com/2018-09-29-kafka%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/">部署kafka集群</a><a href="http://www.zonegood.com/2018-09-29-kafka%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/">http://www.zonegood.com/2018-09-29-kafka%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</a></p><h4 id="5-部署redis集群"><a href="#5-部署redis集群" class="headerlink" title="5.部署redis集群"></a>5.部署redis集群</h4><p><a href="http://www.zonegood.com/2018-09-15-Redis%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/">部署redis集群</a><a href="http://www.zonegood.com/2018-09-15-Redis%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/">http://www.zonegood.com/2018-09-15-Redis%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</a></p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Storm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实时告警系统（一）</title>
    <link href="/2018/12/03/2018-12-03-%E5%AE%9E%E6%97%B6%E5%91%8A%E8%AD%A6%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2018/12/03/2018-12-03-%E5%AE%9E%E6%97%B6%E5%91%8A%E8%AD%A6%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>&amp;emsp;今天经理告诉小明（程序员），你做的功能为啥不能用了？于是小明，联系小红童鞋（运维）说你帮我看看线上日志呗，小红童鞋用SSH链接到生产环境，打开后台日志，一看发现确实抛了一个异常，原因是数据库字段太短，数据存不进去，之后事情就这么愉快的解决了！一次两次还好，如果时间久了，你就得一直麻烦小红童鞋帮这看看日志。而且经理他们只看结果，根本不管你是什么问题导致的，长期下来就会对你的能力有质疑;针对这个问题，小明决定做一个日志监控告警系统，在经理发现问题之前就提前发现问题并解决掉</p><h4 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h4><p>1.基础产生日志的项目，最少也得有一个。</p><p>2.flume 是一个分布式日志收集工具，因其简单易用赢得人们青睐，系统使用FLUME收集来自各个子系统中产生的日志，这个日志可以是log4J产生的，具体情况视公司而定；</p><p>3.kafka 是一个分布式的消息队列，底层用scala编写，其中提供生产者和消费者的功能，他提供类似JMS的特性，我们创建一个Topic,Flume sink到kafka 的这个topic 中</p><p>4.storm 是一个分布式的流式计算框架，每个topology中并行运行着很多个bolt，整个工作流程似流水一样，从源头源源不断的就像终点。我们使用kafkaSpout获取kafka中的数据，对数据进行过滤、根据匹配规则完成日志匹配，完成发送邮件或者手机短信，来通知模块负责人。</p><p>5.数据库方面我们可以选用mysql，项目启动后需要把规则加载到storm内存，与此同时做一个定时任务完成更新storm内存中的规则,如果公司项目很大很大，规则很多的话可以考虑用redis，如果很少的话考虑使用mysql即可。</p><p>6.zookeeper 是一个分布式协调工具</p><h4 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h4><p>1.用户表，用来记录用户基本信息，比如姓名，邮箱，手机号等基本信息</p><p>2.应用表，用来记录公司的所有子系统</p><p>3.规则表，关键字段所属应用、负责人、匹配字符</p><p>4.异常记录表：发现异常信息后触发存储异常记录操作。</p><h4 id="逻辑梳理"><a href="#逻辑梳理" class="headerlink" title="逻辑梳理"></a>逻辑梳理</h4><p>下面主要阐述项目中核心部分逻辑以及注意点：</p><p>1.项目启动后首先需要加载 APP对应的负责人列表、用户列表、APP的异常匹配规则、APP列表</p><p>2.数据进入第一层的Bolt后，对数据进行规整和过滤，常规的操作是将数据转成一个JavaBean。</p><p>3.匹配JavaBean是否满足异常匹配规则</p><p>4.满足规则，根据appId找到对应负责人，发送邮件和手机短信通知</p><p>5.将异常记录信息存放到mysql数据库</p><hr><p>下面阐述定时任务的核心逻辑以及注意点： </p><p>1.什么时候同步数据比较好？ 如果同步任务写成定时任务，加入kafka中根本就没有数据过来，就算再怎么同步其实也没什么用，所以我们规定只有kafka中有数据过来，这边才跑定时任务。</p><p>2.检测kafka有没有数据其实很简单，第一次FirstBolt的 execute方法只要触发，就证明有数据，那么我们又不想让他每次都触发更新操作，需要怎么办？</p><pre><code class="hljs">- 定义reload boolean全局字段，在非load时间一直修改reload字段为true,在load时间修改reload为false即可；- load规则的时候，需要加上同步操作。</code></pre><blockquote><p><strong>load时间</strong>:比如定义只要当前时间能被10整除就是load时间,<strong>非load时间</strong>比如定义只要当前时间不能被10整除就是非load时间</p></blockquote><h4 id="项目的意义"><a href="#项目的意义" class="headerlink" title="项目的意义"></a>项目的意义</h4><p>&amp;emsp;辅助增强系统稳定性，如果内部人员总能在第一时间内发现问题，在其他人发现问题之前就能把问题解决了，长期如此用户对公司产品的认可度也会提升。</p><p>&amp;emsp;将系统日志信息记录到数据库，并且设置触发时间以及解决时间，并生成报表。为将来绩效考核做一个数据支撑。用告警系统推动整个部门的积极性，使公司能够更加平稳的发展。</p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Storm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VirtualBox安装CentOS6.7</title>
    <link href="/2018/12/02/2018-12-02-VirtualBox%E5%AE%89%E8%A3%85CentOS6.7/"/>
    <url>/2018/12/02/2018-12-02-VirtualBox%E5%AE%89%E8%A3%85CentOS6.7/</url>
    
    <content type="html"><![CDATA[<h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h4><p>新建虚拟机环境，由于VBox环境没有CentOS的选项，所以可以选择Red Hat Linux（64Bit）</p><p><img src="https://i.loli.net/2018/12/02/5c034b4e5e26c.png" alt="1.png"></p><p><img src="https://i.loli.net/2018/12/02/5c034b4ee2376.png" alt="2.png"></p><p><img src="https://i.loli.net/2018/12/02/5c034b4c3dc1e.png" alt="3.png"></p><p>动态分配硬盘大小所以你可以选择大一点的硬盘空间（不用的话不会占用的，但是C盘性能上没固定的好）</p><p><img src="https://i.loli.net/2018/12/02/5c034b4caaca3.png" alt="4.png"></p><p><img src="https://i.loli.net/2018/12/02/5c034b4c9c028.png" alt="5.png"></p><p><img src="https://i.loli.net/2018/12/02/5c034b4c9a467.png" alt="6.png"></p><p><img src="https://i.loli.net/2018/12/02/5c034b4e9fc47.png" alt="7.png"></p><p>在VBOX主界面，选择刚刚新建的CentOS64，点击启动。</p><p><img src="https://i.loli.net/2018/12/02/5c034b4c8b33c.jpg" alt="8.jpg"></p><p><img src="https://i.loli.net/2018/12/02/5c034b4c89771.jpg" alt="9.jpg"></p><p>选择第二项，安装操作系统</p><p><img src="https://i.loli.net/2018/12/02/5c034ce0bb146.png" alt="1.png"></p><p>选择Skip</p><p><img src="https://i.loli.net/2018/12/02/5c034cdcbc571.png" alt="2.png"></p><p><img src="https://i.loli.net/2018/12/02/5c034cdff28ba.png" alt="3.png"></p><p><img src="https://i.loli.net/2018/12/02/5c034cdcaa51b.png" alt="4.png"></p><p><img src="https://i.loli.net/2018/12/02/5c034cdca3479.png" alt="5.png"></p><p><img src="https://i.loli.net/2018/12/02/5c034cdd379ee.png" alt="6.png"></p><p><img src="https://i.loli.net/2018/12/02/5c034cdcdbc29.png" alt="7.png"></p><p><img src="https://i.loli.net/2018/12/02/5c034cdc50ae4.png" alt="8.png"></p><p><img src="https://i.loli.net/2018/12/02/5c034cdd5a07a.png" alt="9.png"></p><p><img src="https://i.loli.net/2018/12/02/5c034cdc0d548.png" alt="10.png"></p><p><img src="https://i.loli.net/2018/12/02/5c034d282b562.png" alt="11.png"></p><p><img src="https://i.loli.net/2018/12/02/5c034d282bb91.png" alt="12.png"></p><p><img src="https://i.loli.net/2018/12/02/5c034d27ba9ee.png" alt="13.png"></p><p>选择服务器类型为Basic Server</p><p><img src="https://i.loli.net/2018/12/02/5c034d26abdab.png" alt="14.png"></p><p>安装完后reboot</p><p><img src="https://i.loli.net/2018/12/02/5c034d266bf82.png" alt="15.png"></p><h4 id="2-配置网络"><a href="#2-配置网络" class="headerlink" title="2.配置网络"></a>2.配置网络</h4><p>参考:<a href="https://www.cnblogs.com/zyh1994/p/10040640.html">https://www.cnblogs.com/zyh1994/p/10040640.html</a></p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>部署storm集群</title>
    <link href="/2018/12/02/2018-12-02-%E9%83%A8%E7%BD%B2storm%E9%9B%86%E7%BE%A4/"/>
    <url>/2018/12/02/2018-12-02-%E9%83%A8%E7%BD%B2storm%E9%9B%86%E7%BE%A4/</url>
    
    <content type="html"><![CDATA[<h4 id="1-准备三个虚拟机搭建Storm集群"><a href="#1-准备三个虚拟机搭建Storm集群" class="headerlink" title="1.准备三个虚拟机搭建Storm集群"></a>1.准备三个虚拟机搭建Storm集群</h4><p>安装步骤参考2018-12-02-VirtualBox安装CentOS6.7</p><h4 id="2-配置集群Hosts"><a href="#2-配置集群Hosts" class="headerlink" title="2.配置集群Hosts"></a>2.配置集群Hosts</h4><p>所有的虚拟机上都需要配置hosts</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/hosts<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">192.168.239.128 storm01 zk01 hadoop01</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">192.168.239.129 storm02 zk02 hadoop02</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">192.168.239.130 storm03 zk03 hadoop03</span><br></code></pre></td></tr></table></figure><h4 id="3-服务器间免密码登录-可选"><a href="#3-服务器间免密码登录-可选" class="headerlink" title="3.服务器间免密码登录[可选]"></a>3.服务器间免密码登录[可选]</h4><p>配置免密码登陆，在所有机器上执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen -t rsa （四个回车）<br></code></pre></td></tr></table></figure><p>生成两个文件id_rsa（私钥）、id_rsa.pub（公钥）,使用下面命令将公钥拷贝到要免密登陆的目标机器上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-copy-id &#123;其他机器的hostname&#125;<br></code></pre></td></tr></table></figure><h4 id="4-关闭服务器的防火墙"><a href="#4-关闭服务器的防火墙" class="headerlink" title="4.关闭服务器的防火墙"></a>4.关闭服务器的防火墙</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">service iptables stop<br>chkconfig iptables off<br></code></pre></td></tr></table></figure><h4 id="5-创建服务器上的统一工作目录"><a href="#5-创建服务器上的统一工作目录" class="headerlink" title="5.创建服务器上的统一工作目录"></a>5.创建服务器上的统一工作目录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir /export<br>mkdir /export/servers<br>chmod 755 -R /export<br></code></pre></td></tr></table></figure><h4 id="6-配置JDK"><a href="#6-配置JDK" class="headerlink" title="6.配置JDK"></a>6.配置JDK</h4><p>安装jdk8具体步骤不做详述</p><p><img src="https://i.loli.net/2018/12/02/5c034f4fa635d.png" alt="jdk.png"></p><h4 id="7-下载storm安装包"><a href="#7-下载storm安装包" class="headerlink" title="7.下载storm安装包"></a>7.下载storm安装包</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget http://124.202.164.6/files/1139000006794ECA/apache.fayea.com/storm/apache-storm-0.9.5/apache-storm-0.9.5.tar.gz<br></code></pre></td></tr></table></figure><h4 id="8-解压安装包"><a href="#8-解压安装包" class="headerlink" title="8.解压安装包"></a>8.解压安装包</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -zxvf apache-storm-0.9.5.tar.gz -C /export/servers/<br>cd /export/servers/<br>ln -s apache-storm-0.9.5 storm<br></code></pre></td></tr></table></figure><h4 id="9-修改配置文件"><a href="#9-修改配置文件" class="headerlink" title="9.修改配置文件"></a>9.修改配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mv /export/servers/storm/conf/storm.yaml /export/servers/storm/conf/storm.yaml.bak<br>vi /export/servers/storm/conf/storm.yaml<br></code></pre></td></tr></table></figure><p>参考</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">storm.zookeeper.servers:<br>  - &quot;storm1&quot;<br>  - &quot;storm2&quot;<br>  - &quot;storm3&quot;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">指定storm本地状态保存地址</span><br>storm.local.dir: &quot;/export/servers/storm/workdir&quot;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">指定storm集群中的nimbus节点所在的服务器</span><br>nimbus.host: &quot;storm1&quot;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">指定nimbus启动JVM最大可用内存大小</span><br>nimbus.childopts: &quot;-Xmx1024m&quot;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">指定supervisor启动JVM最大可用内存大小</span><br>supervisor.childopts: &quot;-Xmx1024m&quot;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">指定supervisor节点上，每个worker启动JVM最大可用内存大小</span><br>worker.childopts: &quot;-Xmx768m&quot;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">指定ui启动JVM最大可用内存大小，ui服务一般与nimbus同在一个节点上。</span><br>ui.childopts: &quot;-Xmx768m&quot;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">指定supervisor节点上，启动worker时对应的端口号，每个端口对应槽，每个槽位对应一个worker</span><br>supervisor.slots.ports:<br>  - 6700<br>  - 6701<br>  - 6702<br>  - 6703<br></code></pre></td></tr></table></figure><h4 id="10-分发"><a href="#10-分发" class="headerlink" title="10.分发"></a>10.分发</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">scp -r /export/servers/apache-storm-0.9.5 storm02:/export/servers<br><span class="hljs-meta prompt_"># </span><span class="language-bash">然后分别在各机器上创建软连接</span><br>cd /export/servers/<br>ln -s apache-storm-0.9.5 storm<br></code></pre></td></tr></table></figure><h4 id="11-启动"><a href="#11-启动" class="headerlink" title="11.启动"></a>11.启动</h4><p>在nimbus.host所属的机器上启动 nimbus服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /export/servers/storm/bin/<br>nohup ./storm nimbus &amp;<br></code></pre></td></tr></table></figure><p>在nimbus.host所属的机器上启动ui服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /export/servers/storm/bin/<br>nohup ./storm ui &amp;<br></code></pre></td></tr></table></figure><p>在其它个点击上启动supervisor服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /export/servers/storm/bin/<br>nohup ./storm supervisor &amp;<br></code></pre></td></tr></table></figure><h4 id="12-查看集群"><a href="#12-查看集群" class="headerlink" title="12.查看集群"></a>12.查看集群</h4><p>访问nimbus.host:&#x2F;8080，即可看到storm的ui界面</p><p><img src="https://i.loli.net/2018/12/02/5c0350a3e2ed0.png" alt="chakan.png"></p><h4 id="13-Storm常用操作命令"><a href="#13-Storm常用操作命令" class="headerlink" title="13.Storm常用操作命令"></a>13.Storm常用操作命令</h4><p>有许多简单且有用的命令可以用来管理拓扑，它们可以提交、杀死、禁用、再平衡拓扑。</p><p>提交任务命令格式：storm jar 【jar路径】 【拓扑包名.拓扑类名】 【拓扑名称】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">bin/storm jar examples/storm-starter/storm-starter-topologies-0.10.0.jar storm.starter.WordCountTopology wordcount<br></code></pre></td></tr></table></figure><p>杀死任务命令格式：storm kill 【拓扑名称】 -w 10（执行kill命令时可以通过-w [等待秒数]指定拓扑停用以后的等待时间）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">storm kill topology-name -w 10<br></code></pre></td></tr></table></figure><p>停用任务命令格式：storm deactivte  【拓扑名称】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">storm deactivte topology-name<br></code></pre></td></tr></table></figure><p>我们能够挂起或停用运行中的拓扑。当停用拓扑时，所有已分发的元组都会得到处理，但是spouts的nextTuple方法不会被调用。销毁一个拓扑，可以使用kill命令。它会以一种安全的方式销毁一个拓扑，首先停用拓扑，在等待拓扑消息的时间段内允许拓扑完成当前的数据流。</p><p>启用任务命令格式：storm activate【拓扑名称】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">storm activate topology-name<br></code></pre></td></tr></table></figure><p>重新部署任务命令格式：storm rebalance  【拓扑名称】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">storm rebalance topology-name<br></code></pre></td></tr></table></figure><p>再平衡使你重分配集群任务。这是个很强大的命令。比如，你向一个运行中的集群增加了节点。再平衡命令将会停用拓扑，然后在相应超时时间之后重分配工人，并重启拓扑。</p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Storm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>离线日志分析系统(三)</title>
    <link href="/2018/11/27/2018-11-27-%E7%A6%BB%E7%BA%BF%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E7%B3%BB%E7%BB%9F(%E4%B8%89)/"/>
    <url>/2018/11/27/2018-11-27-%E7%A6%BB%E7%BA%BF%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E7%B3%BB%E7%BB%9F(%E4%B8%89)/</url>
    
    <content type="html"><![CDATA[<p>前一阶段把集群搭建好，编写好FlumeNG采集数据到HDFS上以后，开始使用MapReduce对数据进行初步处理，处理分三个阶段</p><p>1.过滤掉无用的数据,像访问的静态资源、访问状态码非200的等。</p><p>2.基于第一步的结果进行日志增强，给每条记录添加SessionId,按访问时间排序后加上递增标号</p><p>3.初步统计访问起始时间、访问结束时间、进入页面、离开页面、一共访问了多少页面等数据</p><p>代码的整体结构</p><p><img src="https://i.loli.net/2018/11/27/5bfd693fdddfc.png" alt="snapshot.png"></p><h3 id="第一步过滤规整"><a href="#第一步过滤规整" class="headerlink" title="第一步过滤规整"></a>第一步过滤规整</h3><p>1.实现第一步的代码WebLogPreProcess.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> com.zonegood.hive.mr.pre;<br><br><span class="hljs-keyword">import</span> com.zonegood.hive.mrbean.WebLog;<br><span class="hljs-keyword">import</span> com.zonegood.hive.util.ParseUtil;<br><span class="hljs-keyword">import</span> org.apache.hadoop.conf.Configuration;<br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.Path;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.LongWritable;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.NullWritable;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Job;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Mapper;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebLogPreProcess</span> &#123;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebLogPreProcessMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Mapper</span>&lt;LongWritable, Text, Text, NullWritable&gt; &#123;<br><br>        Set&lt;String&gt; filter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;String&gt;();<br>        <span class="hljs-type">Text</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Text</span>();<br>        <span class="hljs-type">NullWritable</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> NullWritable.get();<br><br>        <span class="hljs-comment">// 过滤静态资源</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">(Context context)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException &#123;<br>            filter.add(<span class="hljs-string">&quot;/about&quot;</span>);<br>            filter.add(<span class="hljs-string">&quot;/black-ip-list/&quot;</span>);<br>            ...<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">map</span><span class="hljs-params">(LongWritable key, Text value, Context context)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> value.toString();<br>            <span class="hljs-type">WebLog</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> ParseUtil.parse(line);<br>            <span class="hljs-comment">// 过滤掉静态资源</span><br>            ParseUtil.filter(bean,filter);<br>            <span class="hljs-keyword">if</span>(bean.getInvalid())&#123;<br>                k.set(bean.toString());<br>                context.write(k,v);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面看一下ParseUtil类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zonegood.hive.util;<br><br><span class="hljs-keyword">import</span> com.zonegood.hive.mrbean.WebLog;<br><br><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Locale;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ParseUtil</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">df1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;dd/MMM/yyyy:HH:mm:ss&quot;</span>, Locale.US);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">df2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>, Locale.US);<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> WebLog <span class="hljs-title function_">parse</span><span class="hljs-params">(String line)</span>&#123;<br>        <span class="hljs-type">WebLog</span> <span class="hljs-variable">webLogBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebLog</span>();<br>        String[] arr = line.split(<span class="hljs-string">&quot; &quot;</span>);<br>        <span class="hljs-keyword">if</span>(arr.length &gt; <span class="hljs-number">11</span>)&#123;<br>            webLogBean.setIp(arr[<span class="hljs-number">0</span>]);<br>            webLogBean.setU_info(arr[<span class="hljs-number">1</span>]);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">time_local</span> <span class="hljs-operator">=</span> formatDate(arr[<span class="hljs-number">3</span>].substring(<span class="hljs-number">1</span>));<br>            <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span>==time_local) time_local=<span class="hljs-string">&quot;-invalid_time-&quot;</span>;<br>            webLogBean.setTime(time_local);<br>            webLogBean.setRequest_method(arr[<span class="hljs-number">5</span>]);<br>            webLogBean.setRequest_url(arr[<span class="hljs-number">6</span>]);<br>            webLogBean.setStatus(arr[<span class="hljs-number">8</span>]);<br>            webLogBean.setSent_body_bytes(arr[<span class="hljs-number">9</span>]);<br>            webLogBean.setRequest_referer(arr[<span class="hljs-number">10</span>]);<br><br>            <span class="hljs-comment">//如果useragent元素较多，拼接useragent</span><br>            <span class="hljs-keyword">if</span> (arr.length &gt; <span class="hljs-number">12</span>) &#123;<br>                <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">11</span>;i&lt;arr.length;i++)&#123;<br>                    sb.append(arr[i]);<br>                &#125;<br>                webLogBean.setUser_agent(sb.toString());<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                webLogBean.setUser_agent(arr[<span class="hljs-number">11</span>]);<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (Integer.parseInt(webLogBean.getStatus()) &gt;= <span class="hljs-number">400</span>) &#123;<span class="hljs-comment">// 大于400，HTTP错误</span><br>                webLogBean.setInvalid(<span class="hljs-literal">false</span>);<br>            &#125;<br><br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;-invalid_time-&quot;</span>.equals(webLogBean.getTime()))&#123;<br>                webLogBean.setInvalid(<span class="hljs-literal">false</span>);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            webLogBean.setInvalid(<span class="hljs-literal">false</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> webLogBean;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">filter</span><span class="hljs-params">(WebLog bean,Set&lt;String&gt; filter)</span>&#123;<br>        <span class="hljs-keyword">if</span>(!filter.contains(bean.getRequest_url()))&#123;<br>            bean.setInvalid(<span class="hljs-literal">false</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">formatDate</span><span class="hljs-params">(String time_local)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> df2.format(df1.parse(time_local));<br>        &#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>使用下面的shell脚本完成自动化部署</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">作用:批处理weblog日志脚本</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">编写:赵一好</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">java 环境</span><br>export JAVE_HOME=/data/jdk1.8.0_161<br>export JRE_HOME=$&#123;JAVE_HOME&#125;/jre<br>export CLASS_PATH=$&#123;JAVE_HOME&#125;/lib/dt.jar:$&#123;JAVE_HOME&#125;/lib/tools.jar<br>export PATH=$PATH:$&#123;JAVE_HOME&#125;/bin:$&#123;JRE_HOME&#125;/bin<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hadoop 环境</span><br>export HADDOP_HOME=/data/hadoop-2.7.3<br>export PATH=$PATH:$&#123;HADDOP_HOME&#125;/bin:$&#123;HADDOP_HOME&#125;/sbin<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">时间</span><br>yesterday=`date -d&#x27;-1 day&#x27; +%Y-%m-%d`<br>s_year=`date -d&#x27;-1 day&#x27; +%Y`<br>s_month=`date -d&#x27;-1 day&#x27; +%m`<br>s_day=`date -d&#x27;-1 day&#x27; +%d`<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">inpath</span><br>in_path=/syslog/preprocess/inpath<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">outpath</span><br>out_path=/syslog/preprocess/outpath<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">jar name</span><br>jar_name=weblog_pre_process.jar<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">判断制定目录是否存在数据</span><br>flies=`hdfs dfs -ls $in_path | grep $yesterday | wc -l`<br>if [ $flies -gt 0 ];then<br>    echo &quot;开始运行preprocess批处理命令,上传目录为:$out_path/$yesterday&quot;<br>    hadoop jar $jar_name $in_path/$yesterday $out_path/$yesterday<br>fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果报错发送邮件</span><br>if [ $? -gt 0 ];then<br>    echo &quot;运行失败,发送邮件...&quot;<br>fi<br><br></code></pre></td></tr></table></figure><h3 id="第二步日志增强"><a href="#第二步日志增强" class="headerlink" title="第二步日志增强"></a>第二步日志增强</h3><p>日志增强由ClickStreamPageView.java完成,下面是核心代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zonegood.hive.mr;<br><br><span class="hljs-keyword">import</span> com.zonegood.hive.mrbean.WebLog;<br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.BeanUtils;<br><span class="hljs-keyword">import</span> org.apache.hadoop.conf.Configuration;<br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.Path;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.LongWritable;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.NullWritable;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Job;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Mapper;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Reducer;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 统计点击流PV</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 给每条数据添加sessionId,默认session过期时间为30分,当前页面停留了多长时间</span><br><span class="hljs-comment"> * 每个session按访问时间排序,并标上序号</span><br><span class="hljs-comment"> * 保留WebLog中部分字段</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zyh</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 18-11-3 下午3:41</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClickStreamPageView</span> &#123;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClickStreamPageViewMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Mapper</span>&lt;LongWritable, Text, Text, WebLog&gt; &#123;<br><br>        <span class="hljs-type">WebLog</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebLog</span>();<br>        <span class="hljs-type">Text</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Text</span>();<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">map</span><span class="hljs-params">(LongWritable key, Text value, Context context)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> value.toString();<br>            String[] fields = line.split(<span class="hljs-string">&quot;\001&quot;</span>);<br>            <span class="hljs-keyword">if</span>(fields.length &gt;= <span class="hljs-number">10</span> &amp;&amp; <span class="hljs-string">&quot;true&quot;</span>.equals(fields[<span class="hljs-number">0</span>]))&#123;<br>                <span class="hljs-comment">// 处理</span><br>                v.setIp(fields[<span class="hljs-number">1</span>]);<br>                v.setU_info(fields[<span class="hljs-number">2</span>]);<br>                v.setTime(fields[<span class="hljs-number">3</span>]);<br>                v.setRequest_url(fields[<span class="hljs-number">5</span>]);<br>                v.setStatus(fields[<span class="hljs-number">6</span>]);<br>                v.setSent_body_bytes(fields[<span class="hljs-number">7</span>]);<br>                v.setRequest_referer(fields[<span class="hljs-number">8</span>]);<br>                v.setUser_agent(fields[<span class="hljs-number">9</span>]);<br>                k.set(v.getIp());<br>                context.write(k,v);<br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClickStreamPageViewReducer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Reducer</span>&lt;Text, WebLog, NullWritable, Text&gt; &#123;<br><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">df2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>, Locale.US);<br><br>            <span class="hljs-type">NullWritable</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> NullWritable.get();<br>            <span class="hljs-type">Text</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Text</span>();<br><br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             *</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> key ip</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> values &lt;PageView,PageView,PageView,PageView&gt;</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> context</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@throws</span> InterruptedException</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reduce</span><span class="hljs-params">(Text key, Iterable&lt;WebLog&gt; values, Context context)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException &#123;<br>                ArrayList&lt;WebLog&gt; beans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;WebLog&gt;();<br>                <span class="hljs-keyword">try</span>&#123;<br>                    <span class="hljs-keyword">for</span> (WebLog webLog:values) &#123;<br>                        <span class="hljs-type">WebLog</span> <span class="hljs-variable">pv</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebLog</span>();<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            BeanUtils.copyProperties(pv,webLog);<br>                        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                            e.printStackTrace();<br>                        &#125;<br><br>                        beans.add(pv);<br>                    &#125;<br>                    Collections.sort(beans, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;WebLog&gt;() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(WebLog o1, WebLog o2)</span> &#123;<br>                            <span class="hljs-keyword">try</span> &#123;<br>                                <span class="hljs-type">Date</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> formatDate(o1.getTime());<br>                                <span class="hljs-type">Date</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> formatDate(o2.getTime());<br>                                <span class="hljs-keyword">if</span>(d1 == <span class="hljs-literal">null</span> || d2 == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>                                <span class="hljs-keyword">return</span> d1.compareTo(d2);<br>                            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>                            &#125;<br>                        &#125;<br>                    &#125;);<br><br>                    <span class="hljs-comment">/**</span><br><span class="hljs-comment">                     *  1. 里面只有一个</span><br><span class="hljs-comment">                     *      1.1 设置sessionId、setp、直接输出,重置sessionId</span><br><span class="hljs-comment">                     *</span><br><span class="hljs-comment">                     *  2. 里面有多个</span><br><span class="hljs-comment">                     *      2.1 是第一个，直接跳过不输出</span><br><span class="hljs-comment">                     *      2.2 是最后一个，设置sessionId,设置step,输出</span><br><span class="hljs-comment">                     *      2.3 比较第n个与n-1个的时间差</span><br><span class="hljs-comment">                     *          2.2.1差 大于30s</span><br><span class="hljs-comment">                     *              2.2.1.1 设置sessionId,设置step,输出第n-1个,重置sessionId,重置step</span><br><span class="hljs-comment">                     *          2.2.2 差小于30s</span><br><span class="hljs-comment">                     *              2.2.2.1 设置sessionId,设置step,输出第n-1个,step ++</span><br><span class="hljs-comment">                     *</span><br><span class="hljs-comment">                     */</span><br><br>                    <span class="hljs-type">int</span> <span class="hljs-variable">step</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">sessionId</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span> ; i&lt;beans.size() ; i++) &#123;<br>                        <span class="hljs-keyword">if</span>(beans.size() == <span class="hljs-number">1</span>)&#123;<br>                            v.set(sessionId+<span class="hljs-string">&quot;\001&quot;</span>+<br>                                    beans.get(i).getIp()+<span class="hljs-string">&quot;\001&quot;</span>+<br>                                    step + <span class="hljs-string">&quot;\001&quot;</span> +<br>                                    (<span class="hljs-number">60</span>) + <span class="hljs-string">&quot;\001&quot;</span> +<br>                                    beans.get(i).getU_info() + <span class="hljs-string">&quot;\001&quot;</span> +<br>                                    beans.get(i).getTime() + <span class="hljs-string">&quot;\001&quot;</span> +<br>                                    beans.get(i).getRequest_url() + <span class="hljs-string">&quot;\001&quot;</span> +<br>                                    beans.get(i).getRequest_referer() + <span class="hljs-string">&quot;\001&quot;</span>+<br>                                    beans.get(i).getUser_agent() + <span class="hljs-string">&quot;\001&quot;</span> +<br>                                    beans.get(i).getSent_body_bytes() + <span class="hljs-string">&quot;\001&quot;</span> +<br>                                    beans.get(i).getStatus());<br>                            <span class="hljs-comment">// 输出当前pv</span><br>                            context.write(k,v);<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<br><br>                        <span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span>)&#123;<br>                            <span class="hljs-keyword">continue</span>;<br>                        &#125;<br><br>                        <span class="hljs-type">long</span> <span class="hljs-variable">diffTime</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            diffTime = diffTime(beans.get(i).getTime(),beans.get(i-<span class="hljs-number">1</span>).getTime());<br>                        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><br>                        &#125;<br>                        <span class="hljs-keyword">if</span>(diffTime &gt; <span class="hljs-number">30</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>)&#123;<br>                            v.set(sessionId+<span class="hljs-string">&quot;\001&quot;</span>+<br>                                    beans.get(i -<span class="hljs-number">1</span>).getIp()+<span class="hljs-string">&quot;\001&quot;</span>+<br>                                    step + <span class="hljs-string">&quot;\001&quot;</span> +<br>                                    (diffTime/<span class="hljs-number">1000</span>) + <span class="hljs-string">&quot;\001&quot;</span> +<br>                                    beans.get(i-<span class="hljs-number">1</span>).getU_info() + <span class="hljs-string">&quot;\001&quot;</span> +<br>                                    beans.get(i-<span class="hljs-number">1</span>).getTime() + <span class="hljs-string">&quot;\001&quot;</span> +<br>                                    beans.get(i-<span class="hljs-number">1</span>).getRequest_url() + <span class="hljs-string">&quot;\001&quot;</span> +<br>                                    beans.get(i-<span class="hljs-number">1</span>).getRequest_referer() + <span class="hljs-string">&quot;\001&quot;</span>+<br>                                    beans.get(i-<span class="hljs-number">1</span>).getUser_agent() + <span class="hljs-string">&quot;\001&quot;</span> +<br>                                    beans.get(i-<span class="hljs-number">1</span>).getSent_body_bytes() + <span class="hljs-string">&quot;\001&quot;</span> +<br>                                    beans.get(i-<span class="hljs-number">1</span>).getStatus());<br>                            <span class="hljs-comment">// 输出当前pv</span><br>                            context.write(k,v);<br>                            sessionId = UUID.randomUUID().toString();<br>                            step = <span class="hljs-number">1</span>;<br>                        &#125;<span class="hljs-keyword">else</span>&#123;<br>                            v.set(sessionId+<span class="hljs-string">&quot;\001&quot;</span>+<br>                                    beans.get(i -<span class="hljs-number">1</span>).getIp()+<span class="hljs-string">&quot;\001&quot;</span>+<br>                                    step + <span class="hljs-string">&quot;\001&quot;</span> +<br>                                    (diffTime/<span class="hljs-number">1000</span>) + <span class="hljs-string">&quot;\001&quot;</span> +<br>                                    beans.get(i-<span class="hljs-number">1</span>).getU_info() + <span class="hljs-string">&quot;\001&quot;</span> +<br>                                    beans.get(i-<span class="hljs-number">1</span>).getTime() + <span class="hljs-string">&quot;\001&quot;</span> +<br>                                    beans.get(i-<span class="hljs-number">1</span>).getRequest_url() + <span class="hljs-string">&quot;\001&quot;</span> +<br>                                    beans.get(i-<span class="hljs-number">1</span>).getRequest_referer() + <span class="hljs-string">&quot;\001&quot;</span>+<br>                                    beans.get(i-<span class="hljs-number">1</span>).getUser_agent() + <span class="hljs-string">&quot;\001&quot;</span> +<br>                                    beans.get(i-<span class="hljs-number">1</span>).getSent_body_bytes() + <span class="hljs-string">&quot;\001&quot;</span> +<br>                                    beans.get(i-<span class="hljs-number">1</span>).getStatus());<br>                            <span class="hljs-comment">// 输出当前pv</span><br>                            context.write(k,v);<br>                            step ++;<br>                        &#125;<br><br>                        <span class="hljs-keyword">if</span>(i == beans.size()-<span class="hljs-number">1</span>)&#123;<br>                            v.set(sessionId+<span class="hljs-string">&quot;\001&quot;</span>+<br>                                    beans.get(i).getIp()+<span class="hljs-string">&quot;\001&quot;</span>+<br>                                    step + <span class="hljs-string">&quot;\001&quot;</span> +<br>                                    (<span class="hljs-number">60</span>) + <span class="hljs-string">&quot;\001&quot;</span> +<br>                                    beans.get(i).getU_info() + <span class="hljs-string">&quot;\001&quot;</span> +<br>                                    beans.get(i).getTime() + <span class="hljs-string">&quot;\001&quot;</span> +<br>                                    beans.get(i).getRequest_url() + <span class="hljs-string">&quot;\001&quot;</span> +<br>                                    beans.get(i).getRequest_referer() + <span class="hljs-string">&quot;\001&quot;</span>+<br>                                    beans.get(i).getUser_agent() + <span class="hljs-string">&quot;\001&quot;</span> +<br>                                    beans.get(i).getSent_body_bytes() + <span class="hljs-string">&quot;\001&quot;</span> +<br>                                    beans.get(i).getStatus());<br>                            <span class="hljs-comment">// 输出当前pv</span><br>                            context.write(k,v);<br>                        &#125;<br>                    &#125;<br><br>                &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                 e.printStackTrace();<br>                &#125;<br><br>            &#125;<br><br>            <span class="hljs-keyword">private</span> Date <span class="hljs-title function_">formatDate</span><span class="hljs-params">(String timeStr)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>                <span class="hljs-keyword">return</span> df2.parse(timeStr);<br>            &#125;<br><br>            <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> <span class="hljs-title function_">diffTime</span><span class="hljs-params">(String t1,String t2)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>                <span class="hljs-keyword">return</span> df2.parse(t1).getTime() - df2.parse(t2).getTime();<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br><br>        <span class="hljs-type">Configuration</span> <span class="hljs-variable">conf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>();<br>        <span class="hljs-type">Job</span> <span class="hljs-variable">job</span> <span class="hljs-operator">=</span> Job.getInstance(conf);<br><br>        job.setJarByClass(ClickStreamPageView.class);<br><br>        job.setMapperClass(ClickStreamPageViewMapper.class);<br>        job.setReducerClass(ClickStreamPageViewMapper.ClickStreamPageViewReducer.class);<br><br>        job.setMapOutputKeyClass(Text.class);<br>        job.setMapOutputValueClass(WebLog.class);<br><br>        job.setOutputKeyClass(NullWritable.class);<br>        job.setOutputValueClass(Text.class);<br><br>        FileInputFormat.setInputPaths(job, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(args[<span class="hljs-number">0</span>]));<br>        FileOutputFormat.setOutputPath(job, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(args[<span class="hljs-number">1</span>]));<br>        job.waitForCompletion(<span class="hljs-literal">true</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>自动化运行脚本click_stream_page_view.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">作用:统计PageView的批处理脚本</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">作者:赵一好</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">java 环境</span><br>export JAVE_HOME=/data/jdk1.8.0_161<br>export JRE_HOME=$&#123;JAVE_HOME&#125;/jre<br>export CLASS_PATH=$&#123;JAVE_HOME&#125;/lib/dt.jar:$&#123;JAVE_HOME&#125;/lib/tools.jar<br>export PATH=$PATH:$&#123;JAVE_HOME&#125;/bin:$&#123;JRE_HOME&#125;/bin<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hadoop 环境</span><br>export HADDOP_HOME=/data/hadoop-2.7.3<br>export PATH=$PATH:$&#123;HADDOP_HOME&#125;/bin:$&#123;HADDOP_HOME&#125;/sbin<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">日期</span><br>yesterday=`date -d&#x27;-1 day&#x27; +%Y-%m-%d`<br>s_year=`date -d&#x27;-1 day&#x27; +%Y`<br>s_month=`date -d&#x27;-1 day&#x27; +%m`<br>s_day=`date -d&#x27;-1 day&#x27; +%d`<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">inpath</span><br>in_path=/syslog/preprocess/outpath<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">outpath</span><br>out_path=/syslog/pageview/outpath<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">jar name</span><br>jar_name=click_stream_page_view.jar<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">检测是否存在待处理数据</span><br>files=`hdfs dfs -ls $in_path | grep $yesterday | wc -l`<br>if [ $files -gt 0 ];then<br>    echo &quot;开始运行PageView批处理命令,上传目录为:$out_path/$yesterday&quot;<br>    hadoop jar $jar_name $in_path/$yesterday $out_path/$yesterday<br>fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果报错发送邮件</span><br>if [ $? -gt 0 ];then<br>    echo &quot;运行失败,发送邮件...&quot;<br>fi<br><br></code></pre></td></tr></table></figure><h3 id="第三步生成部分指标"><a href="#第三步生成部分指标" class="headerlink" title="第三步生成部分指标"></a>第三步生成部分指标</h3><p>主要由ClickStreamVisit.java完成，下面是核心代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> com.zonegood.hive.mr;<br><br><span class="hljs-keyword">import</span> com.zonegood.hive.mrbean.PageView;<br><span class="hljs-keyword">import</span> com.zonegood.hive.mrbean.VisitBean;<br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.BeanUtils;<br><span class="hljs-keyword">import</span> org.apache.hadoop.conf.Configuration;<br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.Path;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.LongWritable;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.NullWritable;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Job;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Mapper;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Reducer;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 点击流</span><br><span class="hljs-comment"> * 统计起始时间、结束时间、进入页面、离开页面、一共访问了多少页面、sessionId、IP、从哪来的</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zyh</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 18-11-3 下午5:24</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClickStreamVisit</span> &#123;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClickStreamVisitMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Mapper</span>&lt;LongWritable, Text, Text, PageView&gt; &#123;<br><br>        <span class="hljs-type">Text</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Text</span>();<br>        <span class="hljs-type">PageView</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageView</span>();<br><br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">map</span><span class="hljs-params">(LongWritable key, Text value, Context context)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException &#123;<br>            String[] fields = value.toString().split(<span class="hljs-string">&quot;\001&quot;</span>);<br>            v.setSessionId(fields[<span class="hljs-number">0</span>]);<br>            v.setIp(fields[<span class="hljs-number">1</span>]);<br>            v.setStep(fields[<span class="hljs-number">2</span>]);<br>            v.setStayTime(fields[<span class="hljs-number">3</span>]);<br>            v.setU_info(fields[<span class="hljs-number">4</span>]);<br>            v.setTime(fields[<span class="hljs-number">5</span>]);<br>            v.setRequest_url(fields[<span class="hljs-number">6</span>]);<br>            v.setRequest_referer(fields[<span class="hljs-number">7</span>]);<br>            v.setUser_agent(fields[<span class="hljs-number">8</span>]);<br>            v.setSent_body_bytes(fields[<span class="hljs-number">9</span>]);<br>            v.setStatus(fields[<span class="hljs-number">10</span>]);<br>            k.set(v.getSessionId());<br>            context.write(k,v);<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClickStreamVisitReducer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Reducer</span>&lt;Text, PageView, NullWritable, VisitBean&gt; &#123;<br><br>        <span class="hljs-type">NullWritable</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> NullWritable.get();<br>        <span class="hljs-type">Text</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Text</span>();<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reduce</span><span class="hljs-params">(Text key, Iterable&lt;PageView&gt; values, Context context)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException &#123;<br><br>            ArrayList&lt;PageView&gt; beans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;PageView&gt;();<br><br>            <span class="hljs-comment">// 按照步骤排序</span><br>            <span class="hljs-keyword">for</span> (PageView pv : values) &#123;<br>                <span class="hljs-type">PageView</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageView</span>();<br>                <span class="hljs-keyword">try</span> &#123;<br>                    BeanUtils.copyProperties(bean, pv);<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>                beans.add(bean);<br>            &#125;<br><br>            Collections.sort(beans, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;PageView&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(PageView o1, PageView o2)</span> &#123;<br>                    <span class="hljs-keyword">return</span> Integer.parseInt(o1.getStep()) &gt; Integer.parseInt(o2.getStep()) ? <span class="hljs-number">1</span> : -<span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;);<br><br>            <span class="hljs-type">VisitBean</span> <span class="hljs-variable">visitBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VisitBean</span>();<br>            visitBean.setInPage(beans.get(<span class="hljs-number">0</span>).getRequest_url());<br>            visitBean.setOutPage(beans.get(beans.size()-<span class="hljs-number">1</span>).getRequest_url());<br>            visitBean.setInTime(beans.get(<span class="hljs-number">0</span>).getTime());<br>            visitBean.setOutTime(beans.get(beans.size()-<span class="hljs-number">1</span>).getTime());<br>            visitBean.setPageVisits(beans.size());<br>            visitBean.setRemote_addr(beans.get(<span class="hljs-number">0</span>).getIp());<br>            visitBean.setSession(beans.get(<span class="hljs-number">0</span>).getSessionId());<br>            visitBean.setReferal(beans.get(<span class="hljs-number">0</span>).getRequest_referer());<br>            context.write(k,visitBean);<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Configuration</span> <span class="hljs-variable">conf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>();<br>        <span class="hljs-type">Job</span> <span class="hljs-variable">job</span> <span class="hljs-operator">=</span> Job.getInstance(conf);<br>        job.setJarByClass(ClickStreamVisit.class);<br>        job.setMapperClass(ClickStreamVisitMapper.class);<br>        job.setReducerClass(ClickStreamVisitReducer.class);<br>        job.setMapOutputKeyClass(Text.class);<br>        job.setMapOutputValueClass(PageView.class);<br>        job.setOutputKeyClass(NullWritable.class);<br>        job.setOutputValueClass(VisitBean.class);<br>FileInputFormat.setInputPaths(job, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(args[<span class="hljs-number">0</span>]));<br>FileOutputFormat.setOutputPath(job, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(args[<span class="hljs-number">1</span>]));<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> job.waitForCompletion(<span class="hljs-literal">true</span>);<br>        System.exit(res?<span class="hljs-number">0</span>:<span class="hljs-number">1</span>);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>下面是配合MR自动脚本click_stream_visit.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">作用:统计Visit的批处理脚本</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">作者:赵一好</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">java 环境</span><br>export JAVE_HOME=/data/jdk1.8.0_161<br>export JRE_HOME=$&#123;JAVE_HOME&#125;/jre<br>export CLASS_PATH=$&#123;JAVE_HOME&#125;/lib/dt.jar:$&#123;JAVE_HOME&#125;/lib/tools.jar<br>export PATH=$PATH:$&#123;JAVE_HOME&#125;/bin:$&#123;JRE_HOME&#125;/bin<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hadoop 环境</span><br>export HADDOP_HOME=/data/hadoop-2.7.3<br>export PATH=$PATH:$&#123;HADDOP_HOME&#125;/bin:$&#123;HADDOP_HOME&#125;/sbin<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">日期</span><br>yesterday=`date -d&#x27;-1 day&#x27; +%Y-%m-%d`<br>s_year=`date -d&#x27;-1 day&#x27; +%Y`<br>s_month=`date -d&#x27;-1 day&#x27; +%m`<br>s_day=`date -d&#x27;-1 day&#x27; +%d`<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">inpath</span><br>in_path=/syslog/pageview/outpath<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">outpath</span><br>out_path=/syslog/visit/outpath<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">jar name</span><br>jar_name=click_stream_visit.jar<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">检测是否存在待处理数据</span><br>files=`hdfs dfs -ls $in_path | grep $yesterday | wc -l`<br>if [ $files -gt 0 ];then<br>    echo &quot;开始运行Visit批处理命令,上传目录为:$out_path/$yesterday&quot;<br>    hadoop jar $jar_name $in_path/$yesterday $out_path/$yesterday<br>fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果报错发送邮件</span><br>if [ $? -gt 0 ];then<br>    echo &quot;运行失败,发送邮件...&quot;<br>fi<br><br></code></pre></td></tr></table></figure><h3 id="自动化"><a href="#自动化" class="headerlink" title="自动化"></a>自动化</h3><p>使用部署好的Azkaban调度系统调度三个shell脚本，完成自动ETL步骤。</p><p>1.编写auto_run.sh脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">作用:自动运行preprocess pageview visit 批处理脚本</span><br><br>sh weblog_pre_process.sh<br>sh click_stream_page_view.sh<br>sh click_stream_visit.sh<br><br></code></pre></td></tr></table></figure><p>2.将三个MR程序分别打包成可执行ja,可以使用Maven package指令，这边不过多详述</p><p>click_stream_page_view.jar<br>click_stream_visit.jar<br>weblog_pre_process.jar</p><p>3.编写azkaban的job并打包成zip上传到Azkaban平台</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">foo.job</span><br>type=command<br>command=sh auto_run.sh<br></code></pre></td></tr></table></figure><p>foo.zip中一定要包含上述的所有文件,如下图所示</p><p><img src="https://i.loli.net/2018/11/27/5bfd695ec8280.png" alt="snapshot.png"></p><p>运行foo任务，如果是绿条证明程序没问题</p><p><img src="https://i.loli.net/2018/11/28/5bfd6bd8c9ac0.png" alt="snapshot.png"></p><p>具体操作有点繁琐，之前blog有详述，这边就略过了</p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>离线日志分析系统(二)</title>
    <link href="/2018/11/26/2018-11-26-%E7%A6%BB%E7%BA%BF%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E7%B3%BB%E7%BB%9F(%E4%BA%8C)/"/>
    <url>/2018/11/26/2018-11-26-%E7%A6%BB%E7%BA%BF%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E7%B3%BB%E7%BB%9F(%E4%BA%8C)/</url>
    
    <content type="html"><![CDATA[<p>系统的方向为收集ngnix访问日志，做离线批处理统计分析，为上层决策提供数据支持</p><h3 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h3><p>小型集群(3台 CentOS)，cor1&#x2F;cor2&#x2F;cor3</p><h3 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a>核心组件</h3><p>下面对用到的核心组件做一个概述，心里有一个大概</p><p>FlumeNG : 主要收集WEB端产生的ngnix日志汇总到HDFS中</p><p>HDFS : 存放前一天汇总的数据，为后续离线分析做准备</p><p>MapReduce : 主要进行ETL，清洗，过滤，规整。根据HDFS汇总数据生成贴源表</p><p>Hive : 加载HDFS上的数据到仓库（加载贴源表），使用hive sql根据贴源表进一步计算出各维度指标</p><p>Sqoop : 同步Hive数据仓库中各维度指标到mysql数据库，或者redis。为WEB端展示提供基础数据</p><p>Azkaban : 各个组件的粘合剂，用来调度各自动脚本，实现自动化</p><h3 id="搭建集群"><a href="#搭建集群" class="headerlink" title="搭建集群"></a>搭建集群</h3><p>1.开发阶段使用虚拟机,这边用的是VirtualBox.先准备3台CentOS虚拟机,cor1&#x2F;cor2&#x2F;cor3,这边不做详述</p><p><img src="https://i.loli.net/2018/11/27/5bfd5b4018130.png" alt="snapshot.png"></p><p>2.在cor1上部署hadoop,zookeeper,hive,flume,sqoop,mysql,azkaban,这边不做详述</p><p><img src="https://i.loli.net/2018/11/27/5bfd5d0d92181.png" alt="snapshot.png"></p><p>3.在cor2上部署hadoop,zookeeper,这边不做详述</p><p><img src="https://i.loli.net/2018/11/27/5bfd5eda4961e.png" alt="cor2.png"></p><p>4.在cor3上部署hadoop,zookeeper,这边不做详述</p><p><img src="https://i.loli.net/2018/11/27/5bfd5eda72d6e.png" alt="cor3.png"></p><h3 id="收集数据"><a href="#收集数据" class="headerlink" title="收集数据"></a>收集数据</h3><p>收集数据这边使用,flumeNG采集ngnix日志上传到HDFS，安装好flumeNG,在conf目录下创建tail-hdfs.conf</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br># Name the components on this agent<br>a1.sources = r1<br>a1.sinks = k1<br>a1.channels = c1<br><br># Describe/configure the source<br>a1.sources.r1.type = exec<br>a1.sources.r1.command = tail -F /home/hadoop/log/test.log<br>a1.sources.r1.channels = c1<br><br># Describe the sink<br>a1.sinks.k1.type = hdfs<br>a1.sinks.k1.channel = c1<br>a1.sinks.k1.hdfs.path = /flume/events/%y-%m-%d/<br>a1.sinks.k1.hdfs.filePrefix = events-<br>a1.sinks.k1.hdfs.round = true<br>a1.sinks.k1.hdfs.roundValue = 10<br>a1.sinks.k1.hdfs.roundUnit = minute<br>a1.sinks.k1.hdfs.rollInterval = 3<br>a1.sinks.k1.hdfs.rollSize = 20<br>a1.sinks.k1.hdfs.rollCount = 5<br>a1.sinks.k1.hdfs.batchSize = 1<br>a1.sinks.k1.hdfs.useLocalTimeStamp = true<br>#生成的文件类型，默认是Sequencefile，可用DataStream，则为普通文本<br>a1.sinks.k1.hdfs.fileType = DataStream<br><br># Use a channel which buffers events in memory<br>a1.channels.c1.type = memory<br>a1.channels.c1.capacity = 1000<br>a1.channels.c1.transactionCapacity = 100<br><br># Bind the source and sink to the channel<br>a1.sources.r1.channels = c1<br>a1.sinks.k1.channel = c1<br></code></pre></td></tr></table></figure><p>启动FlumeNG：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">bin/flume-ng agent -c conf -f conf/tail-hdfs.conf -n a1<br><br></code></pre></td></tr></table></figure><p>FlumeNG手册:<a href="http://flume.apache.org/FlumeUserGuide.html">http://flume.apache.org/FlumeUserGuide.html</a></p><p>当然你也可以不使用FlumeNG,使用shell脚本定时检测某个目录下所有的文件定时上传到HDFS中。下面提供一个参考脚本的写法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># ===========================================================================</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Data Input:     /data/weblog/preprocess/input</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Data Output:     /data/weblog/preprocess/output</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> Author:          zyh</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">===========================================================================</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">set</span> java <span class="hljs-built_in">env</span></span><br>export JAVE_HOME=/data/jdk1.8.0_161<br>export JRE_HOME=$&#123;JAVE_HOME&#125;/jre<br>export CLASS_PATH=$&#123;JAVE_HOME&#125;/lib/dt.jar:$&#123;JAVE_HOME&#125;/lib/tools.jar<br>export PATH=$PATH:$&#123;JAVE_HOME&#125;/bin:$&#123;JRE_HOME&#125;/bin<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">set</span> hadoop <span class="hljs-built_in">env</span></span><br>export HADDOP_HOME=/data/hadoop-2.7.3<br>export PATH=$PATH:$&#123;HADDOP_HOME&#125;/bin:$&#123;HADDOP_HOME&#125;/sbin<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">flume采集生成的日志文件存放的目录</span><br>log_flume_dir=/data/flumedata/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">待上传文件存放的目录</span><br>log_pre_input=/data/weblog/preprocess/input<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">获取时间信息</span><br>day_01=`date -d&#x27;-1 day&#x27; +%Y-%m-%d`<br>syear=`date --date=$day_01 +%Y`<br>smonth=`date --date=$day_01 +%m`<br>sday=`date --date=$day_01 +%d`<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">读取日志文件的目录，判断是否有需要上传的文件</span><br>files=`hadoop fs -ls $log_flume_dir | grep $day_01 | wc -l`<br>if [ $files -gt 0 ]; then<br>hadoop fs -mv $&#123;log_flume_dir&#125;/$&#123;day_01&#125; $&#123;log_pre_input&#125;<br>echo &quot;success moved $&#123;log_flume_dir&#125;/$&#123;day_01&#125; to $&#123;log_pre_input&#125; .....&quot;<br>fi<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>离线日志分析系统（一）</title>
    <link href="/2018/11/25/2018-11-25-%E7%A6%BB%E7%BA%BF%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2018/11/25/2018-11-25-%E7%A6%BB%E7%BA%BF%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>该系统主要对前一天ngnix日志进行离线批处理统计和分析，从大量数据中晒出有价值的数据，为上层决策提供数据支持，主要思想是MapReduce。使用分布式HDFS文件系统作为离线数据存储，使用hive简化MapReduce开发。</p><p>ngnix 日志的格式很简单，我们要做的就是从中发掘出有价值的数据，ngnix的access.log的格式,摘抄部分日志</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">127.0.0.1 - - [05/Sep/2018:23:18:22 +0800] &quot;GET /favicon.ico HTTP/1.1&quot; 502 575 &quot;http://localhost:8080/4DAnalog/clashreport/delete&quot; &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36&quot;<br>127.0.0.1 - - [05/Sep/2018:23:18:40 +0800] &quot;GET /4DAnalog/clashreport/find HTTP/1.1&quot; 502 575 &quot;-&quot; &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36&quot;<br></code></pre></td></tr></table></figure><p>下面表格对上面每个字段进行了详细描述</p><table><thead><tr><th>位置</th><th align="center">字段说明</th><th align="center">值</th></tr></thead><tbody><tr><td>1</td><td align="center">ip</td><td align="center">127.0.0.1</td></tr><tr><td>2</td><td align="center">实际上绝大多数时候这一项都是如此。这个位置用于记录浏览者的标识</td><td align="center">-</td></tr><tr><td>3</td><td align="center">记录浏览者进行身份验证时提供的名字</td><td align="center">-</td></tr><tr><td>4</td><td align="center">请求的时间</td><td align="center">[05&#x2F;Sep&#x2F;2018:23:18:22 +0800]</td></tr><tr><td>5</td><td align="center">访问请求方式</td><td align="center">GET</td></tr><tr><td>6</td><td align="center">浏览者请求资源路径</td><td align="center">&#x2F;4DAnalog&#x2F;clashreport&#x2F;delete</td></tr><tr><td>7</td><td align="center">访问协议</td><td align="center">HTTP&#x2F;1.1”</td></tr><tr><td>8</td><td align="center">状态代码</td><td align="center">502</td></tr><tr><td>9</td><td align="center">发送给客户端的总字节数，它告诉我们传输是否被打断，把日志记录中的这些值加起来就可以得知服务器在某一段时间发送了多少数据。</td><td align="center">575</td></tr><tr><td>10</td><td align="center">请求来访地址referer,可以利用它分析出访问者从哪来的</td><td align="center"><a href="http://localhost:8080/4DAnalog/clashreport/delete">http://localhost:8080/4DAnalog/clashreport/delete</a></td></tr><tr><td>11</td><td align="center">浏览器信息</td><td align="center">Mozilla&#x2F;5.0 (X11; Linux x86_64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;64.0.3282.186 Safari&#x2F;537.36</td></tr></tbody></table><h3 id="统计指标汇总"><a href="#统计指标汇总" class="headerlink" title="统计指标汇总"></a>统计指标汇总</h3><p>下面对统计的指标左简单概述</p><h5 id="1-某时间段的PVS"><a href="#1-某时间段的PVS" class="headerlink" title="1.某时间段的PVS"></a>1.某时间段的PVS</h5><p>从中可以繁衍出各种维度的PVS，比如1天中每个小时的PVS，1天中每分钟的PVS，一个月中每天的PVS</p><h5 id="2-浏览器"><a href="#2-浏览器" class="headerlink" title="2.浏览器"></a>2.浏览器</h5><p>其中可以统计从Firfox跳转过来的PVS、从Chrome跳转过来的PVS、从IE跳转过来的PVS</p><h5 id="3-某时间段内的人均浏览页数"><a href="#3-某时间段内的人均浏览页数" class="headerlink" title="3.某时间段内的人均浏览页数"></a>3.某时间段内的人均浏览页数</h5><p>从中可以繁衍出各种维度的指标，比如一个月内每日人均浏览页，一天中每小时的浏览页等</p><h5 id="4-搜索引擎"><a href="#4-搜索引擎" class="headerlink" title="4.搜索引擎"></a>4.搜索引擎</h5><p>从百度跳转过来的人数、从bing跳转过来的人数、从google跳转过来的人数</p><h5 id="5-TopN指标"><a href="#5-TopN指标" class="headerlink" title="5.TopN指标"></a>5.TopN指标</h5><p>一天内访问页面热度排行，某小时内访问页面热度排行，一个月页面热度排行</p><h5 id="6-独立访客"><a href="#6-独立访客" class="headerlink" title="6.独立访客"></a>6.独立访客</h5><p>一年内每个月的独立访客、一个月内每天的独立访客</p><h5 id="7-回头客-x2F-单次访客"><a href="#7-回头客-x2F-单次访客" class="headerlink" title="7.回头客&#x2F;单次访客"></a>7.回头客&#x2F;单次访客</h5><p>一个月内回头客&#x2F;单次访客</p><h5 id="8-转换率"><a href="#8-转换率" class="headerlink" title="8.转换率"></a>8.转换率</h5><p>生成一个月内评估业务指标的数据（各个业务的转换率）</p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ngnix Websocket 400 错误</title>
    <link href="/2018/11/15/2018-11-15-Ngnix%20Websocket%20400%20%E9%94%99%E8%AF%AF/"/>
    <url>/2018/11/15/2018-11-15-Ngnix%20Websocket%20400%20%E9%94%99%E8%AF%AF/</url>
    
    <content type="html"><![CDATA[<p>Spring WebSocket 结合ngnix 之后<code>400</code>报错！</p><p>今天消息推送功能上测试服以后发现不能使用，到测试服上发现发送的请求一直返回400。后来定位到是ngnix配置问题。联系运维哥们将下面代码添加上以后成功解决:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">map</span> $http_upgrade $connection_upgrade &#123;<br>    default upgrade;<br>    <span class="hljs-string">&#x27;&#x27;</span> close;<br>&#125;<br><br>proxy_http_version <span class="hljs-number">1.1</span>;<br>proxy_set_header Upgrade $http_upgrade;<br>proxy_set_header Connection $connection_upgrade;<br><br></code></pre></td></tr></table></figure><p>添加好之后的样子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">map</span> $http_upgrade $connection_upgrade &#123;<br>    default upgrade;<br>    <span class="hljs-string">&#x27;&#x27;</span>  close;<br>&#125;<br>server &#123;<br>        ...<br>        location /chat/ &#123;<br>            proxy_pass http://backend;<br>            proxy_http_version <span class="hljs-number">1.1</span>;<br>            proxy_set_header Upgrade $http_upgrade;<br>            proxy_set_header Connection $connection_upgrade;<br>        &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebSocket</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring WebSocket消息推送</title>
    <link href="/2018/11/14/2018-11-14-Spring%20WebSocket%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/"/>
    <url>/2018/11/14/2018-11-14-Spring%20WebSocket%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/</url>
    
    <content type="html"><![CDATA[<p>需求:后台编辑推送消息，前台实时接收消息</p><p>下面是js实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br>$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-title function_">bdipOnline</span>();<br>&#125;);<br><br><span class="hljs-keyword">var</span> bdipWebSocket;<br><span class="hljs-keyword">var</span> bdipReconnectTime = <span class="hljs-number">5000</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">bdipOnline</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">WebSocket</span>) &#123;<br><span class="hljs-keyword">var</span> protocol = publicJS.<span class="hljs-property">protocol</span> == <span class="hljs-string">&quot;https&quot;</span>? <span class="hljs-string">&quot;wss&quot;</span>: <span class="hljs-string">&quot;ws&quot;</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            bdipWebSocket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(<span class="hljs-built_in">encodeURI</span>(protocol + <span class="hljs-string">&#x27;://&#x27;</span> + publicJS.<span class="hljs-property">host</span> +<span class="hljs-string">&#x27;/ws&#x27;</span>)); <span class="hljs-comment">//cloud.bimbdip.com</span><br>        &#125;<span class="hljs-keyword">catch</span> (err)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;online链接websocket失败&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(bdipWebSocket)&#123;<br><br>bdipWebSocket.<span class="hljs-property">onopen</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;bdipWebSocket链接成功... bdipReconnectTime :&quot;</span> + bdipReconnectTime)<br><span class="hljs-comment">//连接成功</span><br><span class="hljs-comment">//bdipReconnectTime = 10000;</span><br>                <span class="hljs-built_in">setTimeout</span>(bdipOnline, bdipReconnectTime);<br>&#125;;<br><br>bdipWebSocket.<span class="hljs-property">onerror</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;bdipWebSocket发生错误... bdipReconnectTime :&quot;</span> + bdipReconnectTime)<br><span class="hljs-comment">//连接失败</span><br><span class="hljs-built_in">setTimeout</span>(bdipOnline, bdipReconnectTime);<br>bdipReconnectTime += <span class="hljs-number">5000</span>;<br>&#125;;<br>bdipWebSocket.<span class="hljs-property">onclose</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">//连接断开</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;bdipWebSocket断开链接... bdipReconnectTime :&quot;</span> + bdipReconnectTime)<br><span class="hljs-built_in">setTimeout</span>(bdipOnline, bdipReconnectTime);<br>bdipReconnectTime += <span class="hljs-number">5000</span>;<br>&#125;;<br><span class="hljs-comment">//消息接收</span><br>bdipWebSocket.<span class="hljs-property">onmessage</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">message</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;接收到消息，消息内容为:&quot;</span> + message);<br><span class="hljs-keyword">var</span> data = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(message.<span class="hljs-property">data</span>);<br><span class="hljs-keyword">if</span> (data.<span class="hljs-property">type</span> == <span class="hljs-string">&#x27;logMessage&#x27;</span>) &#123;<br><span class="hljs-title function_">notificate</span>(data.<span class="hljs-property">data</span>);<br>&#125;<br>&#125;;<br>        &#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 弹出消息框</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">notificate</span>(<span class="hljs-params">_message</span>) &#123;<br>    <span class="hljs-keyword">var</span> msgContent = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(_message.<span class="hljs-property">content</span>)<br><span class="hljs-keyword">var</span> title = msgContent.<span class="hljs-property">title</span>;<br><span class="hljs-keyword">if</span>(title == <span class="hljs-literal">null</span> || <span class="hljs-title function_">typeof</span>(title) == <span class="hljs-string">&#x27;undefined&#x27;</span> || title == <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>title = <span class="hljs-string">&quot;通知中心&quot;</span>;<br>&#125;<br><span class="hljs-keyword">var</span> content = msgContent.<span class="hljs-property">content</span>;<br><span class="hljs-keyword">if</span>(content.<span class="hljs-property">length</span> &gt; <span class="hljs-number">140</span>) &#123;<br>content = content.<span class="hljs-title function_">substr</span>(<span class="hljs-number">0</span>, <span class="hljs-number">140</span>);<br>&#125;<br>$(<span class="hljs-string">&quot;#notification-title&quot;</span>).<span class="hljs-title function_">html</span>(title);<br>$(<span class="hljs-string">&quot;#notification-content&quot;</span>).<span class="hljs-title function_">html</span>(content);<br><span class="hljs-comment">//$(&quot;.notification-panel&quot;).show();</span><br>    $(<span class="hljs-string">&quot;.notification-panel&quot;</span>).<span class="hljs-title function_">slideDown</span>(<span class="hljs-number">1000</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-comment">//$(&quot;.notification-panel&quot;).hide();</span><br>        $(<span class="hljs-string">&quot;.notification-panel&quot;</span>).<span class="hljs-title function_">slideUp</span>(<span class="hljs-number">1000</span>);<br>&#125;, <span class="hljs-number">5000</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>下面是后台代码,先说一下实现思路:<br>1.在后台管理系统中编辑待推送数据并完成推送消息操作;<br>2.spring websocket 检测到用户登录，按某种规则将用户信息保存到redis；<br>3.定时轮训查看待推送信息，当检测到用户在线时进行推送，更新数据库为已推送；</p><p>其中使用到了使用redis（订阅和发布）功能进行数据推送,下面上代码：</p><p>spring websocket handler 监听用户登录的代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bim.bdip.cloud.home.web;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.mapper.EntityWrapper;<br><span class="hljs-keyword">import</span> com.bim.bdip.cloud.home.constant.BizServiceDefine;<br><span class="hljs-keyword">import</span> com.bim.bdip.cloud.home.constant.ConstantDefine;<br><span class="hljs-keyword">import</span> com.bim.bdip.cloud.home.core.base.Parameter;<br><span class="hljs-keyword">import</span> com.bim.bdip.cloud.home.domain.api.ApiResultEntity;<br><span class="hljs-keyword">import</span> com.bim.bdip.cloud.home.model.BimMessageCenter;<br><span class="hljs-keyword">import</span> com.bim.bdip.cloud.home.model.BimUser;<br><span class="hljs-keyword">import</span> com.bim.bdip.cloud.home.provider.IBizProvider;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.RowBounds;<br><span class="hljs-keyword">import</span> org.apache.log4j.LogManager;<br><span class="hljs-keyword">import</span> org.apache.log4j.Logger;<br><span class="hljs-keyword">import</span> org.redisson.api.RTopic;<br><span class="hljs-keyword">import</span> org.redisson.api.RedissonClient;<br><span class="hljs-keyword">import</span> org.redisson.api.listener.MessageListener;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.CloseStatus;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.TextMessage;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.WebSocketMessage;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.WebSocketSession;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.handler.TextWebSocketHandler;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSocketHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TextWebSocketHandler</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LogManager.getLogger(WebSocketHandler.class);<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedissonClient redissonClient;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IBizProvider bizProvider;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleTextMessage</span><span class="hljs-params">(WebSocketSession session, TextMessage message)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterConnectionEstablished</span><span class="hljs-params">(WebSocketSession session)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-built_in">super</span>.afterConnectionEstablished(session);<br>        Map&lt;String, Object&gt; attributes = session.getAttributes();<br><br>        <span class="hljs-type">BimUser</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (BimUser) attributes.get(ConstantDefine.LOGIN_SESSION_USER);<br><br>        <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123;<br>            session.close();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;检测到用户登录:&quot;</span> + user.getId() + <span class="hljs-string">&quot;当前线程ID为:&quot;</span> + Thread.currentThread().getId());<br>            <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> user.getId();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">topic</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;notification:%d&quot;</span>, userId);<br>            RTopic&lt;BimMessageCenter&gt; rtopic = redissonClient.getTopic(topic);<br>            rtopic.removeAllListeners();<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">listenerKey</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;notification:%d:listeners&quot;</span>, user.getId());<br>            redissonClient.getSet(listenerKey).delete();<br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">listenerId</span> <span class="hljs-operator">=</span> rtopic.addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageListener</span>&lt;BimMessageCenter&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onMessage</span><span class="hljs-params">(String channel, BimMessageCenter msg)</span> &#123;<br>                    System.out.println(<span class="hljs-string">&quot;向用户推送消息:&quot;</span> + msg);<br>                    <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br>                    jsonObject.put(<span class="hljs-string">&quot;type&quot;</span>, <span class="hljs-string">&quot;logMessage&quot;</span>);<br>                    jsonObject.put(<span class="hljs-string">&quot;data&quot;</span>, msg);<br>                    <span class="hljs-type">TextMessage</span> <span class="hljs-variable">textMessage</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TextMessage</span>(jsonObject.toJSONString());<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        session.sendMessage(textMessage);<br>                    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                        logger.error(<span class="hljs-string">&quot;Websocket Error.&quot;</span>, e);<br>                    &#125;<br>                &#125;<br>            &#125;);<br><br>            redissonClient.getSet(listenerKey).add(listenerId);<br>            attributes.put(ConstantDefine.LISTENER_ID, listenerId);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterConnectionClosed</span><span class="hljs-params">(WebSocketSession session, CloseStatus status)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Map&lt;String, Object&gt; attributes = session.getAttributes();<br><br>        <span class="hljs-type">BimUser</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (BimUser) attributes.get(ConstantDefine.LOGIN_SESSION_USER);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">listenerId</span> <span class="hljs-operator">=</span> (Integer) attributes.get(ConstantDefine.LISTENER_ID);<br>        <span class="hljs-keyword">if</span> (user != <span class="hljs-literal">null</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;用户退出:&quot;</span> + user.getId());<br>            <span class="hljs-built_in">super</span>.afterConnectionClosed(session, status);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">topic</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;notification:%d&quot;</span>, user.getId());<br>            <span class="hljs-type">String</span> <span class="hljs-variable">listenerKey</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;notification:%d:listeners&quot;</span>, user.getId());<br>            redissonClient.getSet(listenerKey).remove(listenerId);<br>            RTopic&lt;BimMessageCenter&gt; rtopic = redissonClient.getTopic(topic);<br>            rtopic.removeListener(listenerId);<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>下面是定时任务,定时任务轮训待推送数据，如果检测到用户登录(通过redis)，就进行数据推送(通过redis topic):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bim.bdip.cloud.home.scheduled;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.mapper.EntityWrapper;<br><span class="hljs-keyword">import</span> com.bim.bdip.cloud.home.model.BimMessageCenter;<br><span class="hljs-keyword">import</span> com.bim.bdip.cloud.home.service.IBimMessageCenterService;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.RowBounds;<br><span class="hljs-keyword">import</span> org.redisson.api.RTopic;<br><span class="hljs-keyword">import</span> org.redisson.api.RedissonClient;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.scheduling.annotation.EnableScheduling;<br><span class="hljs-keyword">import</span> org.springframework.scheduling.annotation.Scheduled;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@EnableScheduling</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NotificationTask</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedissonClient redissonClient;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IBimMessageCenterService messageCenterService;<br><br>    <span class="hljs-meta">@Scheduled(cron=&quot;1 * * * * ?&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">scanNotifications</span><span class="hljs-params">()</span> &#123;EntityWrapper&lt;BimMessageCenter&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EntityWrapper</span>&lt;&gt;();<br>        <span class="hljs-type">RowBounds</span> <span class="hljs-variable">rowBounds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RowBounds</span>(<span class="hljs-number">0</span>, <span class="hljs-number">10000000</span>);<br>        wrapper.where(<span class="hljs-string">&quot;read_status = &#123;0&#125;&quot;</span>, <span class="hljs-number">0</span>).and(<span class="hljs-string">&quot;notification_status = &#123;0&#125;&quot;</span>, <span class="hljs-number">0</span>).and(<span class="hljs-string">&quot;message_type = &#123;0&#125;&quot;</span>, <span class="hljs-string">&quot;logMessage&quot;</span>);<br><br>        List&lt;BimMessageCenter&gt; messageList = messageCenterService.selectPage(rowBounds, wrapper);<br>        System.out.println(<span class="hljs-string">&quot;轮训检测数据库数据&quot;</span> + messageList.size() + <span class="hljs-string">&quot;当前线程ID为:&quot;</span> + Thread.currentThread().getId() + <span class="hljs-string">&quot;当前时间为&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().getTime());<br>        <span class="hljs-keyword">for</span>(BimMessageCenter message : messageList) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">listenerKey</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;notification:%d:listeners&quot;</span>, message.getReceiveId());<br>            <span class="hljs-keyword">if</span>(redissonClient.getSet(listenerKey).size() &gt; <span class="hljs-number">0</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;检测到用户&quot;</span> + message.getReceiveId() + <span class="hljs-string">&quot;在线，推送消息&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">topic</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;notification:%d&quot;</span>, message.getReceiveId());<br>                RTopic&lt;BimMessageCenter&gt; rTopic = redissonClient.getTopic(topic);<br>                rTopic.publish(message);<br>                <span class="hljs-keyword">if</span>(message.getNotificationStatus() != <span class="hljs-number">2</span>)&#123;<br>                    message.setNotificationStatus(<span class="hljs-number">2</span>); <span class="hljs-comment">// 已推送</span><br>                    <span class="hljs-built_in">this</span>.messageCenterService.update(message);<br>                &#125;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;轮训结束，当前时间为:&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().getTime());<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebSocket</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hive 各种Join总计汇总</title>
    <link href="/2018/11/06/2018-11-06-hive%E5%90%84%E7%A7%8Djoin/"/>
    <url>/2018/11/06/2018-11-06-hive%E5%90%84%E7%A7%8Djoin/</url>
    
    <content type="html"><![CDATA[<p>关于hive中的各种join，下边做个总结</p><p>先准备数据 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"># a.txt<br><span class="hljs-number">1</span>,a<br><span class="hljs-number">2</span>,b<br><span class="hljs-number">3</span>,c<br><span class="hljs-number">4</span>,d<br><span class="hljs-number">7</span>,y<br><span class="hljs-number">8</span>,u<br><br># b.txt<br><span class="hljs-number">2</span>,bb<br><span class="hljs-number">3</span>,cc<br><span class="hljs-number">7</span>,yy<br><span class="hljs-number">9</span>,pp<br><br></code></pre></td></tr></table></figure><p>建表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> a(id <span class="hljs-type">int</span>,name string)<br><span class="hljs-type">row</span> format delimited fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;,&#x27;</span>;<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> b(id <span class="hljs-type">int</span>,name string)<br><span class="hljs-type">row</span> format delimited fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;,&#x27;</span>;<br><br></code></pre></td></tr></table></figure><p>导入数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br>load data <span class="hljs-keyword">local</span> inpath <span class="hljs-string">&#x27;/home/hadoop/a.txt&#x27;</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> a;<br>load data <span class="hljs-keyword">local</span> inpath <span class="hljs-string">&#x27;/home/hadoop/b.txt&#x27;</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> b;<br><br></code></pre></td></tr></table></figure><p>实验：</p><p><strong>inner join</strong></p><p>select * from a inner join b on a.id&#x3D;b.id;</p><p><a href="https://i.loli.net/2018/11/06/5be1ba4667044.png"><img src="https://i.loli.net/2018/11/06/5be1ba4667044.png" alt="snapshot.png"></a></p><p><strong>left join</strong></p><p>select * from a left join b on a.id&#x3D;b.id;</p><p><a href="https://i.loli.net/2018/11/06/5be1ba7743a15.png"><img src="https://i.loli.net/2018/11/06/5be1ba7743a15.png" alt="snapshot.png"></a></p><p><strong>right join</strong></p><p>select * from a right join b on a.id&#x3D;b.id;</p><p><a href="https://i.loli.net/2018/11/07/5be1bbbd546c4.png"><img src="https://i.loli.net/2018/11/07/5be1bbbd546c4.png" alt="snapshot.png"></a></p><p><strong>outer join</strong></p><p>select * from a full outer join b on a.id&#x3D;b.id;</p><p><a href="https://i.loli.net/2018/11/07/5be1bb776abc4.png"><img src="https://i.loli.net/2018/11/07/5be1bb776abc4.png" alt="outer.png"></a></p><p><strong>left semi join</strong></p><p>select * from a left semi join b on a.id &#x3D; b.id;</p><p><a href="https://i.loli.net/2018/11/07/5be1bb7764aab.png"><img src="https://i.loli.net/2018/11/07/5be1bb7764aab.png" alt="snapshot.png"></a></p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hive</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>十二种大数据经典案例你做过几个?</title>
    <link href="/2018/10/28/2018-10-28-12%E7%A7%8D%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9B%B8%E5%85%B3%E7%B3%BB%E7%BB%9F%E4%BD%A0%E5%81%9A%E8%BF%87%E5%87%A0%E4%B8%AA%EF%BC%9F/"/>
    <url>/2018/10/28/2018-10-28-12%E7%A7%8D%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9B%B8%E5%85%B3%E7%B3%BB%E7%BB%9F%E4%BD%A0%E5%81%9A%E8%BF%87%E5%87%A0%E4%B8%AA%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="1离线数据处理"><a href="#1离线数据处理" class="headerlink" title="1离线数据处理"></a>1离线数据处理</h3><p>项目内容为通过对网站访问日志的采集和清洗，结合数据库中的结构化用户数据，统计并展示网站的PV、UV情况，以对网站的运行情况进行监控。通过此项目，回顾并串联前面讲述的离线数据处理相关技术，如：FIune、Sqoop、Hive、Spark等，了解和掌握PB级数据离线处理的一般过程和架构。</p><h3 id="2流式数据处理"><a href="#2流式数据处理" class="headerlink" title="2流式数据处理"></a>2流式数据处理</h3><p>项目内容为通过对数据库交易数据修改的实时同步，监控网站实时交易情况，以提高网站交易情况监控的时效性，降低网站运行的风险。 通过此项目，回顾并串联前面讲述的实时数据处理相关技术，如：kafka、Spark、Streaning和HBase等，了解和掌握实时数据处理的一般过程和架构。</p><h3 id="3推荐系统"><a href="#3推荐系统" class="headerlink" title="3推荐系统"></a>3推荐系统</h3><p>项目内容，基于公开数据库的商品推荐，某大型互金公司产品推荐系统剖析， 通过对公司实际推荐项目的剖析和根据真实数据搭建推荐系统的实操演练，了解推荐系统的一般架构和常用算法。</p><h3 id="4搜索系统"><a href="#4搜索系统" class="headerlink" title="4搜索系统"></a>4搜索系统</h3><p>项目内容，通过网站爬虫爬取网站数据，然后基于KlastlcSeard和Klbana搭建一个完整的搜索系统。</p><h3 id="5系统运行情况仪表盘"><a href="#5系统运行情况仪表盘" class="headerlink" title="5系统运行情况仪表盘"></a>5系统运行情况仪表盘</h3><p>通过对网站访问日志的采集和清洗，结合数据库中的结构化用户数据，统计并展示网站的PV，UV情况，以对网站的运行情况进行监控。通过此项目，回顾并串联前面讲述的离线数据处理相关技术，如Flume，Sqoop，Hive，Spark等，掌握PB级数据离线处理的一般过程和架构。</p><h3 id="6实时交易监控系统"><a href="#6实时交易监控系统" class="headerlink" title="6实时交易监控系统"></a>6实时交易监控系统</h3><p>过对数据库交易数据修改的实时同步，监控网站实时交易情况，以提高网站交易情况监控的时效性，降低网站运行的风险。通过此项目，回顾并串联前面讲述的实时数据处理相关技术，如Kafka，Spark Streaming和HBase等，掌握实时数据处理的一般过程和架构。</p><h3 id="7推荐系统理论与实战"><a href="#7推荐系统理论与实战" class="headerlink" title="7推荐系统理论与实战"></a>7推荐系统理论与实战</h3><p>讲解推荐系统的相关背景，常用算法及通用架构；基于公开数据集从零构建一个电影推荐系统。通过对公司实际推荐项目的剖析和根据真实数据搭建推荐系统的实操演练，了解推荐系统的一般架构和常用算法</p><h3 id="8数据仓库搭建理论与实战"><a href="#8数据仓库搭建理论与实战" class="headerlink" title="8数据仓库搭建理论与实战"></a>8数据仓库搭建理论与实战</h3><p>讲解数据仓库搭建的方法论，常用建模理论；以互金公司数据仓库搭建场景作为切入，实例演示数据仓库搭建过程及技术架构。</p><h3 id="9分布式业务监控系统"><a href="#9分布式业务监控系统" class="headerlink" title="9分布式业务监控系统"></a>9分布式业务监控系统</h3><p>讲解业务监控系统需求背景，基于大数据的技术方案；通过实例代码搭建完整的业务监控系统</p><h3 id="10基于ES的日志系统"><a href="#10基于ES的日志系统" class="headerlink" title="10基于ES的日志系统"></a>10基于ES的日志系统</h3><p>基于Flume，ElasticSearch等技术搭建系统日志收集与查询系统。</p><h3 id="11信贷需求预测系统"><a href="#11信贷需求预测系统" class="headerlink" title="11信贷需求预测系统"></a>11信贷需求预测系统</h3><p>以京东信贷需求预测竞赛为背景，实例讲解数据挖掘项目中如何设计特征，模型基础，建模以及调参等。</p><h3 id="12用户画像系统"><a href="#12用户画像系统" class="headerlink" title="12用户画像系统"></a>12用户画像系统</h3><p>讲解用户画像系统的需求背景，基于大数据技术的解决方案；通过实例代码演示用户画像系统的搭建。</p><p>转自<a href="https://blog.csdn.net/wj1314250/article/details/80679791">大数据开发师</a><a href="https://blog.csdn.net/wj1314250/article/details/80679791">https://blog.csdn.net/wj1314250/article/details/80679791</a></p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Lambda架构</title>
    <link href="/2018/10/28/2018-10-28-Lambda%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    <url>/2018/10/28/2018-10-28-Lambda%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/10/26/5bd30ffb500a7.png" alt="混合平台架构图1"></p><p><img src="https://i.loli.net/2018/10/26/5bd310938eb7c.png" alt="混合平台架构图2"></p><p>Lambda架构是由Strom的作者提出的一种通用系统架构，可以说它是一种混合式架构，其架构大致分为三层batch layer、speed layer和serving layer。</p><ul><li>batch layer : 称为批处理层，主要进行离线数据处理和计算。计算数据量大，延时高是其主要特点</li><li>speed layer : 称为流处理层 ，主要进行实时数据处理和计算。远远不断的处理过来的数据，延时低是其主要特点</li><li>Serving layer : 主要进行合并Batch View和Real-time view 中的结果到最终数据集</li></ul><h3 id="批处理层-batch-layer"><a href="#批处理层-batch-layer" class="headerlink" title="批处理层(batch layer)"></a>批处理层(batch layer)</h3><p>批量计算:批量获取数据、批量传输数据、周期性批量计算数据并进行数据展示。</p><p>下面对具体可行方案进行探讨</p><p>数据收集：FlumeNG 是一个分布式的采集、聚和传输系统,其核心组件是Agent。使用它可以实现从源到目标的海量数据传输。</p><p>数据同步层：sqoop可以完成关系型数据到分布式文件系统之间的数据同步</p><p>数据存储：可以使用HDFS+Hbase</p><p>分布式计算：mapreduce 或者spark。mapreduce中是一个一个的job，spark中则是一个一个RDD。其中他们俩最大的一个差别是HDFS处理的 数据必须被放在磁盘上，而Spark则不是它的数据可以都在内存中完成</p><p>序列化框架：Thrift、Protocol buffer、Avro</p><p>视图：由reduce产生，可以存在Hbase、mysql、redis、memcache中都可以</p><h3 id="实时处理层"><a href="#实时处理层" class="headerlink" title="实时处理层"></a>实时处理层</h3><p>实时处理可以实时产生、传输、计算并展示数据。其特点主要是延时低，</p><p>数据收集 flume(OG&#x2F;NG) : agent -&gt; storage,其中可以变形 agent -&gt; kafka -&gt; storage</p><p>数据分析 (storm(毫级)、spark streaming(秒级))</p><p>存储数据库 : (Hbase、Cassandra、Impala、Redis&#x2F;memcache、MySql)</p><h3 id="服务层"><a href="#服务层" class="headerlink" title="服务层"></a>服务层</h3><p>特点: 随机读 、非常端的时间内返回结果、读取batch layer 和speed layer结果,并对其归并</p><h3 id="Lambda架构具体实现"><a href="#Lambda架构具体实现" class="headerlink" title="Lambda架构具体实现"></a>Lambda架构具体实现</h3><p><img src="https://i.loli.net/2018/10/26/5bd319a8c2342.png" alt="实现1"></p><p><img src="https://i.loli.net/2018/10/26/5bd31a72c297b.png" alt="实现2"></p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>人脸识别</title>
    <link href="/2018/10/13/2018-10-13-%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
    <url>/2018/10/13/2018-10-13-%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p>最近项目需要进行人人脸识别、人脸特征分析相关开发。</p><p>在Raspberry Pi中安装face_recognition库,github代码库<a href="https://github.com/ageitgey/face_recognition">https://github.com/ageitgey/face_recognition</a></p><h3 id="Raspberry-操作系统信息"><a href="#Raspberry-操作系统信息" class="headerlink" title="Raspberry 操作系统信息:"></a>Raspberry 操作系统信息:</h3><p><img src="https://i.loli.net/2019/07/02/5d1ab077d26c516007.jpg"></p><h3 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h3><p>需要准备Raspberry Pi主板和PiCamera摄像头。</p><p><img src="https://i.loli.net/2019/07/02/5d1ab07e1a8f457965.jpg" alt="image"></p><h3 id="安装dlib"><a href="#安装dlib" class="headerlink" title="安装dlib"></a>安装dlib</h3><p>face_recognition 依赖dlib库，先安装dlib库,参考 <a href="https://gist.github.com/ageitgey/1ac8dbe8572f3f533df6269dab35df65">https://gist.github.com/ageitgey/1ac8dbe8572f3f533df6269dab35df65</a></p><h4 id="遇到的问题描述"><a href="#遇到的问题描述" class="headerlink" title="遇到的问题描述:"></a>遇到的问题描述:</h4><p>1.apt-get卡住0 [连接到archive.ubuntu.com],参考<a href="https://ubuntuqa.com/article/408.html">https://ubuntuqa.com/article/408.html</a> 中的<strong>最佳解决方案</strong> 解决问题</p><p>2.sudo pip3 install face_recognition报错，错误如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">Exception:<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;/usr/share/python-wheels/urllib3-1.19.1-py2.py3-none-any.whl/urllib3/response.py&quot;</span>, line <span class="hljs-number">298</span>, <span class="hljs-keyword">in</span> _error_catcher<br>   .......<br>socket.timeout: The read operation timed out<br><br>During handling of the above exception, another exception occurred:<br><br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;/usr/lib/python3/dist-packages/pip/basecommand.py&quot;</span>, line <span class="hljs-number">215</span>, <span class="hljs-keyword">in</span> main<br>  .....<br>requests.packages.urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host=<span class="hljs-string">&#x27;www.piwheels.org&#x27;</span>, port=<span class="hljs-number">443</span>): Read timed out.<br><br><br></code></pre></td></tr></table></figure><blockquote><p>尝试手动安装，从这里<a href="https://download.csdn.net/download/chentianlong150/10139353%E4%B8%8B%E8%BD%BD%E4%BA%86%E4%B8%AAface_recognition_models%EF%BC%8C%E6%89%8B%E5%8A%A8%E8%A3%85%E4%BA%86%E4%B8%80%E4%B8%8B%E4%BB%A5%E5%90%8E%E6%A0%B9%E6%9C%AC%E4%B8%8D%E6%98%AFface_recognition%E9%A1%B9%E7%9B%AE%E4%B9%9F%E4%B8%8D%E7%9F%A5%E9%81%93%E6%98%AF%E4%B8%AA%E5%95%A5%E4%B8%9C%E8%A5%BF%E4%BA%8E%E6%98%AF%60%60%E5%8D%B8%E8%BD%BD%E4%BA%86%60%60">https://download.csdn.net/download/chentianlong150/10139353下载了个face_recognition_models，手动装了一下以后根本不是face_recognition项目也不知道是个啥东西于是``卸载了``</a></p></blockquote><p>最后没办法了又反复运行了下面的命令（3次，中间也有失败）。但最后成功了。怀疑是墙的原因Orz</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo pip3 install face_recognition</span><br></code></pre></td></tr></table></figure><p>3.缺少libatlas.so.3库</p><p>错误信息:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;facerec_on_raspberry_pi.py&quot;</span>, line <span class="hljs-number">9</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-keyword">import</span> face_recognition<br>  File <span class="hljs-string">&quot;/usr/local/lib/python3.5/dist-packages/face_recognition/__init__.py&quot;</span>, line <span class="hljs-number">7</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-keyword">from</span> .api <span class="hljs-keyword">import</span> load_image_file, face_locations, batch_face_locations, face_landmarks, face_encodings, compare_faces, face_distance<br>  File <span class="hljs-string">&quot;/usr/local/lib/python3.5/dist-packages/face_recognition/api.py&quot;</span>, line <span class="hljs-number">4</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-keyword">import</span> dlib<br>ImportError: libatlas.so<span class="hljs-number">.3</span>: cannot <span class="hljs-built_in">open</span> shared <span class="hljs-built_in">object</span> file: No such file <span class="hljs-keyword">or</span> directory<br><br></code></pre></td></tr></table></figure><p>提示没有libatlas.so.3 参考<a href="https://askubuntu.com/questions/719538/libatlas-package">https://askubuntu.com/questions/719538/libatlas-package</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-get install -y libatlas-*</span><br><br></code></pre></td></tr></table></figure><p>4.提示没有摄像头</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;facerec_on_raspberry_pi.py&quot;</span>, line <span class="hljs-number">10</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-keyword">import</span> picamera<br>ImportError: No module named <span class="hljs-string">&#x27;picamera&#x27;</span><br><br></code></pre></td></tr></table></figure><p>安装摄像头库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-get install python3-picamera</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo pip3 install --upgrade picamera[array]</span><br><br></code></pre></td></tr></table></figure><p>最开始没有摄像头报错，上淘宝买个吧！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">picamera.exc.PiCameraError: Camera <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> enabled. Try running <span class="hljs-string">&#x27;sudo raspi-config&#x27;</span> <span class="hljs-keyword">and</span> ensure that the camera has been enabled.<br><br></code></pre></td></tr></table></figure><h3 id="picamera-使用"><a href="#picamera-使用" class="headerlink" title="picamera 使用"></a>picamera 使用</h3><p>picamera API 地址：<a href="https://picamera.readthedocs.io/en/release-1.13/quickstart.html">https://picamera.readthedocs.io/en/release-1.13/quickstart.html</a></p><h4 id="遇到的问题描述-1"><a href="#遇到的问题描述-1" class="headerlink" title="遇到的问题描述:"></a>遇到的问题描述:</h4><p>摄像头没插紧报错:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">pi@raspberrypi ~ $ raspistill -o image.jpg<br>mmal: mmal_vc_component_create: failed to create component &#x27;vc.ril.camera&#x27; (1:ENOMEM)<br>mmal: mmal_component_create_core: could not create component &#x27;vc.ril.camera&#x27; (1)<br>mmal: Failed to create camera component<br>mmal: main: Failed to create camera component<br>mmal: Camera is not detected. Please check carefully the camera module is installed correctly<br><br></code></pre></td></tr></table></figure><p>参考下面blog都没解决问题</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">https://www.raspberrypi.org/forums/viewtopic.php?f=43&amp;t=101291<br>http://raspberrypi.stackexchange.com/questions/10545/noir-camera-not-working<br>http://www.element14.com/community/thread/31835?start=0&amp;tstart=0<br>http://www.raspberrypi.org/forums/viewtopic.php?f=43&amp;t=79890<br>http://www.raspberrypi.org/forums/viewtopic.php?f=43&amp;p=655380<br></code></pre></td></tr></table></figure><p>最后发现是摄像头上面没装紧(好坑呵…),注意不是主板与picamera接口出没插紧，摄像头是可装可拆的，见下图。刚接触对摄像头构造了解。</p><p><img src="https://i.loli.net/2019/07/02/5d1ab0853dc5793940.jpg"></p><p>参考文档汇总:</p><p><a href="https://blog.csdn.net/zhangziju/article/details/79123275">Python PIL库</a>:<a href="https://blog.csdn.net/zhangziju/article/details/79123275">https://blog.csdn.net/zhangziju/article/details/79123275</a></p><p><a href="https://github.com/ageitgey/face_recognition">face_recognition Github库</a>:<a href="https://github.com/ageitgey/face_recognition">https://github.com/ageitgey/face_recognition</a></p><p><a href="https://www.jianshu.com/p/4dd131567015">face_recognition中文文档</a>:<a href="https://www.jianshu.com/p/4dd131567015">https://www.jianshu.com/p/4dd131567015</a></p><p><a href="https://www.jianshu.com/p/a0e61f5fd570">face_recognition API中文</a>:<a href="https://www.jianshu.com/p/a0e61f5fd570">https://www.jianshu.com/p/a0e61f5fd570</a></p><p><a href="https://gist.github.com/ageitgey/1ac8dbe8572f3f533df6269dab35df65">Raspberry Pi安装dlib文档</a>:<a href="https://gist.github.com/ageitgey/1ac8dbe8572f3f533df6269dab35df65">https://gist.github.com/ageitgey/1ac8dbe8572f3f533df6269dab35df65</a></p><p><a href="https://gist.github.com/ageitgey/629d75c1baac34dfa5ca2a1928a7aeaf">macOS或Ubuntu上安装dlib文档</a>:<a href="https://gist.github.com/ageitgey/629d75c1baac34dfa5ca2a1928a7aeaf">https://gist.github.com/ageitgey/629d75c1baac34dfa5ca2a1928a7aeaf</a></p><p><a href="https://picamera.readthedocs.io/en/release-1.13/install.html">PiCarema 文档</a> :<a href="https://picamera.readthedocs.io/en/release-1.13/install.html">https://picamera.readthedocs.io/en/release-1.13/install.html</a></p>]]></content>
    
    
    <categories>
      
      <category>物联网</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Raspberry Pi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>校对集群服务器时间</title>
    <link href="/2018/10/12/2018-10-12-%E6%A0%A1%E5%AF%B9%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%B6%E9%97%B4/"/>
    <url>/2018/10/12/2018-10-12-%E6%A0%A1%E5%AF%B9%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%B6%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<p>做分布式如果服务器的时间不同步会造成意想不到的问题，再进行之前最好校对服务器时间。</p><h4 id="校对"><a href="#校对" class="headerlink" title="校对"></a>校对</h4><p>输入 <code>date</code> 命令可以查看当前服务器时间</p><p>安装ntp工具进行时间校对</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo yum install ntp</span><br></code></pre></td></tr></table></figure><p>校对时间之前注意先关闭防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">service iptables stop <span class="hljs-comment"># 关闭防火墙</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">ntpdate  cn.pool.ntp.org <span class="hljs-comment"># 同步时间</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">service iptables start <span class="hljs-comment"># 开启防火墙</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu16.04TLS安装VirtualBox</title>
    <link href="/2018/10/09/2018-10-09-Ubuntu16.04TLS%E5%AE%89%E8%A3%85VirtualBox/"/>
    <url>/2018/10/09/2018-10-09-Ubuntu16.04TLS%E5%AE%89%E8%A3%85VirtualBox/</url>
    
    <content type="html"><![CDATA[<p>最近学习使用VMware虚拟机一直CPU飙升，开两台三台没问题，一开多就卡顿。估计是Ubuntu和VMware虚拟机兼容不是那么好。这边打算换个VirtualBox试试。</p><p><img src="https://i.loli.net/2019/06/30/5d185623048f462661.jpg" alt="image"></p><p>尝试到oracle的<code>https://www.virtualbox.org/</code>网站下载ubuntu平台最新版的virtualbox软件，是成功安装了，但是一运行就报内核的错。</p><p>折腾两天，开始以为是必须要降低内核才能解决，最后偶然看到askubuntu一片文章，最后重新卸载成功安装</p><p>参考下面两篇blog <code>https://askubuntu.com/questions/947189/cannot-run-virtualbox-on-ubuntu-16-04</code>和<code>https://tecadmin.net/install-oracle-virtualbox-on-ubuntu/</code></p><p>穿插一个小插曲，source.list修改了以后运行<code>sudo apt-get update</code>一直卡住0 [连接到archive.ubuntu.com]</p><p>试了很多办法解决不了更新源的问题，最后看到下面的文章，试了里面的<code>最佳解决方案</code>解决卡0的问题<code>https://ubuntuqa.com/article/408.html</code></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自制百度网盘下载器</title>
    <link href="/2018/10/08/2018-10-08-%E8%87%AA%E5%88%B6%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E4%B8%8B%E8%BD%BD%E5%99%A8/"/>
    <url>/2018/10/08/2018-10-08-%E8%87%AA%E5%88%B6%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E4%B8%8B%E8%BD%BD%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>每天手动下载觉得很麻烦，后来想用树梅派+BaiduPCS搞一个自动下载器，定时下载网盘内容到移动硬盘上，实现云盘到移动硬盘的自动同步。BaiduPCS-Go用Go语言编写,操作类似于Linux，如果会linux使用起来非常得心应手，操作基本相仿。下面记录一下遇到的各种坑。</p><h2 id="树梅派无法ssh"><a href="#树梅派无法ssh" class="headerlink" title="树梅派无法ssh"></a>树梅派无法ssh</h2><p>在window 用ssh + wpa_supplicant.conf 配置方式失效，一直扫不到ip。没有显示器的树梅派真的很难用Orz，最后实在没辙，接了根网线插到交换机上，使用 Nmap - Zenmap GUI扫描，最终拿到ip这边附上Nmap软件链接<a href="https://nmap.org/download.html">软件</a></p><p>扫描指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nmap -sn 192.168.0.0/24<br></code></pre></td></tr></table></figure><p>如果扫描到会有类似下面的信息 </p><blockquote><p>Nmap scan report for 192.168.0.183Host is up (0.0080s latency).MAC Address: B8:27:EB:DB:97:E7 (<code>Raspberry Pi</code> Foundation)</p></blockquote><p>这边把参考的博客记录一下<code>https://blog.csdn.net/wongnoubo/article/details/79628313</code></p><p>另外除了Nmap扫描意外，在手机端下载Fing也可以完成扫描。后续配合Termius可以实现手机端的远程ssh!</p><h4 id="Permission-denied"><a href="#Permission-denied" class="headerlink" title="Permission denied"></a>Permission denied</h4><p>SSH连接respberry以后，需要将硬盘挂在到树梅派上，下载的时候直接指定到硬盘目录。按照常规挂载好硬盘，结果在往硬盘写数据时遇到Permission denied的错误,后才发现是因为挂载方式不恰当，使用下面的方法就OK了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo mount -o uid=pi,gid=pi /dev/sda1 /mnt/1GB_USB_flash</span><br></code></pre></td></tr></table></figure><p>因为没有安装ntfs-3g的驱动也报错了，装上驱动解决问题：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-get install ntfs-3g</span><br></code></pre></td></tr></table></figure><p><code>https://blog.csdn.net/lovelovelovelovelo/article/details/53862819</code><br><code>https://unix.stackexchange.com/questions/195828/permission-denied-on-mounted-devices</code></p><h4 id="文件分隔符"><a href="#文件分隔符" class="headerlink" title="文件分隔符"></a>文件分隔符</h4><p>思路：使用BaiduPCS指令读取百度网盘内容，然后逐一判断内容在磁盘中是否存在，如果不存在下载。但是没有想到的是网盘中的内容可能中间带着空格， 这样我在shell脚本那里面遇到了处理空格的难题，像<code>同济大学 线性代数第一讲.mp4</code>本来是要下载<code>同济大学 线性代数第一讲.mp4</code>，结果下载成了<code>同济大学</code>。在网上也搜了一些资料，有一些网友提供了利用IFS处理文件名中的空格，但是没成功，在linux处理空格不是我的强项，下面贴出来我写的shell，希望各为linux大牛能帮我出个好主意！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">/bin/bash</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置并发的进程数</span><br>thread_num=5<br>a=$(date +%H%M%S)<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">mkfifo</span></span><br>tempfifo=&quot;my_temp_fifo&quot;<br>mkfifo $&#123;tempfifo&#125;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">使文件描述符为非阻塞式</span><br>exec 6&lt;&gt;$&#123;tempfifo&#125;<br>rm -f $&#123;tempfifo&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">为文件描述符创建占位信息</span><br>for ((i=1;i&lt;=$&#123;thread_num&#125;;i++))<br>do<br>        &#123;<br>                echo <br>        &#125;<br>done &gt;&amp;6<br><br>exclusion_column=&quot;目录总数: 10&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">这边的sed 是对文件名中可能是空格的进行处理</span><br>for line in `BaiduPCS-Go ls| awk &#x27;&#123;for(i=1;i&lt;=4;i++)&#123;$i=&quot;&quot;&#125;;print $0&#125;&#x27; | sed &#x27;s/ /_-_/g&#x27;`<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> `<span class="hljs-built_in">seq</span> 1 10`</span><br>do<br>        &#123;<br>                # 解决空格问题<br>                original_line=&quot;$(echo $line | sed s&#x27;/_-_/ /g&#x27;)&quot;<br>                # 去掉目录最后的分隔符<br>                original_line=$&#123;original_line%*/&#125;<br>                if [ -n &quot;$&#123;original_line&#125;&quot; ];then<br>                        echo &quot;$&#123;original_line&#125; 不为空&quot;<br>                       if [[ &quot;$original_line&quot; =~ ^目录总数.* ]];then<br>                               echo &quot;$&#123;original_line&#125; 不是目录总数&quot;<br>                                read -u6<br>                                &#123;<br>                                        sleep 1<br>                                        #echo &quot;$&#123;original_line&#125;&quot;<br>                                        #BaiduPCS-Go d &quot;$&#123;line%*/&#125;&quot; &amp;<br>                                        echo &quot;&quot; &gt;&amp;6<br>                                &#125; &amp;<br>                        fi<br>                fi<br>        &#125;<br>done<br>wait<br><span class="hljs-meta prompt_"># </span><span class="language-bash">关闭fd6管道</span><br>exec 6&gt;&amp;-<br>b=$(date +%H%M%S)<br>echo -e &quot;startTime:\t$a&quot;<br>echo -e &quot;endTime:\t$b&quot;<br></code></pre></td></tr></table></figure><p>上面的套路不行，后来我发现用<code>BaiduPSC d * </code>这个命令会下载盘内所有数据，如果检测到本地磁盘已经存在，就会自动跳过。下面提供一下BaiduPSC相关API链接<code>https://github.com/iikira/BaiduPCS-Go</code></p><h4 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h4><p>将日志重定向到myout.file文件中,方便后续查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nohup command &gt; myout.file 2&gt;&amp;1 &amp;<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/02/5d1ab070584a295864.jpg" alt="image"></p>]]></content>
    
    
    <categories>
      
      <category>物联网</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Raspberry Pi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一元线性回归分析(R语言)</title>
    <link href="/2018/10/07/2018-10-07-%E4%B8%80%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90/"/>
    <url>/2018/10/07/2018-10-07-%E4%B8%80%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>回归分析就是利用样本(已知数据),产生拟合方程,根据回归结果，得出各个因变量对目标变量产生的影响，还可以(对未知数据)进行预测。</p><h3 id="计算实例"><a href="#计算实例" class="headerlink" title="计算实例"></a>计算实例</h3><p>下面参考薛毅的书例6.5进行阐述一元回归模型的计算过程。</p><p><img src="https://i.loli.net/2019/06/30/5d1856588063e65219.jpg" alt="image"></p><h4 id="画出散点图"><a href="#画出散点图" class="headerlink" title="画出散点图"></a>画出散点图</h4><p>我们利用R画出散点图</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-comment"># 读取数据，生成矩阵</span><br>X <span class="hljs-operator">&lt;-</span> matrix<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><br><span class="hljs-number">194.5</span><span class="hljs-punctuation">,</span> <span class="hljs-number">20.79</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1.3179</span><span class="hljs-punctuation">,</span> <span class="hljs-number">131.79</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">194.3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">20.79</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1.3179</span><span class="hljs-punctuation">,</span> <span class="hljs-number">131.79</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">197.9</span><span class="hljs-punctuation">,</span> <span class="hljs-number">22.40</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1.3502</span><span class="hljs-punctuation">,</span> <span class="hljs-number">135.02</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">198.4</span><span class="hljs-punctuation">,</span> <span class="hljs-number">22.67</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1.3555</span><span class="hljs-punctuation">,</span> <span class="hljs-number">135.55</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">199.4</span><span class="hljs-punctuation">,</span> <span class="hljs-number">23.15</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1.3646</span><span class="hljs-punctuation">,</span> <span class="hljs-number">136.46</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">199.9</span><span class="hljs-punctuation">,</span> <span class="hljs-number">23.35</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1.3683</span><span class="hljs-punctuation">,</span> <span class="hljs-number">136.83</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">200.9</span><span class="hljs-punctuation">,</span> <span class="hljs-number">23.89</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1.3782</span><span class="hljs-punctuation">,</span> <span class="hljs-number">137.82</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">201.1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">23.99</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1.3800</span><span class="hljs-punctuation">,</span> <span class="hljs-number">138.00</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">201.4</span><span class="hljs-punctuation">,</span> <span class="hljs-number">24.02</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1.3806</span><span class="hljs-punctuation">,</span> <span class="hljs-number">138.06</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">201.3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">24.01</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1.3805</span><span class="hljs-punctuation">,</span> <span class="hljs-number">138.05</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">203.6</span><span class="hljs-punctuation">,</span> <span class="hljs-number">25.14</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1.4004</span><span class="hljs-punctuation">,</span> <span class="hljs-number">140.04</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">204.6</span><span class="hljs-punctuation">,</span> <span class="hljs-number">26.57</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1.4244</span><span class="hljs-punctuation">,</span> <span class="hljs-number">142.44</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">209.5</span><span class="hljs-punctuation">,</span> <span class="hljs-number">28.49</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1.4547</span><span class="hljs-punctuation">,</span> <span class="hljs-number">145.47</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">208.6</span><span class="hljs-punctuation">,</span> <span class="hljs-number">27.76</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1.4434</span><span class="hljs-punctuation">,</span> <span class="hljs-number">144.34</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">210.7</span><span class="hljs-punctuation">,</span> <span class="hljs-number">29.04</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1.4630</span><span class="hljs-punctuation">,</span> <span class="hljs-number">146.30</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">211.9</span><span class="hljs-punctuation">,</span> <span class="hljs-number">29.88</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1.4754</span><span class="hljs-punctuation">,</span> <span class="hljs-number">147.54</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">212.2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">30.06</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1.4780</span><span class="hljs-punctuation">,</span> <span class="hljs-number">147.80</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>ncol<span class="hljs-operator">=</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span> byrow<span class="hljs-operator">=</span><span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><br><span class="hljs-built_in">dimnames</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">17</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;F&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;h&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;log&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;log100&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span>;<br>forbes<span class="hljs-operator">&lt;-</span>as.data.frame<span class="hljs-punctuation">(</span>X<span class="hljs-punctuation">)</span>;<br><span class="hljs-comment"># 将F列映射在x轴和log100列映射在y轴描绘出散点图</span><br>plot<span class="hljs-punctuation">(</span>forbes<span class="hljs-operator">$</span><span class="hljs-built_in">F</span><span class="hljs-punctuation">,</span>forbes<span class="hljs-operator">$</span>log100<span class="hljs-punctuation">)</span>;<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/06/30/5d18565cd668975387.jpg" alt="image"></p><p>可以大致看出图形乘线性增长趋势，做回归分析，设线性回归方程为:</p><p>$$y&#x3D;ax+b$$</p><p>根据线性回归方程，在R中描绘出log100关于F的函数</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R"><br>lm.sol<span class="hljs-operator">&lt;-</span>lm<span class="hljs-punctuation">(</span>log100<span class="hljs-operator">~</span><span class="hljs-built_in">F</span><span class="hljs-punctuation">,</span>data<span class="hljs-operator">=</span>forbes<span class="hljs-punctuation">)</span>;<br><span class="hljs-comment"># 画出回归方程</span><br>abline<span class="hljs-punctuation">(</span>lm.sol<span class="hljs-punctuation">)</span>;<br><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/06/30/5d18565d657c815265.jpg" alt="image"></p><h4 id="R是怎么画出这条线的？"><a href="#R是怎么画出这条线的？" class="headerlink" title="R是怎么画出这条线的？"></a>R是怎么画出这条线的？</h4><p><img src="https://i.loli.net/2019/06/30/5d184719416bd24055.jpg" alt="image"></p><p>首先做<strong>样本点</strong>到<strong>一元回归方程</strong>且平行与<strong>Y轴</strong>的一条线段，并求得每个样本点的<strong>误差值</strong>,这样问题就可以转换为<code>怎么画这条直线才能使得残差平方和最小</code></p><blockquote><p>什么是<strong>残差平方和</strong>,对于上图中每个误差值的绝对值的总和称为残差和，由于带着绝对值求解不太方便，所以对误差值的平方后求和，即为残差平方和</p></blockquote><p>$$f\left(a,b\right)&#x3D;\sum_{i&#x3D;1}^{n}{\left(Y_i - \left(\ aX_i + b \right)\right)^2}$$</p><p>对于函数的极值问题，利用高等数学中偏导数定理，即$$\frac{\delta f}{\delta a}&#x3D;0$$和$$\frac{\delta f}{\delta b}&#x3D;0$$。下面为证明过程,由于公式太难打这边就插图了：</p><p><img src="https://i.loli.net/2019/06/30/5d18471d9afc277590.jpg" alt="image"></p><p>最终求得a和b的值。有了这个公式，对于本例子，我们就可以算出拟合直线具体是什么。分别求出公式中的各种平均数，然后带入即可，最后算出a&#x3D;0.89546，b&#x3D;-42.13087</p><p>最终的回归拟合直线为</p><p>$$Y&#x3D;-42.13087 + 0.89546X$$</p><h4 id="评价回归线拟合程度的好坏"><a href="#评价回归线拟合程度的好坏" class="headerlink" title="评价回归线拟合程度的好坏"></a>评价回归线拟合程度的好坏</h4><p>可以使用R里面的**summary()**函数解决这个问题。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span> summary<span class="hljs-punctuation">(</span>lm.sol<span class="hljs-punctuation">)</span><br><br>Call<span class="hljs-operator">:</span><br>lm<span class="hljs-punctuation">(</span>formula <span class="hljs-operator">=</span> log100 <span class="hljs-operator">~</span> <span class="hljs-built_in">F</span><span class="hljs-punctuation">,</span> data <span class="hljs-operator">=</span> forbes<span class="hljs-punctuation">)</span><br><br>Residuals<span class="hljs-operator">:</span><br>     Min       <span class="hljs-number">1</span>Q   Median       <span class="hljs-number">3</span>Q      Max <br><span class="hljs-operator">-</span><span class="hljs-number">0.32261</span> <span class="hljs-operator">-</span><span class="hljs-number">0.14530</span> <span class="hljs-operator">-</span><span class="hljs-number">0.06750</span>  <span class="hljs-number">0.02111</span>  <span class="hljs-number">1.35924</span> <br><br>Coefficients<span class="hljs-operator">:</span><br>             Estimate Std. Error t value Pr<span class="hljs-punctuation">(</span><span class="hljs-operator">&gt;</span><span class="hljs-operator">|</span>t<span class="hljs-operator">|</span><span class="hljs-punctuation">)</span>    <br><span class="hljs-punctuation">(</span>Intercept<span class="hljs-punctuation">)</span> <span class="hljs-operator">-</span><span class="hljs-number">42.13087</span>    <span class="hljs-number">3.33895</span>  <span class="hljs-operator">-</span><span class="hljs-number">12.62</span> <span class="hljs-number">2.17e-09</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br><span class="hljs-built_in">F</span>             <span class="hljs-number">0.89546</span>    <span class="hljs-number">0.01645</span>   <span class="hljs-number">54.45</span>  <span class="hljs-operator">&lt;</span> <span class="hljs-number">2e-16</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br>Signif. codes<span class="hljs-operator">:</span>  <span class="hljs-number">0</span> ‘<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span>’ <span class="hljs-number">0.001</span> ‘<span class="hljs-operator">*</span><span class="hljs-operator">*</span>’ <span class="hljs-number">0.01</span> ‘<span class="hljs-operator">*</span>’ <span class="hljs-number">0.05</span> ‘.’ <span class="hljs-number">0.1</span> ‘ ’ <span class="hljs-number">1</span><br><br>Residual standard error<span class="hljs-operator">:</span> <span class="hljs-number">0.3789</span> on <span class="hljs-number">15</span> degrees of freedom<br>Multiple R<span class="hljs-operator">-</span>squared<span class="hljs-operator">:</span>  <span class="hljs-number">0.995</span><span class="hljs-punctuation">,</span>Adjusted R<span class="hljs-operator">-</span>squared<span class="hljs-operator">:</span>  <span class="hljs-number">0.9946</span> <br><span class="hljs-built_in">F</span><span class="hljs-operator">-</span>statistic<span class="hljs-operator">:</span>  <span class="hljs-number">2965</span> on <span class="hljs-number">1</span> and <span class="hljs-number">15</span> DF<span class="hljs-punctuation">,</span>  p<span class="hljs-operator">-</span>value<span class="hljs-operator">:</span> <span class="hljs-operator">&lt;</span> <span class="hljs-number">2.2e-16</span><br><br></code></pre></td></tr></table></figure><p>参数详述</p><p><strong>Residuals</strong>: 列出了残差的最小值、下四分为数、中位数、上四分为数、最大值</p><p><strong>Coefficients</strong> : -42.13087表示的是截距、0.89546表示的是斜率,推算的系数的标准差,t值,P-值(结合Signif做显著性检验)</p><p><strong>Signif:显著性标记</strong>,三颗<em>表示极度显著,二颗</em>表示高度显著,一颗*表示显著,圆点表示不太显著,没有记号表示不显著</p><p><strong>Residual standard error</strong> : 残差标准查</p><p><strong>Multiple R-squared</strong> : 相关系数平方</p><p><strong>F-statistic</strong>: F检验值</p><p>推荐一篇不错的blog<a href="https://www.cnblogs.com/nxld/p/6123239.html">回归分析法&amp;一元线性回归操作和解释</a></p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>R</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kafka基本概念</title>
    <link href="/2018/09/29/2018-09-29-kafka%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <url>/2018/09/29/2018-09-29-kafka%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<h3 id="目录大纲"><a href="#目录大纲" class="headerlink" title="目录大纲"></a>目录大纲</h3><ul><li><p><a href="#%E4%BB%80%E4%B9%88%E6%98%AFkafka">什么是kafka</a></p></li><li><p><a href="#JMS%E8%A7%84%E8%8C%83">JMS规范</a></p><ul><li><p><a href="#JMS%E6%B6%88%E6%81%AF%E4%BC%A0%E8%BE%93%E6%A8%A1%E5%9E%8B">JMS消息传输模型</a></p></li><li><p><a href="#MS%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6">JMS核心组件</a></p></li></ul></li><li><p><a href="#Kafka%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6">Kafka核心组件</a></p></li></ul><p><span id = "什么是kafka"></span></p><h3 id="什么是kafka"><a href="#什么是kafka" class="headerlink" title="什么是kafka"></a>什么是kafka</h3><p>在流式计算中，Kafka一般用来缓存数据，Storm通过消费Kafka的数据进行计算。</p><p>KAFKA + STORM +REDIS</p><p>Apache Kafka是一个开源消息系统，由Scala写成。是由Apache软件基金会开发的一个开源消息系统项目。</p><p>Kafka最初是由LinkedIn开发，并于2011年初开源。2012年10月从Apache Incubator毕业。该项目的目标是为处理实时数据提供一个统一、高通量、低等待的平台。</p><p>Kafka是一个分布式消息队列：生产者、消费者的功能。它提供了类似于JMS的特性，但是在设计实现上完全不同，此外它并不是JMS规范的实现。</p><p>Kafka对消息保存时根据Topic进行归类，发送消息者称为Producer,消息接受者称为Consumer,此外kafka集群有多个kafka实例组成，每个实例(server)成为broker。</p><p>无论是kafka集群，还是producer和consumer都依赖于zookeeper集群保存一些meta信息，来保证系统可用性</p><p><span id = "JMS规范"></span></p><h3 id="JMS规范"><a href="#JMS规范" class="headerlink" title="JMS规范"></a>JMS规范</h3><p>JMS是Java提供的一套技术规范,用来异构系统 集成通信，缓解系统瓶颈，提高系统的伸缩性增强系统用户体验，使得系统模块化和组件化变得可行并更加灵活</p><p>适用场景: 生产消费者模式（生产者、服务器、消费者）</p><p><img src="https://i.loli.net/2019/05/13/5cd8d171b1ea084271.jpg" alt="kfk_0f.jpg"></p><p><span id = "JMS消息传输模型"></span></p><h4 id="JMS消息传输模型"><a href="#JMS消息传输模型" class="headerlink" title="JMS消息传输模型"></a>JMS消息传输模型</h4><p>1.<strong>点对点模式</strong>（一对一，消费者主动拉取数据，消息收到后消息清除）</p><p>点对点模型通常是一个基于拉取或者轮询的消息传送模型，这种模型从队列中请求信息，而不是将消息推送到客户端。这个模型的特点是发送到队列的消息被一个且只有一个接收者接收处理，即使有多个消息监听者也是如此。</p><p>2.<strong>发布&#x2F;订阅模式</strong>（一对多，数据生产后，推送给所有订阅者）</p><p>发布订阅模型则是一个基于推送的消息传送模型。发布订阅模型可以有多种不同的订阅者，临时订阅者只在主动监听主题时才接收消息，而持久订阅者则监听主题的所有消息，即时当前订阅者不可用，处于离线状态。</p><p><img src="https://i.loli.net/2019/05/13/5cd8d09c1265a58112.jpg" alt="kfk_1f.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><br>queue.put（object）  #数据生产<br>queue.take(object)    #数据消费<br><br></code></pre></td></tr></table></figure><p><span id = "JMS核心组件"></span></p><h4 id="JMS核心组件"><a href="#JMS核心组件" class="headerlink" title="JMS核心组件"></a>JMS核心组件</h4><p><strong>Destination</strong>：消息发送的目的地，也就是前面说的Queue和Topic。</p><p><strong>Message</strong>：从字面上就可以看出是被发送的消息。</p><p><strong>Producer</strong>： 消息的生产者，要发送一个消息，必须通过这个生产者来发送。</p><p><strong>MessageConsumer</strong>： 与生产者相对应，这是消息的消费者或接收者，通过它来接收一个消息。</p><p><img src="https://i.loli.net/2019/05/13/5cd8d09c212ec13960.jpg" alt="kfk_2f.jpg"></p><p>通过与ConnectionFactory可以获得一个connection,通过connection可以获得一个session会话。</p><p><span id = "Kafka核心组件"></span></p><h3 id="Kafka核心组件"><a href="#Kafka核心组件" class="headerlink" title="Kafka核心组件"></a>Kafka核心组件</h3><p><strong>Topic</strong> ：消息根据Topic进行归类</p><p><strong>Producer</strong>：发送消息者</p><p><strong>Consumer</strong>：消息接受者</p><p><strong>broker</strong>：每个kafka实例(server)</p><p><strong>Zookeeper</strong>：依赖集群保存meta信息</p><p><img src="https://i.loli.net/2019/05/13/5cd8d09c1f55c24909.jpg" alt="kfk_3f.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kafka集群部署</title>
    <link href="/2018/09/29/2018-09-29-kafka%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/"/>
    <url>/2018/09/29/2018-09-29-kafka%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><p><a href="http://kafka.apache.org/downloads.html">http://kafka.apache.org/downloads.html</a></p><p>我下载的版本是 kafka_2.12-2.0.0.tgz</p><h3 id="解压安装包"><a href="#解压安装包" class="headerlink" title="解压安装包"></a>解压安装包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">tar -zxvf /export/software/ kafka_2.12-2.0.0.tgz -C /export/servers/</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> /export/servers/</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">ln</span> -s  kafka_2.12-2.0.0 kafka</span><br></code></pre></td></tr></table></figure><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cp</span> /export/servers/kafka/config/server.properties /export/servers/kafka/config/server.properties.bak</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">vi /export/servers/kafka/config/server.properties</span><br></code></pre></td></tr></table></figure><p>参考的配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>// broker的全局唯一标识<br><br>broker.id=0<br><br>// 用来监听链接的端口,producer或consumer将在此端口建立链接<br><br>port=9092<br><br>// 如果不配 使用终端broker list 发送数据会报错<br>listeners=PLAINTEXT://192.168.1.10:9092<br><br>// 处理网络请求的线程数量<br><br>num.network.threads=3<br><br>// 处理磁盘io的线程数量<br><br>num.io.threads=8<br><br>// 发送套接字的缓冲区大小<br><br>socket.send.buffer.bytes=102400<br><br>// 接收套接字的缓冲区域大小<br><br>socket.receive.buffer.bytes=102400<br><br>// 请求套接字的缓冲区大小<br><br>socket.request.max.bytes=104857600<br><br>// 日志存放目录<br><br>log.dirs=/export/servers/logs/kafka<br><br>// topic在当前broker上的分片数<br><br>num.partitions=2<br><br>// 用来恢复和清理data下数据的线程数量<br><br>num.recovery.threads.per.data.dir=1<br><br>// segment文件保留的最长时间，超时将会被删除<br><br>offsets.topic.replication.factor=1<br><br>// 滚动生成新的segment文件的最大时间<br><br>log.retention.hours=168<br>log.roll.hours=168<br>log.segment.bytes=1073741824<br>log.retention.check.interval.ms=300000<br><br>// zokeeper的链接端口<br><br>zookeeper.connect=localhost:2181<br>zookeeper.connection.timeout.ms=6000<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-literal">false</span>时执行topic delete 时进行逻辑删除</span><br>delete.topic.enable=true<br><br></code></pre></td></tr></table></figure><h3 id="分发安装包"><a href="#分发安装包" class="headerlink" title="分发安装包"></a>分发安装包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">scp -r /export/servers/ kafka_2.12-2.0.0 kafka02:/export/servers</span><br><br>// 然后分别在各机器上创建软连<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> /export/servers/</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">ln</span> -s  kafka_2.12-2.0.0 kafka</span><br><br></code></pre></td></tr></table></figure><p>再次修改配置文件<code>依次修改各服务器上配置文件的的broker.id，分别是0,1,2不得重复。</code></p><p>运行下面指令启动kafka集群</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">bin/kafka-server-start.sh  config/server.properties</span><br></code></pre></td></tr></table></figure><p>server-start.sh  config&#x2F;server.properties</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Kafka常用操作命令</span></span><br><br>查看当前服务器中的所有topic<br><br>```shell<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">bin/kafka-topics.sh --list --zookeeper  zk01:2181</span><br></code></pre></td></tr></table></figure><p><strong>创建topic</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">./kafka-topics.sh --create --zookeeper mini1:2181 --replication-factor 1 --partitions 3 --topic first</span><br></code></pre></td></tr></table></figure><p><strong>删除topic</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sh bin/kafka-topics.sh --delete --zookeeper zk01:2181 --topic <span class="hljs-built_in">test</span></span><br></code></pre></td></tr></table></figure><p>需要server.properties中设置delete.topic.enable&#x3D;true否则只是标记删除或者直接重启。</p><p><strong>通过shell命令发送消息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">kafka-console-producer.sh --broker-list 192.168.1.12:9092 --topic first</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/02/5d1ab03b175b845401.jpg" alt="image"></p><p>如果报错参考文章最下面的报错信息</p><p><strong>通过shell消费消息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">bin/kafka-console-consumer.sh --bootstrap-server 192.168.1.12:9092 --from-beginning --topic first</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/02/5d1ab0683d04a99141.jpg" alt="image"></p><p><strong>查看消费位置</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sh kafka-run-class.sh kafka.tools.ConsumerOffsetChecker --zookeeper zk01:2181 --group testGroup</span><br></code></pre></td></tr></table></figure><p><strong>查看某个Topic的详情</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sh kafka-topics.sh --topic <span class="hljs-built_in">test</span> --describe --zookeeper zk01:2181</span><br></code></pre></td></tr></table></figure><h3 id="困难记录"><a href="#困难记录" class="headerlink" title="困难记录"></a>困难记录</h3><p>运行bin&#x2F;kafka-console-producer.sh –broker-list cor3:9092 –topic first发送消息时</p><p>错误:ERROR Error when sending message to topic first with key: null, value: 0 bytes with error: (org.apache.kafka.clients.producer.internals.ErrorLoggingCallback)<br>org.apache.kafka.common.errors.TimeoutException: Expiring 2 record(s) for first-0: 1625 ms has passed since batch creation plus linger time</p><p>解决办法:</p><p>修改配置文件中 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">listeners=PLAINTEXT://192.168.1.11:9092<br></code></pre></td></tr></table></figure><p>运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">bin/kafka-console-producer.sh --broker-list 192.168.1.11:9092 --topic first<br></code></pre></td></tr></table></figure><p>参考blog <a href="https://blog.csdn.net/lvbinibnsb/article/details/81542893">https://blog.csdn.net/lvbinibnsb/article/details/81542893</a></p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Matlab和R矩阵运算命令汇总</title>
    <link href="/2018/09/27/2018-09-27-Matlab%E5%92%8CR%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%97%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/"/>
    <url>/2018/09/27/2018-09-27-Matlab%E5%92%8CR%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%97%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h3 id="matlab-常用命令"><a href="#matlab-常用命令" class="headerlink" title="matlab 常用命令"></a>matlab 常用命令</h3><p>矩阵创建</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs matlab">a=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>;<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]<br>b=[<span class="hljs-number">1</span>:<span class="hljs-number">1</span>:<span class="hljs-number">3</span>;<span class="hljs-number">4</span>:<span class="hljs-number">1</span>:<span class="hljs-number">6</span>;<span class="hljs-number">7</span>:<span class="hljs-number">1</span>:<span class="hljs-number">9</span>]<br>c=[<span class="hljs-built_in">linspace</span>(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>); <span class="hljs-built_in">linspace</span>(<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>); <span class="hljs-built_in">linspace</span>(<span class="hljs-number">7</span>,<span class="hljs-number">9</span>,<span class="hljs-number">3</span>)]<br></code></pre></td></tr></table></figure><p>全为1的矩阵</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-built_in">ones</span>(<span class="hljs-number">3</span>)<br><span class="hljs-built_in">ones</span>(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure><p>全为0的矩阵</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-built_in">zeros</span>(<span class="hljs-number">3</span>)<br><span class="hljs-built_in">zeros</span>(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure><p>在(0,1)区间均匀分布的随机阵</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-built_in">rand</span>(<span class="hljs-number">3</span>)<br><span class="hljs-built_in">rand</span>(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure><p>单位阵</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-built_in">eye</span>()<br></code></pre></td></tr></table></figure><p>均值为0,方差为1的标准正态分布随机矩阵</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-built_in">randn</span>(<span class="hljs-number">3</span>)<br><span class="hljs-built_in">randn</span>(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure><p>对角矩阵</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-built_in">diag</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>])<br><span class="hljs-built_in">diag</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>利用小矩阵构建大矩阵</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs matlab">e=[a;b]<br>f=[a,b]<br></code></pre></td></tr></table></figure><p>矩阵的拆分</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs matlab">a(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)<br>a(<span class="hljs-number">1</span>,:)<br>a(:,<span class="hljs-number">3</span>)<br>a(<span class="hljs-number">1</span>:<span class="hljs-number">2</span>,<span class="hljs-number">1</span>:<span class="hljs-number">2</span>)<br>a(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>:<span class="hljs-keyword">end</span>)<br>a(<span class="hljs-keyword">end</span>,<span class="hljs-keyword">end</span>)<br></code></pre></td></tr></table></figure><p>矩阵的逆</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs matlab">inv(a)<br></code></pre></td></tr></table></figure><p>行列式</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs matlab">det(a)<br></code></pre></td></tr></table></figure><p>对角线元素</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-built_in">diag</span>(a)<br><span class="hljs-built_in">diag</span>(a,<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>矩阵转置</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs matlab">a’<br></code></pre></td></tr></table></figure><p>矩阵开方</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-built_in">sqrt</span>(a)<br>a.^<span class="hljs-number">0.5</span><br></code></pre></td></tr></table></figure><p>在MATLAB中,有一种特殊的运算,因为其运算符是在有关算术运算符前面加点,所以叫点运算,如:.*、.&#x2F;、.\和.^。两矩阵进行点运算是指它们的对应元素进行相关运算,要求两矩阵的维参数相同。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs matlab">a.*b<br>a.\b<br>a./b<br>a.^<span class="hljs-number">2</span><br>a.^<span class="hljs-number">0.5</span><br></code></pre></td></tr></table></figure><p>&lt;(小于)、&lt;&#x3D;(小于或等于)、&gt;(大于)、&gt;&#x3D;(大于或等于)、&#x3D;&#x3D;(等于)、~&#x3D;(不等于)</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs matlab">a&lt;b<br>a&lt;=b<br>a&gt;b<br>a&gt;=b<br>a==b<br>a~=b<br>a&gt;<span class="hljs-number">5</span><br>a&gt;=<span class="hljs-number">5</span><br>a==<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>找出a中大于5的元素位置</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-built_in">find</span>(a&gt;<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><p>改变维数</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs matlab">a=[<span class="hljs-number">1</span>:<span class="hljs-number">12</span>]<br><span class="hljs-built_in">reshape</span>(a,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure><p>旋转90度</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-built_in">rot90</span>(b)<br></code></pre></td></tr></table></figure><p>左右翻转</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-built_in">fliplr</span>(b) ; <span class="hljs-built_in">flipdim</span>(b,<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>上下翻转</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-built_in">flipud</span>(b) ; <span class="hljs-built_in">flipdim</span>(b,<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>上三角元素</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-built_in">tril</span>(c)<br><span class="hljs-built_in">tril</span>(c,<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>下三角元素</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-built_in">triu</span>(c)<br><span class="hljs-built_in">triu</span>(c,<span class="hljs-number">-1</span>)<br></code></pre></td></tr></table></figure><p>确定矩阵的维数</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-built_in">size</span>(b)<br></code></pre></td></tr></table></figure><p>求矩阵的迹</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs matlab">trace(c)<br></code></pre></td></tr></table></figure><h3 id="R-常用命令"><a href="#R-常用命令" class="headerlink" title="R 常用命令"></a>R 常用命令</h3><p>创建矩阵</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs matlab">a=matrix(c(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>),ncol=<span class="hljs-number">2</span>,byrow=T)<br>b=matrix(c(<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>),ncol=<span class="hljs-number">2</span>,byrow=T)<br>c=matrix(c(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>),ncol=<span class="hljs-number">2</span>,byrow=F)<br>d=matrix(c(<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>),ncol=<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>矩阵线性运算</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs matlab">a+b<br>a-b<br><span class="hljs-number">2</span>*a<br><span class="hljs-number">4</span>*b<br>a*b<br></code></pre></td></tr></table></figure><p>矩阵乘法</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs matlab">a<span class="hljs-comment">%*%b</span><br>crossprod(a,b)<br>t(a)<span class="hljs-comment">%*%b</span><br></code></pre></td></tr></table></figure><p>矩阵转置</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs matlab">t(a)<br>t(b)<br></code></pre></td></tr></table></figure><p>t()作用于向量上</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs matlab">x=c(<span class="hljs-number">1</span>:<span class="hljs-number">12</span>)<br>t(x)<br>t(t(x))<br></code></pre></td></tr></table></figure><p>取方阵的对角线元素</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-built_in">diag</span>(a)<br></code></pre></td></tr></table></figure><p>求方阵的迹</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs matlab">sum(<span class="hljs-built_in">diag</span>(a))<br></code></pre></td></tr></table></figure><p>构造对角矩阵</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs matlab">c=<span class="hljs-built_in">diag</span>(c(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<br></code></pre></td></tr></table></figure><p>矩阵求逆</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs matlab">solve(a)<br></code></pre></td></tr></table></figure><p>矩阵的行列式</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs matlab">det(a)<br>det(b)<br>det(c)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MatLab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构分块查找</title>
    <link href="/2018/09/26/2018-09-26-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%86%E5%9D%97%E6%9F%A5%E6%89%BE/"/>
    <url>/2018/09/26/2018-09-26-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%86%E5%9D%97%E6%9F%A5%E6%89%BE/</url>
    
    <content type="html"><![CDATA[<p>分块查找是顺序查找和二分查找的一个折中选择。它由<code>索引表</code>和<code>块*n</code>组成</p><p>遵循这样的原则：<code>索引表</code>中存放这<code>块内最大key</code>和<code>块的内存起始地址</code>,并且索引表内key由小到大排列;每个块内的key不必有序。</p><p>块的大小决定这查询的效率。随意取会影响查询速度，后面会介绍块的最优大小如何算得。</p><p>分块查找的结构图如下图所示：</p><p><img src="https://i.loli.net/2019/07/02/5d1ab03415b6053295.jpg" alt="image"></p><p>查询的过程分为两步，先通过索引表确定key所在块，由于索引表是有序的并且数据量不会很大、所以使用顺序或者二分查找都可以。确定到块后由于块内无序，所以只能使用顺序查找。那么求得的总的平均查找长度为</p><p>$$ASL_{bs} &#x3D; L_b + L_w$$</p><p>其中,$$L_b$$为查找索引表确定所在块的平均查找长度，$$L_w$$为在块中查找元素的平均查找长度</p><p>一般情况下，为进行分块查找，可以将长度为n的表平均分为b块，每块含s个记录，则 $$b&#x3D;\lceil\frac{n}{s}\rceil$$,又假定表中每个记录的查找概率相等，则每个块查找的概率为$$\frac{1}{b}$$,块中每个记录的查找概率为 $$\frac{1}{s}$$</p><p>若用顺序查找确认所在块，则分块查找的平均查找长度为：</p><p>$$ASL_{bs} &#x3D; L_b + L_w &#x3D; \frac{1}{b}\sum_{j&#x3D;1}^b j + \frac{1}{s}\sum_{i&#x3D;1}^s i  &#x3D; \frac{b+1}{2} + \frac{s+1}{2}$$</p><p>继续推导</p><p>$$ASL_{bs} &#x3D; \frac{1}{2}\left(\frac{n}{s}+s\right)+1$$</p><p>此时的平均查找长度不仅和表长n有关，而且和每一块中的记录个数也有关，在给定n的前提下， s是可以选择的，容易证明，当s是$$\sqrt{ n }$$ 时，$$ASL_{bs}$$取最小值$$\sqrt{ n }+1$$，这个比值比顺序查找虽然快但不及二分查找。</p>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu16.04TLS安装matlab</title>
    <link href="/2018/09/25/2018-09-25-ubuntu%2016.04%E5%AE%89%E8%A3%85matlab/"/>
    <url>/2018/09/25/2018-09-25-ubuntu%2016.04%E5%AE%89%E8%A3%85matlab/</url>
    
    <content type="html"><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>先下载MATLAB2017a,<a href="https://pan.baidu.com/s/1hsVnxdE">资源在这里</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先我们在家目录下面创建一个文件夹，名字随意，你自己定，我这里就叫matlab吧</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir matlab<br></code></pre></td></tr></table></figure><p>随后我们cd到你的matlab的文件目录下，然后先把第一个iso文件挂载到ubuntu上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>sudo mount -o loop R2017a_glnxa64_dvd1.iso /home/(你的用户名)/matlab<br><br></code></pre></td></tr></table></figure><p>执行matlab目录下的install进行安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo /home/(你的用户名)/matlab/install<br></code></pre></td></tr></table></figure><p>然后就进入了安装界面,选择用秘钥进行安装，然后点击next</p><p><img src="https://i.loli.net/2019/07/02/5d1ab00971cf593987.jpg" alt="image"></p><p>选择yse,下一步</p><p><img src="https://i.loli.net/2019/07/02/5d1ab00fee40f91948.jpg" alt="image"></p><p>激活码09806-07443-53955-64350-21751-41297,安放在MATLAB文件下readme.txt</p><p><img src="https://i.loli.net/2019/07/02/5d1ab014acbd323661.jpg" alt="image"></p><p>这里因为我安装过了，所以显示的是installed,继续点击next </p><p><img src="https://i.loli.net/2019/07/02/5d1ab01d091f927096.jpg" alt="image"></p><p>然后到了60%-70%,会提示选择卸载当前的挂载点，选择第二个iso镜像，所以</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>sudo umount /home/(你的用户名)/matlab<br>  <br>sudo mount -o loop R2017a_glnxa64_dvd2.iso /home/(你的用户名)/matlab<br>  <br></code></pre></td></tr></table></figure><blockquote><p>这里第二个挂载的镜像要跟第一个挂载的位置要相同，我这里就都是matlab,然后点击继续就可以了</p></blockquote><p>安装完之后我们来进行激活</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>sudo mkdir /usr/local/MATLAB/R2017a/bin/licenses/ <br>cd /your/MATLAB/files/path   // 这里自己要根据自己实际的路径来<br>sudo cp license_standalone.lic /usr/local/MATLAB/R2017a/bin/licenses/  <br>sudo cp libmwservices.so /usr/local/MATLAB/R2017a/bin/glnxa64/<br><br></code></pre></td></tr></table></figure><p>把挂载给卸下来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo umount /home/(你的用户名)/matlab<br></code></pre></td></tr></table></figure><p>然后启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo /usr/local/MATLAB/R2017a/bin/matlab  <br></code></pre></td></tr></table></figure><p>然后会弹出激活框，然后导入matlab文件目录下选择license_standalone.lic这个文件，即可激活,如果出现liceses的权限不够,就执行下列命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo chmod 777 /usr/local/MATLAB/R2017a/bin/licenses/<br></code></pre></td></tr></table></figure><p>现在我们来建立一个的是desktop文件，方便启动～～～</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>1.cd ~/.local/share/application<br>2.sudo gedit matlab.desktop<br><br>------<br><br>然后粘贴下面字眼，无需更改，直接用<br><br>[Desktop Entry]<br>Type=Application<br>Name=Matlab<br>GenericName=Matlab 2017a<br>Comment=Matlab:The Language of Technical Computing<br>Exec=sh /usr/local/MATLAB/R2017a/bin/matlab -desktop<br>Icon=/usr/local/MATLAB/R2017a/toolbox/nnet/nnresource/icons/matlab.png<br>StartupNotify=true<br>Terminal=false<br>Categories=Development;Matlab;<br><br></code></pre></td></tr></table></figure><p>然后在Dash里找到Matlab，把他拖拽到启动栏上，拖拽后的样子请看第一幅图 </p><p><img src="https://i.loli.net/2019/07/02/5d1ab023402f854344.jpg" alt="image"></p><p>点击图标启动发现有报错 </p><p><img src="https://i.loli.net/2019/07/02/5d1ab030bc81556666.jpg" alt="image"></p><p>然后我们根据报错信息提示说在家目录下的.matlab下的文件没有权限,于是</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ~/.matlab<br>chmod 777 R2017a<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MatLab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构二分查找</title>
    <link href="/2018/09/19/2018-09-19-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    <url>/2018/09/19/2018-09-19-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
    
    <content type="html"><![CDATA[<p>对顺序查找法、二分查找法和分块查找做系统学习。用的书是<code>严老师</code>(严薇敏)的C语言版，使用scala重新编写了一下。语法稍微不同思路是一样的。</p><h3 id="二分查找实现与演算"><a href="#二分查找实现与演算" class="headerlink" title="二分查找实现与演算"></a>二分查找实现与演算</h3><p>二分查找的一个前提是必须保证序列有序，假如一个无序的序列想要使用二分查找，实际上速度并不一定比顺序查找要快，因为在进行二分查找之前，需要经过排序，而排序往往消耗的时间页是巨大的。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">binary</span></span>(arr : <span class="hljs-type">Array</span>[<span class="hljs-type">Int</span>],elem : <span class="hljs-type">Int</span>) : <span class="hljs-type">Int</span> = &#123;<br>    <span class="hljs-keyword">var</span> low = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">var</span> hight = arr.length;<br>    <span class="hljs-keyword">while</span> (low &lt;= hight)&#123;<br>        <span class="hljs-keyword">var</span> mid = ( low + hight ) / <span class="hljs-number">2</span><br>        <span class="hljs-keyword">if</span>(arr(mid) == elem)&#123;<br>            <span class="hljs-keyword">return</span> mid<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(arr(mid) &gt; elem)&#123;<br>            hight = mid - <span class="hljs-number">1</span><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            low = mid - <span class="hljs-number">1</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这个算法需要注意的是，循环执行的条件是<code>low&lt;=hight</code>,而不是<code>low&lt;hight</code>,因为在<code>low&lt;hight</code>时，查找区间还有最后一个结点，还要进行一步比较。</p><p>算法演算过程如下图:</p><p><img src="https://i.loli.net/2019/06/30/5d18576618ed830874.jpg" alt="image"></p><p>假如key&#x3D;21可以看到第一次先和56比，发现key&lt;57，接着和19比,发现key&gt;19以此类推最终找到21。</p><hr><h3 id="时间复杂度计算"><a href="#时间复杂度计算" class="headerlink" title="时间复杂度计算"></a>时间复杂度计算</h3><p>其实我们可以把查找的过程映射成<code>决策树</code>，事情就会变得更加有趣。</p><p>首先我们需要知道什么是满二叉数,像下图中的<code>(a)</code></p><p><img src="https://i.loli.net/2019/06/30/5d1857672a81223879.jpg" alt="image"></p><p>我们遵循一个规律树的左子树都比根节点小，树的右子树都比根大。遵循这个策略有序序列映射后就会变成下面的样子</p><p><img src="https://i.loli.net/2019/06/30/5d185767bde8396074.jpg" alt="image"></p><p>对照这树，我们可以发现，第一层的我们最多只用比一次就可以找到对应的值，第二层的节点想要找到得比两次，第三层的节点想要找到得比三次,第四层的节点想要找到就得比四次。因为我们遵循着<code>左小右大的原则</code>,假设每个节点找到的概率都想等，那么平均寻找长度我们就可以计算出来</p><p>$$ALS&#x3D;\frac{1}{11} \left( 1+2<em>2+3</em>4+4*4 \right) &#x3D; 3$$</p><p>好了!11个节点的有序序列利用二分查找法的平均寻找长度我们算出来是3。那么思考一个问题：对于n个结点的有序序列，如何求出它的平均寻找长度？</p><p>对于这个问题我们需要一些基础知识，满二叉数的结点数总数 $$\left( s \right) $$ 与深度$$\left( h \right) $$ 存在这这样的公式</p><p>$$s&#x3D;2^h-1$$</p><p>满二叉数的<code>第n层</code>的节点总数 $$\left( n \right) $$ 与深度$$\left( h \right) $$ 存在这这样的公式</p><p>$$n&#x3D;2^{h-1}$$</p><p>上面的公式还可以转换成这样的形式</p><p>$$h &#x3D; \lfloor\log_2 n\rfloor + 1$$</p><p>对于n个节点的有序序列，映射到满二叉树上以后，第一层的我们最多只用比一次就可以找到对应的值，第二层得比两次,第三层得比三次…第n层就得比$$h\cdot2^{h-1}$$次(<code>提示:等比数列通向式</code>)，假设每个节点找到的概率都想等，则平均寻找长度为</p><p>$$ALS&#x3D;\frac{1}{n}\left(1+2<em>2+3</em>3+ \cdots + \left( h-1 \right) * 2^{h-2} + h * 2^{h-1} \right)$$</p><p>继续推导</p><p>$$ALS&#x3D;\frac{1}{n} \sum_{j&#x3D;1}^h\ j\cdot2^{j-1}$$</p><p>继续推导</p><p>$$ALS&#x3D;\frac{n+1}{n} \log_2 \left(n+1\right) - 1$$</p><p>当n较大时，有下面近似值</p><p>$$ALS&#x3D;\log_2 \left(n+1\right) - 1$$</p><p>则二分查找的时间复杂度为$$\omicron \left( \log_2 n \right)$$</p><p>借助下面的图形可以看出二分查找的效率要比顺序查找的效率高的多，当n&gt;0并趋向于无穷时，效果会越来越明显。</p><p><img src="https://i.loli.net/2019/06/30/5d185768910ca42426.jpg" alt="image"></p><p>分块查找见下一节</p>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数据结构顺序查找</title>
    <link href="/2018/09/18/2018-09-18-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%A1%BA%E5%BA%8F%E6%9F%A5%E6%89%BE/"/>
    <url>/2018/09/18/2018-09-18-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%A1%BA%E5%BA%8F%E6%9F%A5%E6%89%BE/</url>
    
    <content type="html"><![CDATA[<p>对顺序查找法、二分查找法和分块查找做系统学习。用的书是<code>严老师</code>(严薇敏)的C语言版，使用scala重新编写了一下。语法稍微不同思路是一样的。</p><h3 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h3><p>说起顺序查找，大家肯定都觉得再熟悉不过了，不过这里面还是有一些需要注意的,假如以前你一直写<code>无哨兵</code>的顺序查找，那你就out了,因为带哨兵的顺序查找能为你省掉将近一半的时间;下面是对两种实现方法以及原理进行说明。</p><h5 id="无哨兵"><a href="#无哨兵" class="headerlink" title="无哨兵"></a>无哨兵</h5><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">search</span></span>(arr : <span class="hljs-type">Array</span>[<span class="hljs-type">Int</span>] ,elem : <span class="hljs-type">Int</span>):<span class="hljs-type">Int</span> = &#123;<br>    <span class="hljs-keyword">var</span> index = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span> ((x,i) &lt;- arr.view.zipWithIndex)<br>        <span class="hljs-keyword">if</span>(x == elem) index = i<br>    index<br>&#125;<br></code></pre></td></tr></table></figure><p>思路很清晰，遍历所有数据一个一个比,如果发现匹配就返回对应下标。</p><h5 id="有哨兵"><a href="#有哨兵" class="headerlink" title="有哨兵"></a>有哨兵</h5><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">searchSentry</span></span>(arr : <span class="hljs-type">Array</span>[<span class="hljs-type">Int</span>] ,elem : <span class="hljs-type">Int</span>,n : <span class="hljs-type">Int</span>):<span class="hljs-type">Int</span> = &#123;<br>    <span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">if</span>(arr(n) != elem)<br>        arr(n) = elem<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> n<br>    <span class="hljs-keyword">while</span>(arr(i) != elem)<br>        i += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span>(i &lt; n) <span class="hljs-keyword">return</span> i <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>&#125;<br></code></pre></td></tr></table></figure><p>带哨兵的乍一看貌似与无哨兵的没什么区别，然而实践证明，这个改进在length大于1000时，进行查询的时间会减少将近一半。原理是通过监视哨，省去了每次遍历都去检测是否查询完毕的时间。</p><h5 id="时间复杂度计算"><a href="#时间复杂度计算" class="headerlink" title="时间复杂度计算"></a>时间复杂度计算</h5><p>平均查找长度的计算公式</p><p>$$ASL&#x3D;\sum_{i&#x3D;1}^n\ P_iC_i$$</p><p>从顺序表的查找过程可见，$$C_i$$取决于元素在表中的位置，假如查找第一个记录时，只需要查一次，第n个记录时则需要查n次。</p><p>这边假设每个元素查找概率相等，则</p><p>$$P_i&#x3D;\frac{1}{n}$$</p><p>继续推导</p><p>$$ASL&#x3D;\frac{1}{n}\sum_{i&#x3D;1}^n\ i&#x3D;\frac{1+n}{2}$$</p><p>则顺序查找的平均算法复杂度为$$\omicron \left( n \right)$$</p><p>如果有疑惑可以看<a href="http://book.knowsky.com/book_1030305.htm">Data Structure (2nd Edition) 7.2.1</a><a href="http://book.knowsky.com/book_1030305.htm">http://book.knowsky.com/book_1030305.htm</a></p><p>二分查找看下一篇</p>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>R安装及语言矩阵运算</title>
    <link href="/2018/09/16/2018-09-16-R%E5%AE%89%E8%A3%85%E5%8F%8A%E8%AF%AD%E8%A8%80%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%97/"/>
    <url>/2018/09/16/2018-09-16-R%E5%AE%89%E8%A3%85%E5%8F%8A%E8%AF%AD%E8%A8%80%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<p>Ubuntu16.04上安装R及RStudio,进行矩阵运算</p><h3 id="安装R"><a href="#安装R" class="headerlink" title="安装R"></a>安装R</h3><p>添加镜像源,将源添加到<code>/etc/apt/sources.list</code>，注意Ubuntu版本（本人Ubuntu版本是xenial，即16.04。根据版本改变对应的名字。）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Ctrl+Alt+T打开终端</span><br>sudo echo &quot;deb http://cran.rstudio.com/bin/linux/ubuntu xenial/&quot; | sudo tee -a /etc/apt/sources.list<br></code></pre></td></tr></table></figure><p>下载公钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">gpg --keyserver keyserver.ubuntu.com --recv-key 51716619E084DAB9<br>gpg -a --export 51716619E084DAB9 | sudo apt-key add -<br></code></pre></td></tr></table></figure><p>安装r-base</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get update<br>sudo apt-get install r-base r-base-dev<br></code></pre></td></tr></table></figure><p>验证安装是否成功：打开终端，输入“R”，出现R的信息则安装成功。如： </p><p><img src="https://i.loli.net/2019/07/02/5d1aafdc4637a90044.jpg" alt="image"></p><h3 id="安装RStudio"><a href="#安装RStudio" class="headerlink" title="安装RStudio"></a>安装RStudio</h3><p>直接从<a href="https://www.rstudio.com/">RStudio官网</a>下载所需要的版本。（本人下载的RStudio 1.1.456 - Ubuntu 16.04+&#x2F;Debian 9+ (64-bit)）</p><p>第一次没翻墙下不了，翻墙后完美解决。</p><p><img src="https://i.loli.net/2019/07/02/5d1aafe1f0d9c63799.jpg" alt="image"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install gdebi-core<br>sudo gdebi rstudio-xenial-1.1.456-amd64.deb<br>rm rstudio-xenial-1.1.456-amd64.deb<br></code></pre></td></tr></table></figure><p>若安装成功，打开应用程序，会看到R和RStudio的图标。</p><p><img src="https://i.loli.net/2019/07/02/5d1aafe94cbce98104.jpg" alt="image"></p><p>RStudio界面： </p><p><img src="https://i.loli.net/2019/07/02/5d1aaff21737879495.jpg" alt="image"></p><h3 id="简单的矩阵运算"><a href="#简单的矩阵运算" class="headerlink" title="简单的矩阵运算"></a>简单的矩阵运算</h3><p>对于三个矩阵</p><p>$$<br> A&#x3D;\left{<br> \begin{matrix}<br>   1 &amp; 2 \<br>   3 &amp; 4 \<br>   5 &amp; 6<br>  \end{matrix}<br>  \right}<br>  ,<br>  B&#x3D;\left{<br> \begin{matrix}<br>   5 &amp; 7 &amp; 8 \<br>   6 &amp; 2 &amp; 1<br>  \end{matrix}<br>  \right}<br>  ,<br>  C&#x3D;\left{<br> \begin{matrix}<br>   5 &amp; 7 \<br>   2 &amp; 4<br>  \end{matrix}<br>  \right}<br>$$</p><p>求 <code>BA</code>和<code>BA+C</code></p><p>使用R进行计算</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-operator">&gt;</span>a<span class="hljs-operator">=</span>matrix<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span><span class="hljs-number">6</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>ncol<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span>byrow<span class="hljs-operator">=</span><span class="hljs-built_in">T</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span>b<span class="hljs-operator">=</span>matrix<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span><span class="hljs-number">7</span><span class="hljs-punctuation">,</span><span class="hljs-number">8</span><span class="hljs-punctuation">,</span><span class="hljs-number">6</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>ncol<span class="hljs-operator">=</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span>byrow<span class="hljs-operator">=</span><span class="hljs-built_in">T</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span><span class="hljs-built_in">c</span><span class="hljs-operator">=</span>matrix<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span><span class="hljs-number">7</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>ncol<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span>byrow<span class="hljs-operator">=</span><span class="hljs-built_in">T</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&gt;</span> b<span class="hljs-operator">%*%</span>a<br><span class="hljs-operator">&gt;</span> b<span class="hljs-operator">%*%</span>a<span class="hljs-operator">+</span><span class="hljs-built_in">c</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/02/5d1aaffc397bc47105.jpg" alt="image"></p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>R</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>散列表冲突解决策略</title>
    <link href="/2018/09/16/2018-09-16-%E6%95%A3%E5%88%97%E8%A1%A8%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3%E7%AD%96%E7%95%A5/"/>
    <url>/2018/09/16/2018-09-16-%E6%95%A3%E5%88%97%E8%A1%A8%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3%E7%AD%96%E7%95%A5/</url>
    
    <content type="html"><![CDATA[<p>选择一个”好”的散列函数可以在一定程度上减少冲突，但在实际应用中，很难完全避免发生冲突，所以选择一个有效的处理冲突的方法是散列法的另一个关键问题。创建散列表和查找散列表都会遇到冲突。两种情况下处理冲突的方法应该一致。下面以创建散列表为例，来说明处理冲突的方法。</p><p>处理冲突的方法可分为两类：<code>开放地址法</code>和<code>链地址法</code></p><h3 id="开放地址法"><a href="#开放地址法" class="headerlink" title="开放地址法"></a>开放地址法</h3><p>核心原理:把记录都存在散列表数组中，当某一记录关键字key的初始散列地址$$H_0&#x3D;H(key)$$发生冲突时，以$$H_0$$为基础，采取合适方法计算得到另一个地址$$H_1$$,如果$$H_1$$仍然发生冲，以$$H_1$$为基础在求一下地址$$H_2$$，若$$H_2$$仍然冲突，在求$$H_3$$以此类推。直到$$H_k$$不发生冲突为止，则$$H_k$$为该记录在表中的散列地址。</p><p>这种方法在寻找“下一个”空的散列地址时，原来的数组空间对所有的元素都是开放的。所以称为开放地址法。通常把寻找“下一个”空位的过程叫做<code>探测</code>，上述方法可用如下公式表示：</p><p>$$H_i&#x3D;(H(key)+d_i)%m\quad i&#x3D;1,2,\cdots,k(k\leq m - 1)$$</p><p>(1)线性探测法</p><p>$$d_i&#x3D;1,2,\cdots,m-1$$</p><p>这种探测方法可以将散列表假想成一个循环表，发生冲突时，从冲突地址的下一个单元顺序寻找空单元，如果到最后一个位置也没找到空单元，则回到表头开始继续查找。直到找到一个空位。就把此元素放在此空位。如果找不到空位，则说明散列表已满，需要进行溢出处理。</p><p>(2)二次探测法</p><p>$$d_i&#x3D;1^2,-1^2,2^2,-2^2,3^2,\cdots,+k^2,-k^2(k\leq\frac{m}{2})$$</p><p>结合着<code>线性探测法</code>来说，冲突时，先往右边找，如果依然冲突就从左边开始找。</p><p>(3)伪随机探测法</p><p>冲突时,$$加一个<code>随机数</code>再进行<code>模运算</code></p><p>例如，散列表的长度为11,散列函数$$H(key)&#x3D;key%11$$,假设表中已填有关键字分别为17、60、29的记录。下图，现有四个记录，其关键字为38，由散列函数得到散列地址为5,产生冲突。</p><p>若用线性探测法处理时，得到下一个地址6,仍然冲突，在求下一个地址7，还是冲突，知道散列地址为8的位置，完成探测</p><p>若用二次探测发，散列地址5冲突后，得到下一个地址6,还是冲突，再求的下一个地址是4,完成探测</p><p>若使用伪随机探测法，假设产生一的伪随机数为9,则计算下一个散列地址为$$(5+9)%11&#x3D;3$$,由于脸很好，一次就完成探测。</p><p><img src="https://i.loli.net/2019/07/02/5d1aafff0d30228038.jpg" alt="image"></p><p>从上述线性探测法的处理过程中可以看到一个现象，当表中i,i+1,i+2位置上已填有记录时，下一个散列地址为i,i+1,i+2和i+3的记录都将填入i+3的位置，这种在处理冲突过程中发生的两个第一个散列地址不同的记录争夺同一个后继散列地址的现象称作<code>二次聚集</code>（或称为<code>堆积</code>），即在处理同义词的冲突过程中又添加非同义词冲突。</p><p>可以看出上述的三种方法各有优缺点，线性探测法的优点是：只要散列表未填满，总能找到一个不发生冲突的地址。缺点是：会产生<code>二次聚集</code>现象。二次探测法的优点：可以避免<code>二次聚集</code>。缺点也很明显：不能保证一定能找到不发生冲突的地址。</p><h3 id="链地址法"><a href="#链地址法" class="headerlink" title="链地址法"></a>链地址法</h3><p>核心原理：把具有相同散列地址的记录放在同一个单链表中，称为同义词链表。有m个散列地址就有m个单链表,同时用数组$$HT[0\cdots m-1]$$存放各个链表的头指针，凡是散列表地址为i的记录都以结点方式插入到以$$HT[i]$$为头结点的单链表中。</p><p>例如 一组关键字为(68,1,14,10,23,27,79,19,20,11,55),设散列函数为$$H(key)&#x3D;key%13$$,用链表处理后的结果如下图所示：</p><p><img src="https://i.loli.net/2019/07/02/5d1ab001cdf1242530.jpg" alt="image"></p><p>参考: <a href="http://book.knowsky.com/book_1030305.htm">Data Structure (2nd Edition)</a><a href="http://book.knowsky.com/book_1030305.htm">http://book.knowsky.com/book_1030305.htm</a></p>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Redis 持久化策略</title>
    <link href="/2018/09/15/2018-09-15-Redis%E4%B8%A4%E7%A7%8D%E6%8C%81%E4%B9%85%E5%8C%96%E6%96%B9%E5%BC%8F/"/>
    <url>/2018/09/15/2018-09-15-Redis%E4%B8%A4%E7%A7%8D%E6%8C%81%E4%B9%85%E5%8C%96%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>redis虽然是一个缓存数据库，但是也提供了持久化数据的方法，主要有两种方式，<code>AOF</code>和<code>RDB</code></p><h3 id="AOF-和-RDB"><a href="#AOF-和-RDB" class="headerlink" title="AOF 和 RDB"></a>AOF 和 RDB</h3><p>AOF 记录server收到的写操作到日志文件，在server重启时通过回放这些写操作莱重建数据集。</p><p>RDB 按照一定时间间隔对数据集创建基于时间点的快照</p><h3 id="AOF-配置方法"><a href="#AOF-配置方法" class="headerlink" title="AOF 配置方法"></a>AOF 配置方法</h3><ol><li><p>修改redis.config 配置文件,找到appendonly。默认是<code>appendonly no</code>,如果要启动需要改成<code>appendonly yes</code></p></li><li><p>把appendfsync的值改成everysec</p></li></ol><table><thead><tr><th>参数</th><th>备注</th></tr></thead><tbody><tr><td>appendfsync always</td><td>每次收到写命令就立即强制写入磁盘，最慢的。</td></tr><tr><td>appendfsync everysec</td><td>每秒中强制写入磁盘一次在性能和持久化方面做的最好</td></tr><tr><td>appendfsync no</td><td>性能最好，持久化没保证</td></tr></tbody></table><h3 id="RDB-配置方法"><a href="#RDB-配置方法" class="headerlink" title="RDB 配置方法"></a>RDB 配置方法</h3><p>默认情况下，redis保存数据集快照到磁盘，名字为dump.rdb的二进制文件，可以设置让redis N 秒之内至少 M次数据改动时进行持久化。或者可以手动调用save或者bgsave命令。</p><p>例如，下面配置会让redis每60s内至少写入1000次时自动转存数据集到磁盘<br><code>save 60 1000</code></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis集群部署</title>
    <link href="/2018/09/15/2018-09-15-Redis%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/"/>
    <url>/2018/09/15/2018-09-15-Redis%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<p>redis 是一个高性能的&lt;K,V&gt;分布式缓存数据库。</p><p>参考博客<a href="http://blog.csdn.net/myrainblues/article/details/25881535">http://blog.csdn.net/myrainblues/article/details/25881535</a></p><h3 id="安装Redis3集群（3台Linux-storm1-storm2-storm3）"><a href="#安装Redis3集群（3台Linux-storm1-storm2-storm3）" class="headerlink" title="安装Redis3集群（3台Linux storm1,storm2,storm3）"></a>安装Redis3集群（3台Linux storm1,storm2,storm3）</h3><p>1.下载redis的稳定版本</p><p>下载地址<a href="http://download.redis.io/releases/">http://download.redis.io/releases/</a></p><blockquote><p>需要注意的是redis版本一定要在3.x以上，不然不支持集群</p></blockquote><p>2.上传redis到服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">for n in &#123;1..5&#125;; do scp redis-4.0.11.tar.gz zyh@cor$n:/usr/local/src/; done<br></code></pre></td></tr></table></figure><p>3.解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">tar -zxvf redis-4.0.11.tar.gz -C ./</span><br><br></code></pre></td></tr></table></figure><blockquote><p>需要注意的是在操作之前一定要保证权限正确</p></blockquote><p>4.进入到源码包中，编译并安装redis</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>cd /usr/local/src/redis-3.0.7/<br>make &amp;&amp; make install<br></code></pre></td></tr></table></figure><p>进入<code>/usr/local/bin</code> 查看安装后的结果</p><p>解释一下后续比较关键的几个命令</p><table><thead><tr><th>名称</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>redis-server</td><td>启动redis服务</td><td></td></tr><tr><td>redis-cli</td><td>启动客户端</td><td></td></tr><tr><td>redis-trib.rb</td><td>启动redis-cluster</td><td>需要ruby的支持才能用，文件存放在&#x2F;redis&#x2F;src&#x2F;目录下</td></tr></tbody></table><blockquote><p>make编译需要GCC的支持,redis-trib工具则需要ruby和gem的支持,下面说一下ruby和gem的安装</p></blockquote><p>5.安装所有依赖</p><p>安装gcc</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y install gcc<br></code></pre></td></tr></table></figure><p>安装ruby和gem</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y install ruby rubygems<br></code></pre></td></tr></table></figure><p>使用gem下载redis集群的配置脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gem install redis<br></code></pre></td></tr></table></figure><p>gem install的安装包会放在<code>/usr/lib/ruby/gems/1.8/cache</code>目录下</p><p>如果遇到redis requires Ruby version &gt;&#x3D; 2.2.2的问题解决方案:<a href="https://www.jianshu.com/p/0a5de7dc0254">https://www.jianshu.com/p/0a5de7dc0254</a></p><blockquote><p>原因是Ruby的版本太低，只要升级Ruby的版本即可。这边移除ruby 2.0.0版本，重新安装 2.3.3版本即可解决问题</p></blockquote><p>如果redis所在服务器不能上网怎么办?</p><p>比如想要将下载好的<code>redis-3.2.2.gem</code>拷贝到其他服务器，手动安装即可</p><p><code>shell cd /usr/lib/ruby/gems/1.8/cache for n in &#123;2..6&#125;; do scp redis-3.2.2.gem 192.168.0.3$n:$PWD; done </code></p><p>在需要安装的机器上执行下面命令安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gem install --local /usr/lib/ruby/gems/1.8/cache/redis-3.2.2.gem<br></code></pre></td></tr></table></figure><p>7.部署storm2和storm3</p><p>用同样的方式在其他的机器上编译安装redis</p><p>8.修改所有机器的配置文件redis.conf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs conf">port 6379 #端口<br>pidfile /var/run/redis-6379.pid <br>daemonize yes<br>cluster-enabled yes<br>appendonly yes<br>appendfsync no #AOF 策略，参考上篇博客<br>bind $&#123;host&#125;<br></code></pre></td></tr></table></figure><p>9.启动所有机器上的redis节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">redis-server /etc/redis.conf<br></code></pre></td></tr></table></figure><p>10.使用redis-trib配置redis集群</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/src/redis-4.0.11/src/<br>sudo cp /usr/local/src/redis-4.0.11/src/redis-trib.rb /usr/local/bin/<br></code></pre></td></tr></table></figure><p>检查防火墙，如果开启需要关闭</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">service iptables status<br></code></pre></td></tr></table></figure><p>使用redis-trib.rb集群构建工具启动集群</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">redis-trib.rb create --replicas 0  192.168.1.19:6379 192.168.1.20:6379 192.168.1.21:6379<br></code></pre></td></tr></table></figure><p>遇到 Can I set the above configuration? (type ‘yes’ to accept):输入yes回车即可</p><p>这边运行以后报了个错误<code>ERR Slot 0 is already busy (Redis::CommandError)</code></p><p><img src="https://i.loli.net/2019/07/02/5d1aafd7203d455027.jpg" alt="image"></p><p>原因是因为之前我已经配置过一次，再次使用就会出现<code>slot 0</code>被占用的结果，用<code>redis-cli</code> 登录到每个节点执行  <code>flushall</code>  和 <code>cluster reset</code>  就可以了。</p><p>博客:<a href="https://blog.csdn.net/xiaojin21cen/article/details/70445545">https://blog.csdn.net/xiaojin21cen/article/details/70445545</a></p><p>启动成功后:</p><p><img src="https://i.loli.net/2018/12/02/5c033cda85ac2.png" alt="snapshot.png"></p><p>11.测试</p><p>在storm1节点上set一个值，在storm2上查看值,storm1的ip 192.168.1.19 ;storm2的 ip 192.168.1.20</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">redis-cli -h storm1 -p 6379<br>set zyh zyh<br></code></pre></td></tr></table></figure><p>在storm2上查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">redis-cli -h storm2 -p 6379<br>get zyh<br></code></pre></td></tr></table></figure><p>报了错误:(error) MOVED 166 192.168.1.19:6379</p><p><img src="https://i.loli.net/2018/12/02/5c033dbda6c1c.png" alt="snapshot.png"></p><p>解决办法:在链接客户端时带上-c参数,参考<a href="https://www.oschina.net/question/1259683_2133954">https://www.oschina.net/question/1259683_2133954</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">redis-cli -c -h storm2 -p 6379<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/12/02/5c0344e7ce059.png" alt="snapshot.png"></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ArrayList 源码刨析</title>
    <link href="/2018/09/14/2018-09-14-ArrayList%E6%BA%90%E7%A0%81%E5%88%A8%E6%9E%90/"/>
    <url>/2018/09/14/2018-09-14-ArrayList%E6%BA%90%E7%A0%81%E5%88%A8%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>ArrayList是List的是一个实现，是一个顺序容器，添加的时候如果容器不够，会自动扩容，值得注意的是ArrayList是不同不得，如果想同步可以自己手动实现，也可以使用Vector。</p><p>ArrayList底层使用的是数组。在源码中可以看到<code>transient Object[] elementData;</code></p><p>被transient修饰的变量会被禁止序列化</p><h3 id="源码追踪"><a href="#源码追踪" class="headerlink" title="源码追踪"></a>源码追踪</h3><h4 id="set"><a href="#set" class="headerlink" title="set()"></a>set()</h4><p>简明直意，将element 放到index位置set(),这里需要注意的一点是<code>elementData[index] = element;</code>赋值的是引用,将element的引用给了elemntData[index]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> E <span class="hljs-title function_">set</span><span class="hljs-params">(<span class="hljs-type">int</span> index, E element)</span> &#123;<br>    <span class="hljs-comment">// 检查索引</span><br>    rangeCheck(index);<br>    <br>    <span class="hljs-type">E</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> elementData(index);<br>    elementData[index] = element;   <span class="hljs-comment">// 这里赋值的是引用</span><br>    <span class="hljs-keyword">return</span> oldValue;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h4><p>获取index位置的元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> E <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        rangeCheck(index);<br><br>        <span class="hljs-keyword">return</span> (E)elementData(index);<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="add"><a href="#add" class="headerlink" title="add()"></a>add()</h4><p>添加的方法有两种，<code>add(E e)</code>和<code>add(int index, E element)</code>，两个方法底层都是往数组中添加元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>    ensureCapacityInternal(size + <span class="hljs-number">1</span>);<br>    elementData[size++] = e;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> index, E element)</span> &#123;<br>    rangeCheckForAdd(index);<br><br>    ensureCapacityInternal(size + <span class="hljs-number">1</span>);  <span class="hljs-comment">// Increments modCount!!</span><br>    System.arraycopy(elementData, index, elementData, index + <span class="hljs-number">1</span>,<br>                        size - index);<br>    elementData[index] = element;<br>    size++;<br>&#125;<br></code></pre></td></tr></table></figure><p>在添加时如果空间不够会使用调用进行扩容， <code>grow(minCapacity)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">grow</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">oldCapacity</span> <span class="hljs-operator">=</span> elementData.length;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="hljs-number">1</span>); <span class="hljs-comment">// 拓展空间为原来的1.5倍</span><br>    <span class="hljs-keyword">if</span> (newCapacity - minCapacity &lt; <span class="hljs-number">0</span>)<br>        newCapacity = minCapacity;<br>    <span class="hljs-keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="hljs-number">0</span>)<br>        newCapacity = hugeCapacity(minCapacity);<br>    <span class="hljs-comment">// </span><br>    elementData = Arrays.copyOf(elementData, newCapacity); <span class="hljs-comment">// 拓展空间完成复制</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> E <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>    rangeCheck(index);<br><br>    modCount++;<br>    <span class="hljs-type">E</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> elementData(index);<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">numMoved</span> <span class="hljs-operator">=</span> size - index - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (numMoved &gt; <span class="hljs-number">0</span>)<br>        System.arraycopy(elementData, index+<span class="hljs-number">1</span>, elementData, index,<br>                            numMoved);<br>    elementData[--size] = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 让GC 进行垃圾回收</span><br><br>    <span class="hljs-keyword">return</span> oldValue;<br>&#125;  <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springboot 快速应用</title>
    <link href="/2018/09/09/2018-09-9-springboot%20%E5%BF%AB%E9%80%9F%E5%BA%94%E7%94%A8/"/>
    <url>/2018/09/09/2018-09-9-springboot%20%E5%BF%AB%E9%80%9F%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>整合springboot Mybatis快速应用，整理出来方便后期快速查询使用。</p><h3 id="额外功能"><a href="#额外功能" class="headerlink" title="额外功能"></a>额外功能</h3><ul><li>PageHelper 分页插件</li><li>mybatis generator 自动生成代码插件</li></ul><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h5 id="1-创建一个springboot项目："><a href="#1-创建一个springboot项目：" class="headerlink" title="1.创建一个springboot项目："></a>1.创建一个springboot项目：</h5><p><img src="https://i.loli.net/2019/06/30/5d18563e9ff2c84779.jpg" alt="image"></p><h5 id="2-创建项目的文件结构以及jdk的版本"><a href="#2-创建项目的文件结构以及jdk的版本" class="headerlink" title="2.创建项目的文件结构以及jdk的版本"></a>2.创建项目的文件结构以及jdk的版本</h5><p><img src="https://i.loli.net/2019/06/30/5d18563feac6882617.jpg" alt="image"></p><h5 id="3-选择项目所需要的依赖"><a href="#3-选择项目所需要的依赖" class="headerlink" title="3.选择项目所需要的依赖"></a>3.选择项目所需要的依赖</h5><p><img src="https://i.loli.net/2019/06/30/5d18564253ed419258.jpg" alt="image"></p><p><img src="https://i.loli.net/2019/06/30/5d1856435906992628.jpg" alt="image"></p><p>然后点击finish</p><h5 id="5-看一下文件的结构："><a href="#5-看一下文件的结构：" class="headerlink" title="5.看一下文件的结构："></a>5.看一下文件的结构：</h5><p><img src="https://i.loli.net/2019/06/30/5d1856450615220356.jpg" alt="image"></p><h5 id="6-查看一下pom-xml："><a href="#6-查看一下pom-xml：" class="headerlink" title="6.查看一下pom.xml："></a>6.查看一下pom.xml：</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.winter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springboot-mybatis-demo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>springboot-mybatis-demo<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.7<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.35<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.datatype<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-datatype-joda<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.module<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-module-parameter-names<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 分页插件 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- alibaba的druid数据库连接池 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- mybatis generator 自动生成代码插件 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">configurationFile</span>&gt;</span>$&#123;basedir&#125;/src/main/resources/generator/generatorConfig.xml<span class="hljs-tag">&lt;/<span class="hljs-name">configurationFile</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">overwrite</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">overwrite</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">verbose</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">verbose</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h5 id="7-项目不使用application-properties文件-而使用更加简洁的application-yml文件："><a href="#7-项目不使用application-properties文件-而使用更加简洁的application-yml文件：" class="headerlink" title="7.项目不使用application.properties文件 而使用更加简洁的application.yml文件："></a>7.项目不使用application.properties文件 而使用更加简洁的application.yml文件：</h5><p>将原有的resource文件夹下的application.properties文件删除，创建一个新的<code>application.yml</code>配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br><br><span class="hljs-attr">spring:</span><br>    <span class="hljs-attr">datasource:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">test</span><br>        <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://127.0.0.1:3306/depot</span><br>        <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>        <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>        <span class="hljs-comment"># 使用druid数据源</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br>        <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>        <span class="hljs-attr">filters:</span> <span class="hljs-string">stat</span><br>        <span class="hljs-attr">maxActive:</span> <span class="hljs-number">20</span><br>        <span class="hljs-attr">initialSize:</span> <span class="hljs-number">1</span><br>        <span class="hljs-attr">maxWait:</span> <span class="hljs-number">60000</span><br>        <span class="hljs-attr">minIdle:</span> <span class="hljs-number">1</span><br>        <span class="hljs-attr">timeBetweenEvictionRunsMillis:</span> <span class="hljs-number">60000</span><br>        <span class="hljs-attr">minEvictableIdleTimeMillis:</span> <span class="hljs-number">300000</span><br>        <span class="hljs-attr">validationQuery:</span> <span class="hljs-string">select</span> <span class="hljs-string">&#x27;x&#x27;</span><br>        <span class="hljs-attr">testWhileIdle:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">testOnBorrow:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-attr">testOnReturn:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-attr">poolPreparedStatements:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">maxOpenPreparedStatements:</span> <span class="hljs-number">20</span><br><br><span class="hljs-comment">## 该配置节点为独立的节点，有很多同学容易将这个配置放在spring的节点下，导致配置无法被识别</span><br><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:mapping/*.xml</span>  <span class="hljs-comment">#注意：一定要对应mapper映射xml文件的所在路径</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.winter.model</span>  <span class="hljs-comment"># 注意：对应实体类的路径</span><br><br><span class="hljs-comment">#pagehelper分页插件</span><br><span class="hljs-attr">pagehelper:</span><br>    <span class="hljs-attr">helperDialect:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-attr">reasonable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">supportMethodsArguments:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">params:</span> <span class="hljs-string">count=countSql</span><br></code></pre></td></tr></table></figure><h5 id="8-创建数据库："><a href="#8-创建数据库：" class="headerlink" title="8.创建数据库："></a>8.创建数据库：</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br><span class="hljs-keyword">CREATE</span> DATABASE mytest;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_user(<br>  user_id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">PRIMARY</span> KEY AUTO_INCREMENT,<br>  user_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> ,<br>  password <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> ,<br>  phone <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>) ENGINE<span class="hljs-operator">=</span>INNODB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">1000</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br></code></pre></td></tr></table></figure><h5 id="9-使用mybatis-generator-自动生成代码："><a href="#9-使用mybatis-generator-自动生成代码：" class="headerlink" title="9.使用mybatis generator 自动生成代码："></a>9.使用mybatis generator 自动生成代码：</h5><p>配置pom.xml中generator 插件所对应的配置文件 <code>$&#123;basedir&#125;/src/main/resources/generator/generatorConfig.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">generatorConfiguration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">generatorConfiguration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 数据库驱动:选择你的本地硬盘上面的数据库驱动包--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">classPathEntry</span>  <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;E:\developer\mybatis-generator-core-1.3.2\lib\mysql-connector-java-5.1.25-bin.jar&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;DB2Tables&quot;</span>  <span class="hljs-attr">targetRuntime</span>=<span class="hljs-string">&quot;MyBatis3&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">commentGenerator</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suppressDate&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suppressAllComments&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">commentGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--数据库链接URL，用户名、密码 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdbcConnection</span> <span class="hljs-attr">driverClass</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span> <span class="hljs-attr">connectionURL</span>=<span class="hljs-string">&quot;jdbc:mysql://127.0.0.1/mytest&quot;</span> <span class="hljs-attr">userId</span>=<span class="hljs-string">&quot;root&quot;</span> <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">jdbcConnection</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaTypeResolver</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;forceBigDecimals&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaTypeResolver</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 生成模型的包名和位置--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaModelGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.winter.model&quot;</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;src/main/java&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;trimStrings&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaModelGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 生成映射文件的包名和位置--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sqlMapGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;mapping&quot;</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;src/main/resources&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">sqlMapGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 生成DAO的包名和位置--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaClientGenerator</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;XMLMAPPER&quot;</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.winter.mapper&quot;</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;src/main/java&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaClientGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 要生成的表 tableName是数据库中的表名或视图名 domainObjectName是实体类名--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;t_user&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;User&quot;</span> <span class="hljs-attr">enableCountByExample</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">enableUpdateByExample</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">enableDeleteByExample</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">enableSelectByExample</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">selectByExampleQueryId</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">generatorConfiguration</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>点击<code>run-Edit Configurations</code></p><p><img src="https://i.loli.net/2019/06/30/5d1846fe622e868658.jpg" alt="image"></p><p>添加配置</p><p><img src="https://i.loli.net/2019/06/30/5d1846ffbb00683679.jpg" alt="image"></p><p>运行 ,同一张表一定不要运行多次，因为mapper的映射文件中会生成多次的代码，导致报错</p><p><img src="https://i.loli.net/2019/06/30/5d1847004589638040.jpg" alt="image"></p><p>最后生成的文件以及结构：</p><p><img src="https://i.loli.net/2019/06/30/5d18564b76b5823657.jpg" alt="image"></p><h5 id="10-生成的文件"><a href="#10-生成的文件" class="headerlink" title="10. 生成的文件"></a>10. 生成的文件</h5><p>UserMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.winter.mapper;<br><br><span class="hljs-keyword">import</span> com.winter.model.User;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">deleteByPrimaryKey</span><span class="hljs-params">(Integer userId)</span>;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(User record)</span>;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">insertSelective</span><span class="hljs-params">(User record)</span>;<br><br>    User <span class="hljs-title function_">selectByPrimaryKey</span><span class="hljs-params">(Integer userId)</span>;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">updateByPrimaryKeySelective</span><span class="hljs-params">(User record)</span>;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">updateByPrimaryKey</span><span class="hljs-params">(User record)</span>;<br>    <span class="hljs-comment">//这个方式我自己加的</span><br>    List&lt;User&gt; <span class="hljs-title function_">selectAllUser</span><span class="hljs-params">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>User.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.winter.model;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer userId;<br><br>    <span class="hljs-keyword">private</span> String userName;<br><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-keyword">private</span> String phone;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getUserId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> userId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserId</span><span class="hljs-params">(Integer userId)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userId = userId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUserName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> userName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserName</span><span class="hljs-params">(String userName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userName = userName == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : userName.trim();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : password.trim();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPhone</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> phone;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPhone</span><span class="hljs-params">(String phone)</span> &#123;<br>        <span class="hljs-built_in">this</span>.phone = phone == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : phone.trim();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.winter.mapper.UserMapper&quot;</span> &gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.winter.model.User&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userId&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userName&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;phone&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;phone&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;Base_Column_List&quot;</span> &gt;</span><br>    user_id, user_name, password, phone<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectByPrimaryKey&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;java.lang.Integer&quot;</span> &gt;</span><br>    select <br>    <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;Base_Column_List&quot;</span> /&gt;</span><br>    from t_user<br>    where user_id = #&#123;userId,jdbcType=INTEGER&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 这个方法是我自己加的 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAllUser&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span>&gt;</span><br>    select<br>    <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;Base_Column_List&quot;</span> /&gt;</span><br>    from t_user<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteByPrimaryKey&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;java.lang.Integer&quot;</span> &gt;</span><br>    delete from t_user<br>    where user_id = #&#123;userId,jdbcType=INTEGER&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insert&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.winter.model.User&quot;</span> &gt;</span><br>    insert into t_user (user_id, user_name, password, <br>      phone)<br>    values (#&#123;userId,jdbcType=INTEGER&#125;, #&#123;userName,jdbcType=VARCHAR&#125;, #&#123;password,jdbcType=VARCHAR&#125;, <br>      #&#123;phone,jdbcType=VARCHAR&#125;)<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertSelective&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.winter.model.User&quot;</span> &gt;</span><br>    insert into t_user<br>    <span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">suffix</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">suffixOverrides</span>=<span class="hljs-string">&quot;,&quot;</span> &gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;userId != null&quot;</span> &gt;</span><br>        user_id,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;userName != null&quot;</span> &gt;</span><br>        user_name,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;password != null&quot;</span> &gt;</span><br>        password,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;phone != null&quot;</span> &gt;</span><br>        phone,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;values (&quot;</span> <span class="hljs-attr">suffix</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">suffixOverrides</span>=<span class="hljs-string">&quot;,&quot;</span> &gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;userId != null&quot;</span> &gt;</span><br>        #&#123;userId,jdbcType=INTEGER&#125;,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;userName != null&quot;</span> &gt;</span><br>        #&#123;userName,jdbcType=VARCHAR&#125;,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;password != null&quot;</span> &gt;</span><br>        #&#123;password,jdbcType=VARCHAR&#125;,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;phone != null&quot;</span> &gt;</span><br>        #&#123;phone,jdbcType=VARCHAR&#125;,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateByPrimaryKeySelective&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.winter.model.User&quot;</span> &gt;</span><br>    update t_user<br>    <span class="hljs-tag">&lt;<span class="hljs-name">set</span> &gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;userName != null&quot;</span> &gt;</span><br>        user_name = #&#123;userName,jdbcType=VARCHAR&#125;,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;password != null&quot;</span> &gt;</span><br>        password = #&#123;password,jdbcType=VARCHAR&#125;,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;phone != null&quot;</span> &gt;</span><br>        phone = #&#123;phone,jdbcType=VARCHAR&#125;,<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>    where user_id = #&#123;userId,jdbcType=INTEGER&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateByPrimaryKey&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.winter.model.User&quot;</span> &gt;</span><br>    update t_user<br>    set user_name = #&#123;userName,jdbcType=VARCHAR&#125;,<br>      password = #&#123;password,jdbcType=VARCHAR&#125;,<br>      phone = #&#123;phone,jdbcType=VARCHAR&#125;<br>    where user_id = #&#123;userId,jdbcType=INTEGER&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="11-打开类SpringbootMybatisDemoApplication-java，这个是springboot的启动类。我们需要添加点东西："><a href="#11-打开类SpringbootMybatisDemoApplication-java，这个是springboot的启动类。我们需要添加点东西：" class="headerlink" title="11.打开类SpringbootMybatisDemoApplication.java，这个是springboot的启动类。我们需要添加点东西："></a>11.打开类SpringbootMybatisDemoApplication.java，这个是springboot的启动类。我们需要添加点东西：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> com.winter;<br><br><span class="hljs-keyword">import</span> org.mybatis.spring.annotation.MapperScan;<br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@MapperScan(&quot;com.winter.mapper&quot;)</span><span class="hljs-comment">//将项目中对应的mapper类的路径加进来就可以了</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootMybatisDemoApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(SpringbootMybatisDemoApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：一定要记得加<code>@MapperScan</code></p><h5 id="12-到这里所有的搭建工作都完成了，接下来就是测试的工作，没使用junit4进行测试："><a href="#12-到这里所有的搭建工作都完成了，接下来就是测试的工作，没使用junit4进行测试：" class="headerlink" title="12.到这里所有的搭建工作都完成了，接下来就是测试的工作，没使用junit4进行测试："></a>12.到这里所有的搭建工作都完成了，接下来就是测试的工作，没使用junit4进行测试：</h5><p>首先看一下完成之后的文件的结构</p><p><img src="https://i.loli.net/2019/06/30/5d18564c38af680618.jpg" alt="image"></p><p>编写UserController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.winter.Controller;<br><br><span class="hljs-keyword">import</span> com.winter.model.User;<br><span class="hljs-keyword">import</span> com.winter.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by Administrator on 2017/8/16.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/add&quot;, produces = &#123;&quot;application/json;charset=UTF-8&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">(User user)</span>&#123;<br>        <span class="hljs-keyword">return</span> userService.addUser(user);<br>    &#125;<br><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/all/&#123;pageNum&#125;/&#123;pageSize&#125;&quot;, produces = &#123;&quot;application/json;charset=UTF-8&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">findAllUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;pageNum&quot;)</span> <span class="hljs-type">int</span> pageNum, <span class="hljs-meta">@PathVariable(&quot;pageSize&quot;)</span> <span class="hljs-type">int</span> pageSize)</span>&#123;<br><br>        <span class="hljs-keyword">return</span> userService.findAllUser(pageNum,pageSize);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>编写UserService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.winter.service;<br><br><span class="hljs-keyword">import</span> com.winter.model.User;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by Administrator on 2017/8/16.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">(User user)</span>;<br><br>    List&lt;User&gt; <span class="hljs-title function_">findAllUser</span><span class="hljs-params">(<span class="hljs-type">int</span> pageNum, <span class="hljs-type">int</span> pageSize)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写UserServiceImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.winter.service.impl;<br><br><span class="hljs-keyword">import</span> com.github.pagehelper.PageHelper;<br><span class="hljs-keyword">import</span> com.winter.mapper.UserMapper;<br><span class="hljs-keyword">import</span> com.winter.model.User;<br><span class="hljs-keyword">import</span> com.winter.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by Administrator on 2017/8/16.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service(value = &quot;userService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<span class="hljs-comment">//这里会报错，但是并不会影响</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">(User user)</span> &#123;<br><br>        <span class="hljs-keyword">return</span> userMapper.insertSelective(user);<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 这个方法中用到了我们开头配置依赖的分页插件pagehelper</span><br><span class="hljs-comment">    * 很简单，只需要在service层传入参数，然后将参数传递给一个插件的一个静态方法即可；</span><br><span class="hljs-comment">    * pageNum 开始页数</span><br><span class="hljs-comment">    * pageSize 每页显示的数据条数</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">findAllUser</span><span class="hljs-params">(<span class="hljs-type">int</span> pageNum, <span class="hljs-type">int</span> pageSize)</span> &#123;<br>        <span class="hljs-comment">//将参数传给这个方法就可以实现物理分页了，非常简单。</span><br>        PageHelper.startPage(pageNum, pageSize);<br>        <span class="hljs-keyword">return</span> userMapper.selectAllUser();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="13-运行main方法使用postman测试"><a href="#13-运行main方法使用postman测试" class="headerlink" title="13.运行main方法使用postman测试"></a>13.运行main方法使用postman测试</h5><p>添加用户</p><p><img src="https://i.loli.net/2019/06/30/5d18564dc501813322.jpg" alt="image"></p><p>查询接口不做演示</p><p>访问<code>localhost:8080/user/all/1/2</code></p><p>至此springboot 整合mybatis就完成了。</p><p>感谢博主的分享,<a href="https://blog.csdn.net/winter_chen001/article/details/77249029">传送门</a></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springboot集成redis</title>
    <link href="/2018/09/09/2018-09-9-springboot%20%E9%9B%86%E6%88%90redis/"/>
    <url>/2018/09/09/2018-09-9-springboot%20%E9%9B%86%E6%88%90redis/</url>
    
    <content type="html"><![CDATA[<p>整合redis到springboot</p><h4 id="1-在pom中配置redis的相关依赖包："><a href="#1-在pom中配置redis的相关依赖包：" class="headerlink" title="1.在pom中配置redis的相关依赖包："></a>1.在pom中配置redis的相关依赖包：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.8.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h4 id="2-application-yml"><a href="#2-application-yml" class="headerlink" title="2.application.yml"></a>2.application.yml</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>    <span class="hljs-attr">redis:</span><br>        <span class="hljs-attr">host:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>        <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>        <span class="hljs-attr">password:</span> <span class="hljs-string">pass1234</span><br>        <span class="hljs-attr">pool:</span><br>            <span class="hljs-attr">max-active:</span> <span class="hljs-number">100</span><br>            <span class="hljs-attr">max-idle:</span> <span class="hljs-number">10</span><br>            <span class="hljs-attr">max-wait:</span> <span class="hljs-number">100000</span><br>        <span class="hljs-attr">timeout:</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h4 id="3-编写RedisConfig-java"><a href="#3-编写RedisConfig-java" class="headerlink" title="3. 编写RedisConfig.java"></a>3. 编写RedisConfig.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableAutoConfiguration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.redis.pool&quot;)</span><br>    <span class="hljs-keyword">public</span> JedisPoolConfig <span class="hljs-title function_">getRedisConfig</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">JedisPoolConfig</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPoolConfig</span>();<br>        <span class="hljs-keyword">return</span> config;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.redis&quot;)</span><br>    <span class="hljs-keyword">public</span> JedisConnectionFactory <span class="hljs-title function_">getConnectionFactory</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">JedisConnectionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisConnectionFactory</span>();<br>        factory.setUsePool(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">JedisPoolConfig</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> getRedisConfig();<br>        factory.setPoolConfig(config);<br>        <span class="hljs-keyword">return</span> factory;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;?, ?&gt; getRedisTemplate() &#123;<br>        <span class="hljs-type">JedisConnectionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> getConnectionFactory();<br>        RedisTemplate&lt;?, ?&gt; template = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisTemplate</span>(factory);<br>        <span class="hljs-keyword">return</span> template;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="4-RedisService-java"><a href="#4-RedisService-java" class="headerlink" title="4.RedisService.java"></a>4.RedisService.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">RedisService</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * set存数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">set</span><span class="hljs-params">(String key, String value)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * get获取数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    String <span class="hljs-title function_">get</span><span class="hljs-params">(String key)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置有效天数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> expire</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">expire</span><span class="hljs-params">(String key, <span class="hljs-type">long</span> expire)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 移除数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(String key)</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="5-RedisServiceImpl-java"><a href="#5-RedisServiceImpl-java" class="headerlink" title="5.RedisServiceImpl.java"></a>5.RedisServiceImpl.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@Service(&quot;redisService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RedisService</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RedisTemplate&lt;String, ?&gt; redisTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">set</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key, <span class="hljs-keyword">final</span> String value)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> redisTemplate.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisCallback</span>&lt;Boolean&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">doInRedis</span><span class="hljs-params">(RedisConnection connection)</span> <span class="hljs-keyword">throws</span> DataAccessException &#123;<br>                RedisSerializer&lt;String&gt; serializer = redisTemplate.getStringSerializer();<br>                connection.set(serializer.serialize(key), serializer.serialize(value));<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> redisTemplate.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisCallback</span>&lt;String&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> String <span class="hljs-title function_">doInRedis</span><span class="hljs-params">(RedisConnection connection)</span> <span class="hljs-keyword">throws</span> DataAccessException &#123;<br>                RedisSerializer&lt;String&gt; serializer = redisTemplate.getStringSerializer();<br>                <span class="hljs-type">byte</span>[] value = connection.get(serializer.serialize(key));<br>                <span class="hljs-keyword">return</span> serializer.deserialize(value);<br>            &#125;<br>        &#125;);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">expire</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key, <span class="hljs-type">long</span> expire)</span> &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.expire(key, expire, TimeUnit.SECONDS);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> redisTemplate.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisCallback</span>&lt;Boolean&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">doInRedis</span><span class="hljs-params">(RedisConnection connection)</span> <span class="hljs-keyword">throws</span> DataAccessException &#123;<br>                RedisSerializer&lt;String&gt; serializer = redisTemplate.getStringSerializer();<br>                connection.del(key.getBytes());<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>influxdb使用及总结</title>
    <link href="/2018/09/06/2018-09-06-influxdb%E5%B0%8F%E7%BB%93/"/>
    <url>/2018/09/06/2018-09-06-influxdb%E5%B0%8F%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>方便以后查询，做一个简单总结</p><h3 id="增相关"><a href="#增相关" class="headerlink" title="增相关"></a>增相关</h3><p>CLI终端下插入数据<code>insert weather,altitude=1000,area=北 temperature=11,humidity=-4</code></p><p>以http形式插入数据<code>curl -i -XPOST &#39;http://localhost:8086/write?db=testDB&#39; --data-binary &#39;weather,altitude=1000,area=北 temperature=11,humidity=-4&#39;</code></p><h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><p>CLI终端下查询<code>SELECT * FROM weather ORDER BY time DESC LIMIT 3</code></p><p>以http形式查询<code>curl -G &#39;http://localhost:8086/query?pretty=true&#39; --data-urlencode &quot;db=testDB&quot; --data-urlencode &quot;q=SELECT * FROM weather ORDER BY time DESC LIMIT 3&quot;</code></p><h3 id="库相关"><a href="#库相关" class="headerlink" title="库相关"></a>库相关</h3><p>创建数据库<code>CREATE DATABASE &quot;db_name&quot;</code></p><p>显示所有数据库<code>SHOW DATABASES</code></p><p>删除数据库<code>DROP DATABASE &quot;db_name&quot;</code></p><p><code>USE mydb</code></p><h3 id="表相关"><a href="#表相关" class="headerlink" title="表相关"></a>表相关</h3><p>显示所有表<code>SHOW MEASUREMENTS</code></p><p>创建表并插入数据<code>insert weather,altitude=1000,area=北 temperature=11,humidity=-4</code></p><p>删除表<code>DROP MEASUREMENT &quot;measurementName&quot;</code></p><h3 id="保存策略相关"><a href="#保存策略相关" class="headerlink" title="保存策略相关"></a>保存策略相关</h3><p>Points : 指的是由Tags、Fields和timestamp组成的一行数据</p><p>InfluxDB没有提供直接删除Points的方法，但是它提供了Retention Policies。<br>主要用于指定数据的保留时间：当数据超过了指定的时间之后，就会被删除。</p><p>显示testDB所有的保存策略<code>SHOW RETENTION POLICIES ON &quot;testDB&quot;</code></p><p>创建一个新的策略<code>CREATE RETENTION POLICY &quot;rp_name&quot; ON &quot;db_name&quot; DURATION 30d REPLICATION 1 DEFAULT</code></p><p>修改策略<code>ALTER RETENTION POLICY &quot;rp_name&quot; ON db_name&quot; DURATION 3w DEFAULT</code></p><p>删除策略<code>DROP RETENTION POLICY &quot;rp_name&quot; ON &quot;db_name&quot;</code></p><h3 id="连续查询"><a href="#连续查询" class="headerlink" title="连续查询"></a>连续查询</h3><p>当数据超过保存策略里指定的时间之后，就会被删除。<br>如果我们不想完全删除掉，比如做一个数据统计采样：把原先每秒的数据，存为每小时的数据，让数据占用的空间大大减少（以降低精度为代价）。<br>这就需要InfluxDB提供的：连续查询（Continuous Queries）。</p><p>显示所有的continuous query<code>SHOW CONTINUOUS QUERIES</code></p><p>使用下面命令创建一个新的 continuous queries<br>示例在testDB库中新建了一个名为 cq_30m 的连续查询，每三十分钟取一个temperature字段的平均值，加入 weather30m 表中。</p><p>continuous query<code>CREATE CONTINUOUS QUERY cq_30m ON testDB BEGIN SELECT mean(temperature) INTO weather30m FROM weather GROUP BY time(30m) </code></p><table><thead><tr><th>字段</th><th>说明</th></tr></thead><tbody><tr><td>cq_30m</td><td>连续查询的名字</td></tr><tr><td>testDB</td><td>具体的数据库名</td></tr><tr><td>mean(temperature)</td><td>算平均温度</td></tr><tr><td>weather</td><td>当前表名</td></tr><tr><td>weather30m</td><td>存新数据的表名</td></tr><tr><td>30m</td><td>时间间隔为30分钟</td></tr></tbody></table><p>删除<code>DROP CONTINUOUS QUERY &lt;cq_name&gt; ON &lt;database_name&gt;</code></p><h3 id="用户管理相关"><a href="#用户管理相关" class="headerlink" title="用户管理相关"></a>用户管理相关</h3><p>显示用户<code>SHOW USERS</code></p><p>创建用户<code>CREATE USER &quot;username&quot; WITH PASSWORD &#39;password&#39;</code></p><p>创建管理员权限的用户<code>CREATE USER &quot;username&quot; WITH PASSWORD &#39;password&#39; WITH ALL PRIVILEGES</code></p><p>删除用户<code>DROP USER &quot;username&quot;</code></p><p>感谢博主的分享，快速入门很不错<a href="https://xtutu.gitbooks.io/influxdb-handbook/content/">传送门1</a><a href="https://jasper-zhang1.gitbooks.io/influxdb/content/">传送门2</a></p><p>官方文档<a href="http://docs.influxdata.com/influxdb/v0.8/api/continuous_queries/">传送门</a></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>InfluxDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>腾讯TCaptcha滑块验证码集成</title>
    <link href="/2018/09/06/2018-09-06-%E8%85%BE%E8%AE%AFTCaptcha%E6%BB%91%E5%9D%97%E9%AA%8C%E8%AF%81%E7%A0%81%E9%9B%86%E6%88%90/"/>
    <url>/2018/09/06/2018-09-06-%E8%85%BE%E8%AE%AFTCaptcha%E6%BB%91%E5%9D%97%E9%AA%8C%E8%AF%81%E7%A0%81%E9%9B%86%E6%88%90/</url>
    
    <content type="html"><![CDATA[<p>腾讯TCaptcha滑块验证码集成，主要是因为免费。参考文档<a href="https://007.qq.com/captcha/#/gettingStart">https://007.qq.com/captcha/#/gettingStart</a></p><p><img src="https://i.loli.net/2019/06/30/5d1857709743a84132.jpg" alt="image"></p><h3 id="后台集成"><a href="#后台集成" class="headerlink" title="后台集成"></a>后台集成</h3><p>在web层登录接口中添加校验逻辑,这边关键点是<code>verifyTicket</code>方法是怎么做校验的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">ip</span> <span class="hljs-operator">=</span> AddressHelper.getIpAddr(request);<br><br><span class="hljs-keyword">if</span>(request.getMethod().toUpperCase().equals(<span class="hljs-string">&quot;POST&quot;</span>)) &#123;<br>    <span class="hljs-comment">// 验证码是否有效</span><br>    <span class="hljs-keyword">if</span> (!tCaptchaUtil.verifyTicket(ticket, randstr, ip)) &#123;<br>        apiResultEntity = PushDataUtil.setData(ConstantDefine.ApiCallResult_Code_17002, ConstantDefine.ApiCallResult_Code_17262, <span class="hljs-literal">null</span>);<br>        modelAndView.setViewName(<span class="hljs-string">&quot;redirect:&quot;</span> + loginPage);<br>        modelAndView.addObject(apiResultEntity);<br>        <span class="hljs-keyword">return</span> modelAndView;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写tcaptcha.properties</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"># TCaptcha<br>tcaptcha.appId=xxxxxxxx<br>tcaptcha.appSecret=xxxxxxxx<br></code></pre></td></tr></table></figure><p>编写TCaptchaUtil工具类在web初始化后将appid和appSecret注入到工具类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TCaptchaUtil</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LogManager.getLogger(TCaptchaUtil.class);<br><br>    <span class="hljs-keyword">private</span> String appId;<br>    <span class="hljs-keyword">private</span> String appSecret;<br>    <span class="hljs-keyword">private</span> OkHttpClient httpClient;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">VERIFY_URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://ssl.captcha.qq.com/ticket/verify?aid=%s&amp;AppSecretKey=%s&amp;Ticket=%s&amp;Randstr=%s&amp;UserIP=%s&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TCaptchaUtil</span><span class="hljs-params">(String appId, String appSecret)</span> &#123;<br>        <span class="hljs-built_in">this</span>.appId = appId;<br>        <span class="hljs-built_in">this</span>.appSecret = appSecret;<br>        <span class="hljs-built_in">this</span>.httpClient = <span class="hljs-keyword">new</span> <span class="hljs-title class_">OkHttpClient</span>();<br>    &#125;<br><br><span class="hljs-comment">// 前台会将ticket和rand传过来，后台根据这个值进行验证,验证通过返回true</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">verifyTicket</span><span class="hljs-params">(String ticket, String rand, String userIp)</span> &#123;<br>        <span class="hljs-comment">// &quot;https://ssl.captcha.qq.com/ticket/verify?aid=%s&amp;AppSecretKey=%s&amp;Ticket=%s&amp;Randstr=%s&amp;UserIP=%s&quot;;</span><br>        <span class="hljs-type">HttpUrl</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpUrl</span>.Builder()<br>                .scheme(<span class="hljs-string">&quot;https&quot;</span>)<br>                .host(<span class="hljs-string">&quot;ssl.captcha.qq.com&quot;</span>)<br>                .addPathSegment(<span class="hljs-string">&quot;ticket&quot;</span>)<br>                .addPathSegment(<span class="hljs-string">&quot;verify&quot;</span>)<br>                .addQueryParameter(<span class="hljs-string">&quot;aid&quot;</span>, <span class="hljs-built_in">this</span>.appId)<br>                .addQueryParameter(<span class="hljs-string">&quot;AppSecretKey&quot;</span>, <span class="hljs-built_in">this</span>.appSecret)<br>                .addQueryParameter(<span class="hljs-string">&quot;Ticket&quot;</span>, ticket)<br>                .addQueryParameter(<span class="hljs-string">&quot;Randstr&quot;</span>, rand)<br><span class="hljs-comment">//                .addQueryParameter(&quot;UserIP&quot;, &quot;116.231.187.102&quot;)</span><br>                .addQueryParameter(<span class="hljs-string">&quot;UserIP&quot;</span>, userIp)<br>                .build();<br>        <span class="hljs-type">Request</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>.Builder().url(url).build();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Response</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> httpClient.newCall(request).execute();<br>            <span class="hljs-keyword">if</span> (response.code() == <span class="hljs-number">200</span>) &#123;<br>                <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonResp</span> <span class="hljs-operator">=</span> JSONObject.parseObject(response.body().string());<br>                <span class="hljs-keyword">if</span> (jsonResp.getInteger(<span class="hljs-string">&quot;response&quot;</span>) == <span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    logger.info(<span class="hljs-string">&quot;腾讯验证码验证失败：&quot;</span> + response.body().string());<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                logger.info(<span class="hljs-string">&quot;腾讯验证码验证失败：&quot;</span> + response.body().string());<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            logger.catching(e);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在application.xml中配置TCaptcha</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- TCaptcha 配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.bim.bdip.cloud.home.util.TCaptchaUtil&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;tcaptcha.appId&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;tcaptcha.appSecret&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="前台集成"><a href="#前台集成" class="headerlink" title="前台集成"></a>前台集成</h3><p>前台添加js <code>&lt;script src=&quot;https://ssl.captcha.qq.com/TCaptcha.js&quot;&gt;&lt;/script&gt;</code></p><p>用户记录临时变量数据<br><code> &lt;input type=&quot;hidden&quot; name=&quot;ticket&quot; value=&quot;&quot;&gt;</code><br><code>&lt;input type=&quot;hidden&quot; name=&quot;randstr&quot; value=&quot;&quot;&gt;</code></p><p>添加登录按钮<code>&lt;button id=&quot;TencentCaptcha&quot; data-appid=&quot;xxxxxx&quot; data-cbfn=&quot;login&quot; class=&quot;am-btn-secondary&quot; type=&quot;button&quot;&gt;登录&lt;/button&gt;</code></p><p>当按下回车键是触发,并生成滑块验证码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">keyup</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)&#123;<br>    <span class="hljs-keyword">if</span>(user == <span class="hljs-string">&quot;true&quot;</span>)&#123;<br>        <span class="hljs-keyword">if</span>(event.<span class="hljs-property">keyCode</span> == <span class="hljs-number">13</span>)&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">TencentCaptcha</span>(<br>                    <span class="hljs-string">&#x27;appid&#x27;</span>,<br>                    loginCallback,<br>                    &#123;&#125;<br>            ).<span class="hljs-title function_">show</span>();<br>        &#125;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>当滑块验证码验证成功后会走回掉函数,并触发登录方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">loginCallback</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) &#123;<br>    <span class="hljs-keyword">if</span>(res.<span class="hljs-property">ret</span> === <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-title function_">login</span>(res.<span class="hljs-property">ticket</span>, res.<span class="hljs-property">randstr</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>下面是真正的登录方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">ticket, randstr</span>)&#123;<br>    $(<span class="hljs-string">&quot;#login_form input[name=&#x27;ticket&#x27;]&quot;</span>).<span class="hljs-title function_">val</span>(ticket);<br>    $(<span class="hljs-string">&quot;#login_form input[name=&#x27;randstr&#x27;]&quot;</span>).<span class="hljs-title function_">val</span>(randstr);<br>    <span class="hljs-keyword">var</span> identifier = $(<span class="hljs-string">&quot;#login_form input[name=&#x27;identifier&#x27;]&quot;</span>).<span class="hljs-title function_">val</span>().<span class="hljs-title function_">trim</span>();<br>    <span class="hljs-keyword">var</span> credential = $(<span class="hljs-string">&quot;#login_form input[name=&#x27;credential&#x27;]&quot;</span>).<span class="hljs-title function_">val</span>().<span class="hljs-title function_">trim</span>();<br><br><br>    <span class="hljs-keyword">if</span>(identifier==<span class="hljs-string">&#x27;&#x27;</span>)&#123;<br>        <span class="hljs-title class_">Dialog</span>.<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;账号不能为空!&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(credential==<span class="hljs-string">&#x27;&#x27;</span>)&#123;<br>        <span class="hljs-title class_">Dialog</span>.<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;密码不能为空!&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">var</span> loginForm = $(<span class="hljs-string">&quot;#login_form&quot;</span>);<br>    loginForm.<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;action&quot;</span>,<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath &#125;/user/login&quot;</span>);<br>    loginForm.<span class="hljs-title function_">submit</span>();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>基于Spark的网站浏览数据统计与分析</title>
    <link href="/2018/09/03/2018-09-3-%E5%9F%BA%E4%BA%8ESpark%E7%9A%84%E7%BD%91%E7%AB%99%E6%B5%8F%E8%A7%88%E6%95%B0%E6%8D%AE%E7%BB%9F%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90/"/>
    <url>/2018/09/03/2018-09-3-%E5%9F%BA%E4%BA%8ESpark%E7%9A%84%E7%BD%91%E7%AB%99%E6%B5%8F%E8%A7%88%E6%95%B0%E6%8D%AE%E7%BB%9F%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>使用spark对网站的浏览情况进行统计分析，生成数据会输出到HDFS上。这边使用的数据源文件是nginx日志。tmp.log</p><p>ngnix的access.log的格式,摘抄部分日志</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br>127.0.0.1 - - [05/Sep/2018:23:18:22 +0800] &quot;GET /4DAnalog/clashreport/delete HTTP/1.1&quot; 502 575 &quot;-&quot; &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36&quot;<br>127.0.0.1 - - [05/Sep/2018:23:18:22 +0800] &quot;GET /favicon.ico HTTP/1.1&quot; 502 575 &quot;http://localhost:8080/4DAnalog/clashreport/delete&quot; &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36&quot;<br>127.0.0.1 - - [05/Sep/2018:23:18:40 +0800] &quot;GET /4DAnalog/clashreport/find HTTP/1.1&quot; 502 575 &quot;-&quot; &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36&quot;<br>127.0.0.1 - - [05/Sep/2018:23:18:40 +0800] &quot;GET /favicon.ico HTTP/1.1&quot; 502 575 &quot;http://localhost:8080/4DAnalog/clashreport/find&quot; &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36&quot;<br>127.0.0.1 - - [05/Sep/2018:23:18:42 +0800] &quot;GET /4DAnalog/clashreport/find HTTP/1.1&quot; 502 575 &quot;-&quot; &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36&quot;<br>127.0.0.1 - - [05/Sep/2018:23:18:42 +0800] &quot;GET /favicon.ico HTTP/1.1&quot; 502 575 &quot;http://localhost:8080/4DAnalog/clashreport/find&quot; &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36&quot;<br>127.0.0.1 - - [05/Sep/2018:23:18:43 +0800] &quot;GET /4DAnalog/clashreport/find HTTP/1.1&quot; 502 575 &quot;-&quot; &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36&quot;<br>127.0.0.1 - - [05/Sep/2018:23:18:43 +0800] &quot;GET /favicon.ico HTTP/1.1&quot; 502 575 &quot;http://localhost:8080/4DAnalog/clashreport/find&quot; &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36&quot;<br>127.0.0.1 - - [05/Sep/2018:23:18:43 +0800] &quot;GET /4DAnalog/clashreport/find HTTP/1.1&quot; 502 575 &quot;-&quot; &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36&quot;<br>127.0.0.1 - - [05/Sep/2018:23:18:44 +0800] &quot;GET /favicon.ico HTTP/1.1&quot; 502 575 &quot;http://localhost:8080/4DAnalog/clashreport/find&quot; &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36&quot;<br>127.0.0.1 - - [05/Sep/2018:23:18:52 +0800] &quot;GET /4DAnalog/clashreport/delete HTTP/1.1&quot; 502 575 &quot;-&quot; &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36&quot;<br>127.0.0.1 - - [05/Sep/2018:23:18:53 +0800] &quot;GET /favicon.ico HTTP/1.1&quot; 502 575 &quot;http://localhost:8080/4DAnalog/clashreport/delete&quot; &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36&quot;<br>127.0.0.1 - - [05/Sep/2018:23:18:59 +0800] &quot;GET /4DAnalog/chat/delete HTTP/1.1&quot; 502 575 &quot;-&quot; &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36&quot;<br>127.0.0.1 - - [05/Sep/2018:23:18:59 +0800] &quot;GET /favicon.ico HTTP/1.1&quot; 502 575 &quot;http://localhost:8080/4DAnalog/chat/delete&quot; &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36&quot;<br><br></code></pre></td></tr></table></figure><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>需要提前准备好tmp.log上传到hdfs文件系统上</p><blockquote><p>hdfs dfs -put ~&#x2F;tmp.log &#x2F;urlcount&#x2F;</p></blockquote><h3 id="环境搭建及代码编写"><a href="#环境搭建及代码编写" class="headerlink" title="环境搭建及代码编写"></a>环境搭建及代码编写</h3><p>1.创建maven项目</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zonegood<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hellospark<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scala.version</span>&gt;</span>2.10.6<span class="hljs-tag">&lt;/<span class="hljs-name">scala.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scala.compat.version</span>&gt;</span>2.10<span class="hljs-tag">&lt;/<span class="hljs-name">scala.compat.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.scala-lang<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>scala-library<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;scala.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.spark<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spark-core_2.10<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.spark<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spark-streaming_2.10<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.hadoop<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hadoop-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sourceDirectory</span>&gt;</span>src/main/scala<span class="hljs-tag">&lt;/<span class="hljs-name">sourceDirectory</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">testSourceDirectory</span>&gt;</span>src/test/scala<span class="hljs-tag">&lt;/<span class="hljs-name">testSourceDirectory</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.alchim31.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>scala-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>testCompile<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">args</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">arg</span>&gt;</span>-make:transitive<span class="hljs-tag">&lt;/<span class="hljs-name">arg</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">arg</span>&gt;</span>-dependencyfile<span class="hljs-tag">&lt;/<span class="hljs-name">arg</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">arg</span>&gt;</span>$&#123;project.build.directory&#125;/.scala_dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">arg</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">args</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.18.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">useFile</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">useFile</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">disableXmlReport</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">disableXmlReport</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*Test.*<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*Suite.*<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-shade-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>shade<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">filters</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">artifact</span>&gt;</span>*:*<span class="hljs-tag">&lt;/<span class="hljs-name">artifact</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>META-INF/*.SF<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>META-INF/*.DSA<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>META-INF/*.RSA<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">filters</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">transformers</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">transformer</span> <span class="hljs-attr">implementation</span>=<span class="hljs-string">&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>com.zomegood.hellospark.WordCount<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">transformer</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">transformers</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果没有<strong>src&#x2F;main&#x2F;scala</strong>目录，需要手动创建</p><p><img src="https://i.loli.net/2019/06/30/5d18566a7ef3291604.jpg" alt="image"></p><p>2.新建伴生对象com.zomegood.UrlCount.Main.scala</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> com.zomegood.<span class="hljs-type">UrlCount</span><br><br><span class="hljs-keyword">import</span> org.apache.spark.&#123;<span class="hljs-type">SparkConf</span>, <span class="hljs-type">SparkContext</span>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * @author zyh</span><br><span class="hljs-comment">  * @create 18-9-5 下午11:32</span><br><span class="hljs-comment">  * 统计URL访问次数</span><br><span class="hljs-comment">  */</span><br><span class="hljs-class"><span class="hljs-keyword">object</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span></span>(args : <span class="hljs-type">Array</span>[<span class="hljs-type">String</span>]) : <span class="hljs-type">Unit</span> = &#123;<br>        <span class="hljs-keyword">val</span> conf = <span class="hljs-keyword">new</span> <span class="hljs-type">SparkConf</span>().setAppName(<span class="hljs-string">&quot;UrlCount&quot;</span>)<br>        <span class="hljs-keyword">val</span> sc = <span class="hljs-keyword">new</span> <span class="hljs-type">SparkContext</span>(conf)<br>        <span class="hljs-comment">// 先将nginx日志用空格符分割开，第7个位置的url，后续从新将url组合成新的Tuple(url,1)</span><br>        <span class="hljs-comment">// Array((/4DAnalog/clashreport/delete,1), (/favicon.ico,1), (/4DAnalog/clashreport/find,1), (/favicon.ico,1), (/4DAnalog/clashreport/find,1), (/favicon.ico,1), (/4DAnalog/clashreport/find,1), (/favicon.ico,1), (/4DAnalog/clashreport/find,1))</span><br>        <span class="hljs-keyword">var</span> rdd1 = sc.textFile(args(<span class="hljs-number">0</span>)).map(_.split(<span class="hljs-string">&quot; &quot;</span>)).map(arr =&gt; (arr(<span class="hljs-number">6</span>),<span class="hljs-number">1</span>));<br>        <span class="hljs-comment">// 根据Tuple 的每个key进行分组统计</span><br>        rdd1.reduceByKey(_+_).saveAsTextFile(args(<span class="hljs-number">1</span>));<br>        sc.stop()<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>3.使用maven打jar包</p><p>运行</p><blockquote><p>mvn clean package</p></blockquote><h3 id="以集群方式运行"><a href="#以集群方式运行" class="headerlink" title="以集群方式运行"></a>以集群方式运行</h3><blockquote><p>bin&#x2F;spark-submit --class com.zomegood.UrlCount.Main --master spark:&#x2F;&#x2F;cor1:7077 --executor-memory 512m --total-executor-cores 2 ..&#x2F;spark-mvn-1.0-SNAPSHOT.jar hdfs:&#x2F;&#x2F;cor1:9000&#x2F;urlcount&#x2F;tmp.log hdfs:&#x2F;&#x2F;cor1:9000&#x2F;urlcount&#x2F;out</p></blockquote><p><img src="https://i.loli.net/2019/06/30/5d18566cdf8fb26749.jpg" alt="image"></p><p>使用<strong>saveAsTextFile</strong>运行结果存到hdfs上</p><p><img src="https://i.loli.net/2019/06/30/5d185672c52e367085.jpg" alt="image"></p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spark</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spark集群搭建</title>
    <link href="/2018/08/27/2018-08-27-spark%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <url>/2018/08/27/2018-08-27-spark%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p>这边使用VM创建3台cor1、cor2、cor4虚拟机，配置好网络、关闭防火墙之类的就不多详述、到spark官网下载程序包<code>spark-1.6.1-bin-hadoop2.6</code></p><p>需要注意的是虚拟机内存不能分配的太小，不然会导致启动失败。(这边也在考虑再拓展个8G内存条了，可惜现在的内存条真的是很贵。。)</p><p>我打算在cor1上启动Master，在cor2和cor4上启动Worker。分配的内存分别为(1G,2G,2G)</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>开始之前</p><p>这边在<code>/</code>目录下事先创建一个 <code>/export/servers/</code>目录，该目录用于存放大数据相关的安装包、比如hadoop、hive、storm等等，方便管理。</p><p>同时创建一个专门的用户<code>hadoop</code>，在使用这方面东西的时候切换到该角色。</p><p>不要忘记修改 <code>/export/servers/</code> 目录的权限组</p><h3 id="1-解压"><a href="#1-解压" class="headerlink" title="1.解压"></a>1.解压</h3><p>使用下面命令解压</p><blockquote><p>$ tar -zxvf spark-1.6.1-bin-hadoop2.6.tgz -C &#x2F;export&#x2F;servers&#x2F;</p></blockquote><h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h3><p>配置<code>spark-env.sh</code>文件,在尾部追加下面代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">export JAVA_HOME=/usr/local/jdk1.8.0_161/<br>export SPARK_MASTER_IP=spark1<br>export SPARK_MASTER_PORT=7077<br></code></pre></td></tr></table></figure><p>将worker所在机器的ip写在<code>slaves</code>文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cor2<br>cor4<br></code></pre></td></tr></table></figure><h3 id="3-分发"><a href="#3-分发" class="headerlink" title="3.分发"></a>3.分发</h3><p>将配置好的spark分发到cor2、cor4机器上</p><blockquote><p>$ scp -r spark-1.6.1&#x2F; hadoop@cor2:&#x2F;export&#x2F;servers</p></blockquote><h3 id="4-运行"><a href="#4-运行" class="headerlink" title="4.运行"></a>4.运行</h3><blockquote><p>$ &#x2F;sbin&#x2F;start-all.sh</p></blockquote><p>启动后可以使用 127.0.0.1:8080访问 来访问sparkweb端</p><h3 id="5-spark-shell"><a href="#5-spark-shell" class="headerlink" title="5.spark-shell"></a>5.spark-shell</h3><p>spark为编程人员专门提供了<code>spark-shell</code>，该功能可以使开发者以终端形式编写scala，进行代码调试，十分方便</p><p>运行<code>spark-shell</code></p><blockquote><p>$ bin&#x2F;spark-shell --master spark:&#x2F;&#x2F;cor1:7077 --executor-memory 512m --total-executor-cores 2</p></blockquote><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>--master spark:&#x2F;&#x2F;cor1:7077</td><td>指定Master地址</td></tr><tr><td>--executor-memory 512m</td><td>指定每个Worker可用内存为512m</td></tr><tr><td>--total-executor-cores</td><td>指定整个集群使用cpu核数</td></tr></tbody></table><h3 id="6-写个简单的wordcount"><a href="#6-写个简单的wordcount" class="headerlink" title="6.写个简单的wordcount"></a>6.写个简单的wordcount</h3><p>启动hdfs，上传wordcount.txt到hdfs上</p><blockquote><p>$ sc.textFile(“hdfs:&#x2F;&#x2F;cor1:9000&#x2F;wordcount.txt”).flatMap(_.split(“&amp;nbsp;”)).map((_,1)).reduceByKey(_+_).saveAsTextFile(“hdfs:&#x2F;&#x2F;cor1:9000&#x2F;out”)</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spark</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>scala隐式转换应用</title>
    <link href="/2018/08/26/2018-08-26-scala%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2%E5%BA%94%E7%94%A8/"/>
    <url>/2018/08/26/2018-08-26-scala%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>隐式转换是scala的一个难点，下面几个案例用来帮助理解它。</p><p>案例一：想要增强某一个系统类的方法,比如为scala.reflect.io.File 添加一个read方法,实现类似下面的写法,</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> file = <span class="hljs-type">File</span>(filePath)<br>print(file.read())<br></code></pre></td></tr></table></figure><p>具体实现</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs scala"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RichFile</span>(<span class="hljs-params">file : <span class="hljs-type">File</span></span>) </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read</span></span>() : <span class="hljs-type">String</span> = &#123;<br><span class="hljs-type">Source</span>.formFile(file.path).mkString<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 隐式转换只能写在伴生对象中</span><br><span class="hljs-class"><span class="hljs-keyword">object</span> <span class="hljs-title">RichFile</span></span>&#123;<br><span class="hljs-keyword">implicit</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">file2RichFile</span></span>(file : <span class="hljs-type">File</span>) : <span class="hljs-type">RichFile</span> = <span class="hljs-keyword">new</span> <span class="hljs-type">RichFile</span>(file)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在另一个类的main方法中调用</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span></span>(args : <span class="hljs-type">Array</span>[<span class="hljs-type">String</span>]) : <span class="hljs-type">Unit</span> = &#123;<br><span class="hljs-keyword">import</span> <span class="hljs-type">RichFile</span>._<br>println(<span class="hljs-type">File</span>(<span class="hljs-string">&quot;/home/zyh/1.txt&quot;</span>).read())<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>案例二: 比较Person中年龄的大小 ,这里不局限Person，可以用泛型T</p><p>编写自定义的Person类</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scala"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> (<span class="hljs-params">var name:<span class="hljs-type">String</span> , var age : <span class="hljs-type">Int</span></span>)</span>&#123;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们定义一个比较的方法，如果我们写成这样，编译器是会报错的，因为编译器不知道T是什么，所有在使用&gt;的时候就会报错</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scala"><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">compare</span></span>[<span class="hljs-type">T</span>](a:<span class="hljs-type">T</span>,b:<span class="hljs-type">T</span>) = <span class="hljs-keyword">if</span>(a&gt;b) a <span class="hljs-keyword">else</span> b<br><br></code></pre></td></tr></table></figure><p>我们要想下面这样去写</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">object</span> <span class="hljs-title">ComparePerson</span></span>&#123;<br><span class="hljs-comment">// #1 比较大小</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">compare</span></span>[<span class="hljs-type">T</span>] (a:<span class="hljs-type">T</span>,b:<span class="hljs-type">T</span>) (<span class="hljs-keyword">implicit</span> order : <span class="hljs-type">T</span> =&gt; <span class="hljs-type">Ordered</span>[<span class="hljs-type">T</span>])= <span class="hljs-keyword">if</span>(a&gt;b) a <span class="hljs-keyword">else</span> b<br><br><span class="hljs-comment">// #2 只定义#1.是不能比较的，因为a,b 系统不知道是什么类型，所以 &gt; 不能使用,这边解决的方法是利用隐式转换告诉系统</span><br><span class="hljs-keyword">implicit</span> <span class="hljs-keyword">val</span> person2Ordered = (person : <span class="hljs-type">Person</span>) =&gt; <span class="hljs-keyword">new</span> <span class="hljs-type">Ordered</span>[<span class="hljs-type">Person</span>] &#123;<br><span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">compare</span></span>(that : <span class="hljs-type">Person</span>) = &#123;<br>that.age - person.age<br>&#125;<br>&#125;<br><span class="hljs-comment">// #3 还可以用下面的代码替换2,任选其一</span><br><span class="hljs-keyword">implicit</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">person2Ordered</span></span>(person : <span class="hljs-type">Person</span>) = <span class="hljs-keyword">new</span> <span class="hljs-type">Ordered</span>[<span class="hljs-type">Person</span>]&#123;<br><span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">compare</span>.....</span><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在主程序中调用<code>ComparePerson.compare(p1,p2)</code>即可,使用之前一定要引入隐式转换的方法，<code>import ComparePerson._ </code></p>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Scala</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>virtualenv搭建</title>
    <link href="/2018/08/26/2018-08-26-virtualenv%E6%90%AD%E5%BB%BA/"/>
    <url>/2018/08/26/2018-08-26-virtualenv%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p>python 虚拟环境</p><p>创建虚拟环境 <code>mkvirtualenv test</code></p><p>进入虚拟环境 <code>workon test</code></p><p>列出所有虚拟环境 <code>workon</code></p><p>离开虚拟环境 <code>deactivate</code></p><p>删除虚拟环境 <code>rmvirtualenc test</code></p>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>minecraft游戏插件开发</title>
    <link href="/2018/08/20/2018-08-20-minecraft%E6%B8%B8%E6%88%8F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    <url>/2018/08/20/2018-08-20-minecraft%E6%B8%B8%E6%88%8F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<p>本机环境：linux下的java开发minecraft游戏插件，用maven编译打jar包。</p><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>正式开发之前需要准备上面提到的以外，还需要准备服务端<a href="https://bukkit.gamepedia.com/Main_Page">下载链接</a>和客户端</p><p>游戏插件开发好以后，会使用maven打成jar包，放在 服务端的 <code>plugins</code> 目录下即可生效。</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>大致步骤:</p><ul><li>1.创建maven项目</li><li>2.修改pom.xml文件</li><li>3.下载mincecraft服务器</li><li>4.配置mincecraft服务器</li><li>5.启动mincraft客户端</li><li>6.编写第一个命令插件</li><li>7.maven打包</li></ul><h4 id="1-创建maven项目"><a href="#1-创建maven项目" class="headerlink" title="1.创建maven项目"></a>1.创建maven项目</h4><p><img src="https://i.loli.net/2019/06/30/5d1856f72e6ec81668.jpg" alt="image"></p><h4 id="2-修改pom-xml文件"><a href="#2-修改pom-xml文件" class="headerlink" title="2.修改pom.xml文件"></a>2.修改pom.xml文件</h4><p>这里用的是Bukkit的服务器，所以需要引入第三方仓库</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>spigot-repo<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://hub.spigotmc.org/nexus/content/repositories/snapshots/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接着引入开发库</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.bukkit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>bukkit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.12.2-R0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-comment">&lt;!--change this value depending on the version or use LATEST--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.spigotmc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spigot-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.12.2-R0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-comment">&lt;!--change this value depending on the version--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>使用<code>maven-assembly-plugin</code>插件打jar包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;plugin&gt;<br>&lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;<br>&lt;configuration&gt;<br>&lt;descriptorRefs&gt;<br>&lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;<br>&lt;/descriptorRefs&gt;<br>&lt;!--&lt;archive&gt;<br>&lt;manifest&gt;<br>&lt;mainClass&gt;org.bukkit.Server&lt;/mainClass&gt;<br>&lt;/manifest&gt;<br>&lt;/archive&gt;--&gt;<br>&lt;/configuration&gt;<br>&lt;executions&gt;<br>&lt;execution&gt;<br>&lt;id&gt;make-assembly&lt;/id&gt;<br>&lt;phase&gt;package&lt;/phase&gt;<br>&lt;goals&gt;<br>&lt;goal&gt;single&lt;/goal&gt;<br>&lt;/goals&gt;<br>&lt;/execution&gt;<br>&lt;/executions&gt;<br>&lt;/plugin&gt;<br></code></pre></td></tr></table></figure><h4 id="3-下载mincecraft服务器craftbukkit-1-7-2-R0-4-20140316-221310-4-jar"><a href="#3-下载mincecraft服务器craftbukkit-1-7-2-R0-4-20140316-221310-4-jar" class="headerlink" title="3.下载mincecraft服务器craftbukkit-1.7.2-R0.4-20140316.221310-4.jar"></a>3.下载mincecraft服务器craftbukkit-1.7.2-R0.4-20140316.221310-4.jar</h4><p><a href="https://getbukkit.org/">https://getbukkit.org/</a></p><h4 id="4-配置服务器"><a href="#4-配置服务器" class="headerlink" title="4.配置服务器"></a>4.配置服务器</h4><p>1.编写run.sh脚本，启动服务器</p><blockquote><p>$ touch run.sh</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>echo &quot;start bukkit server&quot;<br>java -Xms1024M -Xmx1024M -jar craftbukkit-1.7.2-R0.4-20140316.221310-4.jar<br></code></pre></td></tr></table></figure><p>修改run.sh为可执行文件</p><blockquote><p>$ chmod 777 run.sh  </p></blockquote><p>运行run.sh脚本</p><blockquote><p>$ .&#x2F;run.sh</p></blockquote><p><img src="https://i.loli.net/2019/06/30/5d1856fb51bf813866.jpg" alt="image"></p><p>启动以后会发现当前目录会生成很多文件</p><p><img src="https://i.loli.net/2019/06/30/5d1856fc6032c82786.jpg" alt="image"></p><p>2.修改服务器参数server.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#Minecraft server properties</span><br><span class="hljs-comment">#Thu Aug 16 00:01:18 CST 2018</span><br><span class="hljs-attr">generator-settings</span>=<span class="hljs-string"></span><br><span class="hljs-attr">op-permission-level</span>=<span class="hljs-string">4</span><br><span class="hljs-attr">allow-nether</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">online-model</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">level-name</span>=<span class="hljs-string">world</span><br><span class="hljs-attr">enable-query</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">allow-flight</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">announce-player-achievements</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">server-port</span>=<span class="hljs-string">25565</span><br><span class="hljs-attr">level-type</span>=<span class="hljs-string">DEFAULT</span><br><span class="hljs-attr">enable-rcon</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">force-gamemode</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">level-seed</span>=<span class="hljs-string"></span><br><span class="hljs-attr">server-ip</span>=<span class="hljs-string"></span><br><span class="hljs-attr">max-build-height</span>=<span class="hljs-string">256</span><br><span class="hljs-attr">spawn-npcs</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">white-list</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">spawn-animals</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">hardcore</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">snooper-enabled</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">online-mode</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">resource-pack</span>=<span class="hljs-string"></span><br><span class="hljs-attr">pvp</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">difficulty</span>=<span class="hljs-string">1</span><br><span class="hljs-attr">enable-command-block</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">gamemode</span>=<span class="hljs-string">0</span><br><span class="hljs-attr">player-idle-timeout</span>=<span class="hljs-string">0</span><br><span class="hljs-attr">max-players</span>=<span class="hljs-string">20</span><br><span class="hljs-attr">spawn-monsters</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">generate-structures</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">view-distance</span>=<span class="hljs-string">10</span><br><span class="hljs-attr">spawn-protection</span>=<span class="hljs-string">16</span><br><span class="hljs-attr">motd</span>=<span class="hljs-string">A Minecraft Server</span><br></code></pre></td></tr></table></figure><p>具体配置可以查看<a href="https://minecraft.gamepedia.com/Server.properties">wiki</a></p><p>重新启动服务器使其生效。</p><h4 id="5-启动mincraft客户端"><a href="#5-启动mincraft客户端" class="headerlink" title="5.启动mincraft客户端"></a>5.启动mincraft客户端</h4><p>想要启动<code>minecraft客户端</code>，需要提前准备一个启动器。</p><p><code>minecraft启动器</code>和<code>minecraft客户端</code>这篇博客<a href="https://www.linuxidc.com/Linux/2016-04/129764.htm%E6%9C%89%E4%B8%8B%E8%BD%BD%E9%93%BE%E6%8E%A5%EF%BC%8C%E4%B8%8D%E8%BF%87%E9%87%8C%E9%9D%A2%E7%9A%84%60%60minecraft%E5%AE%A2%E6%88%B7%E7%AB%AF%60%60%E5%90%AF%E5%8A%A8%E4%BC%9A%E6%8A%9B%E5%BC%82%E5%B8%B8%EF%BC%8C%E5%8F%AF%E8%83%BD%E6%98%AF%E5%9B%A0%E4%B8%BA%E6%98%AFlinux%E7%9A%84%E5%8E%9F%E5%9B%A0%EF%BC%8C%E5%9C%A8%E4%B8%8B%E8%BD%BD1.7.2%E7%9A%84%E6%97%B6%E5%80%99%E6%9F%90%E4%BA%9Bjar%E5%8C%85%E6%8D%9F%E5%9D%8F%E5%AF%BC%E8%87%B4%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E5%90%AF%E5%8A%A8,%E5%90%8E%E7%BB%AD%E9%80%9A%E8%BF%87%E6%8E%92%E6%9F%A5%E6%89%BE%E5%88%B0%E6%8D%9F%E5%9D%8F%E7%9A%84jar%EF%BC%8C%E4%BB%8E%E6%96%B0%E5%88%B0%E7%BD%91%E4%B8%8A%E4%B8%8B%E8%BD%BD%E5%AE%8C%E5%A5%BD%E7%9A%84jar%E6%89%8D%E5%BE%97%E4%BB%A5%E8%A7%A3%E5%86%B3%E3%80%82%E5%A6%82%E6%9E%9C%E4%BD%A0%E7%94%A8%E7%9A%84%E4%B9%9F%E6%98%AFlinux%EF%BC%8C%E5%8F%AF%E4%BB%A5%E8%81%94%E7%B3%BB%E6%88%91%EF%BC%8C%E4%B8%BA%E4%BD%A0%E6%8F%90%E4%BE%9B%E4%B8%80%E4%B8%AA%E5%AE%8C%E5%A5%BD%E7%89%88%E6%9C%AC%EF%BC%8C%E5%BD%93%E7%84%B6%E4%B9%9F%E5%8F%AF%E4%BB%A5%E4%BB%8E%E7%BD%91%E4%B8%8A%E6%90%9C%E4%B8%80%E4%B8%8B%EF%BC%8C%E5%BE%88%E5%A5%BD%E8%A7%A3%E5%86%B3%E7%9A%84%E3%80%82">https://www.linuxidc.com/Linux/2016-04/129764.htm有下载链接，不过里面的``minecraft客户端``启动会抛异常，可能是因为是linux的原因，在下载1.7.2的时候某些jar包损坏导致无法正常启动,后续通过排查找到损坏的jar，从新到网上下载完好的jar才得以解决。如果你用的也是linux，可以联系我，为你提供一个完好版本，当然也可以从网上搜一下，很好解决的。</a></p><p>下载好启动器和客户端以后，我们先运行启动器，同服务端一样，编写<code>run.sh</code> 脚本运行<code>minecraft启动器</code>,run.sh内容如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>echo &quot;run minecraft client on linux os...&quot;<br>java -jar HMCL-2.1.7.jar<br></code></pre></td></tr></table></figure><p>使用下面命令运行启动器</p><blockquote><p>$ .&#x2F;run.sh</p></blockquote><p><img src="https://i.loli.net/2019/06/30/5d1856fe62aef11769.jpg" alt="image"></p><p>进入游戏，选择Multiplayer开启多人游戏即可</p><p><img src="https://i.loli.net/2019/06/30/5d1857246385939797.jpg" alt="image"></p><p><img src="https://i.loli.net/2019/06/30/5d185725b548c74359.jpg" alt="image"></p><h4 id="6-编写第一个命令插件"><a href="#6-编写第一个命令插件" class="headerlink" title="6.编写第一个命令插件"></a>6.编写第一个命令插件</h4><p>这个命令暂时叫做example，当用户在游戏内输入example时，作出相应提示</p><p><img src="https://i.loli.net/2019/06/30/5d185726a66a236707.jpg" alt="image"></p><p><img src="https://i.loli.net/2019/06/30/5d185727b5ae799111.jpg" alt="image"></p><hr><p>当服务器启动以后，会加载放在plugin目录下实现JavaPlugin的类，触发它的onEnable方法</p><p>在src&#x2F;main&#x2F;java下创建FirstPlugin.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zonegood;<br><br><span class="hljs-keyword">import</span> org.bukkit.entity.Player;<br><span class="hljs-keyword">import</span> org.bukkit.plugin.java.JavaPlugin;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zyh</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FirstPlugin</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JavaPlugin</span> &#123;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onEnable</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.getLogger().info(<span class="hljs-string">&quot;FirstPlugin running...&quot;</span>);<br>        <span class="hljs-comment">// 加载CommandExample指令</span><br>        <span class="hljs-built_in">this</span>.getCommand(<span class="hljs-string">&quot;example&quot;</span>).setExecutor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CommondExample</span>());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDisable</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (Player player : getServer().getOnlinePlayers())&#123;<br>            <span class="hljs-built_in">this</span>.getLogger().info(<span class="hljs-string">&quot;disable method&quot;</span> + player.getName());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这边对指令类进行封装，指令需要实现<code>CommandExecutor</code>类，实现<code>onCommand</code>方法，当系统检测到有人发送example指令时，<code>onCommand</code>方法就会被触发，当然前提是，它必须已被注册。</p><p>在src&#x2F;main&#x2F;java&#x2F;目录下创建CommondExample.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> com.zonegood;<br><br><span class="hljs-keyword">import</span> org.bukkit.command.Command;<br><span class="hljs-keyword">import</span> org.bukkit.command.CommandExecutor;<br><span class="hljs-keyword">import</span> org.bukkit.command.CommandSender;<br><span class="hljs-keyword">import</span> org.bukkit.entity.Player;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zyh</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommondExample</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CommandExecutor</span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">commandName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;example&quot;</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onCommand</span><span class="hljs-params">(CommandSender commandSender, Command command, String s, String[] strings)</span> &#123;<br><br>        <span class="hljs-keyword">if</span>(commandName.equalsIgnoreCase(command.getName()))&#123;<br>            ((Player)commandSender).sendMessage(((Player)commandSender).getName() + <span class="hljs-string">&quot;execute example command&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在src&#x2F;resources&#x2F;目录下创建<code>plugin.yml</code>,在里面我们需要对<code>example</code>指令进行描述</p><p><code>aliases</code> 可以理解为<code>example</code>指令的昵称，在游戏内输入<code>a1</code>,<code>a2</code> 等价于输入<code>example</code></p><p>除此之外里面还有其他参数，详情参考<a href="https://bukkit.gamepedia.com/Plugin_YAML">wiki</a></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">name:</span> <span class="hljs-string">firstplugin</span><br><span class="hljs-attr">version:</span> <span class="hljs-number">1.0</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">This</span> <span class="hljs-string">plugin</span> <span class="hljs-string">is</span> <span class="hljs-string">so</span> <span class="hljs-number">31337</span><span class="hljs-string">.</span> <span class="hljs-string">You</span> <span class="hljs-string">can</span> <span class="hljs-string">set</span> <span class="hljs-string">yourself</span> <span class="hljs-string">on</span> <span class="hljs-string">fire.</span><br><span class="hljs-comment"># We could place every author in the authors list, but chose not to for illustrative purposes</span><br><span class="hljs-comment"># Also, having an author distinguishes that person as the project lead, and ensures their</span><br><span class="hljs-comment"># name is displayed first</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">Zyh</span><br><span class="hljs-attr">authors:</span> [<span class="hljs-string">zyh</span>]<br><span class="hljs-attr">website:</span> <span class="hljs-string">http://www.zonegood.com</span><br><br><span class="hljs-attr">main:</span> <span class="hljs-string">com.zonegood.FirstPlugin</span><br><br><span class="hljs-attr">commands:</span><br> <span class="hljs-attr">example:</span><br>   <span class="hljs-attr">description:</span> <span class="hljs-string">Set</span> <span class="hljs-string">yourself</span> <span class="hljs-string">on</span> <span class="hljs-string">fire.</span><br>   <span class="hljs-attr">aliases:</span> [<span class="hljs-string">a1</span>,<span class="hljs-string">a2</span>]<br>   <span class="hljs-attr">usage:</span> <span class="hljs-string">Syntax</span> <span class="hljs-string">error!</span> <span class="hljs-string">Simply</span> <span class="hljs-string">type</span> <span class="hljs-string">/&amp;lt;command&amp;gt;</span> <span class="hljs-string">to</span> <span class="hljs-string">ignite</span> <span class="hljs-string">yourself.</span><br><br></code></pre></td></tr></table></figure><p>项目的整体目录结构</p><p><img src="https://i.loli.net/2019/06/30/5d18572aacde984821.jpg" alt="image"></p><h4 id="7-maven打包"><a href="#7-maven打包" class="headerlink" title="7.maven打包"></a>7.maven打包</h4><p>下面的指令会将编写好的代码编译打包成jar，放在target目录下</p><blockquote><p>$ mvn clean package</p></blockquote><p><img src="https://i.loli.net/2019/06/30/5d18573864f8624500.jpg" alt="image"></p><p>可以看到</p><p><code>Building jar: /media/zyh/workspace/workspace/IDEA/bukiitplugin/target/bukiitplugin-1.0-SNAPSHOT.jar</code></p><p>将bukiitplugin-1.0-SNAPSHOT.jar拷贝到server&#x2F;plugins&#x2F;目录下重新启动服务器即可</p><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><p>官方开发文档：<a href="https://bukkit.gamepedia.com/Main_Page">https://bukkit.gamepedia.com/Main_Page</a></p><p><img src="https://i.loli.net/2019/06/30/5d18573aed0a023310.jpg" alt="image"></p><p>Developers一栏就是了</p>]]></content>
    
    
    <categories>
      
      <category>游戏开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Minecraft</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>maven exclusion</title>
    <link href="/2018/08/17/2018-08-17-maven%20exclusion/"/>
    <url>/2018/08/17/2018-08-17-maven%20exclusion/</url>
    
    <content type="html"><![CDATA[<h2 id="怎么使用dependency-exclusions"><a href="#怎么使用dependency-exclusions" class="headerlink" title="怎么使用dependency exclusions"></a>怎么使用dependency exclusions</h2><p>我们可以在pom.xml中的<code>&lt;dependency&gt;</code> 下添加<code>&lt;exclusions&gt;</code>,像这样</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span>&gt;</span><br>  ...<br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>sample.ProjectA<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>Project-A<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span>  <span class="hljs-comment">&lt;!-- declare the exclusion here --&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>sample.ProjectB<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>Project-B<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="dependency-exclusion-工作原理以及什么时候使用"><a href="#dependency-exclusion-工作原理以及什么时候使用" class="headerlink" title="dependency exclusion 工作原理以及什么时候使用"></a>dependency exclusion 工作原理以及什么时候使用</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml">Project-A<br>   -&gt; Project-B<br>        -&gt; Project-D &lt;! -- This dependency should be excluded --&gt;<br>              -&gt; Project-E<br>              -&gt; Project-F<br>   -&gt; Project C<br></code></pre></td></tr></table></figure><p>这个图展示了A依赖B,C B依赖D  D依赖EF,默认的项目A的 classPath 将包含</p><blockquote><p>B,C,D,E,F</p></blockquote><p>场景：我们不希望项目D被依赖到项目A的classPath中，因为我们在开发时知道项目A中的功能根本不需要项目D，这个时候项目B的开发人员可以在自己的pom.xml中提供项目的依赖性<code>&lt;optional&gt;true&lt;/optional&gt;</code>,像这样:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>sample.ProjectD<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>ProjectD<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果项目B没有这样做，作为最后手段，你可以在自己的项目中使用exclude，像这样</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>sample.ProjectA<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>Project-A<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>  ...<br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>sample.ProjectB<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>Project-B<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>sample.ProjectD<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <span class="hljs-comment">&lt;!-- Exclude Project-D from Project-B --&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>Project-D<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这个时候假如我们将项目A安装到本地仓库，project-x依赖了project-A,那么project-D仍然可以在项目X中被排出在外</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git命令汇总</title>
    <link href="/2018/08/16/2018-08-16-Git%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/"/>
    <url>/2018/08/16/2018-08-16-Git%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<p>为了方便查阅，在这边做一个小结</p><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><p><code>HEAD</code>指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>。</p><p>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本，类似的还有<code>git log --pretty=online</code>、<code>git log --graph</code></p><p>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</p><h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</p><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了场景1，第二步按场景1操作。</p><p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，执行<code>git reset --hard commit_id</code>，不过前提是没有推送到远程库。</p><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p>删除本地rm file</p><p>场景1：如果删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本 <code>git checkout -- test.txt</code></p><p>场景2：真正删除 <code>git rm file</code>删掉，并且<code>git commit</code></p><h2 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h2><p>要关联一个远程库，使用命令<code>git remote add origin git@server-name:path/repo-name.git</code></p><p>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容</p><h2 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h2><p><code>git clone</code></p><h2 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h2><p>Git鼓励大量使用分支：</p><p>查看分支：<code>git branch</code></p><p>创建分支：<code>git branch &lt;name&gt;</code></p><p>切换分支：<code>git checkout &lt;name&gt;</code></p><p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code></p><p>合并某分支到当前分支：先切换到<code>&lt;name&gt;</code>分支,然后执行<code>git merge &lt;name&gt;</code></p><p>删除分支：<code>git branch -d &lt;name&gt;</code></p><h2 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h2><p>在实际开发中，我们应该按照几个基本原则进行分支管理：</p><p>首先，<code>master</code>分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</p><p>那在哪干活呢？干活都在<code>dev</code>分支上，也就是说，<code>dev</code>分支是不稳定的，到某个时候，比如1.0版本发布时，再把<code>dev</code>分支合并到<code>master</code>上，在<code>master</code>分支发布1.0版本；</p><p>你和你的小伙伴们每个人都在<code>dev</code>分支上干活，每个人都有自己的分支，时不时地往<code>dev</code>分支上合并就可以了。</p><p>所以，团队合作的分支看起来就像这样：</p><p><img src="https://i.loli.net/2019/07/02/5d1aafc24324e46044.jpg" alt="image"></p><p>Git在做<code>merge</code>时会用<code>Fast forward</code>模式，但这种模式下，删除分支后，会丢掉分支信息，我们不想丢掉信息就需要这样做，<code>git merge --no-ff -m &quot;merge with no-ff&quot; dev</code>其中<code>--no-ff</code>参数，表示禁用<code>Fast forward</code> </p><p><img src="https://i.loli.net/2019/07/02/5d1aafc4b6e9e35886.jpg" alt="image"></p><h2 id="暂存"><a href="#暂存" class="headerlink" title="暂存"></a>暂存</h2><p>当手头工作没有完成时，先把工作现场<code>git stash</code>一下，然后去修复bug，修复后，再git stash pop，回到工作现场。可以使用<code>git stash list</code>查看已暂存的内容</p><h2 id="多人协作提交代码的流程"><a href="#多人协作提交代码的流程" class="headerlink" title="多人协作提交代码的流程"></a>多人协作提交代码的流程</h2><p>查看远程库信息，使用<code>git remote -v</code>；</p><p>本地新建的分支如果不推送到远程，对其他人就是不可见的；</p><p>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；</p><p>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</p><p>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</p><p>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</p><h2 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h2><p>在多人开发模式下，往往很容易发生冲突，有些小伙伴往远端推送以后发现莫名其妙会多一个commit，导致不能是一条干净的直线,强迫症标识根本受不了。像下图一样，这时可以使用<code>git rebase</code>解决问题</p><p><img src="https://i.loli.net/2019/07/02/5d1aafcae6c2182586.jpg" alt="image"></p><p>我们在pull时也可以加这样的参数 <code>git pull --no-commit --rebase origin master</code>来解决问题</p><p>解决后的样子</p><p><img src="https://i.loli.net/2019/07/02/5d1aafd16ba6127310.jpg" alt="image"></p><p>如果感到很疑惑这边推荐两个很不错的学习资料:<a href="https://git-scm.com/book/zh/v2">git book</a>、<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0015266568413773c73cdc8b4ab4f9aa9be10ef3078be3f000">廖雪峰的官方网站</a></p><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><p><code>git diff commit-id-1 commit-id-2 --stat</code></p><h2 id="忽略某个文件"><a href="#忽略某个文件" class="headerlink" title="忽略某个文件"></a>忽略某个文件</h2><p><code>git update-index --assume-unchanged config.xml</code></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用的maven插件</title>
    <link href="/2018/08/15/2018-08-15-maven%20plugin/"/>
    <url>/2018/08/15/2018-08-15-maven%20plugin/</url>
    
    <content type="html"><![CDATA[<h2 id="maven-compiler-plugin"><a href="#maven-compiler-plugin" class="headerlink" title="maven-compiler-plugin"></a>maven-compiler-plugin</h2><p>编译Java源码，一般只需设置编译的jdk版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.6.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><p>或者在properties设置jdk版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="maven-dependency-plugin"><a href="#maven-dependency-plugin" class="headerlink" title="maven-dependency-plugin"></a>maven-dependency-plugin</h2><p>用于复制依赖的jar包到指定的文件夹里</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>copy-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>copy-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/lib<span class="hljs-tag">&lt;/<span class="hljs-name">outputDirectory</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="maven-jar-plugin"><a href="#maven-jar-plugin" class="headerlink" title="maven-jar-plugin"></a>maven-jar-plugin</h2><p>打成jar时，设定manifest的参数，比如指定运行的Main class，还有依赖的jar包，加入classpath中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-jar-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">archive</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">manifest</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">addClasspath</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">addClasspath</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">classpathPrefix</span>&gt;</span>/data/lib<span class="hljs-tag">&lt;/<span class="hljs-name">classpathPrefix</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>com.zhang.spring.App<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">archive</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="wagon-maven-plugin"><a href="#wagon-maven-plugin" class="headerlink" title="wagon-maven-plugin"></a>wagon-maven-plugin</h2><p>用于一键部署，把本地打包的jar文件，上传到远程服务器上，并执行服务器上的shell命令</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.codehaus.mojo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>wagon-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">serverId</span>&gt;</span>crawler<span class="hljs-tag">&lt;/<span class="hljs-name">serverId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">fromDir</span>&gt;</span>target<span class="hljs-tag">&lt;/<span class="hljs-name">fromDir</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>*.jar,*.properties,*.sh<span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>sftp://59.110.162.178/home/zhangxianhe<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">commands</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">command</span>&gt;</span>chmod 755 /home/zhangxianhe/update.sh<span class="hljs-tag">&lt;/<span class="hljs-name">command</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">command</span>&gt;</span>/home/zhangxianhe/update.sh<span class="hljs-tag">&lt;/<span class="hljs-name">command</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">commands</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">displayCommandOutputs</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">displayCommandOutputs</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="tomcat7-maven-plugin"><a href="#tomcat7-maven-plugin" class="headerlink" title="tomcat7-maven-plugin"></a>tomcat7-maven-plugin</h2><p>用于远程部署Java Web项目</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://59.110.162.178:8080/manager/text<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>linjinbin<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>linjinbin<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="maven-shade-plugin"><a href="#maven-shade-plugin" class="headerlink" title="maven-shade-plugin"></a>maven-shade-plugin</h2><p>用于把多个jar包，打成1个jar包</p><p>一般Java项目都会依赖其他第三方jar包，最终打包时，希望把其他jar包包含在一个jar包里</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-shade-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>shade<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">transformers</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">transformer</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">implementation</span>=<span class="hljs-string">&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">manifestEntries</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">Main-Class</span>&gt;</span>com.meiyou.topword.App<span class="hljs-tag">&lt;/<span class="hljs-name">Main-Class</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">X-Compile-Source-JDK</span>&gt;</span>$&#123;maven.compile.source&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">X-Compile-Source-JDK</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">X-Compile-Target-JDK</span>&gt;</span>$&#123;maven.compile.target&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">X-Compile-Target-JDK</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">manifestEntries</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">transformer</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">transformers</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手写基于Akka的RPC通信框架</title>
    <link href="/2018/08/15/2018-08-15-%E5%9F%BA%E4%BA%8EAkka%20%E7%9A%84Rpc%E9%80%9A%E4%BF%A1%E6%A1%86%E6%9E%B6/"/>
    <url>/2018/08/15/2018-08-15-%E5%9F%BA%E4%BA%8EAkka%20%E7%9A%84Rpc%E9%80%9A%E4%BF%A1%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<p>spark是一个并行分布式的计算框架，其设计阶段肯定要考虑到数据的交互。那么spark是怎么进行数据交互的？Spark是用Scala编写的，今天来看一下如何使用Scala设计一个Rpc通信服务</p><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><p>akka.actor.Actor 组件它于servlet有点类似，你可以把它想象成一个servlet，它同样也有自己的生命周期,preStart会在构造函数执行以后被调用，receive会在接收到消息以后被调用</p><p>Actor中我们分出两类，一个叫Master，一个叫Worker</p><p>Master 是头头Worker是小弟，就像Yarn里面的resourceManage和nodeManage、HDFS中的NameNode和dataNode一样,无规矩不成方圆，代码里面也是一样的。</p><p>1.worker 启动后,在preStart方法中与master建立链接，向Master发送注册消息（将worker的信息通过样例类封装起来发送给master）</p><p>2.Master接收到Worker的注册消息后将worker的信息保存起来，向worker反馈注册成功</p><p>3.Worker定期要向master发送心跳(防止worker挂掉)</p><p>4.如果worker长时间不回复，就把自己内存中的信息清除，防止将任务分配给死掉的worker</p><h2 id="创建maven项目"><a href="#创建maven项目" class="headerlink" title="创建maven项目"></a>创建maven项目</h2><p>创建一个空的maven项目</p><p><img src="https://i.loli.net/2019/06/30/5d18575d5300130647.jpg" alt="image"></p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>  ...<br>  <span class="hljs-tag">&lt;<span class="hljs-name">scala.version</span>&gt;</span>2.10.6<span class="hljs-tag">&lt;/<span class="hljs-name">scala.version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">scala.compat.version</span>&gt;</span>2.10<span class="hljs-tag">&lt;/<span class="hljs-name">scala.compat.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.scala-lang<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>scala-library<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;scala.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.typesafe.akka<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>akka-actor_2.10<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.14<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.typesafe.akka<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>akka-remote_2.10<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.14<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">sourceDirectory</span>&gt;</span>src/main/scala<span class="hljs-tag">&lt;/<span class="hljs-name">sourceDirectory</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">testSourceDirectory</span>&gt;</span>src/test/scala<span class="hljs-tag">&lt;/<span class="hljs-name">testSourceDirectory</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.alchim31.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>scala-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>testCompile<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">args</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">arg</span>&gt;</span>-make:transitive<span class="hljs-tag">&lt;/<span class="hljs-name">arg</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">arg</span>&gt;</span>-dependencyfile<span class="hljs-tag">&lt;/<span class="hljs-name">arg</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">arg</span>&gt;</span>$&#123;project.build.directory&#125;/.scala_dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">arg</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">args</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-shade-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br>          <br>          <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>shade<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">filters</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifact</span>&gt;</span>*:*<span class="hljs-tag">&lt;/<span class="hljs-name">artifact</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>META-INF/*.SF<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>META-INF/*.DSA<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>META-INF/*.RSA<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">filters</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transformers</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">transformer</span> <span class="hljs-attr">implementation</span>=<span class="hljs-string">&quot;org.apache.maven.plugins.shade.resource.AppendingTransformer&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>reference.conf<span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">transformer</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">transformer</span> <span class="hljs-attr">implementation</span>=<span class="hljs-string">&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>com.zonegood.Master<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">transformer</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">transformers</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><br></code></pre></td></tr></table></figure><p>如果没有src&#x2F;main&#x2F;scala 需要手动创建</p><h2 id="编写Master"><a href="#编写Master" class="headerlink" title="编写Master"></a>编写Master</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> com.zonegood<br><br><span class="hljs-keyword">import</span> akka.actor.&#123;<span class="hljs-type">Actor</span>, <span class="hljs-type">ActorSystem</span>, <span class="hljs-type">Props</span>&#125;<br><span class="hljs-keyword">import</span> com.typesafe.config.<span class="hljs-type">ConfigFactory</span><br><span class="hljs-keyword">import</span> com.zonegood.<span class="hljs-type">MessageBox</span>._<br><br><span class="hljs-keyword">import</span> scala.collection.mutable<br><span class="hljs-keyword">import</span> scala.concurrent.duration._<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Master</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Actor</span></span>&#123;<br><br>    <span class="hljs-keyword">val</span> hashMap = <span class="hljs-keyword">new</span> mutable.<span class="hljs-type">HashMap</span>[<span class="hljs-type">String</span>,<span class="hljs-type">WorkerInfo</span>]()<br>    <span class="hljs-keyword">val</span> <span class="hljs-type">CHECK_INTERVAL</span> = <span class="hljs-number">15000</span><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">preStart</span></span>(): <span class="hljs-type">Unit</span> = &#123;<br>        println(<span class="hljs-string">&quot;master run...&quot;</span>)<br><br>        <span class="hljs-keyword">import</span> context.dispatcher<br>        <span class="hljs-comment">// 注册定时task 如果worker长时间不回复，就把自己内存中的信息清除，防止将任务分配给死掉的worker</span><br>        context.system.scheduler.schedule(<span class="hljs-number">0</span> millis,<span class="hljs-type">CHECK_INTERVAL</span> millis,<br>            self,<span class="hljs-type">CheckTimeOutWorker</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">receive</span></span>: <span class="hljs-type">Receive</span> = &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-type">WorkerStartedMessage</span>(workerId:<span class="hljs-type">String</span>,workerInfo : <span class="hljs-type">WorkerInfo</span>) =&gt; &#123;<br>            println(<span class="hljs-string">&quot;worker connect&quot;</span>)<br>            <span class="hljs-comment">// 将worker信息</span><br>            hashMap.put(workerId,workerInfo)<br>            <span class="hljs-comment">// 向worker反馈注册成功</span><br>            sender ! <span class="hljs-type">RegisterSuccessMessage</span><br>        &#125;<br>        <span class="hljs-keyword">case</span> <span class="hljs-type">HeartBeatMessage</span>(workerId:<span class="hljs-type">String</span>) =&gt;&#123;<br>            <span class="hljs-comment">// 刷新本地worker的状态</span><br>            <span class="hljs-keyword">if</span>(hashMap.contains(workerId))&#123;<br>                <span class="hljs-keyword">val</span> worker = hashMap(workerId)<br>                worker.flashTime = <span class="hljs-type">System</span>.currentTimeMillis()<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">case</span> <span class="hljs-type">CheckTimeOutWorker</span> =&gt;&#123;<br>            <span class="hljs-comment">// 拿到的是超时的消息，检测worker是否超时</span><br>            <span class="hljs-keyword">val</span> currentTime = <span class="hljs-type">System</span>.currentTimeMillis()<br>            <span class="hljs-keyword">val</span> remove = hashMap.filter(t =&gt; (currentTime - t._2.flashTime) &gt; <span class="hljs-type">CHECK_INTERVAL</span>)<br>            <span class="hljs-keyword">for</span> (e &lt;- remove)&#123;<br>                hashMap -= e._1<br>            &#125;<br>            println(hashMap.size)<br><br>        &#125;<br>        <span class="hljs-keyword">case</span> <span class="hljs-type">HeartBeatSendMessage</span>(workerId) =&gt;&#123;<br>            <span class="hljs-comment">// 更新</span><br>            <span class="hljs-keyword">val</span> workerInfo = hashMap(workerId)<br>            workerInfo.flashTime = <span class="hljs-type">System</span>.currentTimeMillis()<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">object</span> <span class="hljs-title">Master</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span></span>(args : <span class="hljs-type">Array</span>[<span class="hljs-type">String</span>]) :<span class="hljs-type">Unit</span> = &#123;<br>        <span class="hljs-keyword">val</span> host = args(<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">val</span> port = args(<span class="hljs-number">1</span>).toInt<br>        <span class="hljs-keyword">val</span> configStr =<br>            <span class="hljs-string">s&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">               |akka.actor.provider = &quot;</span>akka.remote.<span class="hljs-type">RemoteActorRefProvider</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">               |akka.remote.netty.tcp.hostname = &quot;</span>$<span class="hljs-string">host&quot;</span><br><span class="hljs-string">               |akka.remote.netty.tcp.port = &quot;</span>$<span class="hljs-string">port&quot;</span><br><span class="hljs-string">             &quot;</span><span class="hljs-string">&quot;&quot;</span>.stripMargin<br>        <span class="hljs-keyword">val</span> conf = <span class="hljs-type">ConfigFactory</span>.parseString(configStr)<br>        <span class="hljs-keyword">val</span> masterSystem = <span class="hljs-type">ActorSystem</span>(<span class="hljs-string">&quot;masterSystem&quot;</span>,conf)<br>        masterSystem.actorOf(<span class="hljs-type">Props</span>[<span class="hljs-type">Master</span>],<span class="hljs-string">&quot;masterActor&quot;</span>)<br>        masterSystem.awaitTermination()<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="编写Worker"><a href="#编写Worker" class="headerlink" title="编写Worker"></a>编写Worker</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs scala"><br><span class="hljs-keyword">package</span> com.zonegood<br><br><span class="hljs-keyword">import</span> java.util.<span class="hljs-type">UUID</span><br><br><span class="hljs-keyword">import</span> akka.actor.&#123;<span class="hljs-type">Actor</span>, <span class="hljs-type">ActorSelection</span>, <span class="hljs-type">ActorSystem</span>, <span class="hljs-type">Props</span>&#125;<br><span class="hljs-keyword">import</span> com.typesafe.config.<span class="hljs-type">ConfigFactory</span><br><span class="hljs-keyword">import</span> com.zonegood.<span class="hljs-type">MessageBox</span>.&#123;<span class="hljs-type">HeartBeatMessage</span>, <span class="hljs-type">HeartBeatSendMessage</span>, <span class="hljs-type">RegisterSuccessMessage</span>, <span class="hljs-type">WorkerStartedMessage</span>&#125;<br><br><span class="hljs-keyword">import</span> scala.concurrent.duration._<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Worker</span>(<span class="hljs-params">id:<span class="hljs-type">String</span>,masterHost:<span class="hljs-type">String</span>,masterPort:<span class="hljs-type">Int</span></span>) <span class="hljs-keyword">extends</span> <span class="hljs-title">Actor</span> <span class="hljs-keyword">with</span> <span class="hljs-title">Serializable</span></span>&#123;<br>    <span class="hljs-keyword">var</span> master : <span class="hljs-type">ActorSelection</span> = _<br>    <span class="hljs-keyword">private</span>[<span class="hljs-keyword">this</span>] <span class="hljs-keyword">val</span> <span class="hljs-type">HEART_BEAT_INTERVAL</span> = <span class="hljs-number">10000</span><br><br>    <span class="hljs-keyword">val</span> workerInfo = <span class="hljs-keyword">new</span> <span class="hljs-type">WorkerInfo</span>()<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">preStart</span></span>(): <span class="hljs-type">Unit</span> = &#123;<br><br>        <span class="hljs-comment">// connect master</span><br>        master = context.actorSelection(<br>            <span class="hljs-string">s&quot;akka.tcp://masterSystem@<span class="hljs-subst">$masterHost</span>:<span class="hljs-subst">$masterPort</span>/user/masterActor&quot;</span>)<br>        <span class="hljs-comment">// register</span><br>        master ! <span class="hljs-keyword">new</span> <span class="hljs-type">WorkerStartedMessage</span>(<span class="hljs-keyword">this</span>.id,workerInfo)<br><br><br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">receive</span></span>: <span class="hljs-type">Receive</span> = &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-type">RegisterSuccessMessage</span> =&gt; &#123;<br><br>            <span class="hljs-comment">// 注册监听器</span><br>            <span class="hljs-keyword">import</span> context.dispatcher<br>            context.system.scheduler.schedule(<span class="hljs-number">0</span> millis, <span class="hljs-type">HEART_BEAT_INTERVAL</span> millis<br>                , self, <span class="hljs-type">HeartBeatMessage</span>)<br>        &#125;<br>        <span class="hljs-keyword">case</span> <span class="hljs-type">HeartBeatMessage</span> =&gt; &#123;<br>            <span class="hljs-comment">// resend message to master</span><br>            master ! <span class="hljs-keyword">new</span> <span class="hljs-type">HeartBeatSendMessage</span>(<span class="hljs-keyword">this</span>.id)<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">object</span> <span class="hljs-title">Worker</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span></span>(args : <span class="hljs-type">Array</span>[<span class="hljs-type">String</span>]) : <span class="hljs-type">Unit</span> = &#123;<br>        <span class="hljs-keyword">val</span> host = args(<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">val</span> port = args(<span class="hljs-number">1</span>).toInt<br>        <span class="hljs-keyword">val</span> masterHost = args(<span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">val</span> masterPort = args(<span class="hljs-number">3</span>).toInt<br>        <span class="hljs-keyword">val</span> configStr =<br>            <span class="hljs-string">s&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">               |akka.actor.provider = &quot;</span>akka.remote.<span class="hljs-type">RemoteActorRefProvider</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">               |akka.remote.netty.tcp.hostname = &quot;</span>$<span class="hljs-string">host&quot;</span><br><span class="hljs-string">               |akka.remote.netty.tcp.port = &quot;</span>$<span class="hljs-string">port&quot;</span><br><span class="hljs-string">             &quot;</span><span class="hljs-string">&quot;&quot;</span>.stripMargin<br>        <span class="hljs-keyword">val</span> conf = <span class="hljs-type">ConfigFactory</span>.parseString(configStr)<br>        <span class="hljs-keyword">val</span> workerSystem = <span class="hljs-type">ActorSystem</span>(<span class="hljs-string">&quot;workerSystem&quot;</span>,conf)<br>        workerSystem.actorOf(<span class="hljs-type">Props</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">Worker</span>(<span class="hljs-type">UUID</span>.randomUUID().toString,masterHost,masterPort)),<span class="hljs-string">&quot;workerActor&quot;</span>)<br>        workerSystem.awaitTermination()<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="样例类"><a href="#样例类" class="headerlink" title="样例类"></a>样例类</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> com.zonegood<br><br><span class="hljs-class"><span class="hljs-keyword">object</span> <span class="hljs-title">MessageBox</span> </span>&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WorkerStartedMessage</span>(<span class="hljs-params">workerId:<span class="hljs-type">String</span>,workerInfo : <span class="hljs-type">WorkerInfo</span></span>)</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RegisterSuccessMessage</span>(<span class="hljs-params"></span>)</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CheckTimeOutWorker</span>(<span class="hljs-params"></span>)</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HeartBeatMessage</span>(<span class="hljs-params">workerId:<span class="hljs-type">String</span></span>)</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HeartBeatSendMessage</span>(<span class="hljs-params">workerId:<span class="hljs-type">String</span></span>)</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="封装数据类"><a href="#封装数据类" class="headerlink" title="封装数据类"></a>封装数据类</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> com.zonegood<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WorkerInfo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Serializable</span></span>&#123;<br><br>    <span class="hljs-keyword">var</span> flashTime = <span class="hljs-type">System</span>.currentTimeMillis()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用maven-shade-plugin插件打包"><a href="#使用maven-shade-plugin插件打包" class="headerlink" title="使用maven-shade-plugin插件打包"></a>使用maven-shade-plugin插件打包</h2><p>1.打包Master执行 jar</p><p>修改pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">transformer</span> <span class="hljs-attr">implementation</span>=<span class="hljs-string">&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>com.zonegood.Master<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">transformer</span>&gt;</span><br></code></pre></td></tr></table></figure><p>运行 mvn clean package</p><p>mv target&#x2F;my-scala-rpc-1.0-SNAPSHOT.jar ~&#x2F;workspace&#x2F;master.jar</p><p>2.打包Worker执行 jar</p><p>同理 打出worker.jar</p><p>进入到~&#x2F;workspace你就可以看到新的两个jar文件</p><p><img src="https://i.loli.net/2019/06/30/5d185760551f758763.jpg" alt="image"></p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><blockquote><p>$ cd ~&#x2F;workspace</p></blockquote><blockquote><p>$ java -jar master.jar 127.0.0.1 8888</p></blockquote><blockquote><p>$ java -jar worker.jar 127.0.0.1 7001 127.0.0.1 8888</p></blockquote><blockquote><p>$ java -jar worker.jar 127.0.0.1 7002 127.0.0.1 8888</p></blockquote><blockquote><p>$ java -jar worker.jar 127.0.0.1 7003 127.0.0.1 8888</p></blockquote><p>查看运行结果</p><p><img src="https://i.loli.net/2019/06/30/5d185761f2eef91605.jpg" alt="image"></p><p>关闭其中一个Worker查看console结果</p><p><img src="https://i.loli.net/2019/06/30/5d1857651939e43876.jpg" alt="image"></p>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Scala</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git -- 忽略某个文件</title>
    <link href="/2018/08/08/2018-08-08-gitignore%20%E9%85%8D%E7%BD%AE/"/>
    <url>/2018/08/08/2018-08-08-gitignore%20%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="修改-gitignore-文件"><a href="#修改-gitignore-文件" class="headerlink" title="修改 .gitignore 文件"></a>修改 .gitignore 文件</h2><p>在git中如果想忽略掉某个文件，不让这个文件提交到版本库中，可以使用修改 .gitignore 文件的方法。</p><p>举例：.gitignore文件内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"># <span class="hljs-title class_">Android</span> generated<br>bin/<br>gen/<br>classes/<br>gen-external-apklibs/<br><br># <span class="hljs-title class_">Ant</span><br>local.<span class="hljs-property">properties</span><br><br># <span class="hljs-title class_">Maven</span><br>target/<br>release.<span class="hljs-property">properties</span><br><br># <span class="hljs-title class_">Eclipse</span><br>.<span class="hljs-property">classpath</span><br>.<span class="hljs-property">project</span><br>.<span class="hljs-property">externalToolBuilders</span>/<br>.<span class="hljs-property">metadata</span><br>.<span class="hljs-property">settings</span><br><br># <span class="hljs-title class_">IntelliJ</span><br>*.<span class="hljs-property">iml</span><br>*.<span class="hljs-property">ipr</span><br>*.<span class="hljs-property">iws</span><br>.<span class="hljs-property">idea</span>/<br>out/<br><br># <span class="hljs-title class_">Mac</span><br>.<span class="hljs-property">DS_Store</span><br><br># gitignore<br>.<span class="hljs-property">gitignore</span><br></code></pre></td></tr></table></figure><h2 id="使用命令"><a href="#使用命令" class="headerlink" title="使用命令"></a>使用命令</h2><p>.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。</p><p>正确的做法是在每个clone下来的仓库中手动设置不要检查特定文件的更改情况。</p><blockquote><p>git update-index –assume-unchanged FILE </p></blockquote><p>在FILE处输入要忽略的文件。</p><p>如果要还原的话，使用命令：</p><blockquote><p>git update-index –no-assume-unchanged FILE</p></blockquote><h4 id="使用-git-x2F-info-x2F-exclude"><a href="#使用-git-x2F-info-x2F-exclude" class="headerlink" title="使用.git&#x2F;info&#x2F;exclude"></a>使用.git&#x2F;info&#x2F;exclude</h4><p>git 还提供了另一种 exclude 的方式来做同样的事情，不同的是 .gitignore 这个文件本身会提交到版本库中去。用来保存的是公共的需要排除的文件。而 .git&#x2F;info&#x2F;exclude 这里设置的则是你自己本地需要排除的文件。 他不会影响到其他人。也不会提交到版本库中去。</p><p>举例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"># git ls-files --others --exclude-<span class="hljs-keyword">from</span>=.<span class="hljs-property">git</span>/info/exclude<br># <span class="hljs-title class_">Lines</span> that start <span class="hljs-keyword">with</span> <span class="hljs-string">&#x27;#&#x27;</span> are comments.<br># <span class="hljs-title class_">For</span> a project mostly <span class="hljs-keyword">in</span> C, the following would be a good set <span class="hljs-keyword">of</span><br># exclude patterns (uncomment them <span class="hljs-keyword">if</span> you want to use them):<br># *.[oa]<br># *~<br>.<span class="hljs-property">gradle</span>/<br>.<span class="hljs-property">idea</span>/<br>.<span class="hljs-property">settings</span>/<br>appcompat_v7/<br>bin/<br>build/<br>gen/<br>gradle/<br>out/<br>proguard/<br>ship/<br>target/<br>.<span class="hljs-property">classpath</span><br>.<span class="hljs-property">gitignore</span><br>.<span class="hljs-property">idea</span><br>.<span class="hljs-property">project</span><br>.<span class="hljs-property">readme</span><br>.<span class="hljs-property">update</span>-config<br>*.<span class="hljs-property">iml</span><br>local.<span class="hljs-property">properties</span><br></code></pre></td></tr></table></figure><p>.gitignore 还有个有意思的小功能， 一个空的 .gitignore 文件 可以当作是一个 placeholder 。当你需要为项目创建一个空的 log 目录时， 这就变的很有用。 你可以创建一个 log 目录 在里面放置一个空的 .gitignore 文件。这样当你 clone 这个 repo 的时候 git 会自动的创建好一个空的 log 目录了。</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Raspberry Pi微型计算机的使用</title>
    <link href="/2018/07/28/2018-07-28-Raspberry%20Pi-Raspberry%20Pi%E5%BE%AE%E5%9E%8B%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2018/07/28/2018-07-28-Raspberry%20Pi-Raspberry%20Pi%E5%BE%AE%E5%9E%8B%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>Raspberry Pi(中文名为“树莓派”,简写为RPi，(或者RasPi &#x2F; RPI)，只有信用卡大小的微型电脑，其系统基于Linux。 先今Raspberry Pi已经可以安装并运行Window操作系统。</p><p>Raspberry Pi是一款基于ARM的微型电脑主板，以SD&#x2F;MicroSD卡为内存硬盘，卡片主板周围有1&#x2F;2&#x2F;4个USB接口和一个10&#x2F;100 以太网接口（A型没有网口），可连接键盘、鼠标和网线，同时拥有视频模拟信号的电视输出接口和HDMI高清视频输出接口，以上部件全部整合在一张仅比信用卡稍大的主板上，具备所有PC的基本功能只需接通电视机和键盘，就能执行如电子表格、文字处理、玩游戏、播放高清视频等诸多功能。 Raspberry Pi B款只提供电脑板，无内存、电源、键盘、机箱或连线。</p><p>树莓派的生产是通过有生产许可的三家公司Element 14&#x2F;Premier Farnell、RS Components及Egoman。这三家公司都在网上出售树莓派。现在，你可以在诸如京东、淘宝等国内网站购买到你所想要的树莓派。</p><p>树莓派基金会提供了基于ARM的Debian和Arch Linux的发行版供大众下载。还计划提供支持Python作为主要编程语言，支持Java、BBC BASIC (通过 RISC OS 映像或者Linux的”Brandy Basic”克隆)、C 和Perl等编程语言.</p><p>摘自百度百科</p><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>如果想玩Raspberry Pi,来先从软硬件两方面来列一下前期的准备。</p><h4 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h4><p>1.Raspberry Pi主板 (238 RMB)</p><p><img src="https://i.loli.net/2019/06/30/5d18456dc0bca94072.jpg" alt="image"></p><p>在买主板的时候，店家往往会给你推荐很多配件，比如电源、SD卡、散热片、外壳等等，不买也不影响正常使用，我购买的时候什么配件都没要，只要了一个主板</p><p>关于电源的话，我用的是小米的手机充电器，这里需要注意一点说明书上标明电源要用5V-2A的电源，如果不是5V-2A的最好还是别用。</p><p>当然如果是个不差钱的当我啥都没说。（土豪一起玩啊！！<em>v</em>）</p><p>2.SD卡 (59 RMB)</p><p>SD卡我这边是单独购买的，买的是闪迪32G的，听朋友说8G就已经够用了，如果你觉得太小可以买16G(40+ RMB)。32G 确实有点太大了。</p><p><img src="https://i.loli.net/2019/06/30/5d18456f8f89b40840.jpg" alt="image"></p><p>3.读卡器(6 RMB)</p><p>读卡器是在SD卡write OS时用的。我这边从便利店买了一个便宜货6块钱。</p><p><img src="https://i.loli.net/2019/06/30/5d18457213eb047942.jpg" alt="image"></p><h4 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h4><p>软件需要准备三个，三个软件都是为了制作SD而准备的</p><p>1.SDFormatter</p><p>用这个更是化SD卡</p><p><img src="https://i.loli.net/2019/06/30/5d185636dcbfd40206.jpg" alt="image"></p><p>2.Win32DiskImager</p><p>这个是往SD卡中写操作系统用的</p><p><img src="https://i.loli.net/2019/06/30/5d18563769bbb66159.jpg" alt="image"></p><p>3.RASPBIAN OS</p><p>RASPBIAN OS它是树梅派基金会专门依据debain操作系统改出来的一个新的定制化的操作系统。也是官方推荐安装的一款操作系统。这边油两个不同版本</p><p>RASPBIAN STRETCH WITH DESKTOP : 会带着桌面一起安装</p><p>RASPBIAN STRETCH LITE ： 只安装命令行，不安装桌面</p><p>关于选择哪个，全在个人，想要桌面就安第一个。我使用的第第二个不带桌面的。</p><p><img src="https://i.loli.net/2019/06/30/5d18563b14deb17086.jpg" alt="image"></p><h2 id="制作SD卡"><a href="#制作SD卡" class="headerlink" title="制作SD卡"></a>制作SD卡</h2><p>具体流程也很简单，这边大概说一下，用读卡器将SD卡与电脑连接起来，用SDFormatter格式化SD卡，启动Win32DiskImager，选择下好的镜像，点击write写入SD等待成功即可。</p><h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><p>这边没有网线，也没有显示器，那么要怎么ssh？具体操作步骤如下。需要注意的是，</p><h6 id="1-方案一"><a href="#1-方案一" class="headerlink" title="1.方案一"></a>1.方案一</h6><p>前提你需要准备一个linux操作系统。</p><p>插上SD卡，如果你是linux操作系统，除了第一个boot盘符意外，你就能看到第二个盘符，叫”rootfs”</p><p><img src="https://i.loli.net/2019/06/30/5d18563bc629778245.jpg" alt="image"></p><blockquote><p>$ sudo vim rootfs&#x2F;etc&#x2F;wap_supplicant&#x2F;wpa_supplicant.conf</p></blockquote><p>在其中添加下段代码</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">network=<span class="hljs-punctuation">&#123;</span><br>ssid=<span class="hljs-string">&quot;your wifi name&quot;</span><br>psk=<span class="hljs-string">&quot;your wifi password&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>进入到与rootfs并列的boot目录,在其中添加一个空的名字为ssh的文件</p><blockquote><p>$ touch boot&#x2F;ssh</p></blockquote><p>拔出SD卡，将SD卡插入Raspberry Pi主板卡槽中，插上小米手机充电器，在事先登录好的路由器管理界面查看IP变化。新增的那个IP就是Raspberry Pi的ip了</p><p>然后就可以愉快的链接ssh了。默认帐号:<strong>pi</strong>密码:<strong>raspberry</strong></p><blockquote><p>$ ssh <a href="mailto:&#x70;&#x69;&#x40;&#49;&#57;&#x32;&#x2e;&#49;&#54;&#56;&#46;&#49;&#48;&#x30;&#x2e;&#x31;&#48;&#57;">&#x70;&#x69;&#x40;&#49;&#57;&#x32;&#x2e;&#49;&#54;&#56;&#46;&#49;&#48;&#x30;&#x2e;&#x31;&#48;&#57;</a></p></blockquote><p><img src="https://i.loli.net/2019/06/30/5d18563d4576590392.jpg" alt="image"></p><p>假如没有linux操作系统，我们就不能修改&#x2F;etc&#x2F;wpa_supplicant 目录下的 wpa_supplicant.conf文件，那么你可以尝试方案二</p><h6 id="2-方案二"><a href="#2-方案二" class="headerlink" title="2.方案二"></a>2.方案二</h6><p>插上SD卡,因为是window所以只能看到boot分区，在boot分区下新建 空的ssh文件</p><p>再创建一个wpa_supplicant.conf</p><p>将下段代码替换进去</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev<br>update_config=<span class="hljs-number">1</span><br><br>network=<span class="hljs-punctuation">&#123;</span><br>ssid=<span class="hljs-string">&quot;your wifi name&quot;</span><br>psk=<span class="hljs-string">&quot;your wifi password&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>将内存卡拔出重新插入接上电源,操作系统会将boot下的wpa_supplicant.conf,替换到&#x2F;etc&#x2F;wpa_supplicant&#x2F;目录下。最后同上找到ip，进行ssh就好了</p><p>下面说一下我在探索这块时踩过的坑</p><p>关于wpa_supplicant.conf里面的写法，网上有很多版本，开始参考了两篇文章，里面的配置我试了试都不行，折腾了一下午，其中的心酸一言难尽，尽管如此这边还是附上链接地址<a href="https://segmentfault.com/a/1190000010976507">链接一</a>，<a href="http://shumeipai.nxez.com/2017/09/13/raspberry-pi-network-configuration-before-boot.html">链接二</a></p><p>经过踩坑以后，这边对配置文件进行了调整最后才成功。</p><p>就是把里面的第一行country&#x3D;xx 删掉.猜测的原因是，因为xx填写的并不正确导致无法正常链接wifi。这边干脆就把它删掉，因为删掉就是默认的了，事实证明删掉它以后wifi就可以连了，猜测是正确的。</p>]]></content>
    
    
    <categories>
      
      <category>物联网</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Raspberry Pi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sqlserver中or和and优先级问题</title>
    <link href="/2018/07/27/2018-07-27-sqlserver-sqlserver%E4%B8%ADor%E5%92%8Cand%E4%BC%98%E5%85%88%E7%BA%A7%E9%97%AE%E9%A2%98/"/>
    <url>/2018/07/27/2018-07-27-sqlserver-sqlserver%E4%B8%ADor%E5%92%8Cand%E4%BC%98%E5%85%88%E7%BA%A7%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>今天发现写的接口有问题,排查到最后发现因为自己忽略了sqlserver中or和and的优先级，导致查询的数据不正确。</p><p>关于他们的使用见下面的例子</p><p>比如想要查询高三2班2000年出生或者是2002年出生的所有男生，那么sql应该这么写</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_class <span class="hljs-keyword">where</span> sex <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;male&#x27;</span> <span class="hljs-keyword">and</span> (birth <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;2000&#x27;</span> <span class="hljs-keyword">or</span> birth <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;2002&#x27;</span>)<br></code></pre></td></tr></table></figure><p>还有另一种写法，可以用in代替or</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_class <span class="hljs-keyword">where</span> sex <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;male&#x27;</span> <span class="hljs-keyword">and</span> birth <span class="hljs-keyword">in</span> ( <span class="hljs-string">&#x27;2000&#x27;</span> , <span class="hljs-string">&#x27;2002&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>NoClassDefFoundError和ClassNotFoundExceptio的区别</title>
    <link href="/2018/06/29/2018-06-29-Exception-NoClassDefFoundError%E5%92%8CClassNotFoundExceptio%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2018/06/29/2018-06-29-Exception-NoClassDefFoundError%E5%92%8CClassNotFoundExceptio%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>小伙伴突然说新部署的企业级某功能不能用了，到线上查看，发现访问界面报 NoClassDefFoundError com.xxxx.xxxx.xxx.java 异常。</p><h2 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h2><p>乍一看NoClassDefFoundError貌似是类没找到，你会发现tomcat中并没有缺少任何class。那么这个异常到底是什么意思。看下面java代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Constants</span> &#123;<br><span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">ABC</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br><span class="hljs-keyword">static</span> &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-number">1</span> == <span class="hljs-number">1</span>)<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>();<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>() &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> Constants.ABC;<br>&#125;<br>&#125;.start();<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">1000</span>);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>&#125;<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> Constants.ABC;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在运行上面程序后，会报NoClassDefFoundError异常，原因是：在初始化Constants类时调用了static静态代码块抛了异常。所以再次使用Constants类时就报了这个错误了。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>那么问题定位到了以后，到线上对com.xxxx.xxxx.xxx.class 进行反编译 发现有这样一段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select cversion from license&quot;</span>;<br>    st = rs.executeSql(sql);<br>    <span class="hljs-keyword">while</span>(st.next())&#123;<br>        <span class="hljs-keyword">if</span>( StringUtil.isNullOrEmpty(st.getString(<span class="hljs-number">1</span>)))&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>();<br>        &#125;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>    <span class="hljs-comment">// ....</span><br>&#125;<br></code></pre></td></tr></table></figure><p>到数据库查了一下license表,发现cversion 字段的值为null</p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>问题总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Alipay对接</title>
    <link href="/2018/06/24/2018-07-24-alipay-Alipay%E6%94%AF%E4%BB%98%E5%AE%9D%E9%9B%86%E6%88%90/"/>
    <url>/2018/06/24/2018-07-24-alipay-Alipay%E6%94%AF%E4%BB%98%E5%AE%9D%E9%9B%86%E6%88%90/</url>
    
    <content type="html"><![CDATA[<p>在开始开发之前，需要通过向阿里申请获取相关信息，主要就是审核，审核通过后会得到相关参数</p><p>随后与spring做集成,这边的思路是由spring容器去管理DefaultAlipayClient和AlipayPayment</p><p>AlipayPayment是我们自己写的接口</p><p>DefaultAlipayClient 是阿里提供给我们的接口</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alipay.api.DefaultAlipayClient&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;alipayClient&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;alipay.gateway&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;alipay.appId&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;alipay.appPrivateKey&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;json&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;utf-8&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;alipay.appPublicKey&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;RSA2&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.bim.bdip.cloud.home.payment.AlipayPayment&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;alipayPayment&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h4 id="购买界面入口"><a href="#购买界面入口" class="headerlink" title="购买界面入口"></a>购买界面入口</h4><p><img src="https://i.loli.net/2019/07/02/5d1aafbf93be640248.jpg" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 购买兑换码</span><br><span class="hljs-meta">@RequestMapping(method = RequestMethod.POST, value = &quot;/buy&quot;, produces = &quot;text/html&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">buyRedeemCode</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> PaymentException, IOException &#123;<br><span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession();<br><span class="hljs-type">BimUser</span> <span class="hljs-variable">bimUser</span> <span class="hljs-operator">=</span> (BimUser) session.getAttribute(ConstantDefine.LOGIN_SESSION_USER);<br><span class="hljs-keyword">if</span> (bimUser == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">page</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/page/bdip/baseModel/index&quot;</span>;<br>response.sendRedirect(page);<br>&#125;<br><span class="hljs-type">long</span> <span class="hljs-variable">uId</span> <span class="hljs-operator">=</span> bimUser.getId();<br><span class="hljs-type">String</span> <span class="hljs-variable">redeemCodeLevel</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;redeemCodeLevel&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">paymentMethod</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;paymentMethod&quot;</span>);<br>Object[] param = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;redeemCodeLevel, uId, paymentMethod&#125;;<br><span class="hljs-type">Parameter</span> <span class="hljs-variable">parameter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parameter</span>(BizServiceDefine.bimOrderService, <span class="hljs-string">&quot;buyRedeemCode&quot;</span>).setParam(param);<br>parameter = bizProvider.execute(parameter);<br><span class="hljs-type">BimOrder</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> parameter == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : (BimOrder) parameter.getModel();<br><span class="hljs-keyword">return</span> alipayPayment.pay(order).getBody();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h4><p>1.锁定商品，禁止他人购买<br>2.生成订单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> BimOrder <span class="hljs-title function_">buyRedeemCode</span><span class="hljs-params">(String redeemCodeLevel, Long uid, String paymentMethod)</span> &#123;<br><span class="hljs-type">BimOrder</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BimOrder</span>();<br><span class="hljs-type">BimRedeemLevel</span> <span class="hljs-variable">redeemLevel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BimRedeemLevel</span>();<br>redeemLevel.setLevel(redeemCodeLevel);<br>redeemLevel = bimRedeemLevelMapper.selectOne(redeemLevel);<br>Wrapper&lt;BimRedeemCode&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EntityWrapper</span>&lt;&gt;();<br>wrapper = wrapper.where(<span class="hljs-string">&quot;redeem_level_id = &#123;0&#125;&quot;</span>, redeemLevel.getId())<br>.and(<span class="hljs-string">&quot;status = 0&quot;</span>)            <span class="hljs-comment">// 未售出</span><br>.and(<span class="hljs-string">&quot;redeem_code_type = 1&quot;</span>); <span class="hljs-comment">// 线上购买</span><br>List&lt;BimRedeemCode&gt; bimRedeemCodes = bimRedeemCodeMapper.selectList(wrapper);<br><span class="hljs-keyword">if</span> (bimRedeemCodes.size() == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-type">String</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;购买 %.2f埃币 兑换码&quot;</span>, redeemLevel.getIcoinAmount());<br><span class="hljs-type">BimRedeemCode</span> <span class="hljs-variable">redeemCode</span> <span class="hljs-operator">=</span> bimRedeemCodes.get(<span class="hljs-number">0</span>);<br>redeemCode.setStatus(ConstantDefine.REDEEM_CODE_STATUS_LOCKED);<br>bimRedeemCodeMapper.updateById(redeemCode);<br>order.setAmount(redeemLevel.getAmount());<br>order.setPayExpireTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().getTime() + <span class="hljs-number">1800000l</span>)); <span class="hljs-comment">// 半小时过期</span><br>order.setCurrencyType(ConstantDefine.CURRENCY_CNY);<br>order.setCommodityTypeId(<span class="hljs-number">1l</span>);<br>order.setPaymentMethod(paymentMethod);<br>order.setCreatedRole(<span class="hljs-number">0</span>); <span class="hljs-comment">// 用户</span><br>order.setUserId(uid);<br>order.setProductId(redeemCode.getId());<br>order.setSubject(subject);<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.addBimOrder(order);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="alipayPayment-是为了对接做一个简单的封装。"><a href="#alipayPayment-是为了对接做一个简单的封装。" class="headerlink" title="alipayPayment 是为了对接做一个简单的封装。"></a>alipayPayment 是为了对接做一个简单的封装。</h4><p>1.alipayClient<br>2.returnUrl<br>3.notifyUrl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AlipayPayment</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IPayment</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LogManager.getLogger(<span class="hljs-built_in">this</span>.getClass());<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AlipayClient alipayClient;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;alipay.returnUrl&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String returnUrl;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;alipay.notifyUrl&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String notifyUrl;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> PaymentResult <span class="hljs-title function_">pay</span><span class="hljs-params">(BimOrder order)</span> <span class="hljs-keyword">throws</span> PaymentException &#123;<br>        <span class="hljs-type">AlipayTradePagePayRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AlipayTradePagePayRequest</span>();<br>        <span class="hljs-type">AlipayTradePagePayModel</span> <span class="hljs-variable">model</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AlipayTradePagePayModel</span>();<br>        request.setReturnUrl(returnUrl);<br>        request.setNotifyUrl(notifyUrl);<br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">bizContent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br>        bizContent.put(<span class="hljs-string">&quot;out_trade_no&quot;</span>, order.getOrderNumber());<br>        bizContent.put(<span class="hljs-string">&quot;product_code&quot;</span>, <span class="hljs-string">&quot;FAST_INSTANT_TRADE_PAY&quot;</span>);<br><span class="hljs-comment">//        bizContent.put(&quot;total_amount&quot;, order.getAmount());</span><br>        bizContent.put(<span class="hljs-string">&quot;total_amount&quot;</span>, <span class="hljs-number">0.01</span>); <span class="hljs-comment">// 设置消费金额</span><br>        bizContent.put(<span class="hljs-string">&quot;subject&quot;</span>, order.getSubject());<br>        bizContent.put(<span class="hljs-string">&quot;body&quot;</span>, order.getSubject());<br>        request.setBizContent(bizContent.toJSONString());<br>        <span class="hljs-type">PaymentResult</span> <span class="hljs-variable">paymentResult</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PaymentResult</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">AlipayResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> alipayClient.pageExecute(request);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> response.getBody();<br>            paymentResult.setResultType(PaymentResultType.BODY);<br>            paymentResult.setBody(body);<br>        &#125; <span class="hljs-keyword">catch</span> (AlipayApiException e) &#123;<br>            logger.catching(e);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PaymentException</span>(e);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> paymentResult;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">refund</span><span class="hljs-params">(BimOrder order)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">cancel</span><span class="hljs-params">(BimOrder order)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>pay 接口负责将生成好的Order订单信息发送给阿里，然后阿里那边会返回一个结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentResult</span> &#123;<br>    <span class="hljs-keyword">private</span> String redirectUrl;<br>    <span class="hljs-keyword">private</span> String body;<br>    <span class="hljs-keyword">private</span> PaymentResultType resultType;<br>    <span class="hljs-keyword">private</span> String orderNo;<br>    <span class="hljs-keyword">private</span> Date expireTime;<br><br>    <span class="hljs-comment">// ====== setter and getter =====</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">PaymentResultType</span> &#123;<br>    REDIRECT,<br>    BODY<br>&#125;<br></code></pre></td></tr></table></figure><p>当用户支付以后，就会走我们写的回调函数,returnUrl 和 notifyUrl俩参数实现已经在Common-config.properties写好</p><p>alipay.returnUrl&#x3D;<a href="http://cloud.bimbdip.com/callbacks/paymentReturn">http://cloud.bimbdip.com/callbacks/paymentReturn</a><br>alipay.notifyUrl&#x3D;<a href="http://cloud.bimbdip.com/callbacks/paymentNotify">http://cloud.bimbdip.com/callbacks/paymentNotify</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@Api(value = &quot;回调&quot;)</span><br><span class="hljs-meta">@RequestMapping(&quot;/callbacks&quot;)</span><br><span class="hljs-meta">@PropertySources(value = &#123;@PropertySource(&quot;classpath:Common-config.properties&quot;), @PropertySource(&quot;classpath:user_space_size.properties&quot;)&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CallbacksController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IBizProvider bizProvider;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AlipayClient alipayClient;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;alipay.publicKey&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String alipayPublicKey;<br><br>    <span class="hljs-meta">@ApiOperation(value = &quot;支付宝notify&quot;)</span><br>    <span class="hljs-meta">@RequestMapping(method = RequestMethod.POST, value = &quot;/alipayNotify&quot;, produces = &quot;text/plain;charset=UTF-8&quot;)</span><br>    <span class="hljs-keyword">public</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    String <span class="hljs-title function_">alipayNotify</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (String key : request.getParameterMap().keySet()) &#123;<br>            map.put(key, request.getParameter(key));<br>        &#125;<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">signatureVerified</span> <span class="hljs-operator">=</span> AlipaySignature.rsaCheckV1(map, alipayPublicKey, <span class="hljs-string">&quot;utf-8&quot;</span>, <span class="hljs-string">&quot;RSA2&quot;</span>);<br>        <span class="hljs-keyword">if</span> (signatureVerified) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">orderNumber</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;out_trade_no&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">paymentOrderNumber</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;trade_no&quot;</span>);<br>            <span class="hljs-built_in">this</span>.alipayOrderPaid(orderNumber, paymentOrderNumber);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 支付宝Return</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ApiOperation(value = &quot;支付宝return&quot;)</span><br>    <span class="hljs-meta">@RequestMapping(method = RequestMethod.GET, value = &quot;/alipayReturn&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">alipayReturn</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> AlipayApiException &#123;<br>        Map&lt;String, String&gt; params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        Map&lt;String, String[]&gt; requestParams = request.getParameterMap();<br>        <span class="hljs-keyword">for</span> (Iterator&lt;String&gt; iter = requestParams.keySet().iterator(); iter.hasNext(); ) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> (String) iter.next();<br>            String[] values = (String[]) requestParams.get(name);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">valueStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; values.length; i++) &#123;<br>                valueStr = (i == values.length - <span class="hljs-number">1</span>) ? valueStr + values[i]<br>                        : valueStr + values[i] + <span class="hljs-string">&quot;,&quot;</span>;<br>            &#125;<br>            <span class="hljs-comment">//乱码解决，这段代码在出现乱码时使用</span><br><span class="hljs-comment">//            valueStr = new String(valueStr.getBytes(&quot;ISO-8859-1&quot;), &quot;utf-8&quot;);</span><br>            params.put(name, valueStr);<br>        &#125;<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">signatureVerified</span> <span class="hljs-operator">=</span> AlipaySignature.rsaCheckV1(params, alipayPublicKey, <span class="hljs-string">&quot;utf-8&quot;</span>, <span class="hljs-string">&quot;RSA2&quot;</span>);<br>        <span class="hljs-keyword">if</span> (signatureVerified) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">orderNumber</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;out_trade_no&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">paymentOrderNumber</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;trade_no&quot;</span>);<br>            <span class="hljs-built_in">this</span>.alipayOrderPaid(orderNumber, paymentOrderNumber);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/page/bdip/user/index&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/page/bdip/redeemcode/record&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">alipayOrderPaid</span><span class="hljs-params">(String orderNumber, String paymentOrderNumber)</span> &#123;<br>        Object[] param = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;orderNumber, <span class="hljs-string">&quot;ALIPAY&quot;</span>, paymentOrderNumber&#125;;<br>        <span class="hljs-type">Parameter</span> <span class="hljs-variable">parameter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parameter</span>(BizServiceDefine.bimOrderService, <span class="hljs-string">&quot;orderPaid&quot;</span>).setParam(param);<br>        bizProvider.execute(parameter);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="关于returnUrl和notifyUrl"><a href="#关于returnUrl和notifyUrl" class="headerlink" title="关于returnUrl和notifyUrl"></a>关于returnUrl和notifyUrl</h4><p>买家付款成功以后,支付宝那边会调用returnUrl接口，跳转到相应界面展示给用户看。只有当用户付款成功以后才有效</p><p>notifyUrl，是用户后台通信存在的，当用户付款成功以后，支付宝会调用这个接口，我们要做的就是在这个接口中修改订单状态以及商品状态，成功以后返回一个”success”即可</p><p>考虑到安全性问题代码中使用了RSA非对称加密协议对通信的信息进行加解密。(AlipaySignature.rsaCheckV1)</p><p>至此基础开发应该就已经结束了。根据实景情况做具体调整</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>hbase集群搭建</title>
    <link href="/2018/06/21/2018-06-21-hbase-hbase%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <url>/2018/06/21/2018-06-21-hbase-hbase%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h4 id="本机环境"><a href="#本机环境" class="headerlink" title="本机环境"></a>本机环境</h4><ul><li>Ubuntu 16.0.4 TLS</li><li>Vmware Workstation 14.1.1</li><li>hadoop 2.7.3 （集群）</li><li>zookeeper 3.4.10 (集群)</li></ul><p>前提已经在VM中部署好Hadoop 和Zookeeper集群。本次使用3台主机分别为cor1、cor2、cor3，在部署Hbase之前首先确保zookeeper和hadoop完好且可用。</p><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p><a href="http://apache.org/dist/">apache官方下载</a>,选取的版本是hbase-2.0.1-bin.tar.gz。</p><p>关于hbase和hadoop版本的对应关系，这边给一个blog做参考<a href="https://blog.csdn.net/vtopqx/article/details/77882491%EF%BC%8C%E5%B0%8F%E4%BC%99%E4%BC%B4%E4%B9%9F%E5%8F%AF%E4%BB%A5%E5%8E%BB%E7%9C%8B%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%EF%BC%8C%E4%BC%9A%E6%9B%B4%E8%AF%A6%E7%BB%86%E4%B8%80%E4%BA%9B%E3%80%82">https://blog.csdn.net/vtopqx/article/details/77882491，小伙伴也可以去看官方文档，会更详细一些。</a></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>解压到当前目录</p><blockquote><p>$ tar -zxvf hbase-2.0.1-bin.tar.gz  -C .&#x2F;</p></blockquote><p>进去conf目录编辑hbase-env.sh文件</p><blockquote><p>$ vim hbase-env.sh</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">the java implementation to use. 1.7+ required</span><br><br>export JAVA_HOME=/opt/jdk//jdk1.8.0_66<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">export</span> JAVA_HOME=/usr/java/jdk1.8.0_66</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置日志目录和PID目录</span><br><br>export HBASE_LOG_DIR=/data/bigdata/logs/hbase<br>export HBASE_PID_DIR=/data/bigdata/data/hbase<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用外部zookeeper</span><br><br>export HBASE_MANAGES_ZK=false<br></code></pre></td></tr></table></figure><p>编辑hbase-site.xml,关于每个参数的详细描述可以在官方文档的第7章节<code>7. Default Configuration</code>中查到这边就不做详述,附上链接<a href="http://hbase.apache.org/book.html#config.files">http://hbase.apache.org/book.html#config.files</a></p><blockquote><p>$ vi hbase-site.xml</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell">&lt;configuration&gt;<br>    &lt;property&gt;<br>        &lt;name&gt;hbase.tmp.dir&lt;/name&gt;<br>        &lt;value&gt;/home/hadoop/hbase-2.0.1/data&lt;/value&gt;<br>    &lt;/property&gt;<br>    &lt;property&gt;<br>        &lt;name&gt;hbase.rootdir&lt;/name&gt;<br>        &lt;value&gt;hdfs://cor1:9000/hbase&lt;/value&gt;<br>    &lt;/property&gt;<br>    &lt;property&gt;<br>        &lt;name&gt;hbase.cluster.distributed&lt;/name&gt;<br>        &lt;value&gt;true&lt;/value&gt;<br>    &lt;/property&gt;<br>    &lt;property&gt;<br>        &lt;name&gt;hbase.zookeeper.quorum&lt;/name&gt;<br>        &lt;value&gt;cor1:2181,cor2:2181,cor3:2181&lt;/value&gt;<br>    &lt;/property&gt;&lt;property&gt;<br>        &lt;name&gt;hbase.zookeeper.property.clientPort&lt;/name&gt;<br>        &lt;value&gt;2181&lt;/value&gt;<br>    &lt;/property&gt;<br>    &lt;property&gt;<br>        &lt;name&gt;hbase.zookeeper.property.dataDir&lt;/name&gt;<br>        &lt;value&gt;/home/hadoop/zookeeper/data&lt;/value&gt;<br>    &lt;/property&gt;<br>&lt;/configuration&gt;<br></code></pre></td></tr></table></figure><p>配置<code>conf/regionservers</code>，写在该文件中的将被认为是从节点，在主节点上运行<code>bin/start-hbase.sh</code>以后，会自动启动从节点。</p><h4 id="分发"><a href="#分发" class="headerlink" title="分发"></a>分发</h4><p>使用scp命令，将配置好的hbase分发给其他cor2和cor3节点</p><blockquote><p>$ scp -r hbase-2.0.1 hadoop@cor2:&#x2F;home&#x2F;hadoop</p></blockquote><blockquote><p>$ scp -r hbase-2.0.1 hadoop@cor2:&#x2F;home&#x2F;hadoop</p></blockquote><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>进入到hbase根目录执行下面命令就可以运行hbase,<code>需要提前确保zookeeper和hadoop集群正常运行</code>。</p><blockquote><p>$ bin&#x2F;start-hbase.sh</p></blockquote><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>与Hadoop一样，hbase同样为我们提供了好看的WEB UI界面</p><table><thead><tr><th>master</th><th>regionServer</th></tr></thead><tbody><tr><td><a href="http://cor1:16010/">http://cor1:16010</a></td><td><a href="http://cor1:16030/">http://cor1:16030</a></td></tr></tbody></table><p>我们也可以在本地CLI中使用命令进入hbase shell</p><blockquote><p>$ bin&#x2F;hbase shell</p></blockquote><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>1.查看有哪些表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">hbase(main)&gt; </span><span class="language-bash">list</span><br></code></pre></td></tr></table></figure><p>2.创建表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">语法：create &lt;table&gt;, &#123;NAME =&gt; &lt;family&gt;, VERSIONS =&gt; &lt;VERSIONS&gt;&#125;</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">例如：创建表t1，有两个family name：f1，f2，且版本数均为2</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">hbase(main)&gt; </span><span class="language-bash">create <span class="hljs-string">&#x27;t1&#x27;</span>,&#123;NAME =&gt; <span class="hljs-string">&#x27;f1&#x27;</span>, VERSIONS =&gt; 2&#125;,&#123;NAME =&gt; <span class="hljs-string">&#x27;f2&#x27;</span>, VERSIONS =&gt; 2&#125;</span><br></code></pre></td></tr></table></figure><p>3.删除表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">hbase(main)&gt; </span><span class="language-bash"><span class="hljs-built_in">disable</span> <span class="hljs-string">&#x27;t1&#x27;</span></span><br><span class="hljs-meta prompt_">hbase(main)&gt; </span><span class="language-bash">drop <span class="hljs-string">&#x27;t1&#x27;</span></span><br></code></pre></td></tr></table></figure><p>4.查看表的结构</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">语法：describe &lt;table&gt;</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">例如：查看表t1的结构</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">hbase(main)&gt; </span><span class="language-bash">describe <span class="hljs-string">&#x27;t1&#x27;</span></span><br></code></pre></td></tr></table></figure><p>5.修改表结构</p><p>修改表结构必须先disable</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">语法：alter <span class="hljs-string">&#x27;t1&#x27;</span>, &#123;NAME =&gt; <span class="hljs-string">&#x27;f1&#x27;</span>&#125;, &#123;NAME =&gt; <span class="hljs-string">&#x27;f2&#x27;</span>, METHOD =&gt; <span class="hljs-string">&#x27;delete&#x27;</span>&#125;</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">例如：修改表test1的cf的TTL为180天</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">hbase(main)&gt; </span><span class="language-bash"><span class="hljs-built_in">disable</span> <span class="hljs-string">&#x27;test1&#x27;</span></span><br><span class="hljs-meta prompt_">hbase(main)&gt; </span><span class="language-bash">alter <span class="hljs-string">&#x27;test1&#x27;</span>,&#123;NAME=&gt;<span class="hljs-string">&#x27;body&#x27;</span>,TTL=&gt;<span class="hljs-string">&#x27;15552000&#x27;</span>&#125;,&#123;NAME=&gt;<span class="hljs-string">&#x27;meta&#x27;</span>, TTL=&gt;<span class="hljs-string">&#x27;15552000&#x27;</span>&#125;</span><br><span class="hljs-meta prompt_">hbase(main)&gt; </span><span class="language-bash"><span class="hljs-built_in">enable</span> <span class="hljs-string">&#x27;test1&#x27;</span></span><br></code></pre></td></tr></table></figure><p>6.添加数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">语法：put &lt;table&gt;,&lt;rowkey&gt;,&lt;family:column&gt;,&lt;value&gt;,&lt;timestamp&gt;</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">例如：给表t1的添加一行记录：rowkey是rowkey001，family name：f1，column name：col1，value：value01，timestamp：系统默认</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">hbase(main)&gt; </span><span class="language-bash">put <span class="hljs-string">&#x27;t1&#x27;</span>,<span class="hljs-string">&#x27;rowkey001&#x27;</span>,<span class="hljs-string">&#x27;f1:col1&#x27;</span>,<span class="hljs-string">&#x27;value01&#x27;</span></span><br></code></pre></td></tr></table></figure><p>7.查询数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">语法：get &lt;table&gt;,&lt;rowkey&gt;,[&lt;family:column&gt;,....]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">例如：查询表t1，rowkey001中的f1下的col1的值</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">hbase(main)&gt; </span><span class="language-bash">get <span class="hljs-string">&#x27;t1&#x27;</span>,<span class="hljs-string">&#x27;rowkey001&#x27;</span>, <span class="hljs-string">&#x27;f1:col1&#x27;</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">或者：</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">hbase(main)&gt; </span><span class="language-bash">get <span class="hljs-string">&#x27;t1&#x27;</span>,<span class="hljs-string">&#x27;rowkey001&#x27;</span>, &#123;COLUMN=&gt;<span class="hljs-string">&#x27;f1:col1&#x27;</span>&#125;</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查询表t1，rowke002中的f1下的所有列值</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">hbase(main)&gt; </span><span class="language-bash">get <span class="hljs-string">&#x27;t1&#x27;</span>,<span class="hljs-string">&#x27;rowkey001&#x27;</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">语法：scan &lt;table&gt;, &#123;COLUMNS =&gt; [ &lt;family:column&gt;,.... ], LIMIT =&gt; num&#125;</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">另外，还可以添加STARTROW、TIMERANGE和FITLER等高级功能</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">例如：扫描表t1的前5条数据</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">hbase(main)&gt; </span><span class="language-bash">scan <span class="hljs-string">&#x27;t1&#x27;</span>,&#123;LIMIT=&gt;5&#125;</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">语法：count &lt;table&gt;, &#123;INTERVAL =&gt; intervalNum, CACHE =&gt; cacheNum&#125;</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">INTERVAL设置多少行显示一次及对应的rowkey，默认1000；CACHE每次去取的缓存区大小，默认是10，调整该参数可提高查询速度</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">例如，查询表t1中的行数，每100条显示一次，缓存区为500</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">hbase(main)&gt; </span><span class="language-bash">count <span class="hljs-string">&#x27;t1&#x27;</span>, &#123;INTERVAL =&gt; 100, CACHE =&gt; 500&#125;</span><br></code></pre></td></tr></table></figure><p>8.删除数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">语法：delete &lt;table&gt;, &lt;rowkey&gt;,  &lt;family:column&gt; , &lt;timestamp&gt;,必须指定列名</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">例如：删除表t1，rowkey001中的f1:col1的数据</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">hbase(main)&gt; </span><span class="language-bash">delete <span class="hljs-string">&#x27;t1&#x27;</span>,<span class="hljs-string">&#x27;rowkey001&#x27;</span>,<span class="hljs-string">&#x27;f1:col1&#x27;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">注：将删除改行f1:col1列所有版本的数据</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">语法：deleteall &lt;table&gt;, &lt;rowkey&gt;,  &lt;family:column&gt; , &lt;timestamp&gt;，可以不指定列名，删除整行数据</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">例如：删除表t1，rowk001的数据</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">hbase(main)&gt; </span><span class="language-bash">deleteall <span class="hljs-string">&#x27;t1&#x27;</span>,<span class="hljs-string">&#x27;rowkey001&#x27;</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">语法： <span class="hljs-built_in">truncate</span> &lt;table&gt;</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">其具体过程是：<span class="hljs-built_in">disable</span> table -&gt; drop table -&gt; create table</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">例如：删除表t1的所有数据</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">hbase(main)&gt; </span><span class="language-bash"><span class="hljs-built_in">truncate</span> <span class="hljs-string">&#x27;t1&#x27;</span></span><br></code></pre></td></tr></table></figure><p>前些日子去日本旅游，blog停更几天。后面需要继续加油了！！</p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hbase</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为什么使用scala</title>
    <link href="/2018/05/22/2018-05-22-scala-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8scala/"/>
    <url>/2018/05/22/2018-05-22-scala-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8scala/</url>
    
    <content type="html"><![CDATA[<p>近期Scala十分火，很大一部分是spark的原因;当然另一个很重要的原因，Scala本身确实也是一个十分不错的语言,Scala是一门多范式编程语言，以JVM为目标环境，将面向对象和函数式编程有机地结合在一起，带来独特的编程体验。虽然JDK 8以后也推出了lambda,但是Scala与其相比还是略胜一筹。</p><p>Scala的作者<a href="https://baike.baidu.com/item/Martin%20Odersky/8898309?fr=aladdin">Martin Odersky</a>早期曾是JVM的核心代码提供者，所以他在编写Scala时也尽量弥补Java中存在的不足。Martin Odersky曾说“没有一门预言能像Scala这样,让我产生持续的兴趣和热情，让我重新感受到学习、思考和解决问题的乐趣”。</p><p>正如你所看到的 Scala底层也是跑在JVM上的，所以它与Java集成度非常高，我们可以直接拿Scala调用已经写好的Java接口实现无缝对接。目前已经有很多公司和个人采用Scala来构建他们的平台和应用，作为JVM上第一个获得广泛成功的非Java语言，Scala正以它独特的魅力吸引着越来越多人的热情投入。</p><p><img src="https://i.loli.net/2019/07/02/5d1aafbb6ac2629758.jpg" alt="image"></p><p>Scala语言表达能力十分强，一行代码抵得上Java多行，开发速度快；Scala是静态编译的，所以和JRuby,Groovy比起来速度会快很多。可以看到上图中Sacala程序员工作状态略显轻松。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>到Scala官网<a href="https://www.scala-lang.org/download/%E4%B8%8B%E8%BD%BD%E5%AF%B9%E5%BA%94%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F%E5%B9%B6%E5%AE%89%E8%A3%85,%E5%90%8E%E7%BB%AD%E9%85%8D%E7%BD%AE%E5%A5%BD%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">https://www.scala-lang.org/download/下载对应操作系统安装程序并安装,后续配置好环境变量</a></p><h2 id="Helloword"><a href="#Helloword" class="headerlink" title="Helloword"></a>Helloword</h2><p>创建HelloScala.scala文件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><br><span class="hljs-built_in">object</span> <span class="hljs-title class_">HelloScala</span>&#123;<br><br>    def <span class="hljs-title function_">main</span>(<span class="hljs-params">args:<span class="hljs-built_in">Array</span>[<span class="hljs-built_in">String</span>]</span>) &#123;<br>        <span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;hello scala!&quot;</span>);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>编译</p><blockquote><p>$ scalac HelloScala.scala</p></blockquote><p>运行</p><blockquote><p>$ scala HelloScala</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Scala</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>forge开发环境Setup</title>
    <link href="/2018/05/12/2018-05-12-forge-forge%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83Setup/"/>
    <url>/2018/05/12/2018-05-12-forge-forge%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83Setup/</url>
    
    <content type="html"><![CDATA[<p>windows下搭建forge官网提供的案例<a href="https://github.com/Autodesk-Forge/forge-rcdb.nodejs">链接</a>,编译器使用vscode。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>安装 node</li><li>安装 git</li><li>安装 MongoDB</li><li>注册Autodesk Developer帐号</li><li>配置项目</li><li>启动项目</li></ul><h2 id="安装-node"><a href="#安装-node" class="headerlink" title="安装 node"></a>安装 node</h2><p>推荐使用nvm安装,<a href="https://github.com/coreybutler/nvm-windows/releases">github</a> 下载并安装最新版的nvm。</p><p>使用管理员权限打开命令提示符输入如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">nvm install 8.11.1<br>npm install -g --production windows-build-tools<br>npm install -g cross-env<br></code></pre></td></tr></table></figure><p>配置npm以及yarn</p><p>打开powershell或命令行输入如下命令，将npm使用淘宝的镜像进行加速并安装yarn：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm config set registry=https://registry.npm.taobao.org<br>npm install -g yarn<br>yarn config set registry https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure><h2 id="安装-git"><a href="#安装-git" class="headerlink" title="安装 git"></a>安装 git</h2><p>安装git命令行客户端或SourceTree等GUI客户端。</p><p>命令行下输入</p><blockquote><p>$ git clone <a href="https://github.com/Autodesk-Forge/forge-rcdb.nodejs.git">https://github.com/Autodesk-Forge/forge-rcdb.nodejs.git</a></p></blockquote><p>GUI客户端用界面操作将<a href="https://github.com/Autodesk-Forge/forge-rcdb.nodejs.git">https://github.com/Autodesk-Forge/forge-rcdb.nodejs.git</a> clone到本地。</p><h2 id="安装-MongoDB"><a href="#安装-MongoDB" class="headerlink" title="安装 MongoDB"></a>安装 MongoDB</h2><p>下载Robo 3t客户端 （ <a href="https://robomongo.org/download">https://robomongo.org/download</a> ）。</p><p>连接本地mongo（默认不用认证直接连接）</p><p>创建database: forge-rcdb</p><p>给该database创建用户，并授予readWrite权限。</p><p>将forge-rcdb项目中 resources\db\dev 目录下的数据导入mongodb。</p><p>mongodb相关一些指令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo service mongod start<br>mongo -uroot -p<br>mongoimport -h localhost:27017 -d forge-rcdb  /home/zyh/workspace/nodejs/forge-rcdb.nodejs/resources/db/dev<br>less /etc/mongod.conf<br></code></pre></td></tr></table></figure><h2 id="注册Autodesk-Developer帐号"><a href="#注册Autodesk-Developer帐号" class="headerlink" title="注册Autodesk Developer帐号"></a>注册Autodesk Developer帐号</h2><p>访问 <a href="https://developer.autodesk.com/myapps/create">https://developer.autodesk.com/myapps/create</a> 创建 App。<br>Callback URL设为 <a href="http://localhost:3000/api/forge/callback/oauth">http://localhost:3000/api/forge/callback/oauth</a> 。<br>记录下Client ID以及Client Secret</p><h2 id="配置项目"><a href="#配置项目" class="headerlink" title="配置项目"></a>配置项目</h2><p>编辑forge-rcdb项目中的config\development.config.js 将database部分的设置为刚安装的mongodb的信息。</p><p>可选：将Client Id以及Client Secret替换掉Client Id以及Client Secret部分。</p><p>在forge-rcdb项目目录下执行</p><blockquote><p>yarn install</p></blockquote><h2 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h2><p>执行如下命令可以启动项目：</p><blockquote><p>cross-env NODE_ENV&#x3D;development HOT_RELOADING&#x3D;true FORGE_DEV_CLIENT_SECRET&#x3D;<Client Secret> FORGE_DEV_CLIENT_ID&#x3D;<Client Id> npm start</p></blockquote><p>若上一步中将Client Id以及Secret写入到配置文件，运行如下命令启动项目</p><blockquote><p>cross-env NODE_ENV&#x3D;development HOT_RELOADING&#x3D;true npm start</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Autodesk</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Forge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>try-catch影响性能？</title>
    <link href="/2018/05/12/2018-05-12-java-try-catch%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98/"/>
    <url>/2018/05/12/2018-05-12-java-try-catch%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>今天在审查代码时，发现自己的查询接口并没有try-catch。开始这样写是因为觉得写try-catch没必要，查询不可能会发生异常，但后来想了想又不太对，假如以后拓展接口，在查询后又用了查询后信息呢？就会抛空指针异常了！为了保证接口的健壮性，最好还是要加上try-catch。那么到底try-catch影不影响程序执行的速度？</p><p>网上也有好多类似的博客，去解释这个问题。结果是：try-catch不影响性能，严格意义上说，如果不是百万级别的数据并发，try-catch对程序的影响是微乎其微的。</p><p>有人做过例子，可以参考一下<a href="https://blog.csdn.net/axuanqq/article/details/51328964">参考blog</a></p><p>在stackoverflow上老外也帮着讲了一下try-catch的运行机制<a href="https://stackoverflow.com/questions/141560/should-try-catch-go-inside-or-outside-a-loop">参考链接1</a><a href="https://www.javaworld.com/article/2076868/learn-java/how-the-java-virtual-machine-handles-exceptions.html">参考链接2</a></p><p>总结:</p><p>如果在运行时，程序抛了异常就会去查异常表,这是影响性能的主要原因。</p><p>至于在哪里写try-catch，其实只是影响了异常表里的两个变量而已（起始地址、结束地址），写在哪里跟應不影响性能是没有关系的。</p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>问题总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue环境搭建</title>
    <link href="/2018/05/12/2018-05-12-vue-vue%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2018/05/12/2018-05-12-vue-vue%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>安装vue脚手架</li><li>初始化项目</li><li>运行项目</li></ul><h2 id="安装vue脚手架"><a href="#安装vue脚手架" class="headerlink" title="安装vue脚手架"></a>安装vue脚手架</h2><blockquote><p>sudo npm install -g vue-cli</p></blockquote><p>#初始化项目</p><p>使用list可以查看已存在的模板。</p><blockquote><p>vue list</p></blockquote><p>用init命令执行默认模板是webpack来初始化项目sell</p><blockquote><p>vue init webpack sell</p></blockquote><h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><p>使用npm 构建项目(在init时指定的是yarn，这里就使用yarn install)，install会下载项目具备的依赖包</p><blockquote><p>npm install</p></blockquote><p>然后就可以运行项目了</p><blockquote><p>npm run dev</p></blockquote><p>访问localhost:8080</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据样本的离散程度计算</title>
    <link href="/2018/05/10/2018-05-10-ubuntu-%E6%95%B0%E6%8D%AE%E6%A0%B7%E6%9C%AC%E7%9A%84%E7%A6%BB%E6%95%A3%E7%A8%8B%E5%BA%A6%E8%AE%A1%E7%AE%97/"/>
    <url>/2018/05/10/2018-05-10-ubuntu-%E6%95%B0%E6%8D%AE%E6%A0%B7%E6%9C%AC%E7%9A%84%E7%A6%BB%E6%95%A3%E7%A8%8B%E5%BA%A6%E8%AE%A1%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<p>统计数据样本的离散程度方法大致可分为三种：<code>极差</code>、<code>方差</code>、<code>标准差</code>，样本数据</p><p><img src="https://i.loli.net/2019/06/30/5d1856ad6d04b17498.jpg" alt="image"></p><p>极差只能简单计算数据存在的区间分布范围情况，它在计算离散程度时存在着很大的问题。计算方式如下：</p><p>极差 &#x3D; 样本数据最大值 - 样本数据最小值</p><p>方差计算公式如下：</p><p>$$\sigma^2&#x3D;\frac{1}{N}\sum_{i&#x3D;1}^N{\left(x_i-\mu\right)^2}$$</p><p><img src="https://i.loli.net/2019/06/30/5d1856ae3df8298577.jpg" alt="image"></p><p>如果觉得计算比较麻烦可以用推导后的公式计算</p><p><img src="https://i.loli.net/2019/06/30/5d1856b0410f331233.jpg" alt="image"></p><p>方差相比极差而言，可以准确描述数据样本的离散程度,但是它也存在这问题。就是在描述数据样本的离散度时会丢失单位精度，这是因为在原样本的基础上进行了平方操作。假如原样本的每个数都有单位<code>米</code>(m),那么我们在求方差后，<code>米</code>就变成了<code>平方米</code>。</p><p>为了解决这个问题，引入了标准差,计算公式只需要对方差开方就可以了。</p><p>$$\sigma&#x3D;\sqrt[2]{\sigma^2}$$</p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu16.04 Teamviewer不能远程控制</title>
    <link href="/2018/05/08/2018-05-08-ubuntu-ubuntu16.04%E4%B8%8D%E8%83%BD%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6.1/"/>
    <url>/2018/05/08/2018-05-08-ubuntu-ubuntu16.04%E4%B8%8D%E8%83%BD%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6.1/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>通过windows 7旗舰版 可以连接ubuntu的TeamViewer，但是鼠标不能控制电脑。ubuntu的版本是16.04TLS,TeamViewer 的版本是 13</p><p><img src="https://i.loli.net/2019/07/02/5d1aafa4411b163095.jpg" alt="image"></p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>开始以为是Ubuntu中TeamViewer的权限没有开，但是后来看了看权限是开着的</p><p><img src="https://i.loli.net/2019/07/02/5d1aafaa8e45b20675.jpg" alt="image"></p><p>在网上搜索了好久，各种说法都有，试了好多都没用。最后通过在askubuntu搜索TeamViewer关键字，一页一页看看了10几页把问题解决了，还是国外网站靠谱啊。</p><p>不能访问的原因是因为ubuntu本机某些依赖包没有装导致的。尝试运行下面指令:</p><blockquote><p>$ sudo apt-get install libjpeg62:i386 libxinerama1:i386 libxrandr2:i386 libxtst6:i386 ca-certificates</p></blockquote><p>可以看到本机运行以后又安装了两个包 <strong>libjpeg62:i386</strong> 和 <strong>libxtst6:i386</strong>，应该就是它俩的原因了。</p><p><img src="https://i.loli.net/2019/07/02/5d1aafb6c8ba651486.jpg" alt="image"></p><p>另外附上解决问题的帖子<a href="https://askubuntu.com/questions/764228/teamviewer-11-wont-run-on-ubuntu-16-04-64-bit">https://askubuntu.com/questions/764228/teamviewer-11-wont-run-on-ubuntu-16-04-64-bit</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Azkaban任务调度系统部署</title>
    <link href="/2018/05/05/2018-05-05-hadoop-Azkaban%E9%83%A8%E7%BD%B2/"/>
    <url>/2018/05/05/2018-05-05-hadoop-Azkaban%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="为什么需要工作流调度系统"><a href="#为什么需要工作流调度系统" class="headerlink" title="为什么需要工作流调度系统"></a>为什么需要工作流调度系统</h3><p>一个完整的数据分析系统通常都是由大量任务单元组成：</p><p>shell脚本程序，java程序，mapreduce程序、hive脚本等</p><p>各任务单元之间存在时间先后及前后依赖关系</p><p>为了很好地组织起这样的复杂执行计划，需要一个工作流调度系统来调度执行；</p><p>例如，我们可能有这样一个需求，某个业务系统每天产生20G原始数据，我们每天都要对其进行处理，处理步骤如下所示：</p><p>1、  通过Hadoop先将原始数据同步到HDFS上；</p><p>2、  借助MapReduce计算框架对原始数据进行转换，生成的数据以分区表的形式存储到多张Hive表中；</p><p>3、  需要对Hive中多个表的数据进行JOIN处理，得到一个明细数据Hive大表；</p><p>4、  将明细数据进行复杂的统计分析，得到结果报表信息；</p><p>5、  需要将统计分析得到的结果数据同步到业务系统中，供业务调用使用。</p><h3 id="工作流调度实现方式"><a href="#工作流调度实现方式" class="headerlink" title="工作流调度实现方式"></a>工作流调度实现方式</h3><p>简单的任务调度：直接使用linux的crontab来定义；</p><p>复杂的任务调度：开发调度平台</p><p>或使用现成的开源调度系统，比如ooize、azkaban等</p><h3 id="常见工作流调度系统"><a href="#常见工作流调度系统" class="headerlink" title="常见工作流调度系统"></a>常见工作流调度系统</h3><p>市面上目前有许多工作流调度器</p><p>在hadoop领域，常见的工作流调度器有Oozie, Azkaban,Cascading,Hamake等</p><h3 id="各种调度工具特性对比"><a href="#各种调度工具特性对比" class="headerlink" title="各种调度工具特性对比"></a>各种调度工具特性对比</h3><p>下面的表格对上述四种hadoop工作流调度器的关键特性进行了比较，尽管这些工作流调度器能够解决的需求场景基本一致，但在设计理念，目标用户，应用场景等方面还是存在显著的区别，在做技术选型的时候，可以提供参考</p><table><tr>    <td>特性</td>    <td>Hamake</td>    <td>Oozie</td>    <td>Azkaban</td>    <td>Cascading</td></tr><tr>    <td>工作流描述语言</td>    <td>XML</td>    <td>XML (xPDL based)</td>    <td>text file with key/value pairs</td>    <td>Java API</td></tr><tr>    <td>依赖机制</td>    <td>data-driven</td>    <td>explicit</td>    <td>explicit</td>    <td>explicit</td></tr><tr>    <td>是否要web容器</td>    <td>No</td>    <td>Yes</td>    <td>yes</td>    <td>yes</td></tr><tr>    <td>进度跟踪</td>    <td>console/log messages</td>    <td>web page</td>    <td>web page</td>    <td>Java API</td></tr><tr>    <td>Hadoop job调度支持</td>    <td>No</td>    <td>Yes</td>    <td>yes</td>    <td>yes</td></tr><tr>    <td>运行模式</td>    <td>command line utility</td>    <td>daemon</td>    <td>daemon</td>    <td>API</td></tr><tr>    <td>Pig支持</td>    <td>YES</td>    <td>Yes</td>    <td>yes</td>    <td>yes</td></tr><tr>    <td>事件通知</td>    <td>no</td>    <td>no</td>    <td>no</td>    <td>yes</td></tr><tr>    <td>需要安装</td>    <td>No</td>    <td>Yes</td>    <td>yes</td>    <td>no</td></tr><tr>    <td>支持的hadoop版本</td>    <td>0.18+</td>    <td>0.20+</td>    <td>currently unknown</td>    <td>0.18+</td></tr><tr>    <td>重试支持</td>    <td>no</td>    <td>workflownode evel</td>    <td>yes</td>    <td>yes</td></tr><tr>    <td>运行任意命令</td>    <td>yes</td>    <td>yes</td>    <td>yes</td>    <td>yes</td></tr><tr>    <td>Amazon EMR支持</td>    <td>yes</td>    <td>no</td>    <td>currently unknown</td>    <td>yes</td></tr></table><h3 id="Azkaban与Oozie对比"><a href="#Azkaban与Oozie对比" class="headerlink" title="Azkaban与Oozie对比"></a>Azkaban与Oozie对比</h3><p>对市面上最流行的两种调度器，给出以下详细对比，以供技术选型参考。总体来说，ooize相比azkaban是一个重量级的任务调度系统，功能全面，但配置使用也更复杂。如果可以不在意某些功能的缺失，轻量级调度器azkaban是很不错的候选对象。</p><p>详情如下:</p><p><strong>功能</strong></p><p>两者均可以调度mapreduce,pig,java,脚本工作流任务</p><p>两者均可以定时执行工作流任务</p><p><strong>工作流定义</strong></p><p>Azkaban使用Properties文件定义工作流</p><p>Oozie使用XML文件定义工作流</p><p><strong>工作流传参</strong></p><p>Azkaban支持直接传参，例如${input}</p><p>Oozie支持参数和EL表达式，例如${fs:dirSize(myInputDir)}</p><p><strong>定时执行</strong></p><p>Azkaban的定时执行任务是基于时间的</p><p>Oozie的定时执行任务基于时间和输入数据</p><p><strong>资源管理</strong></p><p>Azkaban有较严格的权限控制，如用户对工作流进行读&#x2F;写&#x2F;执行等操作</p><p>Oozie暂无严格的权限控制</p><p><strong>工作流执行</strong></p><p>Azkaban有两种运行模式，分别是soloserver mode(executor server和web server部署在同一台节点)和multi server mode(executor server和web server可以部署在不同节点)</p><p>Oozie作为工作流服务器运行，支持多用户和多工作流</p><p><strong>工作流管理</strong></p><p>Azkaban支持浏览器以及ajax方式操作工作流</p><p>Oozie支持命令行、HTTP REST、Java API、浏览器操作工作流</p><h2 id="Azkaban介绍"><a href="#Azkaban介绍" class="headerlink" title="Azkaban介绍"></a>Azkaban介绍</h2><p>Azkaban是由Linkedin开源的一个批量工作流任务调度器。用于在一个工作流内以一个特定的顺序运行一组工作和流程。Azkaban定义了一种KV文件格式来建立任务之间的依赖关系，并提供一个易于使用的web用户界面维护和跟踪你的工作流。</p><p>它有如下功能特点：</p><ul><li>Web用户界面</li><li>方便上传工作流</li><li>方便设置任务之间的关系</li><li>调度工作流</li><li>认证&#x2F;授权(权限的工作)</li><li>能够杀死并重新启动工作流</li><li>模块化和可插拔的插件机制</li><li>项目工作区</li><li>工作流和任务的日志记录和审计</li></ul><h2 id="Azkaban安装部署"><a href="#Azkaban安装部署" class="headerlink" title="Azkaban安装部署"></a>Azkaban安装部署</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>Azkaban Web服务器</p><p>azkaban-web-server-2.5.0.tar.gz</p><p>Azkaban执行服务器 </p><p>azkaban-executor-server-2.5.0.tar.gz</p><p>MySQL</p><p>目前azkaban只支持 mysql,需安装mysql服务器,本文档中默认已安装好mysql服务器,并建立了 root用户,密码 root.下载地址:<a href="http://azkaban.github.io/downloads.html">http://azkaban.github.io/downloads.html</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>将安装文件上传到集群,最好上传到安装 hive、sqoop的机器上,方便命令的执行</p><p>在当前用户目录下新建 azkabantools目录,用于存放源安装文件.新建azkaban目录,用于存放azkaban运行程序</p><h4 id="1-azkaban-web服务器安装"><a href="#1-azkaban-web服务器安装" class="headerlink" title="1.azkaban web服务器安装"></a>1.azkaban web服务器安装</h4><p>解压azkaban-web-server-2.5.0.tar.gz</p><p>命令: tar –zxvf azkaban-web-server-2.5.0.tar.gz</p><p>将解压后的azkaban-web-server-2.5.0 移动到 azkaban目录中,并重新命名 webserver</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">mv azkaban-web-server-2.5.0 ../azkaban<br>cd ../azkaban<br>mv azkaban-web-server-2.5.0  server<br></code></pre></td></tr></table></figure><h4 id="2-azkaban-执行服器安装"><a href="#2-azkaban-执行服器安装" class="headerlink" title="2.azkaban 执行服器安装"></a>2.azkaban 执行服器安装</h4><p>解压azkaban-executor-server-2.5.0.tar.gz</p><p>命令:tar –zxvf azkaban-executor-server-2.5.0.tar.gz</p><p>将解压后的azkaban-executor-server-2.5.0 移动到 azkaban目录中,并重新命名 executor</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">mv azkaban-executor-server-2.5.0  ../azkaban<br>cd ../azkaban<br>mv azkaban-executor-server-2.5.0  executor<br></code></pre></td></tr></table></figure><p>azkaban脚本导入</p><p>解压: azkaban-sql-script-2.5.0.tar.gz</p><p>命令:tar –zxvf azkaban-sql-script-2.5.0.tar.gz</p><p>将解压后的mysql 脚本,导入到mysql中:</p><p>进入mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">create database azkaban;</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">use azkaban;</span><br>Database changed<br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash"><span class="hljs-built_in">source</span>/home/hadoop/azkaban-2.5.0/create-all-sql-2.5.0.sql;</span><br></code></pre></td></tr></table></figure><h3 id="创建SSL配置"><a href="#创建SSL配置" class="headerlink" title="创建SSL配置"></a>创建SSL配置</h3><p>参考地址: <a href="http://docs.codehaus.org/display/JETTY/How+to+configure+SSL">http://docs.codehaus.org/display/JETTY/How+to+configure+SSL</a></p><p>命令: keytool -keystore keystore -alias jetty -genkey -keyalg RSA</p><p>运行此命令后,会提示输入当前生成 keystor的密码及相应信息,输入的密码请劳记,信息如下:</p><p>输入keystore密码： </p><p>再次输入新密码:</p><p>您的名字与姓氏是什么？</p><p>  [Unknown]： </p><p>您的组织单位名称是什么？</p><p>  [Unknown]： </p><p>您的组织名称是什么？</p><p>  [Unknown]： </p><p>您所在的城市或区域名称是什么？</p><p>  [Unknown]： </p><p>您所在的州或省份名称是什么？</p><p>  [Unknown]： </p><p>该单位的两字母国家代码是什么</p><p>  [Unknown]：  CN</p><p>CN&#x3D;Unknown, OU&#x3D;Unknown, O&#x3D;Unknown,L&#x3D;Unknown, ST&#x3D;Unknown, C&#x3D;CN 正确吗？</p><p>  [否]：  y</p><p>输入<jetty>的主密码</p><pre><code class="hljs">    （如果和 keystore 密码相同，按回车）： </code></pre><p>再次输入新密码:</p><p>完成上述工作后,将在当前目录生成 keystore 证书文件,将keystore 考贝到 azkaban web服务器根目录中.如:cp keystore azkaban&#x2F;server</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>注：先配置好服务器节点上的时区</p><p>1、先生成时区配置文件Asia&#x2F;Shanghai，用交互式命令 tzselect 即可</p><p>2、拷贝该时区文件，覆盖系统本地时区配置</p><p>cp &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Shanghai &#x2F;etc&#x2F;localtime </p><p>azkaban web服务器配置</p><p>进入azkaban web服务器安装目录 conf目录</p><p>v  修改azkaban.properties文件</p><p>命令vi azkaban.properties</p><h2 id="内容说明如下"><a href="#内容说明如下" class="headerlink" title="内容说明如下:"></a>内容说明如下:</h2><p><code>#</code>Azkaban Personalization Settings</p><p>azkaban.name&#x3D;Test                           #服务器UI名称,用于服务器上方显示的名字</p><p>azkaban.label&#x3D;My Local Azkaban                               #描述</p><p>azkaban.color&#x3D;#FF3601                                                 #UI颜色</p><p>azkaban.default.servlet.path&#x3D;&#x2F;index                         #</p><p>web.resource.dir&#x3D;web&#x2F;                                                 #默认根web目录</p><p><code>default.timezone.id=Asia/Shanghai</code>                           #默认时区,已改为亚洲&#x2F;上海 默认为美国</p><p><code>#</code>Azkaban UserManager class</p><p>user.manager.class&#x3D;azkaban.user.XmlUserManager   #用户权限管理默认类</p><p>user.manager.xml.file&#x3D;conf&#x2F;azkaban-users.xml              #用户配置,具体配置参加下文</p><p><code>#</code>Loader for projects</p><p>executor.global.properties&#x3D;conf&#x2F;global.properties    # global配置文件所在位置</p><p>azkaban.project.dir&#x3D;projects                                                #</p><p><code>database.type=mysql</code>                                                              #数据库类型</p><p><code>mysql.port=3306</code>                                                                       #端口号</p><p><code>mysql.host=localhost</code>                                                      #数据库连接IP</p><p><code>mysql.database=azkaban</code>                                                       #数据库实例名</p><p><code>mysql.user=root</code>                                                                 #数据库用户名</p><p><code>mysql.password=root</code>                                                          #数据库密码</p><p><code>mysql.numconnections=100</code>                                                  #最大连接数</p><p><code>#</code> Velocity dev mode</p><p>velocity.dev.mode&#x3D;false</p><p><code>#</code> Jetty服务器属性.</p><p>jetty.maxThreads&#x3D;25                                                               #最大线程数</p><p>jetty.ssl.port&#x3D;8443                                                                   #Jetty SSL端口</p><p>jetty.port&#x3D;8081                                                                         #Jetty端口</p><p><code>jetty.keystore=keystore</code>                                                          #SSL文件名</p><p><code>jetty.password=123456</code>                                                             #SSL文件密码</p><p><code>jetty.keypassword=123456</code>                                                      #Jetty主密码 与 keystore文件相同</p><p><code>jetty.truststore=keystore</code>                                                                #SSL文件名</p><p><code>jetty.trustpassword=123456</code>                                                   # SSL文件密码</p><p><code>#</code> 执行服务器属性</p><p>executor.port&#x3D;12321                                                               #执行服务器端口</p><p><code>#</code> 邮件设置</p><p>mail.sender&#x3D;<a href="mailto:&#x78;&#120;&#120;&#120;&#x78;&#x78;&#x78;&#120;&#64;&#49;&#54;&#51;&#x2e;&#x63;&#x6f;&#109;">&#x78;&#120;&#120;&#120;&#x78;&#x78;&#x78;&#120;&#64;&#49;&#54;&#51;&#x2e;&#x63;&#x6f;&#109;</a>                                       #发送邮箱</p><p>mail.host&#x3D;smtp.163.com                                                       #发送邮箱smtp地址</p><p>mail.user&#x3D;xxxxxxxx                                       #发送邮件时显示的名称</p><p>mail.password&#x3D;**********                                                 #邮箱密码</p><p>job.failure.email&#x3D;<a href="mailto:&#120;&#x78;&#x78;&#x78;&#x78;&#x78;&#x78;&#120;&#64;&#49;&#54;&#x33;&#x2e;&#x63;&#x6f;&#x6d;">&#120;&#x78;&#x78;&#x78;&#x78;&#x78;&#x78;&#120;&#64;&#49;&#54;&#x33;&#x2e;&#x63;&#x6f;&#x6d;</a>                              #任务失败时发送邮件的地址</p><p>job.success.email&#x3D;<a href="mailto:&#x78;&#x78;&#120;&#x78;&#x78;&#x78;&#120;&#120;&#64;&#49;&#54;&#x33;&#x2e;&#x63;&#x6f;&#109;">&#x78;&#x78;&#120;&#x78;&#x78;&#x78;&#120;&#120;&#64;&#49;&#54;&#x33;&#x2e;&#x63;&#x6f;&#109;</a>                            #任务成功时发送邮件的地址</p><p>lockdown.create.projects&#x3D;false                                           #</p><p>cache.directory&#x3D;cache                                                            #缓存目录</p><hr><p>v  azkaban 执行服务器executor配置</p><p>进入执行服务器安装目录conf,修改azkaban.properties</p><p>vi azkaban.properties</p><hr><p><code>#</code>Azkaban</p><p><code>default.timezone.id=Asia/Shanghai</code>                                              #时区</p><p><code>#</code> Azkaban JobTypes 插件配置</p><p>azkaban.jobtype.plugin.dir&#x3D;plugins&#x2F;jobtypes                   #jobtype 插件所在位置</p><p><code>#</code>Loader for projects</p><p>executor.global.properties&#x3D;conf&#x2F;global.properties</p><p>azkaban.project.dir&#x3D;projects</p><p><code>#</code>数据库设置</p><p>database.type&#x3D;mysql                                                 #数据库类型(目前只支持mysql)</p><p>mysql.port&#x3D;3306                                                                                #数据库端口号</p><p><code>mysql.host=192.168.20.200</code>                                                           #数据库IP地址</p><p><code>mysql.database=azkaban</code>                                                                #数据库实例名</p><p><code>mysql.user=root</code>                                                                       #数据库用户名</p><p><code>mysql.password=root</code>                                  #数据库密码</p><p>mysql.numconnections&#x3D;100                                                           #最大连接数</p><p><code>#</code> 执行服务器配置</p><p>executor.maxThreads&#x3D;50                                                                #最大线程数</p><p>executor.port&#x3D;12321                                                               #端口号(如修改,请与web服务中一致)</p><h2 id="executor-flow-threads-x3D-30-线程数"><a href="#executor-flow-threads-x3D-30-线程数" class="headerlink" title="executor.flow.threads&#x3D;30                                                                #线程数"></a>executor.flow.threads&#x3D;30                                                                #线程数</h2><p>v  用户配置</p><p>进入azkaban web服务器conf目录,修改azkaban-users.xml</p><p>vi azkaban-users.xml 增加 管理员用户</p><hr><azkaban-users><pre><code class="hljs">    &lt;user username=&quot;azkaban&quot; password=&quot;azkaban&quot; roles=&quot;admin&quot; groups=&quot;azkaban&quot; /&gt;    &lt;user username=&quot;metrics&quot; password=&quot;metrics&quot; roles=&quot;metrics&quot;/&gt;    `&lt;user username=&quot;admin&quot; password=&quot;admin&quot; roles=&quot;admin,metrics&quot; /&gt;`    &lt;role name=&quot;admin&quot; permissions=&quot;ADMIN&quot; /&gt;    &lt;role name=&quot;metrics&quot; permissions=&quot;METRICS&quot;/&gt;</code></pre></azkaban-users>---<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><h4 id="web服务器"><a href="#web服务器" class="headerlink" title="web服务器"></a>web服务器</h4><p>在azkaban web服务器目录下执行启动命令</p><p>bin&#x2F;azkaban-web-start.sh</p><p>注:在web服务器根目录运行</p><p>或者启动到后台</p><p>nohup bin&#x2F;azkaban-web-start.sh 1&gt;&#x2F;tmp&#x2F;azstd.out 2&gt;&#x2F;tmp&#x2F;azerr.out &amp;</p><h4 id="执行服务器"><a href="#执行服务器" class="headerlink" title="执行服务器"></a>执行服务器</h4><p>在执行服务器目录下执行启动命令</p><p>bin&#x2F;azkaban-executor-start.sh</p><p>注:只能要执行服务器根目录运行</p><p>启动完成后,在浏览器(建议使用谷歌浏览器)中输入https:&#x2F;&#x2F;服务器IP地址:8443 ,即可访问azkaban服务了.在登录中输入刚才新的户用名及密码,点击 login.</p><h2 id="Azkaban实战"><a href="#Azkaban实战" class="headerlink" title="Azkaban实战"></a>Azkaban实战</h2><p>Azkaba内置的任务类型支持command、java</p><h2 id="Command类型单一job示例"><a href="#Command类型单一job示例" class="headerlink" title="Command类型单一job示例"></a>Command类型单一job示例</h2><p>1、创建job描述文件</p><p>vi command.job</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">command.job</span><br>type=command<br>command=echo &#x27;hello&#x27;<br></code></pre></td></tr></table></figure><p>2、将job资源文件打包成zip文件<br>zip -r command.zip command.job</p><p>3、通过azkaban的web管理平台创建project并上传job压缩包</p><p>首先创建project</p><p><img src="https://i.loli.net/2019/06/30/5d1847cb3400120269.jpg" alt="image"></p><p>上传zip包</p><p><img src="https://i.loli.net/2019/06/30/5d18576f0293651460.jpg" alt="image"></p><p>4、启动执行该job</p><h2 id="Command类型多job工作流flow"><a href="#Command类型多job工作流flow" class="headerlink" title="Command类型多job工作流flow"></a>Command类型多job工作流flow</h2><p>1、创建有依赖关系的多个job描述</p><p>第一个job：foo.job</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">foo.job</span><br>type=command<br>command=echo foo<br></code></pre></td></tr></table></figure><p>第二个job：bar.job依赖foo.job</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">bar.job</span><br>type=command<br>dependencies=foo<br>command=echo bar<br></code></pre></td></tr></table></figure><p>2、将所有job资源文件打到一个zip包中</p><p>3、在azkaban的web管理界面创建工程并上传zip包</p><p>4、启动工作流flow</p><h2 id="HDFS操作任务"><a href="#HDFS操作任务" class="headerlink" title="HDFS操作任务"></a>HDFS操作任务</h2><p>1、创建job描述文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">fs.job</span><br>type=command<br>command=/home/hadoop/apps/hadoop-2.6.1/bin/hadoop fs -mkdir /azaz<br></code></pre></td></tr></table></figure><p>2、将job资源文件打包成zip文件</p><p>3、通过azkaban的web管理平台创建project并上传job压缩包</p><p>4、启动执行该job</p><h2 id="MAPREDUCE任务"><a href="#MAPREDUCE任务" class="headerlink" title="MAPREDUCE任务"></a>MAPREDUCE任务</h2><p>Mr任务依然可以使用command的job类型来执行</p><p>1、创建job描述文件，及mr程序jar包（示例中直接使用hadoop自带的examplejar）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">mrwc.job</span><br>type=command<br>command=/home/hadoop/apps/hadoop-2.6.1/bin/hadoop  jar hadoop-mapreduce-examples-2.6.1.jar wordcount /wordcount/input /wordcount/azout<br></code></pre></td></tr></table></figure><p>2、将所有job资源文件打到一个zip包中</p><p>3、在azkaban的web管理界面创建工程并上传zip包</p><p>4、启动job</p><h2 id="HIVE脚本任务"><a href="#HIVE脚本任务" class="headerlink" title="HIVE脚本任务"></a>HIVE脚本任务</h2><p>l  创建job描述文件和hive脚本</p><p>Hive脚本： test.sql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">use default;<br>load data local inpath &#x27;/home/hadoop/demo.json&#x27; into table statis;<br>insert into table statis_new<br>select get_json_object(line,&#x27;$.username&#x27;) as username,get_json_object(line,&#x27;$.visitdate&#x27;) as visitdate,get_json_object(line,&#x27;$.visit&#x27;) as visitdate,get_json_object(line,&#x27;$.visit&#x27;) as sumvisit from statis;<br>insert overwrite table statis_new<br>select A.username,A.visitdate,max(A.visit) as visit,sum(B.visit) as sumvisit<br>from <br>(select username,visitdate,sum(visit) as visit<br>from statis_new<br>group by username,visitdate)A<br>inner join<br>(select username,visitdate,sum(visit) as visit<br>from statis_new<br>group by username,visitdate)B<br>on A.username = B.username<br>where B.visitdate &lt;= A.visitdate<br>group by A.username,A.visitdate;<br></code></pre></td></tr></table></figure><p>Job描述文件：hivef.job</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">hivef.job</span><br>type=command<br>command=/home/hadoop/apps/hive/bin/hive -f &#x27;test.sql&#x27;<br></code></pre></td></tr></table></figure><p>2、将所有job资源文件打到一个zip包中</p><p>3、在azkaban的web管理界面创建工程并上传zip包</p><p>4、启动job</p><p>感谢博主分享，很不错的资料很全面，转载一波<a href="https://blog.csdn.net/hblfyla/article/details/74384915">https://blog.csdn.net/hblfyla/article/details/74384915</a></p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Azkaban</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MapReduce小例子</title>
    <link href="/2018/05/04/2018-05-04-hadoop-MapReduce%E5%B0%8F%E4%BE%8B%E5%AD%90/"/>
    <url>/2018/05/04/2018-05-04-hadoop-MapReduce%E5%B0%8F%E4%BE%8B%E5%AD%90/</url>
    
    <content type="html"><![CDATA[<p>案例一 : 统计单词出现个数</p><p>a  b  a  b a<br>a  b  a  b a<br>b a b a b  a  b a<br>b a b  </p><p>a,1 a,1 a,1 a,1 a,1 a,1 a,1 a,1 a,1 <code>|</code> b,1 b,1 b,1 b,1 b,1 b,1 b,1 b,1 b,1</p><p>k -&gt; a  values -&gt; 1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1<br>sum &#x3D; 0<br>for (int i&#x3D;0; values.length ; i++){<br>    sum ++;<br>}  </p><p>案例二 : 统计手机上下行流量</p><p>17654565484    80000000   6000<br>17654565484    80000000   6000<br>17654565484    80000000   6000<br>17654565484    80000000   6000<br>17654565484    80000000   6000<br>17654565484    80000000   6000<br>15565658787    54455455   5464654<br>15565658787    54455455   5464654<br>15565658787    54455455   5464654<br>15565658787    54455455   5464654<br>15565658787    54455455   5464654  </p><p>17654565484,bean 17654565484,bean 17654565484,bean 17654565484,bean <code>|</code> 15565658787,bean 15565658787,bean 15565658787,bean 15565658787,bean</p><p>k -&gt; 17654565484  values -&gt; bean ,bean ,bean ,bean</p><p>sumUpStream &#x3D; 0<br>sumDownStream &#x3D; 0<br>for (int i&#x3D;0; values.length ; i++){<br>    sumUpStream +&#x3D; bean.upStream();<br>    sumDownStream +&#x3D; bean.DOwnStream();<br>}  </p><p>案例三 : 统计两个人的共同好友</p><p>A : B,C,D<br>B : E,F,D<br>C : E,D  </p><p>B,A C,A D,A E,B F,B D,B E,C D,C -&gt;  B,A <code>|</code> C,A <code>|</code> D,A D,B D,C <code>|</code> E,B E,C <code>|</code> F,B</p><p>B : A<br>C : A<br>D : A ,B ,C<br>E : B ,C<br>F : B  </p><p>A ,B的好友是D<br>A ,C的好友是D</p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MapReduce</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flume日志收集系统部署</title>
    <link href="/2018/05/04/2018-05-04-hadoop-flume%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/"/>
    <url>/2018/05/04/2018-05-04-hadoop-flume%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/06/30/5d185621173a293040.jpg" alt="image"></p><p>flume 是cloudera提供的一个高可靠、高可用、分布式的日志采集、聚合和传输的工具，flume最大的特点就是可以方便的定义各种sources(从哪收)和sinks(放在哪)，来适应我们不同的业务场景。</p><hr><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>进入flume的目录，修改conf下的flume-env.sh，在里面配置JAVA_HOME</p><h4 id="1-从网络端口接收数据，下沉到logger"><a href="#1-从网络端口接收数据，下沉到logger" class="headerlink" title="1. 从网络端口接收数据，下沉到logger"></a>1. 从网络端口接收数据，下沉到logger</h4><p>在flume的conf目录下新建一个文件，将下面内容写进去</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Name the components on this agent</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">给那三个组件取个名字</span><br>a1.sources = r1<br>a1.sinks = k1<br>a1.channels = c1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Describe/configure the <span class="hljs-built_in">source</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">类型, 从网络端口接收数据,在本机启动, 所以localhost, <span class="hljs-built_in">type</span>=spoolDir采集目录源,目录里有就采</span><br>a1.sources.r1.type = netcat<br>a1.sources.r1.bind = localhost<br>a1.sources.r1.port = 44444<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Describe the sink</span><br>a1.sinks.k1.type = logger<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Use a channel <span class="hljs-built_in">which</span> buffers events <span class="hljs-keyword">in</span> memory</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">下沉的时候是一批一批的, 下沉的时候是一个个eventChannel参数解释：</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">capacity：默认该通道中最大的可以存储的event数量</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">trasactionCapacity：每次最大可以从<span class="hljs-built_in">source</span>中拿到或者送到sink中的event数量</span><br>a1.channels.c1.type = memory<br>a1.channels.c1.capacity = 1000<br>a1.channels.c1.transactionCapacity = 100<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Bind the <span class="hljs-built_in">source</span> and sink to the channel</span><br>a1.sources.r1.channels = c1<br>a1.sinks.k1.channel = c1<br></code></pre></td></tr></table></figure><p>启动命令：  告诉flum启动一个agent,指定配置参数, –name:agent的名字  </p><blockquote><p>$ bin&#x2F;flume-ng agent –conf conf –conf-file conf&#x2F;netcat-logger.conf –name a1 -Dflume.root.logger&#x3D;INFO,console</p></blockquote><hr><h4 id="2-监视文件夹"><a href="#2-监视文件夹" class="headerlink" title="2. 监视文件夹"></a>2. 监视文件夹</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#############</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Name the components on this agent</span><br>a1.sources = r1<br>a1.sinks = k1<br>a1.channels = c1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Describe/configure the <span class="hljs-built_in">source</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">监听目录,spoolDir指定目录, fileHeader要不要给文件夹前坠名</span><br>a1.sources.r1.type = spooldir<br>a1.sources.r1.spoolDir = /home/hadoop/flumespool<br>a1.sources.r1.fileHeader = true<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Describe the sink</span><br>a1.sinks.k1.type = logger<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Use a channel <span class="hljs-built_in">which</span> buffers events <span class="hljs-keyword">in</span> memory</span><br>a1.channels.c1.type = memory<br>a1.channels.c1.capacity = 1000<br>a1.channels.c1.transactionCapacity = 100<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Bind the <span class="hljs-built_in">source</span> and sink to the channel</span><br>a1.sources.r1.channels = c1<br>a1.sinks.k1.channel = c1<br></code></pre></td></tr></table></figure><p>启动命令：  </p><blockquote><p>$ bin&#x2F;flume-ng agent -c .&#x2F;conf -f .&#x2F;conf&#x2F;spool-logger.conf -n a1 -Dflume.root.logger&#x3D;INFO,console</p></blockquote><p><code>注:测试： 往/home/hadoop/flumeSpool放文件（mv ././xxxFile /home/hadoop/flumeSpool），但是不要在里面生成文件</code></p><hr><h4 id="3-用tail命令获取数据，下沉到hdfs"><a href="#3-用tail命令获取数据，下沉到hdfs" class="headerlink" title="3.用tail命令获取数据，下沉到hdfs"></a>3.用tail命令获取数据，下沉到hdfs</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#######</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Name the components on this agent</span><br>a1.sources = r1<br>a1.sinks = k1<br>a1.channels = c1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Describe/configure the <span class="hljs-built_in">source</span></span><br>a1.sources.r1.type = exec<br>a1.sources.r1.command = tail -F /home/hadoop/log/test.log<br>a1.sources.r1.channels = c1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Describe the sink</span><br>a1.sinks.k1.type = hdfs<br>a1.sinks.k1.channel = c1<br>a1.sinks.k1.hdfs.path = /flume/events/%y-%m-%d/%H%M/<br>a1.sinks.k1.hdfs.filePrefix = events-<br><span class="hljs-meta prompt_"># </span><span class="language-bash">每个10分钟重新生成一个新的时间目录</span><br>a1.sinks.k1.hdfs.round = true<br>a1.sinks.k1.hdfs.roundValue = 10<br>a1.sinks.k1.hdfs.roundUnit = minute<br><span class="hljs-meta prompt_"># </span><span class="language-bash">文件的滚动周期(秒)</span><br>a1.sinks.k1.hdfs.rollInterval = 3<br><span class="hljs-meta prompt_"># </span><span class="language-bash">文件大小滚动(bytes)</span><br>a1.sinks.k1.hdfs.rollSize = 20<br><span class="hljs-meta prompt_"># </span><span class="language-bash">写入多少个event后滚动,事件个数</span><br>a1.sinks.k1.hdfs.rollCount = 5<br>a1.sinks.k1.hdfs.batchSize = 1<br>a1.sinks.k1.hdfs.useLocalTimeStamp = true<br><span class="hljs-meta prompt_">#</span><span class="language-bash">生成的文件类型，默认是Sequencefile，可用DataStream，则为普通文本</span><br>a1.sinks.k1.hdfs.fileType = DataStream<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Use a channel <span class="hljs-built_in">which</span> buffers events <span class="hljs-keyword">in</span> memory</span><br>a1.channels.c1.type = memory<br>a1.channels.c1.capacity = 1000<br>a1.channels.c1.transactionCapacity = 100<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Bind the <span class="hljs-built_in">source</span> and sink to the channel</span><br>a1.sources.r1.channels = c1<br>a1.sinks.k1.channel = c1<br></code></pre></td></tr></table></figure><p>启动命令：</p><blockquote><p>bin&#x2F;flume-ng agent -c conf -f conf&#x2F;tail-hdfs.conf -n a1</p></blockquote><hr><h4 id="4-多个agent串联"><a href="#4-多个agent串联" class="headerlink" title="4. 多个agent串联"></a>4. 多个agent串联</h4><p>agent1配置如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Name the components on this agent</span><br>a1.sources = r1<br>a1.sinks = k1<br>a1.channels = c1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Describe/configure the <span class="hljs-built_in">source</span></span><br>a1.sources.r1.type = avro<br>a1.sources.r1.channels = c1<br>a1.sources.r1.bind = 0.0.0.0<br>a1.sources.r1.port = 4141<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Describe the sink</span><br>a1.sinks.k1.type = logger<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Use a channel <span class="hljs-built_in">which</span> buffers events <span class="hljs-keyword">in</span> memory</span><br>a1.channels.c1.type = memory<br>a1.channels.c1.capacity = 1000<br>a1.channels.c1.transactionCapacity = 100<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Bind the <span class="hljs-built_in">source</span> and sink to the channel</span><br>a1.sources.r1.channels = c1<br>a1.sinks.k1.channel = c1<br></code></pre></td></tr></table></figure><p>启动:</p><blockquote><p>$ bin&#x2F;flume-ng agent –conf conf –conf-file conf&#x2F;avro-hdfs.conf –name a1 -Dflume.root.logger&#x3D;DEBUG,console</p></blockquote><p>agent2配置如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#################</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Name the components on this agent</span><br>a1.sources = r1<br>a1.sinks = k1<br>a1.channels = c1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Describe/configure the <span class="hljs-built_in">source</span></span><br>a1.sources.r1.type = exec<br>a1.sources.r1.command = tail -F /home/hadoop/log/test.log<br>a1.sources.r1.channels = c1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Describe the sink</span><br>a1.sinks = k1<br>a1.sinks.k1.type = avro<br>a1.sinks.k1.channel = c1<br>a1.sinks.k1.hostname = hadoop01<br>a1.sinks.k1.port = 4141<br>a1.sinks.k1.batch-size = 2<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Use a channel <span class="hljs-built_in">which</span> buffers events <span class="hljs-keyword">in</span> memory</span><br>a1.channels.c1.type = memory<br>a1.channels.c1.capacity = 1000<br>a1.channels.c1.transactionCapacity = 100<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Bind the <span class="hljs-built_in">source</span> and sink to the channel</span><br>a1.sources.r1.channels = c1<br>a1.sinks.k1.channel = c1<br><br></code></pre></td></tr></table></figure><p>启动命令：</p><blockquote><p>$ bin&#x2F;flume-ng agent –conf conf –conf-file conf&#x2F;tail-avro-avro-logger.conf –name a1 -Dflume.root.logger&#x3D;DEBUG,console</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Flume</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建基于Hadoop的Hive数据仓库</title>
    <link href="/2018/05/03/2018-05-03-hadoop-%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8EHadoop%E7%9A%84Hive%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
    <url>/2018/05/03/2018-05-03-hadoop-%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8EHadoop%E7%9A%84Hive%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<p>Hive是基于Hadoop的一个数据仓库，我们可以将结构化的数据映射为一张数据库表，为此提供类似与SQL的HQL来查询数据。使用Hive可以提高我们的开发效率，缩短开发周期，最重要的是它降低了编写MapReduce编写的难度，可能在应对很复杂的mapReduce程序时,我们只需要写一条简单的sql就可以实现具体功能了。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>我们可以从Hive的官网<a href="https://hive.apache.org/%E4%B8%8B%E8%BD%BD%E5%AF%B9%E5%BA%94%E7%9A%84%E5%AE%89%E8%A3%85%E5%8C%85%E3%80%82">https://hive.apache.org/下载对应的安装包。</a></p><p><img src="https://i.loli.net/2019/06/30/5d18564f9e5c453261.jpg" alt="image"></p><p>这里我使用的版本是1.2.1。</p><hr><h4 id="1-修改配置文件"><a href="#1-修改配置文件" class="headerlink" title="1.修改配置文件"></a>1.修改配置文件</h4><blockquote><p>$ cp hive-env.sh.template hive-env.sh</p></blockquote><p>在末尾加上下面语句，配置好环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">export JAVA_HOME=/usr/local/jdk1.8.0_161<br>export HADOOP_HOME=/home/hadoop/hadoop-2.7.3<br>export HIVE_HOME=/home/hadoop/apache-hive-1.2.1-bin<br>export HIVE_CONF_DIR=/data/apache-hive-1.2.2-bin/conf<br></code></pre></td></tr></table></figure><p>创建 <code>conf/hive-site.xml</code>文件</p><blockquote><p>$ cd conf;touch hive-site.xml</p></blockquote><p>在里面指定要链接的数据库,<strong>javax.jdo.option.ConnectionURL</strong>参数用于指定我们存放数据元的地方</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>jdbc:mysql://zyh:3306/hivedb?createDatabaseIfNotExist=true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>什么是元数据？<code>元数据</code>就是可以理解为<code>描述数据的数据</code>，这边写的是本机的mysql,这些<code>描述数据的数据</code>会存在mysql的hive库中，你可以在启动hive以后查看一下mysql数据这些数据到底长什么样子。</p><p><img src="https://i.loli.net/2019/06/30/5d185652e9cda20604.jpg" alt="image"></p><p>拷贝hadoop目录下配置文件到当前目录</p><blockquote><p>$ cp $HADOOP_HOME&#x2F;etc&#x2F;hadoop&#x2F;core-site.xml .</p></blockquote><blockquote><p>$ cp $HADOOP_HOME&#x2F;etc&#x2F;hadoop&#x2F;hdfs-site.xml .</p></blockquote><hr><h4 id="2-启动Hive"><a href="#2-启动Hive" class="headerlink" title="2.启动Hive"></a>2.启动Hive</h4><p>下面两种方法都可以启动</p><blockquote><p>$ cd apache-hive-1.2.1-bin ; bin&#x2F;hive</p></blockquote><p>或者</p><blockquote><p>$ hive –service hiveserver2 –hiveconf hive.server2.thrift.port&#x3D;10000 –hiveconf hive.root.logger&#x3D;INFO,console</p></blockquote><blockquote><p>$ bin&#x2F;beeline -u jdbc:hive2:&#x2F;&#x2F;cor1:10000 -n hadoop</p></blockquote><p>我使用的是第一种方法</p><p><img src="https://i.loli.net/2019/06/30/5d185654dbe3a17046.jpg" alt="image"></p><h2 id="Hive一些简单操作"><a href="#Hive一些简单操作" class="headerlink" title="Hive一些简单操作"></a>Hive一些简单操作</h2><p>下面是一些简单的操作。</p><h4 id="1-创建外部表"><a href="#1-创建外部表" class="headerlink" title="1.创建外部表"></a>1.创建外部表</h4><blockquote><p>create external table extertable(id string,name string) row format delimited fields terminated by ‘,’;</p></blockquote><h4 id="2-插入数据"><a href="#2-插入数据" class="headerlink" title="2.插入数据"></a>2.插入数据</h4><p>现在本地生成一个文本<strong>extertable.txt</strong>,在里面输入下面内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">1,zhangsan<br>2,lisi<br>3,wangwu<br>4,tom<br>5,jerry<br>6,cetty<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/06/30/5d1856561f07318369.jpg" alt="image"></p><p>使用下面命令就可以将数据导入到表中</p><blockquote><p>load data local inpath ‘xxxx&#x2F;xxxx&#x2F;extertable.txt’ into table extertable;</p></blockquote><h4 id="3-查询"><a href="#3-查询" class="headerlink" title="3.查询"></a>3.查询</h4><blockquote><p>select * from extertable;</p></blockquote><h2 id="Hive分桶"><a href="#Hive分桶" class="headerlink" title="Hive分桶"></a>Hive分桶</h2><p>其实Hive的本质还是在帮助我们运行MapReduce，它会将HQL按模板转化成指定MapReduce代码。这里说一下Hive分桶的概念，那么什么是分桶，为什么会用分桶。我们知道在运行MapReduce程序时，可以指定多个Reduce Task来处理不同partition的数据，Hive的分桶就可以很好的实现这个功能，<code>将不同的reduce task 生成的数据导入到不同的文件中</code>。</p><p>我们可以使用下面的语句来创建一个带分桶的表，值得注意的是，在使用分桶表时，错误的做法是直接往表里insert数据，这是不对的。正确的思路是，从其他的表中查询出数据，然后插入到该表中。</p><blockquote><p>create table student(id int, age int,name string) partitioned by (stat_data string) clustered by (id) sorted by (age) into 2 buckets row format delimited fields terminated by ‘,’;</p></blockquote><p>那么分桶后有什么好处呢？</p><p>最大的好处应该是提高join的效率。</p><p>数据经过分区，排序后，相同的id会被放在同一个桶内，这时再做链接查询时，就不会遍历全表。</p><h2 id="Hive-自定义函数"><a href="#Hive-自定义函数" class="headerlink" title="Hive 自定义函数"></a>Hive 自定义函数</h2><p>Hive为我们提供了很多内置函数。除此之外还提供了自定义的接口，说其中一种实现套路继承UDF</p><h4 id="1-继承UDF，并重载evaluate方法"><a href="#1-继承UDF，并重载evaluate方法" class="headerlink" title="1. 继承UDF，并重载evaluate方法"></a>1. 继承UDF，并重载evaluate方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bim.hive;<br><span class="hljs-keyword">import</span> org.apache.hadoop.hive.ql.exec.UDF;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Lower</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">UDF</span> &#123;<br>    <span class="hljs-keyword">public</span> Text <span class="hljs-title function_">evaluate</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Text s)</span>&#123;<br>        <span class="hljs-keyword">if</span>(s==<span class="hljs-literal">null</span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;&#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Text</span>(s.toString().toLowerCase());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-打成jar包上传到服务器"><a href="#2-打成jar包上传到服务器" class="headerlink" title="2.打成jar包上传到服务器"></a>2.打成jar包上传到服务器</h4><p>这边推荐使用Eclipse打包成jar，我使用IDEA打包好久，比较麻烦。。</p><h4 id="3-将jar包添加到hive的classpath"><a href="#3-将jar包添加到hive的classpath" class="headerlink" title="3.将jar包添加到hive的classpath"></a>3.将jar包添加到hive的classpath</h4><blockquote><p>add JAR &#x2F;home&#x2F;hadoop&#x2F;udf.jar;</p></blockquote><h4 id="4-4、-创建临时函数与开发好的java-class关联"><a href="#4-4、-创建临时函数与开发好的java-class关联" class="headerlink" title="4.4、 创建临时函数与开发好的java class关联"></a>4.4、 创建临时函数与开发好的java class关联</h4><blockquote><p>create temporary function toprovince as ‘cn.itcast.bigdata.udf.ToProvince’;</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hive</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HDFS源码刨析-FileSystem初始化</title>
    <link href="/2018/04/27/2018-04-27-hdfs-HDFS%E6%BA%90%E7%A0%81%E5%88%A8%E6%9E%90-FileSystem%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <url>/2018/04/27/2018-04-27-hdfs-HDFS%E6%BA%90%E7%A0%81%E5%88%A8%E6%9E%90-FileSystem%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>理一下HDFS上传的工作原理，然后追一下源码。上传工作原理和源码刨析放下一篇总结。</p><p>本机环境:</p><table><tr>    <td>操作系统</td>    <td>ubuntu 16.0.4TLS</td></tr><tr>    <td>hadoop版本</td>    <td>hadoop-2.7.3</td></tr><tr>    <td>HA</td>    <td>否（随便搭了个分布式）</td></tr></table><hr><h2 id="HDFS上传文件原理图"><a href="#HDFS上传文件原理图" class="headerlink" title="HDFS上传文件原理图"></a>HDFS上传文件原理图</h2><p><img src="https://i.loli.net/2019/07/02/5d1aaf9126b9331118.jpg" alt="image"></p><ol start="0"><li>Client会将文件切分成指定大小的块(block),块的大小默认128M</li><li>Client会从第一个块开始，向NameNode发起上传文件请求，通过RPC与NameNode建立通讯。</li><li>DataNode定时向NameNode汇报自己持有的数据信息(<strong>心跳机制</strong>)。NameNode收到上传文件请求选择合适的DataNode节点信息(<strong>MetaData</strong>)返回给Client。</li><li>Client读取MetaData与DataNode2建立链接，并告诉DataNode_2，还想把这份文件传送给DataNode_3和DataNode_4，随后数据以packet数据包的形式传输，中间会经过chunk校验等。</li><li>dataNode_2拿到数据将数据存入磁盘，与dataNode_3建立连接，传给dataNode_3,同理完成dataNode_4传输。中间只要有一个成功及判定为成功。</li></ol><h2 id="元数据存储"><a href="#元数据存储" class="headerlink" title="元数据存储"></a>元数据存储</h2><p>可以将<code>元数据</code>理解为<code>描述数据的数据</code>,红色部分就是元数据。</p><p><img src="https://i.loli.net/2019/07/02/5d1aaf9633d2287355.jpg" alt="image"></p><p>元数据是从fsimage文件中读取出来的，在我们对hdfs进行操作时，元数据都会发生改变，那么fsimage的数据是谁写进去的？SecondNameNode中用了一种机制可以帮助实现这个操作，叫checkPoint。这的水有点神，后续专门进行详述。</p><h2 id="HDFS下载文件原理图"><a href="#HDFS下载文件原理图" class="headerlink" title="HDFS下载文件原理图"></a>HDFS下载文件原理图</h2><p><img src="https://i.loli.net/2019/07/02/5d1aaf9bbb73695968.jpg" alt="image"></p><ol><li>Client请求NameNode下载BLK_1块数据,</li><li>NameNode查找MetaData元数据</li><li>NameNode将MetaData元数据返回给Client</li><li>Client与元数据中任意一台机器建立链接并下载数据(重复此过程下载BLK_2)</li><li>在FileOutputStream中完成BLK_1块和BLK_2块的合并</li></ol><h2 id="FileSystem初始化源码分析"><a href="#FileSystem初始化源码分析" class="headerlink" title="FileSystem初始化源码分析"></a>FileSystem初始化源码分析</h2><p>我们先简单使用hadoop提供的API来实现文件的上传下载（文件删除、改名等操作比较简单，这里不演示）。</p><p>不管我们进行什么操作，只要是对hdfs上的文件进行操作，必须对FileSystem进行初始化，我们先来分析FileSystem的初始化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span>&#123;<br>    <span class="hljs-keyword">try</span>&#123;<br>         <span class="hljs-comment">// 打断点</span><br>        fs = FileSystem.get(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URI</span>(<span class="hljs-string">&quot;hdfs://cor1:9000&quot;</span>),configuration);<br>    &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> FileSystem <span class="hljs-title function_">get</span><span class="hljs-params">(URI uri, Configuration conf)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">scheme</span> <span class="hljs-operator">=</span> uri.getScheme();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">authority</span> <span class="hljs-operator">=</span> uri.getAuthority();<br>    <span class="hljs-keyword">if</span>(scheme == <span class="hljs-literal">null</span> &amp;&amp; authority == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> get(conf);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span>(scheme != <span class="hljs-literal">null</span> &amp;&amp; authority == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">URI</span> <span class="hljs-variable">disableCacheName</span> <span class="hljs-operator">=</span> getDefaultUri(conf);<br>            <span class="hljs-keyword">if</span>(scheme.equals(disableCacheName.getScheme()) &amp;&amp; disableCacheName.getAuthority() != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> get(disableCacheName, conf);<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">disableCacheName1</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;fs.%s.impl.disable.cache&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;scheme&#125;);<br>        <span class="hljs-comment">// 注意这里的CACHE.get(uri,conf)跟进去</span><br>        <span class="hljs-keyword">return</span> conf.getBoolean(disableCacheName1, <span class="hljs-literal">false</span>)?createFileSystem(uri, conf):CACHE.get(uri, conf);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">FileSystem <span class="hljs-title function_">get</span><span class="hljs-params">(URI uri, Configuration conf)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    FileSystem.Cache.<span class="hljs-type">Key</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileSystem</span>.Cache.Key(uri, conf);<br>    <span class="hljs-comment">// 跟进去</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.getInternal(uri, conf, key);<br>&#125;<br></code></pre></td></tr></table></figure><p>这个方法最终返回FileSystem的子类DistributedFileSystem</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> FileSystem <span class="hljs-title function_">getInternal</span><span class="hljs-params">(URI uri, Configuration conf, FileSystem.Cache.Key key)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    FileSystem fs;<br>    <span class="hljs-comment">// 这里使用了单例模式，第一次初始化fileSystem的时候会稍微慢点，后续再来拿就直接从map里面取</span><br>    <span class="hljs-keyword">synchronized</span>(<span class="hljs-built_in">this</span>) &#123;<br>        fs = (FileSystem)<span class="hljs-built_in">this</span>.map.get(key);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(fs != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> fs;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 跟进去</span><br>        fs = FileSystem.createFileSystem(uri, conf);<br>        <span class="hljs-keyword">synchronized</span>(<span class="hljs-built_in">this</span>) &#123;<br>            <span class="hljs-type">FileSystem</span> <span class="hljs-variable">oldfs</span> <span class="hljs-operator">=</span> (FileSystem)<span class="hljs-built_in">this</span>.map.get(key);<br>            <span class="hljs-keyword">if</span>(oldfs != <span class="hljs-literal">null</span>) &#123;<br>                fs.close();<br>                <span class="hljs-keyword">return</span> oldfs;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.map.isEmpty() &amp;&amp; !ShutdownHookManager.get().isShutdownInProgress()) &#123;<br>                    ShutdownHookManager.get().addShutdownHook(<span class="hljs-built_in">this</span>.clientFinalizer, <span class="hljs-number">10</span>);<br>                &#125;<br><br>                fs.key = key;<br>                <span class="hljs-built_in">this</span>.map.put(key, fs);<br>                <span class="hljs-keyword">if</span>(conf.getBoolean(<span class="hljs-string">&quot;fs.automatic.close&quot;</span>, <span class="hljs-literal">true</span>)) &#123;<br>                    <span class="hljs-built_in">this</span>.toAutoClose.add(key);<br>                &#125;<br><br>                <span class="hljs-keyword">return</span> fs;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> FileSystem <span class="hljs-title function_">createFileSystem</span><span class="hljs-params">(URI uri, Configuration conf)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> getFileSystemClass(uri.getScheme(), conf);<br>    <span class="hljs-type">FileSystem</span> <span class="hljs-variable">fs</span> <span class="hljs-operator">=</span> (FileSystem)ReflectionUtils.newInstance(clazz, conf);<br>    <span class="hljs-comment">// 跟进去注意直接点是不行的，在DistributedFileSystem的initialize方法上打断点</span><br>    fs.initialize(uri, conf);<br>    <span class="hljs-keyword">return</span> fs;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initialize</span><span class="hljs-params">(URI uri, Configuration conf)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-built_in">super</span>.initialize(uri, conf);<br>    <span class="hljs-built_in">this</span>.setConf(conf);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> uri.getHost();<br>    <span class="hljs-keyword">if</span>(host == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IOException</span>(<span class="hljs-string">&quot;Incomplete HDFS URI, no host: &quot;</span> + uri);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">this</span>.homeDirPrefix = conf.get(<span class="hljs-string">&quot;dfs.user.home.dir.prefix&quot;</span>, <span class="hljs-string">&quot;/user&quot;</span>);<br>    <span class="hljs-comment">// 在这里初始化DFSClient并指向fileSystem里的一个引用</span><br>        <span class="hljs-built_in">this</span>.dfs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DFSClient</span>(uri, conf, <span class="hljs-built_in">this</span>.statistics);<br>        <span class="hljs-built_in">this</span>.uri = URI.create(uri.getScheme() + <span class="hljs-string">&quot;://&quot;</span> + uri.getAuthority());<br>        <span class="hljs-built_in">this</span>.workingDir = <span class="hljs-built_in">this</span>.getHomeDirectory();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@VisibleForTesting</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">DFSClient</span><span class="hljs-params">(URI nameNodeUri, ClientProtocol rpcNamenode, Configuration conf, Statistics stats)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-built_in">this</span>.clientRunning = <span class="hljs-literal">true</span>;<br>    <span class="hljs-built_in">this</span>.r = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>    <span class="hljs-built_in">this</span>.filesBeingWritten = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>    SpanReceiverHost.get(conf, <span class="hljs-string">&quot;dfs.client.htrace.&quot;</span>);<br>    <span class="hljs-built_in">this</span>.traceSampler = (<span class="hljs-keyword">new</span> <span class="hljs-title class_">SamplerBuilder</span>(TraceUtils.wrapHadoopConf(<span class="hljs-string">&quot;dfs.client.htrace.&quot;</span>, conf))).build();<br>    <span class="hljs-built_in">this</span>.dfsClientConf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DFSClient</span>.Conf(conf);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.dfsClientConf.useLegacyBlockReaderLocal) &#123;<br>        LOG.debug(<span class="hljs-string">&quot;Using legacy short-circuit local reads.&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 代码太多直截了部分代码</span><br>    .....<br>    <span class="hljs-keyword">if</span>(proxyInfo != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-built_in">this</span>.dtService = proxyInfo.getDelegationTokenService();<br>        <span class="hljs-built_in">this</span>.namenode = (ClientProtocol)proxyInfo.getProxy();<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(rpcNamenode != <span class="hljs-literal">null</span>) &#123;<br>        Preconditions.checkArgument(nameNodeUri == <span class="hljs-literal">null</span>);<br>        <span class="hljs-built_in">this</span>.namenode = rpcNamenode;<br>        <span class="hljs-built_in">this</span>.dtService = <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        Preconditions.checkArgument(nameNodeUri != <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;null URI&quot;</span>);<br>        proxyInfo = NameNodeProxies.createProxy(conf, nameNodeUri, ClientProtocol.class, nnFallbackToSimpleAuth);<br>        <span class="hljs-built_in">this</span>.dtService = proxyInfo.getDelegationTokenService();<br>        <span class="hljs-comment">// 初始化代理对象,负责RPC远程调用,指向DFSClient的namenode引用,当客户端拿到了NameNode的代理对象后，即与NameNode建立了RPC通信</span><br>        <span class="hljs-built_in">this</span>.namenode = (ClientProtocol)proxyInfo.getProxy();<br>    &#125;<br>.....<br>&#125;<br></code></pre></td></tr></table></figure><p>到此，FileSystem的初始化就基本完成。后续分析上传、下载源码，然后理一下SecondNameNode的CheckPoint机制。</p><p>本人水平有限，不当之处希望各位高手指正。另外插入是在word中画的，看起来不精致请见谅。</p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HDFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FTP多线程批量文件下载</title>
    <link href="/2018/04/25/2018-04-25-thread-FTP%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%89%B9%E9%87%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/"/>
    <url>/2018/04/25/2018-04-25-thread-FTP%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%89%B9%E9%87%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<p>最近接到个业务需要使用FTP拉取服务器上数据。要求可以任意指定下载对应目录数据，并且目录结构保持要。处理的数据文件特点分散而且很大。处理的思路大概有两个，一个是在服务端压缩成zip，然后传过来。二是使用多线程单个单个文件传输。在这里我使用的是第二中方法。</p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>1.服务端提供一个返回指定文件下的<code>List&lt;String&gt; files</code></p><p>2.客户端拿到files文件列表，遍历单个单个文件请求服务端拉取数据</p><h2 id="FTP下载使用"><a href="#FTP下载使用" class="headerlink" title="FTP下载使用"></a>FTP下载使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">downloadFromFtp</span><span class="hljs-params">(String middlePath, String fileName, String localPath)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-keyword">return</span> downloadFromFtp(url, port, username, password,middlePath, fileName, localPath);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">downloadFromFtp</span><span class="hljs-params">(String url, <span class="hljs-type">int</span> port, String</span><br><span class="hljs-params">            username, String password, String path, String fileName, String localpath)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">FTPClient</span> <span class="hljs-variable">ftp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FTPClient</span>();<span class="hljs-comment">//org.apache.commons.net.ftp</span><br>        <span class="hljs-type">int</span> reply;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (port &gt; -<span class="hljs-number">1</span>) &#123;<br>                ftp.connect(url, port);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                ftp.connect(url);<span class="hljs-comment">//ftp默认的端口是21</span><br>            &#125;<br>            <span class="hljs-comment">//很多人写的是用ftp.getReplyCode()给获取连接的返回值,但是这样会导致storeFileStream返回null</span><br>            ftp.login(username, password);<br>            ftp.enterLocalActiveMode();<br>            ftp.setFileType(FTPClient.BINARY_FILE_TYPE);<br>            reply = ftp.getReplyCode();<br>            <span class="hljs-keyword">if</span> (!FTPReply.isPositiveCompletion(reply)) &#123;<br>                ftp.disconnect();<br>                <span class="hljs-keyword">return</span> flag;<br>            &#125;<br>            <span class="hljs-comment">//切换目录 此处可以判断,切换失败就说明ftp上面没有这个路径</span><br>            ftp.changeWorkingDirectory(path);<br>            <span class="hljs-comment">//上传文件</span><br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-comment">//创建本地的文件时候要把编码格式转回来</span><br>            <span class="hljs-type">File</span> <span class="hljs-variable">localDir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(localpath +<span class="hljs-string">&quot;/&quot;</span> + path);<br>            <span class="hljs-keyword">if</span>(!localDir.exists())&#123;<br>                localDir.mkdirs();<br>            &#125;<br>            fileName = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(fileName.getBytes(<span class="hljs-string">&quot;ISO-8859-1&quot;</span>), <span class="hljs-string">&quot;utf-8&quot;</span>);<br>            <span class="hljs-type">File</span> <span class="hljs-variable">localFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(localpath + <span class="hljs-string">&quot;/&quot;</span> + path + <span class="hljs-string">&quot;/&quot;</span> + fileName);<br>            out = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(localFile);<br>            <span class="hljs-comment">//ftp.enterLocalPassiveMode();</span><br>            in = ftp.retrieveFileStream(fileName);<br>            <span class="hljs-type">byte</span>[] byteArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">4096</span>];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">read</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> ((read = in.read(byteArray)) != -<span class="hljs-number">1</span>) &#123;<br>                out.write(byteArray, <span class="hljs-number">0</span>, read);<br>            &#125;<br>            <span class="hljs-comment">//这句很重要 要多次操作这个ftp的流的通道,要等他的每次命令完成</span><br>            ftp.completePendingCommand();<br>            out.flush();<br>            out.close();<br>            ftp.logout();<br>            flag = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (ftp.isConnected()) &#123;<br>                ftp.disconnect();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> flag;<br>    &#125;<br><br></code></pre></td></tr></table></figure><p>downloadFromFtp传入参数说明String </p><table><tr>    <td>参数</td>    <td>解释</td></tr><tr>    <td>url</td>    <td>ftp的ip地址</td></tr><tr>    <td>port</td>    <td>ftp的端口(默认21)</td></tr><tr>    <td>usernameport</td>    <td>ftp用户名</td></tr><tr>    <td>password</td>    <td>ftp密码</td></tr><tr>    <td>path</td>    <td>特别重要，一开报输入流为null就是因为它写错了;假如你的ftp根目录为C:/ftp/,你想要下载C:/ftp/xxx/下的文件,那么path就要写xxx/</td></tr><tr>    <td>fileName</td>    <td>下载文件的名称</td></tr><tr>    <td>localpath</td>    <td>下载到本地的路径</td></tr></table><h2 id="server返回制定文件列表"><a href="#server返回制定文件列表" class="headerlink" title="server返回制定文件列表"></a>server返回制定文件列表</h2><p>用户给定一个path，查处path下所有的文件，放在list，以json形式返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 递归查询所有的文件</span><br><span class="hljs-keyword">public</span> ArrayList <span class="hljs-title function_">listFiles</span><span class="hljs-params">(String path,ArrayList files)</span>&#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">directory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path);<br>    File[] currentFiles = directory.listFiles();<br>    <span class="hljs-keyword">for</span> (File file:currentFiles) &#123;<br>        <span class="hljs-keyword">if</span> (file.isDirectory())&#123;<br>            listFiles(file.getPath(),files);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            files.add(file);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> files;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="client获取返回列表下载文件"><a href="#client获取返回列表下载文件" class="headerlink" title="client获取返回列表下载文件"></a>client获取返回列表下载文件</h2><p>四类线程池基本的线程池概述，这边按需求选择，我这里选了定长线程池FixedThreadPool</p><ul><li>FixedThreadPool 定长的线程池，初始化时指定线程的个数，当线程池中线程被用完时，其他任务阻塞等待</li><li>CachedThreadPool 不定长线程池，无限扩大的线程池，来几个任务分配几个线程。</li><li>SimpleThreadPool 单例线程，底层采用LinkedBlockQueue实现，除了排在队列最前面的线程以外的其他线程都要等着。</li><li>ScheduleThreadPol 在初始化时可以指定时间帮助我们处理延时任务和定时任务。</li></ul><p>客户端的思路:<br>1.使用HttpClient从后台发送请求获取待下载files列表<br>2.将DownloadThread分配给FixedThreadPool运行</p><p>这边主要看DownloadThread.java如何编写，以及如何分配给fixedThreadPool</p><p>DownloadThread.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bim.task;<br><br><span class="hljs-keyword">import</span> com.bim.common.FtpUtils;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DownLoadThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br>    <span class="hljs-type">List</span> <span class="hljs-variable">files</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">ftpPath</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">baseLocalPath</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">public</span>  <span class="hljs-title function_">DownLoadThread</span><span class="hljs-params">(List files,String ftpPath,String baseLocalPath)</span>&#123;<br>        <span class="hljs-built_in">this</span>.files = files;<br>        <span class="hljs-built_in">this</span>.ftpPath = ftpPath;<br>        <span class="hljs-built_in">this</span>.baseLocalPath = baseLocalPath;<br>    &#125;<br><br>    <span class="hljs-comment">// 下载文件的具体业务</span><br>    <span class="hljs-comment">// ftpPath ftp地址（c:/ftp）</span><br>    <span class="hljs-comment">// baseLocalPath 目标地址</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">downloadFile</span><span class="hljs-params">(String file,String ftpPath,String baseLocalPath)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">dllPath</span> <span class="hljs-operator">=</span> file.toString().replaceAll(<span class="hljs-string">&quot;\\\\&quot;</span>,<span class="hljs-string">&quot;/&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">lastIndexOf</span> <span class="hljs-operator">=</span> dllPath.lastIndexOf(<span class="hljs-string">&quot;/&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">middlePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/&quot;</span>;<br>        <span class="hljs-keyword">if</span>(ftpPath.length() - <span class="hljs-number">1</span> &lt;= lastIndexOf)&#123;<br>            middlePath = dllPath.substring(ftpPath.length(),lastIndexOf+<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> dllPath.substring(lastIndexOf + <span class="hljs-number">1</span>,dllPath.length());<br>        System.out.println(<span class="hljs-string">&quot;filename&quot;</span> + fileName);<br>        System.out.println(<span class="hljs-string">&quot;baseLocalPath&quot;</span> + baseLocalPath);<br>        System.out.println(<span class="hljs-string">&quot;开始下载:&quot;</span> + middlePath + fileName + <span class="hljs-string">&quot;到本地&quot;</span> + baseLocalPath);<br>        <span class="hljs-comment">// 调用ftp下载文件</span><br>        FtpUtils.downloadFromFtp(middlePath,fileName,baseLocalPath);<br>        System.out.println(middlePath + fileName + <span class="hljs-string">&quot;下载成功&quot;</span>);<br><br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-keyword">while</span>(!files.isEmpty())&#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>                <span class="hljs-keyword">synchronized</span>(files)&#123;<br>                    file = (String) files.get(<span class="hljs-number">0</span>);<br>                    files.remove(<span class="hljs-number">0</span>);<br>                &#125;<br>                downloadFile(file,ftpPath,baseLocalPath);<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>主程序拿到files后的逻辑代码部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PullFileClient</span> &#123;<br>     <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">fixedThreadPool</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br>    <br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        Map&lt;String,Object&gt; resultMap = client.sendGet(requestUrl);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> resultMap.get(<span class="hljs-string">&quot;code&quot;</span>);<br>        <span class="hljs-comment">// 获取文件列表数据</span><br>        <span class="hljs-type">List</span> <span class="hljs-variable">files</span> <span class="hljs-operator">=</span> (List) resultMap.get(<span class="hljs-string">&quot;data&quot;</span>);<br>        <span class="hljs-comment">// ftp的根目录 (c:/ftp)</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">ftpPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;c:/FTP/&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">baseLocalPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/home/zyh/Documents/tmp4/&quot;</span>;<br>        fixedThreadPool.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DownLoadThread</span>(files,ftpPath,baseLocalPath));<br>        fixedThreadPool.shutdown();<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FTP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MapReduce切片规划源码剖析</title>
    <link href="/2018/04/22/2018-04-22-mapreduce-MapReduce%E5%88%87%E7%89%87%E8%A7%84%E5%88%92%E6%BA%90%E7%A0%81%E5%88%A8%E6%9E%90/"/>
    <url>/2018/04/22/2018-04-22-mapreduce-MapReduce%E5%88%87%E7%89%87%E8%A7%84%E5%88%92%E6%BA%90%E7%A0%81%E5%88%A8%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>切片规划最终会形成一个文件job.split。里面存放这切片信息，首先要明确一点是maptask的数量于切片的数量有直接对应关系。mrappmaster在启动maptask时，会去job.split文件中找切片信息，有几个切片就启动几个maptask，每个切片分配一个maptask并行实例。我们通过追源码，找到了这个文件。<br><img src="https://i.loli.net/2019/07/02/5d1aaf3d1623e18146.jpg" alt="image"></p><p>MapReduce框架会把它存在我们本机的某个路径。它是MapReduce对于待处理数据的一个描述信息文件。</p><p>关于切片需要注意的几点:</p><ol><li>文件是怎么进行切分的？</li><li>切片的大小是怎么控制的？</li></ol><hr><h2 id="源码追踪"><a href="#源码追踪" class="headerlink" title="源码追踪"></a>源码追踪</h2><p>根据源码追踪，发现切片的划分是在FileInputFormat的getSplits()方法中完成的。getSplits的大致业务逻辑可分为下列几个阶段</p><ul><li>根据配置文件拿到切片大小，源码Math.max(minSize, Math.min(maxSize, blockSize));(如果我们没有设置过mapreduce.input.fileinputformat.split.minsize，mapreduce.input.fileinputformat.split.maxsize,那么默认的切片大小为128M，及为hdfs中block块大小)</li><li>根据不同的文件系统，获取文件规划的上传目录。（hdfs-&gt; hdfs:&#x2F;&#x2F;…..&#x2F;.staging&#x2F;jobid或file-&gt;file:&#x2F;&#x2F;…..&#x2F;.staging&#x2F;jobid）</li><li>根据用户指定的hdfs目录找到对应的所有文件</li><li>遍历所有文件，拿到文件的元数据，对每个文件进行切片规划</li><li>规划的一个策略：根据拿到的切片大小来切每个文件,假如文件大小为300M,切片大小为128M,那么走完循环后文件会被分为3块(0-128,128-256,256-300)</li><li>将切片封装为job.split</li><li>生成其他信息,比如job.xml(所有的参数信息)。</li><li>将生成的所有文件以流的形式写到指定上传目录，也就是hdfs:&#x2F;&#x2F;….&#x2F;.staging&#x2F;jobid</li></ul><hr><p>一步一步断点调试,通过本地运行MapReduce程序,进入debug。先在<code>job.waitForCompletion(true);</code>打断点。</p><p><img src="https://i.loli.net/2019/07/02/5d1aaf4a3e7fb29757.jpg" alt="image"></p><p>发现会进入<code>submitter.submitJobInternal()</code>,跳进去</p><p><img src="https://i.loli.net/2019/07/02/5d1aaf55c689225911.jpg" alt="image"></p><p>可以看到拿到了<code>jobStagingArea</code>,后续拿到了<code>jobId</code>,最后拼成了<code>submitJobDir</code>。这个目录就是上面提到的job.split存放的目录。</p><p><img src="https://i.loli.net/2019/07/02/5d1aaf608a04477982.jpg" alt="image"></p><p>拿到submitJobDir以后，MapReduce开始调用<code>this.writeSplits(job, submitJobDir)</code>对文件进行逻辑切分，形成job.split文件(后续详细解析里面的内部详情)</p><p><img src="https://i.loli.net/2019/07/02/5d1aaf6f0d49492866.jpg" alt="image"></p><p>后续获取配置信息。形成job.xml文件，这个文件里面定义了hadoop中各种各样的配置信息</p><p><img src="https://i.loli.net/2019/07/02/5d1aaf7bc14b539508.jpg" alt="image"></p><p>最后将job.split,job.xml,写到对应的submitJobDir目录下。</p><hr><h2 id="深入writeSplits逻辑"><a href="#深入writeSplits逻辑" class="headerlink" title="深入writeSplits逻辑"></a>深入writeSplits逻辑</h2><p>在this.writeSplites()我们如何跳到具体方法中，我们直接ctrl+左键点进取以后会发现是一个抽象类InputFormat。</p><p>是这样如果你在初始化job是没有指定用哪个inputFormat,那么mapreduce框架默认会使用TextInputFormat</p><p>使用快捷键<code>ctrl+shift+T</code>搜索TextInputFormat,我们会发现找不到<code>getSplits</code>方法，这是因为方法在父类里面，进去父类<code>FileInputFormat</code>中就可以找到了，在第一行打断点运行就可以跳进去了。</p><p>InputFormat的类结构图</p><p><img src="https://i.loli.net/2019/07/02/5d1aaf837122867524.jpg" alt="image"></p><p>来看看getSplits方法的具体逻辑，我直接把源码粘过来了,我在关键的地方加了注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;InputSplit&gt; <span class="hljs-title function_">getSplits</span><span class="hljs-params">(JobContext job)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">StopWatch</span> <span class="hljs-variable">sw</span> <span class="hljs-operator">=</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">StopWatch</span>()).start();<br><span class="hljs-comment">// 调节切片大小的参数1</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">minSize</span> <span class="hljs-operator">=</span> Math.max(<span class="hljs-built_in">this</span>.getFormatMinSplitSize(), getMinSplitSize(job));<br>    <span class="hljs-comment">// 调节切片大小的参数1        </span><br><span class="hljs-type">long</span> <span class="hljs-variable">maxSize</span> <span class="hljs-operator">=</span> getMaxSplitSize(job);<br>    <span class="hljs-type">ArrayList</span> <span class="hljs-variable">splits</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>    <span class="hljs-comment">// 拿到待处理的文件</span><br>    <span class="hljs-type">List</span> <span class="hljs-variable">files</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.listStatus(job);<br>    <span class="hljs-type">Iterator</span> <span class="hljs-variable">i$</span> <span class="hljs-operator">=</span> files.iterator();<br><br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-comment">// 循环处理每个文件</span><br>            <span class="hljs-keyword">while</span>(i$.hasNext()) &#123;<br>                <span class="hljs-type">FileStatus</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> (FileStatus)i$.next();<br>                <span class="hljs-type">Path</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> file.getPath();<br>                <span class="hljs-type">long</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> file.getLen();<br>                <span class="hljs-keyword">if</span>(length != <span class="hljs-number">0L</span>) &#123;<br>                    BlockLocation[] blkLocations;<br>                    <span class="hljs-keyword">if</span>(file <span class="hljs-keyword">instanceof</span> LocatedFileStatus) &#123;<br>                        blkLocations = ((LocatedFileStatus)file).getBlockLocations();<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-type">FileSystem</span> <span class="hljs-variable">blockSize</span> <span class="hljs-operator">=</span> path.getFileSystem(job.getConfiguration());<br>                        blkLocations = blockSize.getFileBlockLocations(file, <span class="hljs-number">0L</span>, length);<br>                    &#125;<br><br>                    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.isSplitable(job, path)) &#123;<br>                        <span class="hljs-type">long</span> <span class="hljs-variable">blockSize1</span> <span class="hljs-operator">=</span> file.getBlockSize();<br>                <span class="hljs-comment">// splitSize是一个重要的参数，它根据minSize和maxSize计算出切片的大小（点进查看计算方式）</span><br>                        <span class="hljs-type">long</span> <span class="hljs-variable">splitSize</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.computeSplitSize(blockSize1, minSize, maxSize);<br><br>                        <span class="hljs-type">long</span> bytesRemaining;<br>                        <span class="hljs-type">int</span> blkIndex;<br>                <span class="hljs-comment">// 到底切不切就看这行代码了，这边的计算方式是判断如果文件的大小比splitSize大的话就对文件进行切分，否则就不要在切了，因为它已经很小了。</span><br>                        <span class="hljs-keyword">for</span>(bytesRemaining = length; (<span class="hljs-type">double</span>)bytesRemaining / (<span class="hljs-type">double</span>)splitSize &gt; <span class="hljs-number">1.1D</span>; bytesRemaining -= splitSize) &#123;<br>                            blkIndex = <span class="hljs-built_in">this</span>.getBlockIndex(blkLocations, length - bytesRemaining);<br>                            splits.add(<span class="hljs-built_in">this</span>.makeSplit(path, length - bytesRemaining, splitSize, blkLocations[blkIndex].getHosts(), blkLocations[blkIndex].getCachedHosts()));<br>                        &#125;<br>                        <span class="hljs-comment">// 如果这个文件已经很小了，就不需要在切了直接放到splits中。</span><br>                        <span class="hljs-keyword">if</span>(bytesRemaining != <span class="hljs-number">0L</span>) &#123;<br>                            blkIndex = <span class="hljs-built_in">this</span>.getBlockIndex(blkLocations, length - bytesRemaining);<br>                            splits.add(<span class="hljs-built_in">this</span>.makeSplit(path, length - bytesRemaining, bytesRemaining, blkLocations[blkIndex].getHosts(), blkLocations[blkIndex].getCachedHosts()));<br>                        &#125;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        splits.add(<span class="hljs-built_in">this</span>.makeSplit(path, <span class="hljs-number">0L</span>, length, blkLocations[<span class="hljs-number">0</span>].getHosts(), blkLocations[<span class="hljs-number">0</span>].getCachedHosts()));<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    splits.add(<span class="hljs-built_in">this</span>.makeSplit(path, <span class="hljs-number">0L</span>, length, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">0</span>]));<br>                &#125;<br>            &#125;<br><br>            job.getConfiguration().setLong(<span class="hljs-string">&quot;mapreduce.input.fileinputformat.numinputfiles&quot;</span>, (<span class="hljs-type">long</span>)files.size());<br>            sw.stop();<br>            <span class="hljs-keyword">if</span>(LOG.isDebugEnabled()) &#123;<br>                LOG.debug(<span class="hljs-string">&quot;Total # of splits generated by getSplits: &quot;</span> + splits.size() + <span class="hljs-string">&quot;, TimeTaken: &quot;</span> + sw.now(TimeUnit.MILLISECONDS));<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> splits;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="切片的计算方式"><a href="#切片的计算方式" class="headerlink" title="切片的计算方式"></a>切片的计算方式</h2><p>首先会计算出minSize，默认1</p><blockquote><p>long minSize &#x3D; Math.max(this.getFormatMinSplitSize(), getMinSplitSize(job));</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getFormatMinSplitSize</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1L</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getMinSplitSize</span><span class="hljs-params">(JobContext job)</span> &#123;<br>    <span class="hljs-keyword">return</span> job.getConfiguration().getLong(<span class="hljs-string">&quot;mapreduce.input.fileinputformat.split.minsize&quot;</span>, <span class="hljs-number">1L</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>计算maxSize，默认128M</p><blockquote><p>long maxSize &#x3D; getMaxSplitSize(job);</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getMaxSplitSize</span><span class="hljs-params">(JobContext context)</span> &#123;<br>        <span class="hljs-keyword">return</span> context.getConfiguration().getLong(<span class="hljs-string">&quot;mapreduce.input.fileinputformat.split.maxsize&quot;</span>, <span class="hljs-number">9223372036854775807L</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>最后计算splitSize</p><blockquote><p>long splitSize &#x3D; this.computeSplitSize(blockSize1, minSize, maxSize);</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">protected</span> <span class="hljs-type">long</span> <span class="hljs-title function_">computeSplitSize</span><span class="hljs-params">(<span class="hljs-type">long</span> blockSize, <span class="hljs-type">long</span> minSize, <span class="hljs-type">long</span> maxSize)</span> &#123;<br>    <span class="hljs-keyword">return</span> Math.max(minSize, Math.min(maxSize, blockSize));<br>&#125;<br></code></pre></td></tr></table></figure><p>在切文件是采用这样的判断方式</p><blockquote><p>(double)bytesRemaining &#x2F; (double)splitSize &gt; 1.1D</p></blockquote><p>只要<code>文件的大小/splitSize &gt; 1.1倍</code>时就会对文件进行切分</p><hr><h2 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h2><p>归结一点就是mapreduce主程序运行后，会将每个文件进行逻辑切分，这里的逻辑切分的意思就是说并非真的对文件进行切分，只是生成一些描述信息,存到job.split文件中。</p><p>有几个切片就会生成几个maptask。maptask数量和切片的数量一一对应，因为yarnRunner会把job.split发给yarn,yarn收到这个文件以后会读取里面的切片信息，然后初始化maptask。</p><p>文件切分的方法是InputFormat类提供的，在getSplits方法中我们可以看到<code>(double)bytesRemaining / (double)splitSize &gt; 1.1D</code>，只要<code>文件的大小/splitSize &gt; 1.1倍</code>时就会对文件进行切分,splitSize默认是128M。</p><p>通过查看源码我们可以知道通过两个参数<code>mapreduce.input.fileinputformat.split.minsize</code>和<code>mapreduce.input.fileinputformat.split.maxsize</code>就可以调节。</p><p>了解了切片后，我们到底切多大？是比HDFS block大好还是比他小好？为什么要对文件进行切分？要明白切片规划的其中一个重要的原因就是mapreduce期望，在运行每个maptask时，任务所需要的输入数据恰好能在本地，这样就能保证每次maptask于hdfs的数据交互时，直接可以从本地拿到数据。理想状态（切片的大小&#x3D;blocksize,减少maptask于hdfs的跨网络数据传输）。</p><p>本人水平有限，不当之处希望各位高手指正。邮箱<a href="mailto:&#x63;&#x6e;&#110;&#113;&#x6a;&#x62;&#97;&#110;&#53;&#x32;&#49;&#64;&#x67;&#x6d;&#97;&#105;&#108;&#46;&#99;&#x6f;&#109;">&#x63;&#x6e;&#110;&#113;&#x6a;&#x62;&#97;&#110;&#53;&#x32;&#49;&#64;&#x67;&#x6d;&#97;&#105;&#108;&#46;&#99;&#x6f;&#109;</a>。</p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MapReduce</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MapReduce的Shuffle机制</title>
    <link href="/2018/04/22/2018-04-22-mapreduce-mapreduce%E7%9A%84shuffle%E6%9C%BA%E5%88%B6/"/>
    <url>/2018/04/22/2018-04-22-mapreduce-mapreduce%E7%9A%84shuffle%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<p>在编写MapReduce，启动主程序以后，到底maptask和reducetask之间是怎么工作的？数据是如何进行排序的？</p><p><img src="https://i.loli.net/2019/07/02/5d1aaf8c49e2876625.jpg" alt="image"></p><p>1.inputFormat:我们知道mapreduce主程序初始化job以后会对输入的数据进行切片规划，生成job.split文件，inputFormat会读取job.split文件，根据信息从DHFS中找到要读取的数据,调用recordReader将数据读成一行,传入mapper中,默认的使用的是TextInputFormat</p><p>2.当我们在mapper调用write后,outputCollector会将输出的数据写入环形缓冲区中</p><p>3.环形缓冲器的大小默认为100M，当环形缓冲区的内容达到自身容量的80%后,进行溢出操作，生成多个文件。期间会经过4、5、6这几个操作</p><p>4.我们可以在该类中定义要分几个区，例如<strong>hashCode % reduceTask</strong>,这样我们可以使用<strong>job.setNumReduceTask</strong>动态划分分区大小</p><p>5.对分区中的序列进行排序。同样排序的方式可以根据不同的业务做调整</p><p>6.溢出这个操作是由一个叫做spiller的组件完成的，当缓存区数据达到制定标准后进行溢出到文件操作。</p><p>8.GroupingComparaor组件，它可以对reducetask最终形成的文件的内容进行分组。<br>在WordCount的mapper程序中，输出write(word,1)<br>经过shuffle处理后的数据就是一个经过分组后的有序数据。<br>reducetask的reduce(k,values)会读的就是每一组的数据。<br>GroupingComparaor组件的逻辑会将文件内容分成三个组,第一组&lt;a,1&gt;&lt;a,1&gt;&lt;a,1&gt;。第二组&lt;c,1&gt;&lt;c,1&gt;…<br>那么这就意味着,reducetask第一次reduce的<strong>k</strong>为<strong>a</strong>,<strong>values</strong>为<strong>1,1,1</strong>;第二次reduce的<strong>k</strong>为<strong>c</strong>,<strong>values</strong>为<strong>1,1</strong>。</p><p>9.将分组后的数据按组分批次发给reducetask的reduce方法。</p><p>10.write以后OutputFormat组件会调用RecordWriter，将内容上传到hdfs中。</p><p>本人水平有限，不当之处希望各位高手指正。另外插入是在画图中画的，看起来不精致请见谅。</p><p><a href="http://www.zonegood.com/">http://www.zonegood.com</a></p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MapReduce</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识MapReduce</title>
    <link href="/2018/04/22/2018-04-22-mapreduce-%E5%88%9D%E8%AF%86mapreduce/"/>
    <url>/2018/04/22/2018-04-22-mapreduce-%E5%88%9D%E8%AF%86mapreduce/</url>
    
    <content type="html"><![CDATA[<p>mapredice其实就是分而治之的一种思想，hadoop的mapreduce是应对大数据产生的一种计算方式。分为两个步骤，maptask和reducetask。多个maptask并发执行运算输入数据，每个maptask各司其职，各自为政。多个reducetask并发执行，但它依赖于maptask，它输入参数是maptask的输出参数。</p><h2 id="mapreduce框架中角色"><a href="#mapreduce框架中角色" class="headerlink" title="mapreduce框架中角色"></a>mapreduce框架中角色</h2><p>核心角色有三个，分别为maptask,reducetask,mrappmaster,他们都是在进行运算过程中生成的进程。</p><ul><li>mrappmaster 协调maptask和reducetask的工作  </li><li>maptask 对数据进行第一阶段运算  </li><li>reducetask 对maptask输出的数据进行第二阶段运算</li></ul><h2 id="运行流程"><a href="#运行流程" class="headerlink" title="运行流程"></a>运行流程</h2><p>当mapreduce主程序启动后会生成yarnRunner Proxy代理</p><p>根据用户指定的文件、相关blocksize配置，生成切片，封装成job.split，除此之外生成job.xml参数，wordcount.jar等信息</p><p>将生成的数据一同发送给yarn</p><p>yarn收到信息以后，会在resourcemanager维护的队列中初始化task</p><p>namenode发现队列中的task，会在自己内存中生成mrappmaster进程，<code>mrappmaster的主要职责是协调好maptask及reducetask的运行</code>。</p><p>mrappmaster会根据job.split文件中的切片信息向resourcemanager申请生成指定个数的maptask任务。</p><p>maptask启动以后会调用InputFormat组件，根据切片的描述信息，到hdfs上下载对应block块，将块的数据作为数据源进行map运算。</p><p>待maptask程序运行完成以后，mrappmaster进程向resourcemanager申请启动reducetask</p><p>yarn收到信息以后，会在resourcemanager维护的队列中初始化task</p><p>nodemanager发现队列中的task，为reducetask分配cpu以及内存，运行reducetask。</p><p>reducetask对maptask生成的数据进行汇总处理，并将结果上传到hdfs目录中。<code>要注意的是生成maptask、resourcetask的资源分配这个过程需要resourcemanager统一管理</code>.</p><p><img src="https://i.loli.net/2019/06/30/5d1856632b1ea90560.jpg" alt="image"></p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MapReduce</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手写基于Java反射的RPC框架</title>
    <link href="/2018/04/19/2018-04-19-rpc-%E6%89%8B%E5%86%99%E5%9F%BA%E4%BA%8EJava%E5%8F%8D%E5%B0%84%E7%9A%84RPC%E6%A1%86%E6%9E%B6/"/>
    <url>/2018/04/19/2018-04-19-rpc-%E6%89%8B%E5%86%99%E5%9F%BA%E4%BA%8EJava%E5%8F%8D%E5%B0%84%E7%9A%84RPC%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="目录说明"><a href="#目录说明" class="headerlink" title="目录说明"></a>目录说明</h3><p>项目已经传至github仓库。</p><ul><li>rpc-client : 框架中客户端框架核心代码</li><li>rpc-server : 框架中服务端框架核心代码</li><li>rpc-common : 框架工具</li><li>rpc-registry : 框架中两个核心业务类功能<ul><li>注册服务 - ServiceDiscovery</li><li>发现服务 - ServiceRegistry</li></ul></li><li>rpc-sample-app : 客户端程序 (调用被发布的服务,执行对应业务代码)</li><li>rpc-sample-server : 服务区程序 (用来发布RPC服务)</li></ul><h3 id="框架结构"><a href="#框架结构" class="headerlink" title="框架结构"></a>框架结构</h3><p>预备知识梳理。采用Java语言编写，需要掌握线程、动态代理、反射、Netty、注解、Spring等知识。RPC远程过程调用，是一种常见的底层通信框架，有效的理解它对于后续学习其他开源框架有很大帮助。下面梳理设计思路与具体代码逻辑。见整体框架图：</p><p><img src="https://i.loli.net/2019/06/30/5d1856abca77094129.jpg" alt="image"></p><p><code>注:实线以上部分是用户需要完成的操作，一下部分则是需要封装后打包成jar包，供用户导入的框架内部核心代码。</code></p><h3 id="用户部分"><a href="#用户部分" class="headerlink" title="用户部分"></a>用户部分</h3><p>用户部分也分为客户端和服务端，服务端用来发布想要发布的服务，客户端通过本框架来调用被发布的服务。</p><p>参考新浪的motan以及阿里的dubbo，想要启动RPC框架，首先需要在spring的配置文件application.xml中配置框架类才行，我们这边也同样是这个思路。</p><h5 id="1-服务端"><a href="#1-服务端" class="headerlink" title="1.服务端"></a>1.服务端</h5><p>服务端只需要完成以下两步操作就可以完成业务的发布了。</p><ul><li>application.xml配置框架ServiceRegistry以及RpcServer</li><li>在想要发布成服务的具体实现业务类上添加@RpcService(interface.class)</li></ul><p><code>注:两个类的细节问题见框架核心代码业务梳理。</code></p><h5 id="2-客户端"><a href="#2-客户端" class="headerlink" title="2.客户端"></a>2.客户端</h5><p>客户端只需要完成以下两步操作就可以完成远程服务调用。</p><ul><li>application.xml配置框架ServiceDiscovery以及RpcProxy</li><li>在调用时使用@autowried构造RpcProxy对象。通过RpcProxy来获取具体调用的业务类接口代理对象，通过该对象调用具体方法即可。</li></ul><p><code>注:两个类的细节问题见框架核心代码业务梳理。</code></p><p>对于RPC框架的使用者来说,不管是客户端还是服务端，底层细节都是透明的。</p><h3 id="框架核心代码业务梳理"><a href="#框架核心代码业务梳理" class="headerlink" title="框架核心代码业务梳理"></a>框架核心代码业务梳理</h3><p>服务端框架的核心业务包含两个类，ServiceRegistry和RpcServer</p><p><strong>a. RpcServer.java</strong></p><ul><li>在Spring容器启动后会构造RpcServer，扫描@RpcService(interface.class)注解,拿到具体业务类的接口以及接口实现类，将信息已k,v形式封装到指定的HashMap中。</li><li>在服务端启动一个netty主程序，在netty中指定具体的Handler业务线<ul><li>字节流的反序列化 </li><li>对象的序列化</li></ul></li><li>调用ServiceRegistry的registry()</li></ul><p><strong>b. ServiceRegistry.java</strong></p><ul><li>为RpcServer提供registry方法,启动zookeeper主程序，将启动好的netty的ip:port存到zookeeper节点中(后续可以拓展zookeeper节点，应对不同的业务场景)</li></ul><p>客户端框架的核心业务包含两个类，ServiceDiscovery和RpcProxy</p><p><strong>a. RpcProxy.java</strong></p><ul><li>在Spring容器启动后会构造RpcProxy</li><li>用户拿到该对象调用interfaceProxy &#x3D; create(interface.class)就可以拿到对应的接口代理对象</li><li>用户使用interfaceProxy调用具体业务时，会触发JDK动态代理中的invoke方法,将方法及方法参数进行封装</li><li>调用ServiceDiscovery的discoveryy()</li><li>启动netty客户端程序，执行netty中指定具体的Handler业务线<ul><li>对象的序列化 outputStream</li><li>字节流的反序列化 inputStream</li><li>返回数据结果 inputStream</li></ul></li></ul><p><strong>b. ServiceDiscovery.java</strong></p><ul><li>ServiceDiscovery会从启动的zookeeper中找到服务器的地址(netty server ip:port)</li></ul><p>这边对象的序列化和反序列化使用的是google的protobuf框架,它最大的特点就是可以跨平台。想要深入这边有链接:<a href="https://developers.google.com/protocol-buffers/">https://developers.google.com/protocol-buffers/</a></p><p>框架还有很多地方可以优化，比如可以增加zookeeper的存放根节点，来进行拓展业务，适应不同的业务场景；比如客户端中netty并没进行封装，应该是spring web容器启动时自动装载netty客户端。再有这个框架不能满足同一接口存在多个实现的case，那么想要满足，只需要为@RpcServer注解添加额外属性即可。</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RPC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>部署zookeeper集群</title>
    <link href="/2018/04/15/2018-04-15-hadoop-zookeeper%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E5%8F%8A%E5%85%B6%E4%BD%BF%E7%94%A8/"/>
    <url>/2018/04/15/2018-04-15-hadoop-zookeeper%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E5%8F%8A%E5%85%B6%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>zookeeper是一个分布式协调服务框架，本次手写RPC框架需要使用zookeeper做中间件，进行通信的业务的协调。下面开始部署分布式zookeeper。这边我使用的是虚拟机，在虚拟机中部署多台zookeeper。</p><h2 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h2><p>我们需要到apache官网上下载Zookeeper,官网地址<a href="https://archive.apache.org/dist/zookeeper/,%E6%88%91%E8%BF%99%E8%BE%B9%E6%98%AFubuntu%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F,%E4%B8%8B%E8%BD%BD%E5%B0%BE%E7%BC%80%E6%98%AFtar.gz,%E5%A6%82%E6%9E%9C%E6%98%AFwindows%E4%B8%8B%E8%BD%BDzip%EF%BC%8C%E6%88%91%E4%B8%8B%E8%BD%BD%E7%9A%84%E6%98%AF3.4.10%E7%89%88%E6%9C%AC">https://archive.apache.org/dist/zookeeper/,我这边是ubuntu操作系统,下载尾缀是tar.gz,如果是windows下载zip，我下载的是3.4.10版本</a></p><p><img src="https://i.loli.net/2019/06/30/5d1856270d97217892.jpg" alt="image"></p><h2 id="2-启动虚拟机集群"><a href="#2-启动虚拟机集群" class="headerlink" title="2.启动虚拟机集群"></a>2.启动虚拟机集群</h2><p>我在虚拟机中安装了cor1、cor2、cor3、cor4四台机器，用的是centOS操作系统。 关于数量配置的是偶数台集群，其实不太好，最好集群数量是基数，这是因为zookeeper的运行机制，只要有半数的集群数存活的话，zookeeper就能正常工作，我们分别启动每台机器。</p><p><img src="https://i.loli.net/2019/06/30/5d1856289e2b063842.jpg" alt="image"></p><p>小技巧：SecureCRT链接集群使用<code>Send commands to all sessions</code>可以一次性控制多台机器,我们只需要打一条命令就可以了，这个很重要，假如集群数太多上千台，我们不可能一台一台去陪，这个时候使用这个功能就可以同时操作了。</p><p><img src="https://i.loli.net/2019/06/30/5d18562a6620247005.jpg" alt="image"></p><h2 id="3-zookeeper配置"><a href="#3-zookeeper配置" class="headerlink" title="3.zookeeper配置"></a>3.zookeeper配置</h2><p>配置的话分两步</p><ul><li>配置zoo.cfg</li><li>配置配台机器对应的myid</li></ul><p>配置zookeeper&#x2F;conf&#x2F;zoo.cfg:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xml"># The number of milliseconds of each tick<br>tickTime=2000<br># The number of ticks that the initial <br># synchronization phase can take<br>initLimit=10<br># The number of ticks that can pass between <br># sending a request and getting an acknowledgement<br>syncLimit=5<br># the directory where the snapshot is stored.<br># do not use /tmp for storage, /tmp here is just <br># example sakes.<br>dataDir=/root/zookeeper/data<br>dataLogDir=/root/zookeeper/log<br># the port at which the clients will connect<br>clientPort=2181<br># the maximum number of client connections.<br># increase this if you need to handle more clients<br>#maxClientCnxns=60<br>#<br># Be sure to read the maintenance section of the <br># administrator guide before turning on autopurge.<br>#<br># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance<br>#<br># The number of snapshots to retain in dataDir<br>#autopurge.snapRetainCount=3<br># Purge task interval in hours<br># Set to &quot;0&quot; to disable auto purge feature<br>#autopurge.purgeInterval=1<br>server.1=cor1:2888:3888<br>server.2=cor2:2888:3888<br>server.3=cor3:2888:3888<br>server.4=cor4:2888:3888<br></code></pre></td></tr></table></figure><p>配置里面大部分都不需要我们动，我们只需要配好我们的集群就可以了</p><blockquote><p>server.1&#x3D;cor1:2888:3888<br>server.2&#x3D;cor2:2888:3888<br>server.3&#x3D;cor3:2888:3888<br>server.4&#x3D;cor4:2888:3888    </p></blockquote><p>2888是内部每个zookeeper的通信接口<br>3888是zookeeper的投票选举leader的接口</p><p>后续我们需要在zookeeper&#x2F;data&#x2F;目录下创建每台zookeeper的id<br>创建<code>myid</code>文件 在里面写上每台机器对应的编号,如果是<code>cor1</code> 就在<code>myid</code>文件中写上<strong>1</strong>,<code>cor2</code>就写<strong>2</strong></p><p><img src="https://i.loli.net/2019/06/30/5d18562b8b94385411.jpg" alt="image"></p><h2 id="4-配置集群服务器"><a href="#4-配置集群服务器" class="headerlink" title="4.配置集群服务器"></a>4.配置集群服务器</h2><p>在一台机器上部署好zookeeper后，我们使用<code>scp</code>命令将配好的zookeeper分发到其他机器上就可以了。但是运行zookeeper还需要Java环境，我们不可能手动为每台电脑一一做配置，这边就用脚本。其中牵扯两个脚本auto_install_jdk.sh和install_jdk.sh</p><p>思路：ssh免密登录<code>--&gt;</code>发送jdk安装包<code>--&gt;</code>发送jdk安装脚本（自动解压jdk,自动配置环境变量,自动运行zookeeper）<code>--&gt;</code>发送已配好的zookeeper包<code>--&gt;</code>运行已发送的jdk安装脚本</p><p><strong>auto_install_jdk.sh</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>SERVERS=&quot;192.168.0.102&quot;<br>PASSWORD=&quot;1&quot;<br>INDEX=1<br><br>auto_ssh()&#123;<br>expect -c &quot;set timeout -1;<br>        spawn ssh-copy-id root@$1;<br>        expect &#123;<br>            *(yes/no)* &#123;send -- yes\r;exp_continue;&#125;<br>            *password:* &#123;send -- $2\r;exp_continue;&#125;<br>            eof &#123;exit 0;&#125;<br>        &#125;&quot;;<br>&#125;<br>each_server()&#123;<br>    for SERVER in $SERVERS<br>    do<br>        auto_ssh $SERVER $PASSWORD<br>    done<br>&#125;<br><br>each_server<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">发送jdk安装包</span><br>scp $HOME/Documents/jdk-8u161-linux-x64.tar.gz root@$SERVER:/root<br><span class="hljs-meta prompt_">#</span><span class="language-bash">发送jdk安装命令并自动配置环境变量的脚本1</span><br>scp $HOME/workspace/shell/install_jdk.sh root@$SERVER:/root<br><span class="hljs-meta prompt_">#</span><span class="language-bash">发送zookeeper包</span><br>scp -r /home/zyh/zookeeper root@$SERVER:/root<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">脚本1 <span class="hljs-variable">$INDEX</span> 指的就是每台机器对应的myid</span><br>ssh root@$SERVER /root/install_jdk.sh $INDEX<br></code></pre></td></tr></table></figure><p><strong>install_jdk.sh</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">/bin/bash</span><br>tar -zxvf /root/jdk-8u161-linux-x64.tar.gz -C ./<br>cat &gt;&gt; /etc/profile &lt;&lt; EOF<br>export JAVA_HOME=/root/jdk1.8.0_161<br>export PATH=\$PATH:\$JAVA_HOME/bin<br>EOF<br>source /etc/profile<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">关闭防火墙</span><br>service iptables stop<br>chkconfig iptables off<br><br>echo &quot;&quot; &gt; /root/zookeeper/data/myid<br>echo $1 &gt; /root/zookeeper/data/myid<br><br>cd /root/zookeeper/bin<br>./zkServer.sh start<br></code></pre></td></tr></table></figure><h2 id="5-运行脚本"><a href="#5-运行脚本" class="headerlink" title="5.运行脚本"></a>5.运行脚本</h2><p>这边想要运行修改一下下面的参数</p><blockquote><p>SERVERS&#x3D;”192.168.0.102”<br>PASSWORD&#x3D;”1”<br>INDEX&#x3D;1  </p></blockquote><p>执行.&#x2F;auto_install_jdk.sh，脚本还有很多优化的地方，可以结合自己的业务场景适当修改。</p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Zookeeper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jvm调优</title>
    <link href="/2018/04/15/2018-04-15-jvm-jvm%E8%B0%83%E4%BC%98%E5%AE%9E%E6%88%98/"/>
    <url>/2018/04/15/2018-04-15-jvm-jvm%E8%B0%83%E4%BC%98%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<p>JVM中可分为方法区(非堆)、堆、桟、本地桟、程序计数器。今天主要说堆，我们new的对象会存在该区域内，其中可分为Young Generation(新生代)、Old Generation(老年代)和Permanent Generation(永久代)，它被多个线程所共享同时也是GC主要负责垃圾回收的主要区域之一。</p><p><img src="https://i.loli.net/2019/06/30/5d1857721767d50301.jpg" alt="image"></p><h2 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h2><p>刚被实例化的对象会存在于Eden Space中，当Eden Space空间满了以后,GC会进行垃圾回收，将不需要的对象回收掉，幸存下来的对象会被分到 Surivor Ratio区域中，我们注意到 Survivor Ratio 区域被分为两个空间，那么它们有什么意义呢？</p><p>其实分为两个空间的主要目的是避免在垃圾回收以后，产生大量的碎片。空间碎片对Java的性能影响是巨大的，所以要极力避免这种情况。当Eden Space 第一次满了以后，经历过GC回收后，幸存的对象会被放在S0区域内，当Eden Space再次满GC对其进行再次回收以后，幸存的对象会和S0内的对象进行合并，然后复制到S1区域内，当第三次回收后和S1合并复制到S0…如此反复16次以后。最终幸存的对象会被送到Old Generation。</p><p>这复制的办法其实只是GC回收算法中的一种。</p><p>GC 回收策略</p><ul><li>标记-清理 （Mark-Sweep）</li><li>标记-删除 （Mark-Compact）</li><li>复制 （Copying）</li></ul><h2 id="jvm参数列表"><a href="#jvm参数列表" class="headerlink" title="jvm参数列表"></a>jvm参数列表</h2><blockquote><p>java -Xmx3550m -Xms3550m -Xmn2g -Xss128k -XX:NewRatio&#x3D;4 -XX:SurvivorRatio&#x3D;4 -XX:MaxPermSize&#x3D;16m<br>-XX:MaxTenuringThreshold&#x3D;0</p></blockquote><ul><li>-Xmx3550m：最大堆内存为3550M。</li><li>-Xms3550m：初始堆内存为3550m。此值可以设置与-Xmx相同，以避免每次垃圾回收完成后JVM重新分配内存。</li><li>-Xmn2g：设置年轻代大小为2G。整个堆大小&#x3D;年轻代大小 + 年老代大小 +持久代大小。持久代一般固定大小为64m，所以增大年轻代后，将会减小年老代大小。此值对系统性能影响较大，Sun官方推荐配置为整个堆的3&#x2F;8。</li><li>-Xss128k：设置每个线程的堆栈大小。JDK5.0以后每个线程堆栈大小为1M，在相同物理内存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在 3000~5000左右。</li><li>-XX:NewRatio&#x3D;4:设置年轻代（包括Eden和两个Survivor区）与年老代的比值（除去持久代）。设置为4，则年轻代与年老代所占比值为1：4，年轻代占整个堆栈的1&#x2F;5</li><li>-XX:SurvivorRatio&#x3D;4：设置年轻代中Eden区与Survivor区的大小比值。设置为4，则两个Survivor区与一个Eden区的比值为2:4，一个Survivor区占整个年轻代的1&#x2F;6</li><li>-XX:MaxPermSize&#x3D;16m:设置持久代大小为16m。</li><li>-XX:MaxTenuringThreshold&#x3D;15：设置垃圾最大年龄。如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象 再年轻代的存活时间，增加在年轻代即被回收的概论。</li></ul><h2 id="收集器设置"><a href="#收集器设置" class="headerlink" title="收集器设置"></a>收集器设置</h2><p>常用的GC垃圾收集器有下面三种</p><ul><li>-XX:+UseSerialGC:设置串行收集器</li><li>-XX:+UseParallelGC:设置并行收集器</li><li>-XX:+UseParalledlOldGC:设置并行年老代收集器</li></ul><h2 id="JVM调优实战"><a href="#JVM调优实战" class="headerlink" title="JVM调优实战"></a>JVM调优实战</h2><p>JDK中自带了两个监控内存堆的工具，分别是<code>jconsole</code>和<code>jvisualvm</code>，他们位于jdk的bin目录下。</p><p>建议玩前几个例子，后面的例子很不友好，会让电脑卡死。悲催的我电脑强行重启了好几次。。。</p><h4 id="1-内存溢出"><a href="#1-内存溢出" class="headerlink" title="1.内存溢出"></a>1.内存溢出</h4><blockquote><p>Exception in thread “main” java.lang.OutOfMemoryError: Java heap space</p></blockquote><p>内存堆溢出,示例代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> com.edu;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestMemory</span> &#123;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OOMObject</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] placeholder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">64</span> * <span class="hljs-number">1024</span>*<span class="hljs-number">40</span>];<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fillHeap</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>ArrayList&lt;OOMObject&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;OOMObject&gt;();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; num; i++) &#123;<br>Thread.sleep(<span class="hljs-number">50</span>);<br>list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OOMObject</span>());<br>&#125;<br>System.gc();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>Thread.sleep(<span class="hljs-number">10000</span>);<br>fillHeap(<span class="hljs-number">100</span>);<br>Thread.sleep(<span class="hljs-number">20000000</span>);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>需要为虚拟机设置参数<code>-Xms100m -Xmx100m -XX:+UseSerialGC</code></p><p>在IDEA设置找到run<code>--&gt;</code>Edit configurations…</p><p><img src="https://i.loli.net/2019/06/30/5d1857731067589119.jpg" alt="image"></p><p>运行使用jconsole查看新生代堆内存状况。</p><p><img src="https://i.loli.net/2019/06/30/5d185773ec5cb14240.jpg" alt="image"></p><h4 id="2-检测死锁"><a href="#2-检测死锁" class="headerlink" title="2.检测死锁"></a>2.检测死锁</h4><p>当线程出现死锁时，进程永远不能完成，并且阻碍使用系统资源，阻止了其他作业开始执行，导致系统的资源利用率急剧下载，造成很严重的后果。下面例子中会产生死锁线程，我们需要使用jconsole来找到对应死锁的进程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> com.edu;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 检测死锁</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestDeadThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><span class="hljs-type">int</span> a, b;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">TestDeadThread</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br><span class="hljs-built_in">this</span>.a = a;<br><span class="hljs-built_in">this</span>.b = b;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">synchronized</span> (Integer.valueOf(a)) &#123;<br><span class="hljs-keyword">synchronized</span> (Integer.valueOf(b)) &#123;<br>System.out.println(a + b);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TestDeadThread</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TestDeadThread</span>(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>)).start();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行代码后,打开jconsole,在<code>线程</code>一栏中可以找到<code>检测死锁</code>按钮，通过它就可以找到对应死锁的进程</p><p><img src="https://i.loli.net/2019/06/30/5d18577724d9c33830.jpg" alt="image"></p><h4 id="3-检测死循环、阻塞"><a href="#3-检测死循环、阻塞" class="headerlink" title="3.检测死循环、阻塞"></a>3.检测死循环、阻塞</h4><p>某些线程进入死循环，还有一些线程会阻塞在某个位置，但是它们其实并不是死锁，那么我们要如何排查？我们可以通过jvisualvm工具查看线程运行图来进行排查,下面是示例代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> com.edu;<br><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestThread</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createBusyThread</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;createBusyThread&quot;</span>);<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>;<br>&#125;<br>&#125;, <span class="hljs-string">&quot;testBusyThread&quot;</span>);<br>thread.start();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createLockThread</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object lock)</span> &#123;<br><span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;createLockThread&quot;</span>);<br><span class="hljs-keyword">synchronized</span> (lock) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>lock.wait();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br><br>&#125;<br>&#125;, <span class="hljs-string">&quot;testLockThread&quot;</span>);<br>thread.start();<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in));<br>br.readLine();<br>createBusyThread();<br>br.readLine();<br><span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>createLockThread(object);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>main线程追踪到需要键盘录入方便我们检测</p><p>testBusyThread线程将在while（true）中一直运行，直到线程切换，很耗性能</p><p>testLockThread线程由于调用了watit(),它会一直处于阻塞状态，等待notify()被唤醒</p><p>我们运行程序打开jvisualvm工具 在终端输入后查看testBusyThread状态，之后在终端再次输入查看testLockThread状态，<br>我们看到testBusyThread线程<code>运行</code>一栏一直是100%,而testLockThread线程的<code>等待</code>一栏一直是100%</p><p><img src="https://i.loli.net/2019/06/30/5d185779d834b26169.jpg" alt="image"></p><h4 id="4-直接内存溢出"><a href="#4-直接内存溢出" class="headerlink" title="4.直接内存溢出"></a>4.直接内存溢出</h4><p>本例自很危险，会造成机器假死，慎跑…</p><blockquote><p>VM Args：-Xmx20M -XX:MaxDirectMemorySize&#x3D;10M</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> com.outofmemory;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> sun.misc.Unsafe;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DirectMemoryOOM</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">_1MB</span> <span class="hljs-operator">=</span> <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">Field</span> <span class="hljs-variable">unsafeField</span> <span class="hljs-operator">=</span> Unsafe.class.getDeclaredFields()[<span class="hljs-number">0</span>];<br>unsafeField.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">Unsafe</span> <span class="hljs-variable">unsafe</span> <span class="hljs-operator">=</span> (Unsafe) unsafeField.get(<span class="hljs-literal">null</span>);<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>unsafe.allocateMemory(_1MB);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-堆内存溢出"><a href="#5-堆内存溢出" class="headerlink" title="5.堆内存溢出"></a>5.堆内存溢出</h4><p><code>-XX：+HeapDumpOnOutOfMemoryError</code>可以让虚拟机在出现内存溢出异常时Dump出当前的内存堆转储快照以便事后使用<code>MemoryAnalyzer</code>工具进行分析,关于MemoryAnalyzer可以百度其使用方法。</p><blockquote><p>VM Args：-Xms20m -Xmx20m -XX:+HeapDumpOnOutOfMemoryError  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.outofmemory;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HeapOOM</span> &#123;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OOMObject</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>List&lt;OOMObject&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;OOMObject&gt;();<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OOMObject</span>());<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-桟内存溢出"><a href="#6-桟内存溢出" class="headerlink" title="6.桟内存溢出"></a>6.桟内存溢出</h4><p>本例用于体验OutOfMemoryError异常，容易让电脑假死，参数可以设置大一些 </p><blockquote><p>VM Args：-Xss2M</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.outofmemory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaVMStackOOM</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dontStop</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stackLeakByThread</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>dontStop();<br>&#125;<br>&#125;);<br>thread.start();<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br><span class="hljs-type">JavaVMStackOOM</span> <span class="hljs-variable">oom</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JavaVMStackOOM</span>();<br>oom.stackLeakByThread();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-桟内存溢出"><a href="#7-桟内存溢出" class="headerlink" title="7.桟内存溢出"></a>7.桟内存溢出</h4><p>本例用于体验StackOverFlow异常，容易让电脑假死</p><blockquote><p>VM Args：-Xss128k</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.outofmemory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaVMStackSOF</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">stackLength</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stackLeak</span><span class="hljs-params">()</span> &#123;<br>stackLength++;<br>stackLeak();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br><span class="hljs-type">JavaVMStackSOF</span> <span class="hljs-variable">oom</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JavaVMStackSOF</span>();<br><span class="hljs-keyword">try</span> &#123;<br>oom.stackLeak();<br>&#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>System.out.println(<span class="hljs-string">&quot;stack length：&quot;</span> + oom.stackLength);<br><span class="hljs-keyword">throw</span> e;<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mybatis like相关问题</title>
    <link href="/2018/04/10/2018-04-10-mybatis-mybatis%20like%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
    <url>/2018/04/10/2018-04-10-mybatis-mybatis%20like%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>Mybatis 中关于like的使用</p><ol><li>使用字符串传值<br>我们要使用#{0}#{1}#{2去匹配传入的每个参数},因为带like,所以在传入值的时候要在名字左右拼上<code>%</code>号，像这样’%tom%’,而不是’tom’，还有一点就是一定注意传入的顺序</li></ol><p>Mapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;BdipChatPoint&gt; <span class="hljs-title function_">selectListByPage</span><span class="hljs-params">(String modelUrl,String username)</span>;<br></code></pre></td></tr></table></figure><p>Mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectListByPage&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;pointMap&quot;</span>&gt;</span><br>select * from bdip_chat_point <br>where tree_id = #&#123;0&#125; <br>and user_name like #&#123;1&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>main.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><br>mapper.selectListByPage(<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;%tom%&quot;</span>);<br><br></code></pre></td></tr></table></figure><p>有的人在Mapper.xml可能会这样写,是取不到值的,下面是错误演示</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectListByPage&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;pointMap&quot;</span>&gt;</span><br>select * from bdip_chat_point <br>where tree_id = #&#123;modelUrl&#125; <br>and user_name like #&#123;username&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果我们就想使用这种方法查,要怎么办呢？可以用Map封装参数，看一下使用Map传值</p><p>2.使用Map传值</p><p>Mapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;BdipChatPoint&gt; <span class="hljs-title function_">selectListByPage</span><span class="hljs-params">(Map map)</span>;<br><br></code></pre></td></tr></table></figure><p>Mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectListByPage&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Map&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;pointMap&quot;</span>&gt;</span><br>select * from bdip_chat_point <br>where tree_id = #&#123;modelUrl&#125; <br>and user_name like #&#123;username&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>调用的时候初始化map对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>map.put(<span class="hljs-string">&quot;modelUrl&quot;</span>, <span class="hljs-string">&quot;624&quot;</span>);<br>map.put(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;%tom%&quot;</span>);<br><br></code></pre></td></tr></table></figure><p>需要注意的是<code>like #&#123;username&#125;</code>和<code>map.put(&quot;username&quot;, &quot;%tom%&quot;);</code>如果你不想去拼<code>%</code>号,怎么办？我们可以这样子写。</p><p>Mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectListByPage&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Map&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;pointMap&quot;</span>&gt;</span><br>select * from bdip_chat_point <br>where tree_id = #&#123;modelUrl&#125; <br>and user_name like &#x27;%$&#123;username&#125;%&#x27;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>map.put(<span class="hljs-string">&quot;modelUrl&quot;</span>, <span class="hljs-string">&quot;624&quot;</span>);<br>map.put(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;tom&quot;</span>);<br><br></code></pre></td></tr></table></figure><p>good luck!~</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>各种数据库分页</title>
    <link href="/2018/04/09/2018-04-09-%E5%88%86%E9%A1%B5-paging%E5%90%84%E7%A7%8D%E5%88%86%E9%A1%B5/"/>
    <url>/2018/04/09/2018-04-09-%E5%88%86%E9%A1%B5-paging%E5%90%84%E7%A7%8D%E5%88%86%E9%A1%B5/</url>
    
    <content type="html"><![CDATA[<p>sqlserver分页</p><h2 id="辅助类"><a href="#辅助类" class="headerlink" title="辅助类"></a>辅助类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> com.utils;<br><br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 分页辅助类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ZhaoYihao</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Page</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 当前页码</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> pageNum;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 开始条数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> startNum;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 结束条数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> endNum;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 每页条数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">recordPerPage</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 总页数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> pageCount;<br><br> <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询数据列表</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">List</span> <span class="hljs-variable">records</span> <span class="hljs-operator">=</span> Collections.emptyList();<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Page</span><span class="hljs-params">()</span> &#123;&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Page</span><span class="hljs-params">(<span class="hljs-type">int</span> pageNum)</span> &#123;<br>init(pageNum);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(<span class="hljs-type">int</span> pageNum2)</span> &#123;<br><span class="hljs-built_in">this</span>.startNum = ((pageNum2-<span class="hljs-number">1</span>)*recordPerPage)+<span class="hljs-number">1</span>;<br><span class="hljs-built_in">this</span>.endNum = startNum + recordPerPage;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getPageNum</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> pageNum;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPageNum</span><span class="hljs-params">(<span class="hljs-type">int</span> pageNum)</span> &#123;<br><span class="hljs-built_in">this</span>.pageNum = pageNum;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getStartNum</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> startNum;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStartNum</span><span class="hljs-params">(<span class="hljs-type">int</span> startNum)</span> &#123;<br><span class="hljs-built_in">this</span>.startNum = startNum;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getEndNum</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> endNum;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEndNum</span><span class="hljs-params">(<span class="hljs-type">int</span> endNum)</span> &#123;<br><span class="hljs-built_in">this</span>.endNum = endNum;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getRecordPerPage</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> recordPerPage;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRecordPerPage</span><span class="hljs-params">(<span class="hljs-type">int</span> recordPerPage)</span> &#123;<br><span class="hljs-built_in">this</span>.recordPerPage = recordPerPage;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getPageCount</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> pageCount;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPageCount</span><span class="hljs-params">(<span class="hljs-type">int</span> pageCount)</span> &#123;<br><span class="hljs-built_in">this</span>.pageCount = pageCount;<br>&#125;<br><br><span class="hljs-keyword">public</span> List <span class="hljs-title function_">getRecords</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> records;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRecords</span><span class="hljs-params">(List records)</span> &#123;<br><span class="hljs-built_in">this</span>.records = records;<br>&#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>需要从前台传过来当前所在页面。后台初始化Page对象,将当前页面set进实体类,自动初始化其他信息。</p><h2 id="sqlserver"><a href="#sqlserver" class="headerlink" title="sqlserver"></a>sqlserver</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> ( <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">row_number</span>() <span class="hljs-keyword">over</span>(<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> create_time) rownum,A.<span class="hljs-operator">*</span>  <span class="hljs-keyword">FROM</span> (<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> bdip_chat_point <span class="hljs-keyword">where</span> tree_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;624&#x27;</span> <span class="hljs-keyword">and</span> user_name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%杨%&#x27;</span><br>)A<br>)B <span class="hljs-keyword">where</span> rownum <span class="hljs-keyword">between</span> <span class="hljs-number">1</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">2</span>;<br><br></code></pre></td></tr></table></figure><h2 id="oracle"><a href="#oracle" class="headerlink" title="oracle"></a>oracle</h2><p>方案一:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br><span class="hljs-keyword">select</span> u_name,u_sal<br><span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> users.<span class="hljs-operator">*</span>,rownum rn <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> rownum <span class="hljs-operator">&lt;=</span> <span class="hljs-keyword">end</span>)<br><span class="hljs-keyword">where</span> rn <span class="hljs-operator">&gt;</span> <span class="hljs-keyword">start</span><br><br></code></pre></td></tr></table></figure><p>方案二:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br><span class="hljs-keyword">select</span> u_name,u_sal<br><span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> users.<span class="hljs-operator">*</span>,rownum rn <span class="hljs-keyword">from</span> users)<br><span class="hljs-keyword">where</span> rn <span class="hljs-keyword">between</span> <span class="hljs-keyword">start</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">end</span><br><br></code></pre></td></tr></table></figure><p>方案一效率更高!!!</p><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><p>使用limit 完成分页</p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>问题总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ActiveMQ使用</title>
    <link href="/2018/04/08/2018-04-08-activemq-ActiveMQ%E4%BD%BF%E7%94%A8/"/>
    <url>/2018/04/08/2018-04-08-activemq-ActiveMQ%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>ActiveMQ 是一个apache提供的一个消息队列服务,为我们在生产中提供了一个很好的服务器,我们不需要使用Java BloingQueue,使用这个服务就能很好的应对各种生产场景。</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>我们需要到apache官网上下载ActiveMQ,官网地址<a href="http://activemq.apache.org/activemq-5145-release.html,%E6%88%91%E8%BF%99%E8%BE%B9%E6%98%AFubuntu%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F,%E4%B8%8B%E8%BD%BD%E5%B0%BE%E7%BC%80%E6%98%AFtar.gz,%E5%A6%82%E6%9E%9C%E6%98%AFwindows%E4%B8%8B%E8%BD%BDzip">http://activemq.apache.org/activemq-5145-release.html,我这边是ubuntu操作系统,下载尾缀是tar.gz,如果是windows下载zip</a></p><p><img src="https://i.loli.net/2019/06/30/5d18573c6f73531010.jpg" alt="image"></p><h2 id="配置activemq-xml"><a href="#配置activemq-xml" class="headerlink" title="配置activemq.xml"></a>配置activemq.xml</h2><p>解压下好的软件</p><p><img src="https://i.loli.net/2019/06/30/5d18573d5b33810262.jpg" alt="image"></p><p>进入<strong>apache-activemq-5.14.5&#x2F;conf</strong>找到activemq.xml,将其中的0.0.0.0修改成127.0.0.1</p><p><img src="https://i.loli.net/2019/06/30/5d18573f8697036062.jpg" alt="image"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br>   <span class="hljs-tag">&lt;<span class="hljs-name">transportConnectors</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">transportConnector</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;openwire&quot;</span> <span class="hljs-attr">uri</span>=<span class="hljs-string">&quot;tcp://localhost:61616&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">transportConnector</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ssl&quot;</span> <span class="hljs-attr">uri</span>=<span class="hljs-string">&quot;ssl://localhost:61617&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">transportConnector</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;stomp&quot;</span> <span class="hljs-attr">uri</span>=<span class="hljs-string">&quot;stomp://localhost:61613&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">transportConnector</span> <span class="hljs-attr">uri</span>=<span class="hljs-string">&quot;http://localhost:8081&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">transportConnector</span> <span class="hljs-attr">uri</span>=<span class="hljs-string">&quot;udp://localhost:61618&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">transportConnectors</span>&gt;</span> <br><br></code></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>进入到<strong>apache-activemq-5.14.5&#x2F;bin</strong> 目录下执行命令</p><blockquote><p>$ .&#x2F;activemq start</p></blockquote><p>打印下列语句就是开启成功了</p><p><img src="https://i.loli.net/2019/06/30/5d1857421c3e810459.jpg" alt="image"></p><p>访问<code>localhost:8161/admin</code>。</p><p><img src="https://i.loli.net/2019/06/30/5d18574c306a861239.jpg" alt="image"></p><h1 id="简单的Demo"><a href="#简单的Demo" class="headerlink" title="简单的Demo"></a>简单的Demo</h1><p>既然队列跑起来了，我们编写一个简单的Java程序往队列里面放几个东西，玩玩…写一个生产者和消费者的小例子.</p><ol><li>Sender.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bim.activemq;<br><br><span class="hljs-keyword">import</span> org.apache.activemq.ActiveMQConnection;<br><span class="hljs-keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;<br><br><span class="hljs-keyword">import</span> javax.jms.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sender</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ConnectionFactory factory;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Connection connection;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Session session;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Destination destination;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> MessageProducer producer;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">// 1.创建工厂</span><br>        factory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveMQConnectionFactory</span>(ActiveMQConnection.DEFAULT_USER,ActiveMQConnection.DEFAULT_PASSWORD,<br>                <span class="hljs-string">&quot;tcp://localhost:61616&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 2.获取Connection</span><br>            connection = factory.createConnection();<br>            connection.start();<br>            <span class="hljs-comment">// 3.获取session</span><br>            session = connection.createSession(<span class="hljs-literal">true</span>,Session.AUTO_ACKNOWLEDGE);<br><br>            <span class="hljs-comment">// 4.发消息 4.1指定消息的目的地 destination 4.2 指定接受人 consumer</span><br>            destination = session.createQueue(<span class="hljs-string">&quot;foo&quot;</span>);<br>            producer = session.createProducer(destination);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>                producer.send(destination,session.createTextMessage(<span class="hljs-string">&quot;新消息&quot;</span> + i));<br>            &#125;<br>            session.commit();<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>这个是生产者,往队列中存值,这边我们为队列里面存放了5条消息,分别存于foo节点下.,我们在运行它之前先查看一下队列的样子。</p><p><img src="https://i.loli.net/2019/06/30/5d18574e01f1742873.jpg" alt="image"></p><p>Queues中是空的什么都没有,我们运行代码,往队列中存入值</p><p><img src="https://i.loli.net/2019/06/30/5d18574fb76e694502.jpg" alt="image"></p><p>我们可以点进去查看详情</p><p><img src="https://i.loli.net/2019/06/30/5d185756861cb94470.jpg" alt="image"></p><ol start="2"><li>Consumer.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bim.activemq;<br><br><span class="hljs-keyword">import</span> org.apache.activemq.ActiveMQConnection;<br><span class="hljs-keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;<br><br><span class="hljs-keyword">import</span> javax.jms.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Consumer</span> &#123;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">// 1.创建工厂</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveMQConnectionFactory</span>(ActiveMQConnection.DEFAULT_USER, ActiveMQConnection.DEFAULT_PASSWORD,<br>                <span class="hljs-string">&quot;tcp://127.0.0.1:61616&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 2. 创建链接</span><br>            <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> factory.createConnection();<br>            connection.start();<br>            <span class="hljs-comment">// 3.创建session 参数详解https://www.cnblogs.com/MIC2016/p/6086321.html</span><br>            <span class="hljs-type">Session</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> connection.createSession(<span class="hljs-literal">true</span>,Session.AUTO_ACKNOWLEDGE);<br>            <span class="hljs-comment">// 4.创建producer生产者发消息</span><br>            <span class="hljs-type">Destination</span> <span class="hljs-variable">destination</span> <span class="hljs-operator">=</span> session.createQueue(<span class="hljs-string">&quot;foo&quot;</span>);<br>            <span class="hljs-type">MessageConsumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> session.createConsumer(destination);<br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>                <span class="hljs-type">TextMessage</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> (TextMessage) consumer.receive();<br>                System.out.println(message.getText());<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (JMSException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>这个是消费程序,每当队列里面存放一条消息后,该程序就会去队列中取数据了!!!</p><p><img src="https://i.loli.net/2019/06/30/5d18575b6408923970.jpg" alt="image"></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ActiveMQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javaweb实现云端回收站功能</title>
    <link href="/2018/04/02/2018-04-02-Javaweb%E4%BA%91%E7%AB%AF%E5%9B%9E%E6%94%B6%E7%AB%99%E5%8A%9F%E8%83%BD%E6%80%BB%E7%BB%93/"/>
    <url>/2018/04/02/2018-04-02-Javaweb%E4%BA%91%E7%AB%AF%E5%9B%9E%E6%94%B6%E7%AB%99%E5%8A%9F%E8%83%BD%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>最近接手JavaWeb回收站功能,业务场景：在云端为用户删除模型操作提供一个回收站功能，主要业务。模型删除、模型找回。下面只梳理业务逻辑</p><h3 id="关系表"><a href="#关系表" class="headerlink" title="关系表"></a>关系表</h3><p>主要业务牵扯表有这几张:bim_space_manager(用户空间)、bim_model_tree_trash(回收站)和bim_model_tree(模型)</p><ul><li>bim_space_manager 可以理解为百度网盘的用户空间。</li><li>bim_model_tree 云端存放模型的主要表</li><li>bim_model_tree_trash 删除记录</li></ul><p><img src="https://i.loli.net/2019/06/30/5d1856a02693718631.jpg" alt="image"></p><h3 id="字段详述"><a href="#字段详述" class="headerlink" title="字段详述"></a>字段详述</h3><p>表字段说明:bim_model_tree_trash</p><ul><li>enable_:0 回收站记录弃用(同时表示模型记录启用,很绕…主要为了回收站的找回逻辑)  1 回收站启用(同时表示模型记录被逻辑删除) 2 对应模型记录被永久删除</li><li>user_id:模型所有者的id</li><li>tree_id:被删除的模型id 与bim_model_tree 中的id 一对一关系</li><li>left_days:回收站中初始保留7天,后台每天自动检测该字段,并更新生于天数,出现负数时,即表示该模型已经被物理删除,不会再显示在回收站中</li><li>model_size:该节点文件的大小   单位KB</li></ul><p>表字段说明:bim_space_manager</p><ul><li>enable_: 在新建用户为其初始化默认空间,默认为1,用户注销时为0</li><li>user_id:用户id,与用户表中的用户一一对应</li><li>space_total:用户初始化可用空间大小  2048  单位MB 计算方式:space_size*1024</li><li>space_used:已经使用的size 单位MB</li><li>space_size: 用户空间等级,初始化为2  (在user_space_size.properties文件中的space_size_tool配置)</li><li>user_type: 用户空间使用类型  默认tool 工具级</li></ul><h3 id="主要业务梳理"><a href="#主要业务梳理" class="headerlink" title="主要业务梳理"></a>主要业务梳理</h3><p>回收站记录与模型节点记录一一对应,通过tree_id关联</p><h4 id="1-删除文件"><a href="#1-删除文件" class="headerlink" title="1.删除文件"></a>1.删除文件</h4><p>用户删除文件时,先将bim_model_tree中记录enable设为0,再在bim_model_tree_trash<br>中创建记录,创建之前会查重是否已经有该记录,有的话,将trash中enable变为1,否则新建trash记录</p><h4 id="2-找回文件："><a href="#2-找回文件：" class="headerlink" title="2.找回文件："></a>2.找回文件：</h4><p>用户从回收站中找回节点，先删除trash表中对应记录，然后判断该节点是文件还是文件夹。如果是文件的话，先查询用户空间表的剩余空间是否够用，够用的话直接重新启用model_tree中对应记录，<br>同时启用该节点所有的父祖节点，同时更新用户空间表。如果是文件夹的话，先查出其下所有子节点，然后排除其中所有之前删除过所有节点。先将其全部恢复，然后查询用户空间是否超过额定大小，超出的话回滚所有操作，并提示剩余空间不足。</p><h4 id="3-彻底删除文件："><a href="#3-彻底删除文件：" class="headerlink" title="3.彻底删除文件："></a>3.彻底删除文件：</h4><p>即删除trash中的记录，说是物理删除也并非真的物理删除。而是通过修改status字段为2 进行彻底删除。文件进入回收站后，定时7天，期间用户可找回，也可彻底删除。<br>超期则不会再显示trash记录。同时后台有定时任务，每天扫描一次trash表，定时修改left_day ，当剩余天数不大于0时，也不会再显示trash记录，算是彻底删除文件</p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>问题总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>wangEditor粘贴图片上传</title>
    <link href="/2018/03/27/2018-03-27-wangEditor-wangEditor%E5%9B%BE%E7%89%87%E7%B2%98%E8%B4%B4%E4%B8%8A%E4%BC%A0/"/>
    <url>/2018/03/27/2018-03-27-wangEditor-wangEditor%E5%9B%BE%E7%89%87%E7%B2%98%E8%B4%B4%E4%B8%8A%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<p>wangEditor粘贴图片上传功能</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>使用paste.js辅助上传,开源的github地址 <a href="https://github.com/layerssss/paste.js/">https://github.com/layerssss/paste.js/</a></p><p>如果需要的话可以试用提供的压缩工具对base64进行压缩后上传,在这边没压缩的图片10M,压缩完200KB,还是推荐一用。</p><ol><li>初始化富文本编辑器</li><li>定位编辑器的textarea div框,为其绑定paste事件</li><li>解析粘贴板中的数据,数据有可能不是image,所以要做判断</li><li>转成base64编码，获取一个图</li><li>压缩图片，封装FormData对象</li><li>使用ajax提交数据到后台处理</li><li>后台返回上传后的图片路径，路径可以是绝对路径也可以是相对路径,但必须是在浏览器的url中可以访问的</li><li>在ajax success回调中动态为编辑器的textarea div框append一个<img>标签</li></ol><p>注意初始化那块的代码，我这里业务需要在一个页面初始化多个Editor,所以我写在循环里了,需要根据代码，结合自身业务做适当修改</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="workflow-collision-js"><a href="#workflow-collision-js" class="headerlink" title="workflow-collision.js"></a>workflow-collision.js</h4><p>我主要的业务在这个js里面 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">initTextarea</span>(<span class="hljs-params">nodes,createBy</span>)&#123;<br><span class="hljs-keyword">var</span> currentUserId = <span class="hljs-title class_">BimBdip</span>.<span class="hljs-property">currentUserid</span>;<br><span class="hljs-keyword">var</span> divId = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">var</span> textId = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">var</span> E = <span class="hljs-variable language_">window</span>.<span class="hljs-property">wangEditor</span><br><span class="hljs-keyword">var</span> menu1 = [<br>];<br><span class="hljs-keyword">if</span>(gloubleVariable.<span class="hljs-property">status</span> == <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; currentUserId == createBy || <span class="hljs-title function_">typeof</span>(createBy) == <span class="hljs-string">&#x27;undefined&#x27;</span>)&#123;<br>menu1 = [<br><span class="hljs-string">&#x27;head&#x27;</span>,  <span class="hljs-comment">// 标题</span><br>    <span class="hljs-string">&#x27;bold&#x27;</span>,  <span class="hljs-comment">// 粗体</span><br>    <span class="hljs-string">&#x27;italic&#x27;</span>,  <span class="hljs-comment">// 斜体</span><br>    <span class="hljs-string">&#x27;underline&#x27;</span>,  <span class="hljs-comment">// 下划线</span><br>    <span class="hljs-string">&#x27;strikeThrough&#x27;</span>,  <span class="hljs-comment">// 删除线</span><br>    <span class="hljs-string">&#x27;foreColor&#x27;</span>,  <span class="hljs-comment">// 文字颜色</span><br>    <span class="hljs-string">&#x27;backColor&#x27;</span>,  <span class="hljs-comment">// 背景颜色</span><br>    <span class="hljs-string">&#x27;list&#x27;</span>,  <span class="hljs-comment">// 列表</span><br>    <span class="hljs-string">&#x27;justify&#x27;</span>,  <span class="hljs-comment">// 对齐方式</span><br>    <span class="hljs-string">&#x27;emoticon&#x27;</span>,  <span class="hljs-comment">// 表情</span><br>    <span class="hljs-string">&#x27;image&#x27;</span>,  <span class="hljs-comment">// 插入图片</span><br>    <span class="hljs-string">&#x27;undo&#x27;</span>,  <span class="hljs-comment">// 撤销</span><br>];<br>&#125;<br>nodes.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">node,index</span>)=&gt;</span>&#123;<br>divId = <span class="hljs-string">&quot;twoDimesional-div-&quot;</span>+index;<br><span class="hljs-keyword">var</span> editor = <span class="hljs-keyword">new</span> <span class="hljs-title function_">E</span>(<span class="hljs-string">&#x27;#&#x27;</span>+divId);<br>textId = <span class="hljs-string">&quot;twoDimesional-text-&quot;</span>+index;<br><span class="hljs-keyword">var</span> $text = $(<span class="hljs-string">&#x27;#&#x27;</span> + textId);<br>editor.<span class="hljs-property">customConfig</span>.<span class="hljs-property">onchange</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">html</span>) &#123;<br><span class="hljs-comment">// 监控变化，同步更新到 textarea</span><br>$text.<span class="hljs-title function_">val</span>(html)<br>&#125;<br>editor.<span class="hljs-property">customConfig</span>.<span class="hljs-property">uploadImgServer</span> = publicJS.<span class="hljs-property">tomcat_url</span> + <span class="hljs-string">&#x27;/workflow/uploadTwoDimesionalImgage.action&#x27;</span>;<br>editor.<span class="hljs-property">customConfig</span>.<span class="hljs-property">uploadFileName</span> = <span class="hljs-string">&#x27;files&#x27;</span>;<br>editor.<span class="hljs-property">customConfig</span>.<span class="hljs-property">menus</span> = menu1;<br>editor.<span class="hljs-title function_">create</span>();<br>$text.<span class="hljs-title function_">val</span>(editor.<span class="hljs-property">txt</span>.<span class="hljs-title function_">html</span>());<br><span class="hljs-keyword">if</span>(gloubleVariable.<span class="hljs-property">status</span> == <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; workflowCollision.<span class="hljs-property">currentListName</span> != <span class="hljs-string">&#x27;handle&#x27;</span> &amp;&amp; workflowCollision.<span class="hljs-property">currentListName</span> != <span class="hljs-string">&#x27;cc&#x27;</span>)&#123;<br> editor.<span class="hljs-property">$textElem</span>.<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;contenteditable&#x27;</span>, <span class="hljs-literal">true</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br> editor.<span class="hljs-property">$textElem</span>.<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;contenteditable&#x27;</span>, <span class="hljs-literal">false</span>);<br>&#125;<br><span class="hljs-keyword">var</span> selector = <span class="hljs-string">&#x27;.w-e-text:eq(&#x27;</span>+index+<span class="hljs-string">&#x27;)&#x27;</span>;<br><span class="hljs-keyword">var</span> a = $(selector);<br><span class="hljs-comment">// 为每个节点框添加粘贴事件,依赖paste.js</span><br><span class="hljs-title function_">copyBindEvent</span>(a[<span class="hljs-number">0</span>]);<br>&#125;)<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 绑定粘贴事件</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> _target需要绑定粘贴事件的js对象 </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">copyBindEvent</span>(<span class="hljs-params">_target</span>)&#123;<br>_target.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;paste&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br>workflowCollision.<span class="hljs-property">operateEditorTarget</span> = _target;<br><span class="hljs-comment">// 获取浏览器类型</span><br>        <span class="hljs-keyword">var</span> broswerType = <span class="hljs-title class_">GetBrowserType</span>();<br>        <span class="hljs-keyword">if</span> (broswerType == <span class="hljs-string">&quot;Chrome&quot;</span>) &#123;<br><br>            <span class="hljs-keyword">var</span> clipboard = event.<span class="hljs-property">clipboardData</span>;<br>            <span class="hljs-keyword">var</span> blob = <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; event.<span class="hljs-property">clipboardData</span>.<span class="hljs-property">items</span>.<span class="hljs-property">length</span>; i++) &#123;<br>                <span class="hljs-keyword">if</span> (clipboard.<span class="hljs-property">items</span>[i].<span class="hljs-property">type</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;image&quot;</span>) != -<span class="hljs-number">1</span>) &#123;<br>                    blob = clipboard.<span class="hljs-property">items</span>[i].<span class="hljs-title function_">getAsFile</span>();<br>                    <span class="hljs-comment">//转成base64编码，获取一个图片</span><br>                    <span class="hljs-keyword">var</span> reader = <span class="hljs-keyword">new</span> <span class="hljs-variable language_">window</span>.<span class="hljs-title class_">FileReader</span>();<br>                    reader.<span class="hljs-title function_">readAsDataURL</span>(blob);<br>                    reader.<span class="hljs-property">onloadend</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                        <span class="hljs-comment">// 压缩图片</span><br>                        <span class="hljs-title function_">discussCompress</span>(reader.<span class="hljs-property">result</span>);<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (clipboard.<span class="hljs-property">items</span>[i].<span class="hljs-property">type</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;html&quot;</span>) != -<span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-keyword">var</span> html = $(event.<span class="hljs-property">clipboardData</span>.<span class="hljs-title function_">getData</span>(<span class="hljs-string">&quot;text/html&quot;</span>));<br>                    html.<span class="hljs-title function_">find</span>(<span class="hljs-string">&quot;img&quot;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                        <span class="hljs-keyword">var</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;canvas&quot;</span>);<br>                        <span class="hljs-keyword">var</span> context = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>);<br>                        <span class="hljs-keyword">var</span> img = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;img&quot;</span>);<br>                        <span class="hljs-keyword">var</span> src = $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;src&quot;</span>);<br>                        <span class="hljs-keyword">var</span> _this = <span class="hljs-variable language_">this</span>;<br>                        img.<span class="hljs-property">src</span> = src;<br>                        <span class="hljs-keyword">var</span> imageS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>();<br>                        context.<span class="hljs-title function_">drawImage</span>(img, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, img.<span class="hljs-property">width</span>, img.<span class="hljs-property">height</span>);<br>                        imageS.<span class="hljs-property">src</span> = canvas.<span class="hljs-title function_">toDataURL</span>(<span class="hljs-string">&quot;image/png&quot;</span>);<br>                        <span class="hljs-comment">// 压缩图片</span><br>                        <span class="hljs-title function_">discussCompress</span>(imageS.<span class="hljs-property">src</span>);<br>                    &#125;);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//阻止默认粘贴事件</span><br><span class="hljs-comment">//        event.originalEvent.preventDefault();</span><br>    &#125;);<br>&#125;<br><br><span class="hljs-comment">// 图片压缩</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">discussCompress</span>(<span class="hljs-params">base64code</span>)&#123;<br><span class="hljs-keyword">var</span> fd = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>();<br><span class="hljs-comment">//压缩图片</span><br><span class="hljs-title function_">compressImg</span>(base64code,<span class="hljs-number">450</span>,<span class="hljs-number">250</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">base64code</span>)&#123;<br>    <span class="hljs-keyword">var</span> blob = <span class="hljs-title function_">dataURLToBlob</span>(base64code);<br>    <span class="hljs-keyword">if</span> (blob !== <span class="hljs-literal">null</span> || blob !== <span class="hljs-literal">undefined</span> || blob !== <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>        fd.<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;files&quot;</span>,blob);<br>        <span class="hljs-comment">// 上传服务器</span><br>        <span class="hljs-title function_">copyDoAjax</span>(fd);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-title class_">Dialog</span>.<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;上传图片失败,请重试!&quot;</span>);<br>    &#125;<br>&#125;);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 上传服务器</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> <span class="hljs-variable">fd</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">copyDoAjax</span>(<span class="hljs-params">fd</span>) &#123;<br><span class="hljs-keyword">var</span> url = publicJS.<span class="hljs-property">tomcat_url</span> + <span class="hljs-string">&#x27;/workflow/uploadTwoDimesionalImgage.action&#x27;</span>;<br>$.<span class="hljs-title function_">ajax</span>(&#123;<br>   <span class="hljs-attr">url</span>:url,<br>   <span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;POST&#x27;</span>,<br>   <span class="hljs-attr">data</span>:fd,<br>   <span class="hljs-attr">processData</span>:<span class="hljs-literal">false</span>,<br>   <span class="hljs-attr">contentType</span>:<span class="hljs-literal">false</span>,<br>   dataType : <span class="hljs-string">&quot;json&quot;</span>,<br>  <span class="hljs-comment">//jsonp: &quot;jsonpCallBack&quot;,</span><br>        <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">data, status</span>) &#123;<span class="hljs-comment">//操作成功后的操作！data是后台传过来的值</span><br>        <span class="hljs-comment">//console.log(&quot;上传图片成功&quot;);</span><br>        <span class="hljs-comment">//往富文本框添加图片 &lt;img src=&quot;http://test-file.bimbdip.com/discuss/1522142071651.tmp&quot; style=&quot;max-width:100%;&quot;&gt;</span><br>        <span class="hljs-keyword">var</span> html = <span class="hljs-string">`&lt;img src=&quot;<span class="hljs-subst">$&#123;data.data&#125;</span>&quot; style=&quot;max-width:100%;&quot;&gt;`</span>;<br>        $(workflowCollision.<span class="hljs-property">operateEditorTarget</span>).<span class="hljs-title function_">append</span>(html);<br>        <br>        &#125;,<br>        <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">xhr, textStatus, errorThrown</span>) &#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;上传图片失败&quot;</span>);<br>        &#125;<br>    &#125;);<br>&#125;<br><br><span class="hljs-comment">// 获取浏览器类型</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">GetBrowserType</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> userAgent = navigator.<span class="hljs-property">userAgent</span>;<br>    <span class="hljs-keyword">var</span> isOpera = userAgent.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;Opera&quot;</span>) &gt; -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (isOpera) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Opera&quot;</span><br>    &#125;<br>    ; <span class="hljs-comment">//判断是否Opera浏览器</span><br>    <span class="hljs-keyword">if</span> (userAgent.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;Firefox&quot;</span>) &gt; -<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;FF&quot;</span>;<br>    &#125; <span class="hljs-comment">//判断是否Firefox浏览器</span><br>    <span class="hljs-keyword">if</span> (userAgent.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;Chrome&quot;</span>) &gt; -<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Chrome&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (userAgent.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;Safari&quot;</span>) &gt; -<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Safari&quot;</span>;<br>    &#125; <span class="hljs-comment">//判断是否Safari浏览器</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;IE&quot;</span>;<span class="hljs-comment">//其他的就当IE吧</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="压缩的相关库"><a href="#压缩的相关库" class="headerlink" title="压缩的相关库"></a>压缩的相关库</h4><p>megapix-image.js 开源库</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Mega pixel image rendering library for iOS6 Safari</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Fixes iOS6 Safari&#x27;s image file rendering issue for large size image (over mega-pixel),</span><br><span class="hljs-comment"> * which causes unexpected subsampling when drawing it in canvas.</span><br><span class="hljs-comment"> * By using this library, you can safely render the image with proper stretching.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Copyright (c) 2012 Shinichi Tomita &lt;shinichi.tomita<span class="hljs-doctag">@gmail</span>.com&gt;</span><br><span class="hljs-comment"> * Released under the MIT license</span><br><span class="hljs-comment"> */</span><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Detect subsampling in loaded image.</span><br><span class="hljs-comment">   * In iOS, larger images than 2M pixels may be subsampled in rendering.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">detectSubsampling</span>(<span class="hljs-params">img</span>) &#123;<br>    <span class="hljs-keyword">var</span> iw = img.<span class="hljs-property">naturalWidth</span>, ih = img.<span class="hljs-property">naturalHeight</span>;<br>    <span class="hljs-keyword">if</span> (iw * ih &gt; <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>) &#123; <span class="hljs-comment">// subsampling may happen over megapixel image</span><br>      <span class="hljs-keyword">var</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;canvas&#x27;</span>);<br>      canvas.<span class="hljs-property">width</span> = canvas.<span class="hljs-property">height</span> = <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">var</span> ctx = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);<br>      ctx.<span class="hljs-title function_">drawImage</span>(img, -iw + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>      <span class="hljs-comment">// subsampled image becomes half smaller in rendering size.</span><br>      <span class="hljs-comment">// check alpha channel value to confirm image is covering edge pixel or not.</span><br>      <span class="hljs-comment">// if alpha value is 0 image is not covering, hence subsampled.</span><br>      <span class="hljs-keyword">return</span> ctx.<span class="hljs-title function_">getImageData</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>).<span class="hljs-property">data</span>[<span class="hljs-number">3</span>] === <span class="hljs-number">0</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Detecting vertical squash in loaded image.</span><br><span class="hljs-comment">   * Fixes a bug which squash image vertically while drawing into canvas for some images.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">detectVerticalSquash</span>(<span class="hljs-params">img, iw, ih</span>) &#123;<br>    <span class="hljs-keyword">var</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;canvas&#x27;</span>);<br>    canvas.<span class="hljs-property">width</span> = <span class="hljs-number">1</span>;<br>    canvas.<span class="hljs-property">height</span> = ih;<br>    <span class="hljs-keyword">var</span> ctx = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);<br>    ctx.<span class="hljs-title function_">drawImage</span>(img, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">var</span> data = ctx.<span class="hljs-title function_">getImageData</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, ih).<span class="hljs-property">data</span>;<br>    <span class="hljs-comment">// search image edge pixel position in case it is squashed vertically.</span><br>    <span class="hljs-keyword">var</span> sy = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">var</span> ey = ih;<br>    <span class="hljs-keyword">var</span> py = ih;<br>    <span class="hljs-keyword">while</span> (py &gt; sy) &#123;<br>      <span class="hljs-keyword">var</span> alpha = data[(py - <span class="hljs-number">1</span>) * <span class="hljs-number">4</span> + <span class="hljs-number">3</span>];<br>      <span class="hljs-keyword">if</span> (alpha === <span class="hljs-number">0</span>) &#123;<br>        ey = py;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        sy = py;<br>      &#125;<br>      py = (ey + sy) &gt;&gt; <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">var</span> ratio = (py / ih);<br>    <span class="hljs-keyword">return</span> (ratio===<span class="hljs-number">0</span>)?<span class="hljs-number">1</span>:ratio;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Rendering image element (with resizing) and get its data URL</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">renderImageToDataURL</span>(<span class="hljs-params">img, options, doSquash</span>) &#123;<br>    <span class="hljs-keyword">var</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;canvas&#x27;</span>);<br>    <span class="hljs-title function_">renderImageToCanvas</span>(img, canvas, options, doSquash);<br>    <span class="hljs-keyword">return</span> canvas.<span class="hljs-title function_">toDataURL</span>(<span class="hljs-string">&quot;image/jpeg&quot;</span>, options.<span class="hljs-property">quality</span> || <span class="hljs-number">0.8</span>);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Rendering image element (with resizing) into the canvas element</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">renderImageToCanvas</span>(<span class="hljs-params">img, canvas, options, doSquash</span>) &#123;<br>    <span class="hljs-keyword">var</span> iw = img.<span class="hljs-property">naturalWidth</span>, ih = img.<span class="hljs-property">naturalHeight</span>;<br>    <span class="hljs-keyword">if</span> (!(iw+ih)) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">var</span> width = options.<span class="hljs-property">width</span>, height = options.<span class="hljs-property">height</span>;<br>    <span class="hljs-keyword">var</span> ctx = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);<br>    ctx.<span class="hljs-title function_">save</span>();<br>    <span class="hljs-title function_">transformCoordinate</span>(canvas, ctx, width, height, options.<span class="hljs-property">orientation</span>);<br>    <span class="hljs-keyword">var</span> subsampled = <span class="hljs-title function_">detectSubsampling</span>(img);<br>    <span class="hljs-keyword">if</span> (subsampled) &#123;<br>      iw /= <span class="hljs-number">2</span>;<br>      ih /= <span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">var</span> d = <span class="hljs-number">1024</span>; <span class="hljs-comment">// size of tiling canvas</span><br>    <span class="hljs-keyword">var</span> tmpCanvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;canvas&#x27;</span>);<br>    tmpCanvas.<span class="hljs-property">width</span> = tmpCanvas.<span class="hljs-property">height</span> = d;<br>    <span class="hljs-keyword">var</span> tmpCtx = tmpCanvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);<br>    <span class="hljs-keyword">var</span> vertSquashRatio = doSquash ? <span class="hljs-title function_">detectVerticalSquash</span>(img, iw, ih) : <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">var</span> dw = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(d * width / iw);<br>    <span class="hljs-keyword">var</span> dh = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(d * height / ih / vertSquashRatio);<br>    <span class="hljs-keyword">var</span> sy = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">var</span> dy = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (sy &lt; ih) &#123;<br>      <span class="hljs-keyword">var</span> sx = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">var</span> dx = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">while</span> (sx &lt; iw) &#123;<br>        tmpCtx.<span class="hljs-title function_">clearRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, d, d);<br>        tmpCtx.<span class="hljs-title function_">drawImage</span>(img, -sx, -sy);<br>        ctx.<span class="hljs-title function_">drawImage</span>(tmpCanvas, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, d, d, dx, dy, dw, dh);<br>        sx += d;<br>        dx += dw;<br>      &#125;<br>      sy += d;<br>      dy += dh;<br>    &#125;<br>    ctx.<span class="hljs-title function_">restore</span>();<br>    tmpCanvas = tmpCtx = <span class="hljs-literal">null</span>;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Transform canvas coordination according to specified frame size and orientation</span><br><span class="hljs-comment">   * Orientation value is from EXIF tag</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">transformCoordinate</span>(<span class="hljs-params">canvas, ctx, width, height, orientation</span>) &#123;<br>    <span class="hljs-keyword">switch</span> (orientation) &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>        canvas.<span class="hljs-property">width</span> = height;<br>        canvas.<span class="hljs-property">height</span> = width;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-attr">default</span>:<br>        canvas.<span class="hljs-property">width</span> = width;<br>        canvas.<span class="hljs-property">height</span> = height;<br>    &#125;<br>    <span class="hljs-keyword">switch</span> (orientation) &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        <span class="hljs-comment">// horizontal flip</span><br>        ctx.<span class="hljs-title function_">translate</span>(width, <span class="hljs-number">0</span>);<br>        ctx.<span class="hljs-title function_">scale</span>(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        <span class="hljs-comment">// 180 rotate left</span><br>        ctx.<span class="hljs-title function_">translate</span>(width, height);<br>        ctx.<span class="hljs-title function_">rotate</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>        <span class="hljs-comment">// vertical flip</span><br>        ctx.<span class="hljs-title function_">translate</span>(<span class="hljs-number">0</span>, height);<br>        ctx.<span class="hljs-title function_">scale</span>(<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>        <span class="hljs-comment">// vertical flip + 90 rotate right</span><br>        ctx.<span class="hljs-title function_">rotate</span>(<span class="hljs-number">0.5</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>);<br>        ctx.<span class="hljs-title function_">scale</span>(<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>        <span class="hljs-comment">// 90 rotate right</span><br>        ctx.<span class="hljs-title function_">rotate</span>(<span class="hljs-number">0.5</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>);<br>        ctx.<span class="hljs-title function_">translate</span>(<span class="hljs-number">0</span>, -height);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>        <span class="hljs-comment">// horizontal flip + 90 rotate right</span><br>        ctx.<span class="hljs-title function_">rotate</span>(<span class="hljs-number">0.5</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>);<br>        ctx.<span class="hljs-title function_">translate</span>(width, -height);<br>        ctx.<span class="hljs-title function_">scale</span>(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>        <span class="hljs-comment">// 90 rotate left</span><br>        ctx.<span class="hljs-title function_">rotate</span>(-<span class="hljs-number">0.5</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>);<br>        ctx.<span class="hljs-title function_">translate</span>(-width, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-attr">default</span>:<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">var</span> <span class="hljs-variable constant_">URL</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">URL</span> &amp;&amp; <span class="hljs-variable language_">window</span>.<span class="hljs-property">URL</span>.<span class="hljs-property">createObjectURL</span> ? <span class="hljs-variable language_">window</span>.<span class="hljs-property">URL</span> :<br>            <span class="hljs-variable language_">window</span>.<span class="hljs-property">webkitURL</span> &amp;&amp; <span class="hljs-variable language_">window</span>.<span class="hljs-property">webkitURL</span>.<span class="hljs-property">createObjectURL</span> ? <span class="hljs-variable language_">window</span>.<span class="hljs-property">webkitURL</span> :<br>            <span class="hljs-literal">null</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * MegaPixImage class</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">MegaPixImage</span>(<span class="hljs-params">srcImage</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">Blob</span> &amp;&amp; srcImage <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Blob</span>) &#123;<br>      <span class="hljs-keyword">if</span> (!<span class="hljs-variable constant_">URL</span>) &#123; <span class="hljs-keyword">throw</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;No createObjectURL function found to create blob url&quot;</span>); &#125;<br>      <span class="hljs-keyword">var</span> img = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>();<br>      img.<span class="hljs-property">src</span> = <span class="hljs-variable constant_">URL</span>.<span class="hljs-title function_">createObjectURL</span>(srcImage);<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">blob</span> = srcImage;<br>      srcImage = img;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!srcImage.<span class="hljs-property">naturalWidth</span> &amp;&amp; !srcImage.<span class="hljs-property">naturalHeight</span>) &#123;<br>      <span class="hljs-keyword">var</span> _this = <span class="hljs-variable language_">this</span>;<br>      srcImage.<span class="hljs-property">onload</span> = srcImage.<span class="hljs-property">onerror</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> listeners = _this.<span class="hljs-property">imageLoadListeners</span>;<br>        <span class="hljs-keyword">if</span> (listeners) &#123;<br>          _this.<span class="hljs-property">imageLoadListeners</span> = <span class="hljs-literal">null</span>;<br>          <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>, len=listeners.<span class="hljs-property">length</span>; i&lt;len; i++) &#123;<br>            listeners[i]();<br>          &#125;<br>        &#125;<br>      &#125;;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">imageLoadListeners</span> = [];<br>    &#125;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">srcImage</span> = srcImage;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Rendering megapix image into specified target element</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-title class_">MegaPixImage</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">render</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">target, options, callback</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">imageLoadListeners</span>) &#123;<br>      <span class="hljs-keyword">var</span> _this = <span class="hljs-variable language_">this</span>;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">imageLoadListeners</span>.<span class="hljs-title function_">push</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; _this.<span class="hljs-title function_">render</span>(target, options, callback); &#125;);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    options = options || &#123;&#125;;<br>    <span class="hljs-keyword">var</span> imgWidth = <span class="hljs-variable language_">this</span>.<span class="hljs-property">srcImage</span>.<span class="hljs-property">naturalWidth</span>, imgHeight = <span class="hljs-variable language_">this</span>.<span class="hljs-property">srcImage</span>.<span class="hljs-property">naturalHeight</span>,<br>        width = options.<span class="hljs-property">width</span>, height = options.<span class="hljs-property">height</span>,<br>        maxWidth = options.<span class="hljs-property">maxWidth</span>, maxHeight = options.<span class="hljs-property">maxHeight</span>,<br>        doSquash = !<span class="hljs-variable language_">this</span>.<span class="hljs-property">blob</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-property">blob</span>.<span class="hljs-property">type</span> === <span class="hljs-string">&#x27;image/jpeg&#x27;</span>;<br>    <span class="hljs-keyword">if</span> (width &amp;&amp; !height) &#123;<br>      height = (imgHeight * width / imgWidth) &lt;&lt; <span class="hljs-number">0</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (height &amp;&amp; !width) &#123;<br>      width = (imgWidth * height / imgHeight) &lt;&lt; <span class="hljs-number">0</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      width = imgWidth;<br>      height = imgHeight;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (maxWidth &amp;&amp; width &gt; maxWidth) &#123;<br>      width = maxWidth;<br>      height = (imgHeight * width / imgWidth) &lt;&lt; <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (maxHeight &amp;&amp; height &gt; maxHeight) &#123;<br>      height = maxHeight;<br>      width = (imgWidth * height / imgHeight) &lt;&lt; <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">var</span> opt = &#123; width : width, height : height &#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> options) opt[k] = options[k];<br><br>    <span class="hljs-keyword">var</span> tagName = target.<span class="hljs-property">tagName</span>.<span class="hljs-title function_">toLowerCase</span>();<br>    <span class="hljs-keyword">if</span> (tagName === <span class="hljs-string">&#x27;img&#x27;</span>) &#123;<br>      target.<span class="hljs-property">src</span> = <span class="hljs-title function_">renderImageToDataURL</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">srcImage</span>, opt, doSquash);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tagName === <span class="hljs-string">&#x27;canvas&#x27;</span>) &#123;<br>      <span class="hljs-title function_">renderImageToCanvas</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">srcImage</span>, target, opt, doSquash);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">onrender</span> === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">onrender</span>(target);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (callback) &#123;<br>      <span class="hljs-title function_">callback</span>();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">blob</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">blob</span> = <span class="hljs-literal">null</span>;<br>      <span class="hljs-variable constant_">URL</span>.<span class="hljs-title function_">revokeObjectURL</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">srcImage</span>.<span class="hljs-property">src</span>);<br>    &#125;<br>  &#125;;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Export class to global</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> define === <span class="hljs-string">&#x27;function&#x27;</span> &amp;&amp; define.<span class="hljs-property">amd</span>) &#123;<br>    <span class="hljs-title function_">define</span>([], <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-title class_">MegaPixImage</span>; &#125;); <span class="hljs-comment">// for AMD loader</span><br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">exports</span> === <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>    <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">MegaPixImage</span>; <span class="hljs-comment">// for CommonJS</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">MegaPixImage</span> = <span class="hljs-title class_">MegaPixImage</span>;<br>  &#125;<br><br>&#125;)();<br><br></code></pre></td></tr></table></figure><p>compress-image.js 对开源库做了简单封装</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//************压缩图片************************************************************</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 压缩图片</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> base64code //被压缩图片的base64编码</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> maxWidth //压缩后图片最大宽度</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> maxHeight //压缩后图片的最大高度</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> callback(dataUrl) 压缩回调方法,参数为压缩后的url，若压缩失败，则返回&quot;&quot;;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">compressImg</span>(<span class="hljs-params">base64code,maxWidth,maxHeight,callback</span>) &#123;<br>    <span class="hljs-comment">//var base64code = &quot;&quot;;</span><br>    <span class="hljs-keyword">var</span> image = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>();<br>    image.<span class="hljs-property">src</span> = base64code;<br>    <span class="hljs-keyword">var</span> dataURL = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-title function_">imgLoad</span>(image, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">//解决canvas无法读取画布问题</span><br>        image.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;crossOrigin&#x27;</span>, <span class="hljs-string">&#x27;anonymous&#x27;</span>);<br>        <span class="hljs-keyword">var</span> mpImg = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MegaPixImage</span>(image);<br>        <span class="hljs-comment">//console.log(&#x27;加载完毕&#x27;)</span><br>        <span class="hljs-keyword">var</span> resCanvas2 =<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;canvas&quot;</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_">isIOS</span>())&#123;<br>        mpImg.<span class="hljs-title function_">render</span>(resCanvas2, &#123;<span class="hljs-attr">maxWidth</span>: maxWidth, <span class="hljs-attr">maxHeight</span>: maxHeight, <span class="hljs-attr">orientation</span>: <span class="hljs-number">4</span>&#125;);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>        mpImg.<span class="hljs-title function_">render</span>(resCanvas2, &#123;<span class="hljs-attr">maxWidth</span>: maxWidth, <span class="hljs-attr">maxHeight</span>: maxHeight, <span class="hljs-attr">orientation</span>: <span class="hljs-number">0</span>&#125;);<br>        &#125;<br>        dataURL = resCanvas2.<span class="hljs-title function_">toDataURL</span>(<span class="hljs-string">&quot;image/jpeg&quot;</span>);<br>        <span class="hljs-title function_">callback</span>(dataURL);<br>    &#125;);<br>   <span class="hljs-comment">// return dataURL;</span><br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">imgLoad</span>(<span class="hljs-params">img, callback</span>) &#123;<br>    <span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span> (img.<span class="hljs-property">complete</span>) &#123;<br>            <span class="hljs-title function_">callback</span>(img)<br>            <span class="hljs-built_in">clearInterval</span>(timer)<br>        &#125;<br>    &#125;, <span class="hljs-number">50</span>)<br>&#125;<br><span class="hljs-comment">//********************************************************************************************</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">isIOS</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">var</span> userAgentInfo = navigator.<span class="hljs-property">userAgent</span>;    <br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Agents</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-string">&quot;iPhone&quot;</span>,<span class="hljs-string">&quot;iPad&quot;</span>, <span class="hljs-string">&quot;iPod&quot;</span>); <span class="hljs-comment">/*&quot;Android&quot;,  */</span><br><span class="hljs-keyword">var</span> flag = <span class="hljs-literal">false</span>;  <br><span class="hljs-keyword">var</span> v=<span class="hljs-number">0</span>  <br><span class="hljs-keyword">for</span> ( v = <span class="hljs-number">0</span>; v &lt; <span class="hljs-title class_">Agents</span>.<span class="hljs-property">length</span>; v++)&#123;    <br>    <span class="hljs-keyword">if</span> (userAgentInfo.<span class="hljs-title function_">indexOf</span>(<span class="hljs-title class_">Agents</span>[v]) &gt; <span class="hljs-number">0</span>) &#123; <br>    flag = <span class="hljs-literal">true</span>; <span class="hljs-keyword">break</span>; <br>   &#125;    <br>&#125;    <br><span class="hljs-keyword">return</span> flag;<br>&#125;<br><span class="hljs-comment">//********************************************************************************************</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">dataURLToBlob</span>(<span class="hljs-params">dataURL</span>) &#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">BASE64</span>_MARKER = <span class="hljs-string">&#x27;;base64,&#x27;</span>;<br>    <span class="hljs-keyword">var</span> parts, contentType, raw;<br>    <span class="hljs-keyword">if</span> (dataURL.<span class="hljs-title function_">indexOf</span>(<span class="hljs-title class_">BASE64</span>_MARKER) == -<span class="hljs-number">1</span>) &#123;<br>        parts = dataURL.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;,&#x27;</span>);<br>        contentType = parts[<span class="hljs-number">0</span>].<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;:&#x27;</span>)[<span class="hljs-number">1</span>];<br>        raw = <span class="hljs-built_in">decodeURIComponent</span>(parts[<span class="hljs-number">1</span>]);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>([raw], &#123;<span class="hljs-attr">type</span>: contentType&#125;);<br>    &#125;<br><br>    parts = dataURL.<span class="hljs-title function_">split</span>(<span class="hljs-title class_">BASE64</span>_MARKER);<br>    contentType = parts[<span class="hljs-number">0</span>].<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;:&#x27;</span>)[<span class="hljs-number">1</span>];<br>    raw = <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">atob</span>(parts[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">var</span> rawLength = raw.<span class="hljs-property">length</span>;<br><br>    <span class="hljs-keyword">var</span> uInt8Array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(rawLength);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; rawLength; ++i) &#123;<br>        uInt8Array[i] = raw.<span class="hljs-title function_">charCodeAt</span>(i);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>([uInt8Array], &#123;<span class="hljs-attr">type</span>: contentType&#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="粘贴库"><a href="#粘贴库" class="headerlink" title="粘贴库"></a>粘贴库</h4><p>paste.js 开源项目</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 源地址 https://github.com/layerssss/paste.js/</span><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> $, <span class="hljs-title class_">Paste</span>, createHiddenEditable, dataURLtoBlob, isFocusable;<br><br>  $ = <span class="hljs-variable language_">window</span>.<span class="hljs-property">jQuery</span>;<br><br>  $.paste = <span class="hljs-keyword">function</span>(<span class="hljs-params">pasteContainer</span>) &#123;<br>    <span class="hljs-keyword">var</span> pm;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">console</span> !== <span class="hljs-string">&quot;undefined&quot;</span> &amp;&amp; <span class="hljs-variable language_">console</span> !== <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;DEPRECATED: This method is deprecated. Please use $.fn.pastableNonInputable() instead.&quot;</span>);<br>    &#125;<br>    pm = <span class="hljs-title class_">Paste</span>.<span class="hljs-title function_">mountNonInputable</span>(pasteContainer);<br>    <span class="hljs-keyword">return</span> pm.<span class="hljs-property">_container</span>;<br>  &#125;;<br><br>  $.fn.<span class="hljs-property">pastableNonInputable</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> el, j, len, ref;<br>    ref = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>, len = ref.<span class="hljs-property">length</span>; j &lt; len; j++) &#123;<br>      el = ref[j];<br>      <span class="hljs-keyword">if</span> (el.<span class="hljs-property">_pastable</span> || $(el).<span class="hljs-title function_">is</span>(<span class="hljs-string">&#x27;textarea, input:text, [contenteditable]&#x27;</span>)) &#123;<br>        <span class="hljs-keyword">continue</span>;<br>      &#125;<br>      <span class="hljs-title class_">Paste</span>.<span class="hljs-title function_">mountNonInputable</span>(el);<br>      el.<span class="hljs-property">_pastable</span> = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;<br>  &#125;;<br><br>  $.fn.<span class="hljs-property">pastableTextarea</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> el, j, len, ref;<br>    ref = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>, len = ref.<span class="hljs-property">length</span>; j &lt; len; j++) &#123;<br>      el = ref[j];<br>      <span class="hljs-keyword">if</span> (el.<span class="hljs-property">_pastable</span> || $(el).<span class="hljs-title function_">is</span>(<span class="hljs-string">&#x27;:not(textarea, input:text)&#x27;</span>)) &#123;<br>        <span class="hljs-keyword">continue</span>;<br>      &#125;<br>      <span class="hljs-title class_">Paste</span>.<span class="hljs-title function_">mountTextarea</span>(el);<br>      el.<span class="hljs-property">_pastable</span> = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;<br>  &#125;;<br><br>  $.fn.<span class="hljs-property">pastableContenteditable</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> el, j, len, ref;<br>    ref = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>, len = ref.<span class="hljs-property">length</span>; j &lt; len; j++) &#123;<br>      el = ref[j];<br>      <span class="hljs-keyword">if</span> (el.<span class="hljs-property">_pastable</span> || $(el).<span class="hljs-title function_">is</span>(<span class="hljs-string">&#x27;:not([contenteditable])&#x27;</span>)) &#123;<br>        <span class="hljs-keyword">continue</span>;<br>      &#125;<br>      <span class="hljs-title class_">Paste</span>.<span class="hljs-title function_">mountContenteditable</span>(el);<br>      el.<span class="hljs-property">_pastable</span> = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;<br>  &#125;;<br><br>  dataURLtoBlob = <span class="hljs-keyword">function</span>(<span class="hljs-params">dataURL, sliceSize</span>) &#123;<br>    <span class="hljs-keyword">var</span> b64Data, byteArray, byteArrays, byteCharacters, byteNumbers, contentType, i, m, offset, ref, slice;<br>    <span class="hljs-keyword">if</span> (sliceSize == <span class="hljs-literal">null</span>) &#123;<br>      sliceSize = <span class="hljs-number">512</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!(m = dataURL.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/^data\:([^\;]+)\;base64\,(.+)$/</span>))) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    ref = m, m = ref[<span class="hljs-number">0</span>], contentType = ref[<span class="hljs-number">1</span>], b64Data = ref[<span class="hljs-number">2</span>];<br>    byteCharacters = <span class="hljs-title function_">atob</span>(b64Data);<br>    byteArrays = [];<br>    offset = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (offset &lt; byteCharacters.<span class="hljs-property">length</span>) &#123;<br>      slice = byteCharacters.<span class="hljs-title function_">slice</span>(offset, offset + sliceSize);<br>      byteNumbers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(slice.<span class="hljs-property">length</span>);<br>      i = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">while</span> (i &lt; slice.<span class="hljs-property">length</span>) &#123;<br>        byteNumbers[i] = slice.<span class="hljs-title function_">charCodeAt</span>(i);<br>        i++;<br>      &#125;<br>      byteArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(byteNumbers);<br>      byteArrays.<span class="hljs-title function_">push</span>(byteArray);<br>      offset += sliceSize;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>(byteArrays, &#123;<br>      <span class="hljs-attr">type</span>: contentType<br>    &#125;);<br>  &#125;;<br><br>  createHiddenEditable = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> $(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>)).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;contenteditable&#x27;</span>, <span class="hljs-literal">true</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;aria-hidden&#x27;</span>, <span class="hljs-literal">true</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;tabindex&#x27;</span>, -<span class="hljs-number">1</span>).<span class="hljs-title function_">css</span>(&#123;<br>      <span class="hljs-attr">width</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-attr">height</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-attr">position</span>: <span class="hljs-string">&#x27;fixed&#x27;</span>,<br>      <span class="hljs-attr">left</span>: -<span class="hljs-number">100</span>,<br>      <span class="hljs-attr">overflow</span>: <span class="hljs-string">&#x27;hidden&#x27;</span><br>    &#125;);<br>  &#125;;<br><br>  isFocusable = <span class="hljs-keyword">function</span>(<span class="hljs-params">element, hasTabindex</span>) &#123;<br>    <span class="hljs-keyword">var</span> fieldset, focusableIfVisible, img, map, mapName, nodeName;<br>    map = <span class="hljs-keyword">void</span> <span class="hljs-number">0</span>;<br>    mapName = <span class="hljs-keyword">void</span> <span class="hljs-number">0</span>;<br>    img = <span class="hljs-keyword">void</span> <span class="hljs-number">0</span>;<br>    focusableIfVisible = <span class="hljs-keyword">void</span> <span class="hljs-number">0</span>;<br>    fieldset = <span class="hljs-keyword">void</span> <span class="hljs-number">0</span>;<br>    nodeName = element.<span class="hljs-property">nodeName</span>.<span class="hljs-title function_">toLowerCase</span>();<br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;area&#x27;</span> === nodeName) &#123;<br>      map = element.<span class="hljs-property">parentNode</span>;<br>      mapName = map.<span class="hljs-property">name</span>;<br>      <span class="hljs-keyword">if</span> (!element.<span class="hljs-property">href</span> || !mapName || map.<span class="hljs-property">nodeName</span>.<span class="hljs-title function_">toLowerCase</span>() !== <span class="hljs-string">&#x27;map&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      &#125;<br>      img = $(<span class="hljs-string">&#x27;img[usemap=\&#x27;#&#x27;</span> + mapName + <span class="hljs-string">&#x27;\&#x27;]&#x27;</span>);<br>      <span class="hljs-keyword">return</span> img.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span> &amp;&amp; img.<span class="hljs-title function_">is</span>(<span class="hljs-string">&#x27;:visible&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/^(input|select|textarea|button|object)$/</span>.<span class="hljs-title function_">test</span>(nodeName)) &#123;<br>      focusableIfVisible = !element.<span class="hljs-property">disabled</span>;<br>      <span class="hljs-keyword">if</span> (focusableIfVisible) &#123;<br>        fieldset = $(element).<span class="hljs-title function_">closest</span>(<span class="hljs-string">&#x27;fieldset&#x27;</span>)[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">if</span> (fieldset) &#123;<br>          focusableIfVisible = !fieldset.<span class="hljs-property">disabled</span>;<br>        &#125;<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;a&#x27;</span> === nodeName) &#123;<br>      focusableIfVisible = element.<span class="hljs-property">href</span> || hasTabindex;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      focusableIfVisible = hasTabindex;<br>    &#125;<br>    focusableIfVisible = focusableIfVisible || $(element).<span class="hljs-title function_">is</span>(<span class="hljs-string">&#x27;[contenteditable]&#x27;</span>);<br>    <span class="hljs-keyword">return</span> focusableIfVisible &amp;&amp; $(element).<span class="hljs-title function_">is</span>(<span class="hljs-string">&#x27;:visible&#x27;</span>);<br>  &#125;;<br><br>  <span class="hljs-title class_">Paste</span> = (<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Paste</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">_target</span> = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-title class_">Paste</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">_container</span> = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-title class_">Paste</span>.<span class="hljs-property">mountNonInputable</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">nonInputable</span>) &#123;<br>      <span class="hljs-keyword">var</span> paste;<br>      paste = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Paste</span>(<span class="hljs-title function_">createHiddenEditable</span>().<span class="hljs-title function_">appendTo</span>(nonInputable), nonInputable);<br>      $(nonInputable).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, (<span class="hljs-keyword">function</span>(<span class="hljs-params">_this</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">ev</span>) &#123;<br>          <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">isFocusable</span>(ev.<span class="hljs-property">target</span>, <span class="hljs-literal">false</span>)) &#123;<br>            <span class="hljs-keyword">return</span> paste.<span class="hljs-property">_container</span>.<span class="hljs-title function_">focus</span>();<br>          &#125;<br>        &#125;;<br>      &#125;)(<span class="hljs-variable language_">this</span>));<br>      paste.<span class="hljs-property">_container</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;focus&#x27;</span>, (<span class="hljs-keyword">function</span>(<span class="hljs-params">_this</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-keyword">return</span> $(nonInputable).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&#x27;pastable-focus&#x27;</span>);<br>        &#125;;<br>      &#125;)(<span class="hljs-variable language_">this</span>));<br>      <span class="hljs-keyword">return</span> paste.<span class="hljs-property">_container</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;blur&#x27;</span>, (<span class="hljs-keyword">function</span>(<span class="hljs-params">_this</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-keyword">return</span> $(nonInputable).<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&#x27;pastable-focus&#x27;</span>);<br>        &#125;;<br>      &#125;)(<span class="hljs-variable language_">this</span>));<br>    &#125;;<br><br>    <span class="hljs-title class_">Paste</span>.<span class="hljs-property">mountTextarea</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">textarea</span>) &#123;<br>      <span class="hljs-keyword">var</span> ctlDown, paste, ref, ref1;<br>      <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">DataTransfer</span> !== <span class="hljs-string">&quot;undefined&quot;</span> &amp;&amp; <span class="hljs-title class_">DataTransfer</span> !== <span class="hljs-literal">null</span> ? <span class="hljs-title class_">DataTransfer</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> : <span class="hljs-keyword">void</span> <span class="hljs-number">0</span>) &amp;&amp; ((ref = <span class="hljs-title class_">Object</span>.<span class="hljs-property">getOwnPropertyDescriptor</span>) != <span class="hljs-literal">null</span> ? (ref1 = ref.<span class="hljs-title function_">call</span>(<span class="hljs-title class_">Object</span>, <span class="hljs-title class_">DataTransfer</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>, <span class="hljs-string">&#x27;items&#x27;</span>)) != <span class="hljs-literal">null</span> ? ref1.<span class="hljs-property">get</span> : <span class="hljs-keyword">void</span> <span class="hljs-number">0</span> : <span class="hljs-keyword">void</span> <span class="hljs-number">0</span>)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">mountContenteditable</span>(textarea);<br>      &#125;<br>      paste = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Paste</span>(<span class="hljs-title function_">createHiddenEditable</span>().<span class="hljs-title function_">insertBefore</span>(textarea), textarea);<br>      ctlDown = <span class="hljs-literal">false</span>;<br>      $(textarea).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">ev</span>) &#123;<br>        <span class="hljs-keyword">var</span> ref2;<br>        <span class="hljs-keyword">if</span> ((ref2 = ev.<span class="hljs-property">keyCode</span>) === <span class="hljs-number">17</span> || ref2 === <span class="hljs-number">224</span>) &#123;<br>          ctlDown = <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>      &#125;);<br>      $(textarea).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;keydown&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">ev</span>) &#123;<br>        <span class="hljs-keyword">var</span> ref2;<br>        <span class="hljs-keyword">if</span> ((ref2 = ev.<span class="hljs-property">keyCode</span>) === <span class="hljs-number">17</span> || ref2 === <span class="hljs-number">224</span>) &#123;<br>          ctlDown = <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> ((ev.<span class="hljs-property">ctrlKey</span> != <span class="hljs-literal">null</span>) &amp;&amp; (ev.<span class="hljs-property">metaKey</span> != <span class="hljs-literal">null</span>)) &#123;<br>          ctlDown = ev.<span class="hljs-property">ctrlKey</span> || ev.<span class="hljs-property">metaKey</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (ctlDown &amp;&amp; ev.<span class="hljs-property">keyCode</span> === <span class="hljs-number">86</span>) &#123;<br>          paste.<span class="hljs-property">_textarea_focus_stolen</span> = <span class="hljs-literal">true</span>;<br>          paste.<span class="hljs-property">_container</span>.<span class="hljs-title function_">focus</span>();<br>          paste.<span class="hljs-property">_paste_event_fired</span> = <span class="hljs-literal">false</span>;<br>          <span class="hljs-built_in">setTimeout</span>((<span class="hljs-keyword">function</span>(<span class="hljs-params">_this</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>              <span class="hljs-keyword">if</span> (!paste.<span class="hljs-property">_paste_event_fired</span>) &#123;<br>                $(textarea).<span class="hljs-title function_">focus</span>();<br>                <span class="hljs-keyword">return</span> paste.<span class="hljs-property">_textarea_focus_stolen</span> = <span class="hljs-literal">false</span>;<br>              &#125;<br>            &#125;;<br>          &#125;)(<span class="hljs-variable language_">this</span>), <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>      &#125;);<br>      $(textarea).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;paste&#x27;</span>, (<span class="hljs-keyword">function</span>(<span class="hljs-params">_this</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;;<br>      &#125;)(<span class="hljs-variable language_">this</span>));<br>      $(textarea).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;focus&#x27;</span>, (<span class="hljs-keyword">function</span>(<span class="hljs-params">_this</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-keyword">if</span> (!paste.<span class="hljs-property">_textarea_focus_stolen</span>) &#123;<br>            <span class="hljs-keyword">return</span> $(textarea).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&#x27;pastable-focus&#x27;</span>);<br>          &#125;<br>        &#125;;<br>      &#125;)(<span class="hljs-variable language_">this</span>));<br>      $(textarea).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;blur&#x27;</span>, (<span class="hljs-keyword">function</span>(<span class="hljs-params">_this</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-keyword">if</span> (!paste.<span class="hljs-property">_textarea_focus_stolen</span>) &#123;<br>            <span class="hljs-keyword">return</span> $(textarea).<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&#x27;pastable-focus&#x27;</span>);<br>          &#125;<br>        &#125;;<br>      &#125;)(<span class="hljs-variable language_">this</span>));<br>      $(paste.<span class="hljs-property">_target</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;_pasteCheckContainerDone&#x27;</span>, (<span class="hljs-keyword">function</span>(<span class="hljs-params">_this</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>          $(textarea).<span class="hljs-title function_">focus</span>();<br>          <span class="hljs-keyword">return</span> paste.<span class="hljs-property">_textarea_focus_stolen</span> = <span class="hljs-literal">false</span>;<br>        &#125;;<br>      &#125;)(<span class="hljs-variable language_">this</span>));<br>      <span class="hljs-keyword">return</span> $(paste.<span class="hljs-property">_target</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;pasteText&#x27;</span>, (<span class="hljs-keyword">function</span>(<span class="hljs-params">_this</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">ev, data</span>) &#123;<br>          <span class="hljs-keyword">var</span> content, curEnd, curStart;<br>          curStart = $(textarea).<span class="hljs-title function_">prop</span>(<span class="hljs-string">&#x27;selectionStart&#x27;</span>);<br>          curEnd = $(textarea).<span class="hljs-title function_">prop</span>(<span class="hljs-string">&#x27;selectionEnd&#x27;</span>);<br>          content = $(textarea).<span class="hljs-title function_">val</span>();<br>          $(textarea).<span class="hljs-title function_">val</span>(<span class="hljs-string">&quot;&quot;</span> + content.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, curStart) + data.<span class="hljs-property">text</span> + content.<span class="hljs-title function_">slice</span>(curEnd));<br>          $(textarea)[<span class="hljs-number">0</span>].<span class="hljs-title function_">setSelectionRange</span>(curStart + data.<span class="hljs-property">text</span>.<span class="hljs-property">length</span>, curStart + data.<span class="hljs-property">text</span>.<span class="hljs-property">length</span>);<br>          <span class="hljs-keyword">return</span> $(textarea).<span class="hljs-title function_">trigger</span>(<span class="hljs-string">&#x27;change&#x27;</span>);<br>        &#125;;<br>      &#125;)(<span class="hljs-variable language_">this</span>));<br>    &#125;;<br><br>    <span class="hljs-title class_">Paste</span>.<span class="hljs-property">mountContenteditable</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">contenteditable</span>) &#123;<br>      <span class="hljs-keyword">var</span> paste;<br>      paste = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Paste</span>(contenteditable, contenteditable);<br>      $(contenteditable).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;focus&#x27;</span>, (<span class="hljs-keyword">function</span>(<span class="hljs-params">_this</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-keyword">return</span> $(contenteditable).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&#x27;pastable-focus&#x27;</span>);<br>        &#125;;<br>      &#125;)(<span class="hljs-variable language_">this</span>));<br>      <span class="hljs-keyword">return</span> $(contenteditable).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;blur&#x27;</span>, (<span class="hljs-keyword">function</span>(<span class="hljs-params">_this</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-keyword">return</span> $(contenteditable).<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&#x27;pastable-focus&#x27;</span>);<br>        &#125;;<br>      &#125;)(<span class="hljs-variable language_">this</span>));<br>    &#125;;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Paste</span>(<span class="hljs-params">_container, _target</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">_container</span> = _container;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">_target</span> = _target;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">_container</span> = $(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_container</span>);<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">_target</span> = $(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_target</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&#x27;pastable&#x27;</span>);<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">_container</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;paste&#x27;</span>, (<span class="hljs-keyword">function</span>(<span class="hljs-params">_this</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">ev</span>) &#123;<br>          <span class="hljs-keyword">var</span> clipboardData, file, item, j, k, len, len1, reader, ref, ref1, ref2, ref3, text;<br>          <span class="hljs-keyword">if</span> (ev.<span class="hljs-property">currentTarget</span> !== ev.<span class="hljs-property">target</span>) &#123;<br>            <span class="hljs-keyword">return</span> ev.<span class="hljs-title function_">preventDefault</span>();<br>          &#125;<br>          _this.<span class="hljs-property">_paste_event_fired</span> = <span class="hljs-literal">true</span>;<br>          <span class="hljs-keyword">if</span> (((ref = ev.<span class="hljs-property">originalEvent</span>) != <span class="hljs-literal">null</span> ? ref.<span class="hljs-property">clipboardData</span> : <span class="hljs-keyword">void</span> <span class="hljs-number">0</span>) != <span class="hljs-literal">null</span>) &#123;<br>            clipboardData = ev.<span class="hljs-property">originalEvent</span>.<span class="hljs-property">clipboardData</span>;<br>            <span class="hljs-keyword">if</span> (clipboardData.<span class="hljs-property">items</span>) &#123;<br>              ref1 = clipboardData.<span class="hljs-property">items</span>;<br>              <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>, len = ref1.<span class="hljs-property">length</span>; j &lt; len; j++) &#123;<br>                item = ref1[j];<br>                <span class="hljs-keyword">if</span> (item.<span class="hljs-property">type</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/^image\//</span>)) &#123;<br>                  reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>();<br>                  reader.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br>                    <span class="hljs-keyword">return</span> _this.<span class="hljs-title function_">_handleImage</span>(event.<span class="hljs-property">target</span>.<span class="hljs-property">result</span>);<br>                  &#125;;<br>                  <span class="hljs-keyword">try</span> &#123;<br>                    reader.<span class="hljs-title function_">readAsDataURL</span>(item.<span class="hljs-title function_">getAsFile</span>());<br>                  &#125; <span class="hljs-keyword">catch</span> (error) &#123;&#125;<br>                  ev.<span class="hljs-title function_">preventDefault</span>();<br>                  <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (item.<span class="hljs-property">type</span> === <span class="hljs-string">&#x27;text/plain&#x27;</span>) &#123;<br>                  item.<span class="hljs-title function_">getAsString</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">string</span>) &#123;<br>                    <span class="hljs-keyword">return</span> _this.<span class="hljs-property">_target</span>.<span class="hljs-title function_">trigger</span>(<span class="hljs-string">&#x27;pasteText&#x27;</span>, &#123;<br>                      <span class="hljs-attr">text</span>: string<br>                    &#125;);<br>                  &#125;);<br>                &#125;<br>              &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>              <span class="hljs-keyword">if</span> (-<span class="hljs-number">1</span> !== <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">indexOf</span>.<span class="hljs-title function_">call</span>(clipboardData.<span class="hljs-property">types</span>, <span class="hljs-string">&#x27;text/plain&#x27;</span>)) &#123;<br>                text = clipboardData.<span class="hljs-title function_">getData</span>(<span class="hljs-string">&#x27;Text&#x27;</span>);<br>                <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>                  <span class="hljs-keyword">return</span> _this.<span class="hljs-property">_target</span>.<span class="hljs-title function_">trigger</span>(<span class="hljs-string">&#x27;pasteText&#x27;</span>, &#123;<br>                    <span class="hljs-attr">text</span>: text<br>                  &#125;);<br>                &#125;, <span class="hljs-number">1</span>);<br>              &#125;<br>              _this.<span class="hljs-title function_">_checkImagesInContainer</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">src</span>) &#123;<br>                <span class="hljs-keyword">return</span> _this.<span class="hljs-title function_">_handleImage</span>(src);<br>              &#125;);<br>            &#125;<br>          &#125;<br>          <span class="hljs-keyword">if</span> (clipboardData = <span class="hljs-variable language_">window</span>.<span class="hljs-property">clipboardData</span>) &#123;<br>            <span class="hljs-keyword">if</span> ((ref2 = (text = clipboardData.<span class="hljs-title function_">getData</span>(<span class="hljs-string">&#x27;Text&#x27;</span>))) != <span class="hljs-literal">null</span> ? ref2.<span class="hljs-property">length</span> : <span class="hljs-keyword">void</span> <span class="hljs-number">0</span>) &#123;<br>              <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>                _this.<span class="hljs-property">_target</span>.<span class="hljs-title function_">trigger</span>(<span class="hljs-string">&#x27;pasteText&#x27;</span>, &#123;<br>                  <span class="hljs-attr">text</span>: text<br>                &#125;);<br>                <span class="hljs-keyword">return</span> _this.<span class="hljs-property">_target</span>.<span class="hljs-title function_">trigger</span>(<span class="hljs-string">&#x27;_pasteCheckContainerDone&#x27;</span>);<br>              &#125;, <span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>              ref3 = clipboardData.<span class="hljs-property">files</span>;<br>              <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>, len1 = ref3.<span class="hljs-property">length</span>; k &lt; len1; k++) &#123;<br>                file = ref3[k];<br>                _this.<span class="hljs-title function_">_handleImage</span>(<span class="hljs-variable constant_">URL</span>.<span class="hljs-title function_">createObjectURL</span>(file));<br>              &#125;<br>              _this.<span class="hljs-title function_">_checkImagesInContainer</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">src</span>) &#123;&#125;);<br>            &#125;<br>          &#125;<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;;<br>      &#125;)(<span class="hljs-variable language_">this</span>));<br>    &#125;<br><br>    <span class="hljs-title class_">Paste</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">_handleImage</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">src</span>) &#123;<br>      <span class="hljs-keyword">var</span> loader;<br>      <span class="hljs-keyword">if</span> (src.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/^webkit\-fake\-url\:\/\//</span>)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_target</span>.<span class="hljs-title function_">trigger</span>(<span class="hljs-string">&#x27;pasteImageError&#x27;</span>, &#123;<br>          <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;You are trying to paste an image in Safari, however we are unable to retieve its data.&quot;</span><br>        &#125;);<br>      &#125;<br>      loader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>();<br>      loader.<span class="hljs-property">crossOrigin</span> = <span class="hljs-string">&quot;anonymous&quot;</span>;<br>      loader.<span class="hljs-property">onload</span> = (<span class="hljs-keyword">function</span>(<span class="hljs-params">_this</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-keyword">var</span> blob, canvas, ctx, dataURL;<br>          canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;canvas&#x27;</span>);<br>          canvas.<span class="hljs-property">width</span> = loader.<span class="hljs-property">width</span>;<br>          canvas.<span class="hljs-property">height</span> = loader.<span class="hljs-property">height</span>;<br>          ctx = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);<br>          ctx.<span class="hljs-title function_">drawImage</span>(loader, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, canvas.<span class="hljs-property">width</span>, canvas.<span class="hljs-property">height</span>);<br>          dataURL = <span class="hljs-literal">null</span>;<br>          <span class="hljs-keyword">try</span> &#123;<br>            dataURL = canvas.<span class="hljs-title function_">toDataURL</span>(<span class="hljs-string">&#x27;image/png&#x27;</span>);<br>            blob = <span class="hljs-title function_">dataURLtoBlob</span>(dataURL);<br>          &#125; <span class="hljs-keyword">catch</span> (error) &#123;&#125;<br>          <span class="hljs-keyword">if</span> (dataURL) &#123;<br>            <span class="hljs-keyword">return</span> _this.<span class="hljs-property">_target</span>.<span class="hljs-title function_">trigger</span>(<span class="hljs-string">&#x27;pasteImage&#x27;</span>, &#123;<br>              <span class="hljs-attr">blob</span>: blob,<br>              <span class="hljs-attr">dataURL</span>: dataURL,<br>              <span class="hljs-attr">width</span>: loader.<span class="hljs-property">width</span>,<br>              <span class="hljs-attr">height</span>: loader.<span class="hljs-property">height</span><br>            &#125;);<br>          &#125;<br>        &#125;;<br>      &#125;)(<span class="hljs-variable language_">this</span>);<br>      loader.<span class="hljs-property">onerror</span> = (<span class="hljs-keyword">function</span>(<span class="hljs-params">_this</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-keyword">return</span> _this.<span class="hljs-property">_target</span>.<span class="hljs-title function_">trigger</span>(<span class="hljs-string">&#x27;pasteImageError&#x27;</span>, &#123;<br>            <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;Failed to get image from: &quot;</span> + src,<br>            <span class="hljs-attr">url</span>: src<br>          &#125;);<br>        &#125;;<br>      &#125;)(<span class="hljs-variable language_">this</span>);<br>      <span class="hljs-keyword">return</span> loader.<span class="hljs-property">src</span> = src;<br>    &#125;;<br><br>    <span class="hljs-title class_">Paste</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">_checkImagesInContainer</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">cb</span>) &#123;<br>      <span class="hljs-keyword">var</span> img, j, len, ref, timespan;<br>      timespan = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-number">1000</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>());<br>      ref = <span class="hljs-variable language_">this</span>.<span class="hljs-property">_container</span>.<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;img&#x27;</span>);<br>      <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>, len = ref.<span class="hljs-property">length</span>; j &lt; len; j++) &#123;<br>        img = ref[j];<br>        img[<span class="hljs-string">&quot;_paste_marked_&quot;</span> + timespan] = <span class="hljs-literal">true</span>;<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">setTimeout</span>((<span class="hljs-keyword">function</span>(<span class="hljs-params">_this</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-keyword">var</span> k, len1, ref1;<br>          ref1 = _this.<span class="hljs-property">_container</span>.<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;img&#x27;</span>);<br>          <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>, len1 = ref1.<span class="hljs-property">length</span>; k &lt; len1; k++) &#123;<br>            img = ref1[k];<br>            <span class="hljs-keyword">if</span> (!img[<span class="hljs-string">&quot;_paste_marked_&quot;</span> + timespan]) &#123;<br>              <span class="hljs-title function_">cb</span>(img.<span class="hljs-property">src</span>);<br>              $(img).<span class="hljs-title function_">remove</span>();<br>            &#125;<br>          &#125;<br>          <span class="hljs-keyword">return</span> _this.<span class="hljs-property">_target</span>.<span class="hljs-title function_">trigger</span>(<span class="hljs-string">&#x27;_pasteCheckContainerDone&#x27;</span>);<br>        &#125;;<br>      &#125;)(<span class="hljs-variable language_">this</span>), <span class="hljs-number">1</span>);<br>    &#125;;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Paste</span>;<br><br>  &#125;)();<br><br>&#125;).<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>);<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Editor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java workflow</title>
    <link href="/2018/03/22/2018-03-22-workflow-Java%20%20workflow/"/>
    <url>/2018/03/22/2018-03-22-workflow-Java%20%20workflow/</url>
    
    <content type="html"><![CDATA[<p>最近一直被工作流纠缠这，浪费了很多时间。对于一个流程的开发，完全可以手动写一个，何必要使用框架来完成这件事情呢？开始我也是这么想的，但是自打我尝试了之后才发现，这其实并不是一件简单的事情。下面是在开发过程中遇到了各种各样的困难，做一个总结</p><h4 id="1-流程业务描述"><a href="#1-流程业务描述" class="headerlink" title="1.流程业务描述"></a>1.流程业务描述</h4><p>A <code>--&gt;</code> 发起碰撞报告报表 -&gt; B <code>--&gt;</code> 对报表进行审批 <code>--&gt;</code> A <code>--&gt;</code> 确认归档</p><h4 id="2-生产"><a href="#2-生产" class="headerlink" title="2.生产"></a>2.生产</h4><ul><li>每个活动点都需要开发交互界面、处理相关业务逻辑</li><li>在当前活动点<code>硬性</code>判断下一活动点和相应的操作人</li><li>每次操作都要维护业务、流程、流转的数据</li></ul><h4 id="3-结果"><a href="#3-结果" class="headerlink" title="3.结果"></a>3.结果</h4><p>梳理后台各种业务逻辑、维护数据更新以及编写各个交互界面，使流程的开发难度提升了不少。导致开发周期长，无法满足预期目标。</p><h4 id="4-开源框架"><a href="#4-开源框架" class="headerlink" title="4.开源框架"></a>4.开源框架</h4><p>针对这一问题，市面上了解有六款Java Workflow 工作流框架OBE、Shark、OSWorkflow、JBPM、YAWL、Bossa。</p><h5 id="使用框架的好处"><a href="#使用框架的好处" class="headerlink" title="使用框架的好处"></a>使用框架的好处</h5><ul><li>维护流程、流转等数据变得很容易</li><li>框架提供了流程流转模型设计工具避免定死流程产生的硬编码</li><li>降低开发风险，提高开发速度</li><li>提高迭代开发的支持</li><li>提供后台API，满足业务需求，应对各种需求变更</li></ul><p>深入了解各种开源框架 <a href="http://blog.csdn.net/SAM_XIE_52/article/details/79362080">http://blog.csdn.net/SAM_XIE_52/article/details/79362080</a></p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>问题总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu16.04TLS tar系统整机备份及恢复</title>
    <link href="/2018/03/20/2018-03-20-ubuntu-ubuntu16.04TLS%20tar%E7%B3%BB%E7%BB%9F%E5%A4%87%E4%BB%BD%E6%81%A2%E5%A4%8D/"/>
    <url>/2018/03/20/2018-03-20-ubuntu-ubuntu16.04TLS%20tar%E7%B3%BB%E7%BB%9F%E5%A4%87%E4%BB%BD%E6%81%A2%E5%A4%8D/</url>
    
    <content type="html"><![CDATA[<p>老实说，备份是系统损毁时的救星。事实上，没有人希望自己的系统损坏，往往由于不预期的伤害导致系统发生错误，比如之前我想在电脑上卸载一个依赖包，结果卸载以后，系统导致不能正常启动。不用慌，插上硬盘，执行一条命令电脑就恢复正常了！正是因为计算机是个相当不可靠的机器，所以我们要时常对它进行备份，进而来预防不测。</p><h2 id="预言"><a href="#预言" class="headerlink" title="预言"></a>预言</h2><p>linux是一个文件系统，因此可以利用tar来备份。备份之前首先要了解哪些是我们需要备份的数据，哪些是我们不需要备份的数据。</p><h3 id="排除的文件"><a href="#排除的文件" class="headerlink" title="排除的文件"></a>排除的文件</h3><p>下面这些文件是我们不需要考虑备份的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">/proc<br>/tmp<br>/mnt<br>/dev<br>/sys<br>/run <br>/media <br>/var/log  #日志文件<br>/var/cache/apt/archives  #apt下载的任何.deb文件<br>/usr/src/linux-headers*<br>/home/*/.gvfs<br>/home/*/.cache<br>/home/*/.local/share/Trash<br></code></pre></td></tr></table></figure><h3 id="需要备份的文件"><a href="#需要备份的文件" class="headerlink" title="需要备份的文件"></a>需要备份的文件</h3><p>下面这些文件是我们需要考虑备份的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">/etc<br>/home<br>/var/spool/mail<br>/boot/<br>/root<br><span class="hljs-meta prompt_">#</span><span class="language-bash">自己安装过的套件会存放在/user/local和/opt所以他俩也备份</span><br>/user/local<br>/opt<br></code></pre></td></tr></table></figure><h2 id="完整备份"><a href="#完整备份" class="headerlink" title="完整备份"></a>完整备份</h2><p>使用管理员身份，进入到根目录下运行tar命令</p><p>这里有一点需要注意的是，第三条命令不是死的，你要灵去修改，<code>假如你把备份的文件放在了根目录下，那么我们在tar的命令里面要再加上一句 --exclude=/备份的文件名</code></p><p>上面这一点很重要，因为我们<strong>备份过的文件</strong>也是要排除的。如果忘了这一点可能会备份失败，我为什么没有加，是因为把备份文件放在&#x2F;media目录下了.</p><p>可能是因为界面样式问题 <code>--</code> 有点像 <code>-</code> Orz</p><blockquote><p>$ sudo su<br>$ cd &#x2F;  </p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar --exclude=/home/zyh/Pictures/* --exclude=/proc --exclude=/tmp --exclude=/mnt --exclude=/dev --exclude=/sys --exclude=/run --exclude=/media --exclude=/var/log --exclude=/var/cache/apt/archives --exclude=/usr/src/linux-headers* --exclude=/home/*/.gvfs --exclude=/home/*/.cache --exclude=/home/*/.local/share/Trash -jcvp -f /media/zyh/software/ubuntubackup/system.tar.bz2 /<br></code></pre></td></tr></table></figure><ul><li>–exclude 将会排除掉我们不希望备份的内容</li><li>-j 压缩为bz2 能有一个更好的压缩比</li><li>最后-f &#x2F;media&#x2F;zyh&#x2F;software&#x2F;ubuntubackup&#x2F;system.tar.bz2 是我们要备份<strong>到哪个目录</strong>以及<strong>文件名字</strong>，后面的<code>/</code>表示压缩目录从根目录开始</li></ul><h3 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h3><p><code>注意：恢复操作很危险，如果你不知道自己在做什么，将可能会导致系统数据丢失！</code>我们将备份好的system.tar.bz2文件解压到根目录</p><blockquote><p>$ cd &#x2F;media&#x2F;zyh&#x2F;software&#x2F;ubuntubackup&#x2F;<br>$ tar -jxvf system.tar.bz2 -C &#x2F;</p></blockquote><ul><li>-j 类型为bz2</li><li>-x 解压</li><li>-v 显示解压过程</li><li>-f 使用档名，请留意，在 f 之后要立即接档名通常我们把f放在最后</li></ul><p>参考blog:<a href="https://help.ubuntu.com/community/BackupYourSystem/TAR#Alternate_backup">https://help.ubuntu.com/community/BackupYourSystem/TAR#Alternate_backup</a></p><p>参考blog:<a href="http://linux.vbird.org/linux_basic/0580backup.php">http://linux.vbird.org/linux_basic/0580backup.php</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu16.04TLS 安装SecureCRT破解版</title>
    <link href="/2018/03/18/2018-03-18-ubuntu-Ubuntu%2016.04TLS%20%E5%AE%89%E8%A3%85SecureCRT%E7%A0%B4%E8%A7%A3%E7%89%88/"/>
    <url>/2018/03/18/2018-03-18-ubuntu-Ubuntu%2016.04TLS%20%E5%AE%89%E8%A3%85SecureCRT%E7%A0%B4%E8%A7%A3%E7%89%88/</url>
    
    <content type="html"><![CDATA[<p>由于最近使用vm搭建集群使用ubuntu的终端连接节点太繁琐,来安装SecureCRT</p><h2 id="本机环境"><a href="#本机环境" class="headerlink" title="本机环境"></a>本机环境</h2><p>本机使用的是ubuntu16.04 TLS 64版,在本机上安装过程无任何问题(仅限本机)</p><p><img src="https://i.loli.net/2019/06/30/5d18562f663f412661.jpg" alt="image"></p><h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h3><ul><li>securecrt_linux_crack.pl 破解程序</li><li>scrt-8.3.1-1537.ubuntu16-64.x86_64.deb 程序包</li></ul><p><a href="https://pan.baidu.com/s/1oMJypFZQTGiuNe7VVqJo3w">百度网盘</a> 密码: 7j9k</p><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h3><p>安装secureCRT </p><blockquote><p>sudo dpkg -i scrt-8.3.1-1537.ubuntu16-64.x86_64.deb</p></blockquote><h3 id="3-破解"><a href="#3-破解" class="headerlink" title="3.破解"></a>3.破解</h3><p>运行破解脚本程序</p><blockquote><p>sudo perl securecrt_linux_crack.pl &#x2F;usr&#x2F;bin&#x2F;SecureCRT</p></blockquote><p>认证信息:</p><p><img src="https://i.loli.net/2019/06/30/5d185630b0ea859495.jpg" alt="image"></p><p>到dash中搜索securecrt启动,securecrt会提示你产品没有license，需要购买不然只能使用30天,<br>我们输入上图中的认证信息就可以完成注册。</p><h3 id="4-解决读取串口设备的权限问题"><a href="#4-解决读取串口设备的权限问题" class="headerlink" title="4.解决读取串口设备的权限问题"></a>4.解决读取串口设备的权限问题</h3><p>当在启动器中启动SecureCRT 时，我们是以当前用户的权限启动的软件，因此没有操作串口的权限。</p><p>使用命令：**$ls -l &#x2F;dev&#x2F;ttyS0**查看当前串口信息，会显示如下信息</p><blockquote><p>$ ls -l &#x2F;dev&#x2F;ttyS0</p></blockquote><p>可以看到，串口设备文件是  dialout这个组的，我们我们只要将当前用户添加到这个组就行了。加入当前登录的用户名为：fox，则执行如下命令</p><blockquote><p>$sudo usermod -a -G dialout zyh</p></blockquote><p>重启系统，之后就可以直接打开SecureCRT来操作串口了</p><p>转自:<a href="http://blog.csdn.net/a499957739/article/details/79582999">http://blog.csdn.net/a499957739/article/details/79582999</a></p><p>参考1:<a href="http://www.cnblogs.com/wangkongming/p/3533240.html">http://www.cnblogs.com/wangkongming/p/3533240.html</a></p><p>参考2:<a href="http://www.vandyke.com/products/securecrt/">http://www.vandyke.com/products/securecrt/</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu16.04TLS安装最新版VMware14.1.1</title>
    <link href="/2018/03/18/2018-03-18-ubuntu-%E5%AE%89%E8%A3%85%E8%99%9A%E6%8B%9F%E6%9C%BAVMware/"/>
    <url>/2018/03/18/2018-03-18-ubuntu-%E5%AE%89%E8%A3%85%E8%99%9A%E6%8B%9F%E6%9C%BAVMware/</url>
    
    <content type="html"><![CDATA[<p>由于最近搭建集群需要虚拟机,来安装VMware</p><p>效果图:</p><p><img src="https://i.loli.net/2019/07/02/5d1aae9d3886979983.jpg" alt="image"></p><h2 id="本机环境"><a href="#本机环境" class="headerlink" title="本机环境"></a>本机环境</h2><p>本机使用的是ubuntu16.04 TLS 64版,在本机上安装过程无任何问题(仅限本机)</p><p><img src="https://i.loli.net/2019/07/02/5d1aaeaabf52157013.jpg" alt="image"></p><h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h3><p>注册过帐号以后进入这个链接<a href="https://my.vmware.com/cn/group/vmware/details?downloadGroup=WKST-1411-LX&amp;productId=686&amp;download=true&amp;fileId=cd30e7c2359a3dc1a5e1b1d1b17727b9&amp;secureParam=d7a9ad9d3128741ea1642469b8d12b95&amp;uuId=1c8d56a7-02ad-4d06-9964-a4ab7419388c&amp;downloadType=">https://my.vmware.com/cn/group/vmware/details?downloadGroup=WKST-1411-LX&amp;productId=686&amp;download=true&amp;fileId=cd30e7c2359a3dc1a5e1b1d1b17727b9&amp;secureParam=d7a9ad9d3128741ea1642469b8d12b95&amp;uuId=1c8d56a7-02ad-4d06-9964-a4ab7419388c&amp;downloadType=</a></p><p>下载的版本VMware-Workstation-Full-14.1.1-7528167.x86_64.bundle</p><h3 id="2-破解码"><a href="#2-破解码" class="headerlink" title="2.破解码"></a>2.破解码</h3><p>版本VMware-Workstation-Full-14.1.1-7528167.x86_64.bundle的破解码：VF19H-8YY5L-48DQY-JEWNG-YPKF6</p><p>获得破解码的地址：<a href="http://beikeit.com/post-513.html">http://beikeit.com/post-513.html</a></p><h3 id="3-安装"><a href="#3-安装" class="headerlink" title="3.安装"></a>3.安装</h3><p>*.bundle 文件比较特殊，只有在给它了执行权限后才能执行安装操作。所以安装的第一步就是给 *.bundle 文件添加执行权限。介绍两种方法：</p><p>1.在 *.bundle 文件上右击鼠标，选择最后一项“属性” 选项，在弹出的“属性”窗口中选择“权限”选项卡，在该选项卡中，可以看到有“允许以程序执行文件”的选项，把它选上，如图：</p><p><img src="https://i.loli.net/2019/07/02/5d1aaeaf630d974218.jpg" alt="image"></p><p>2.另一种方法就是在终端用命令给 bundle 文件添加执行权限。打开终端(快捷键为 Ctrl+Alt+T )，打开终端后，进入 bundle 文件所在目录(便于操作)，然后用以下命令给 bundle 文件添加执行权限：</p><blockquote><p>$ sudo chmod +x *.bundle</p></blockquote><p>回车，输入用户密码，这样就给 bundle 文件添加了执行权限了。</p><p>在命令行运行*.bundle进行安装</p><blockquote><p>$ sudo .&#x2F;*.bundle</p></blockquote><h3 id="4-配置VMware-vmnet0、vmnet1和vmnet8"><a href="#4-配置VMware-vmnet0、vmnet1和vmnet8" class="headerlink" title="4.配置VMware vmnet0、vmnet1和vmnet8"></a>4.配置VMware vmnet0、vmnet1和vmnet8</h3><p>开始因为没有配置这个,导致ip不能分配,主机不能ping通虚拟机中的节点。（<strong>注意：假如你在安装CenOS时选用的是桥接而非NAT类型，可以忽略,你可以直接跳转到第6直接配置文件后重启网卡,看看能否成功。</strong>）</p><p>三者的区别参考博文:<a href="http://blog.csdn.net/guizaijianchic/article/details/72190394">http://blog.csdn.net/guizaijianchic/article/details/72190394</a></p><p>进入编辑-&gt;虚拟网络编辑器 配置VMware vmnet0、vmnet1和vmnet8</p><p>下图是主机配置，注意我主机的ip是<code>192.168.100.110</code></p><blockquote><p>$ ifconfig</p></blockquote><p><img src="https://i.loli.net/2019/07/02/5d1aaebacaad083090.jpg" alt="image"></p><p>1.vmnet0使用桥接链接方式,基本上不用动,下图是我本机的配置:</p><p><img src="https://i.loli.net/2019/07/02/5d1aaec066baf24231.jpg" alt="image"></p><p>2.vmnet1使用宿主链接方式,需要修改的是<strong>子网</strong>和<strong>子网掩码</strong>，并使用DHCP分配模式,下图是我本机的配置:</p><p><img src="https://i.loli.net/2019/07/02/5d1aaec4c690226690.jpg" alt="image"></p><p>3.vmnet8使用NAT链接方式,需要修改的是<strong>子网</strong>和<strong>子网掩码</strong>,并使用DHCP分配模式，下图是我本机的配置:</p><p><img src="https://i.loli.net/2019/07/02/5d1aaec94826124302.jpg" alt="image"></p><p>打开网络设置.可以查看里面的网关</p><p><img src="https://i.loli.net/2019/07/02/5d1aaecd3094447459.jpg" alt="image"></p><p>参考blog:<a href="http://blog.csdn.net/w20228396/article/details/77507908%E5%92%8Chttp://blog.csdn.net/didi8206050/article/details/51872682">http://blog.csdn.net/w20228396/article/details/77507908和http://blog.csdn.net/didi8206050/article/details/51872682</a></p><h3 id="5-安装CentOS-minimal"><a href="#5-安装CentOS-minimal" class="headerlink" title="5.安装CentOS minimal"></a>5.安装CentOS minimal</h3><p>镜像自己去网上下载好了</p><p><img src="https://i.loli.net/2019/07/02/5d1aaed17ac5366362.jpg" alt="image"></p><p>安装过程除了在<strong>选择网络</strong>那里选择<strong>桥接类型</strong>以外其他全部可以默认。</p><p>参考blog:<a href="http://blog.csdn.net/capricorn90/article/details/52476228">http://blog.csdn.net/capricorn90/article/details/52476228</a></p><h3 id="6-配置网络-手动"><a href="#6-配置网络-手动" class="headerlink" title="6.配置网络(手动)"></a>6.配置网络(手动)</h3><p>如果安装过后发现不能上网，这个时候我们就要手动配置网络了，在这里我碰到的是虚拟网卡没有设置ip,解决办法：</p><p>补充：如果你发现你连的ifconfig都不能用,可以使用<strong>ip addr</strong>查看相应信息:</p><p><img src="https://i.loli.net/2019/07/02/5d1aaed6c471e74950.jpg" alt="image"></p><p>打开&#x2F;etc&#x2F;systemconfig&#x2F;network-scripts&#x2F;ifcfg-eth0，然后在里面加上如下的内容：</p><p><img src="https://i.loli.net/2019/07/02/5d1aaedcf310634413.jpg" alt="image"></p><p>注意打开的是ifcfg-eth0 你打开什么要根据你自己的网卡名称</p><blockquote><p>&#x2F;$ &#x2F;etc&#x2F;systemconfig&#x2F;network-scripts&#x2F;ifcfg-eth0</p></blockquote><p><img src="https://i.loli.net/2019/07/02/5d1aaee14223f78033.jpg" alt="image"></p><p>DEVICE&#x3D;ens33#设备名称，可根据ifcofnig命令查看到。</p><p>BOOTPROTO&#x3D;dhcp  #连接方式，dhcp会自动分配地址，此时不需要在下面设置ip和网关</p><p>HWADDR&#x3D;00:0C:29:AD:66:9F  #硬件地址，可根据ifcofnig命令查看到。</p><p>ONBOOT&#x3D;yes  #yes表示启动就执行该配置，需要改为yes 我本地开始是no,所以在开机后没有给我自动分配ip,将它改为yes,在终端重启网卡</p><p>两个命令选一个:</p><blockquote><p>$ service network restart<br>$ &#x2F;etc&#x2F;init.d&#x2F;network restart</p></blockquote><p>参考blog:<a href="http://blog.csdn.net/w20228396/article/details/77507908%E5%92%8Chttp://blog.csdn.net/didi8206050/article/details/51872682">http://blog.csdn.net/w20228396/article/details/77507908和http://blog.csdn.net/didi8206050/article/details/51872682</a></p><h3 id="7-克隆"><a href="#7-克隆" class="headerlink" title="7.克隆"></a>7.克隆</h3><p>克隆和快照的区别:<a href="http://blog.csdn.net/whatday/article/details/52538031">http://blog.csdn.net/whatday/article/details/52538031</a></p><p>右键已安装的centos 管理-&gt;克隆，一路下一步,由于磁盘空间比较充足所以直接选择全克隆</p><p><img src="https://i.loli.net/2019/07/02/5d1aaee75a7b133341.jpg" alt="image"></p><p>mini3是我刚从mini1克隆的一个新版本,启动以后发现无法正常分配ip</p><p><img src="https://i.loli.net/2019/07/02/5d1aaeed0ef9772604.jpg" alt="image"></p><p>因为mini1的网卡名称叫eth0,而克隆的叫eth1</p><p>我们到**&#x2F;etc&#x2F;systemconfig&#x2F;network-scripts&#x2F;**发现根本没有ifcfg-eth1文件,因为我们是克隆的..所以在这里我们吧ifcfg-eth0改成ifcfg-eth1</p><blockquote><p>$ cd &#x2F;etc&#x2F;systemconfig&#x2F;network-scripts&#x2F;<br>$ mv ifcfg-eth0 ifcfg-eth1<br>$ vim ifcfg-eth1</p></blockquote><p>重新修改里面的物理地址和网卡名称,其他可以不用动,然后重启网卡</p><blockquote><p>&#x2F;etc&#x2F;init.d&#x2F;network restart</p></blockquote><p>重新查看一下</p><p><img src="https://i.loli.net/2019/07/02/5d1aaef306db997875.jpg" alt="image"></p><h3 id="8-ping主机名访问"><a href="#8-ping主机名访问" class="headerlink" title="8.ping主机名访问"></a>8.ping主机名访问</h3><p>一直老使用<code>ssh root@192.168.0.128</code>,<code>ssh root@192.168.0.130</code>访问好麻烦,而且在以后编写脚本时容易弄错哪个ip对应是哪一台,我们希望通过这样<code>ssh root@mini1</code>,<code>ssh root@mini2</code>就可以访问到每台机器</p><blockquote><p>$ vim &#x2F;etc&#x2F;hosts</p></blockquote><p><img src="https://i.loli.net/2019/07/02/5d1aaef7e41cf91818.jpg" alt="image"></p><p>像上图一样设置就可以了</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mybatis数据库字段和实体类字段不一致解决方案</title>
    <link href="/2018/03/15/2018-03-15-mybatis-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E6%AE%B5%E5%92%8C%E5%AE%9E%E4%BD%93%E7%B1%BB%E5%AD%97%E6%AE%B5%E4%B8%8D%E4%B8%80%E8%87%B4%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2018/03/15/2018-03-15-mybatis-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E6%AE%B5%E5%92%8C%E5%AE%9E%E4%BD%93%E7%B1%BB%E5%AD%97%E6%AE%B5%E4%B8%8D%E4%B8%80%E8%87%B4%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<p>数据库字段与实体类字段不一致，导致功能正常，但是就是查不出数据</p><h3 id="1-使用resultMap"><a href="#1-使用resultMap" class="headerlink" title="1.使用resultMap"></a>1.使用<strong>resultMap</strong></h3><p>在xml中定义resultMap标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.entity.BdipChatPoint&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pointMap&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id_&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;json&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;json&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;picture&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;picture&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;model_url&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;modelUrl&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;db_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dbId&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;frag_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;fragId&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;view_point_num&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;viewPointNum&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userName&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;head_image&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;headImage&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tree_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;treeId&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;enable_&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;enable&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;remark_&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;remark&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;create_by&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createBy&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;create_time&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createTime&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;update_time&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;updateTime&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;update_by&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;updateBy&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>column</strong>填写数据库字段 <strong>property</strong>填写实体类字段</p><p>在使用<select>标签的时候用resultMap&#x3D;”pointMap”替换resultType&#x3D;”com.entity.BdipChatPoint”</p><h2 id="2-在写sql是使用as"><a href="#2-在写sql是使用as" class="headerlink" title="2.在写sql是使用as"></a>2.在写sql是使用as</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectBimChatPoint&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.entity.BdipChatPoint&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.entity.BdipChatPoint&quot;</span>&gt;</span><br>    select id_ as id,json,picture,model_url as modelUrl from bdip_chat_point <br>    where db_id = #&#123;dbId&#125; and model_url = #&#123;modelUrl&#125; and create_by = #&#123;createBy&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>注意id_ as id和model_url as modelUrl</li><li>依旧使用resultType来接收</li></ul>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>问题总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>同域名不同端口下iframe跨域问题处理</title>
    <link href="/2018/03/15/2018-03-15-%E8%B7%A8%E5%9F%9F-%E5%90%8C%E5%9F%9F%E5%90%8D%E4%B8%8D%E5%90%8C%E7%AB%AF%E5%8F%A3%E4%B8%8B%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/"/>
    <url>/2018/03/15/2018-03-15-%E8%B7%A8%E5%9F%9F-%E5%90%8C%E5%9F%9F%E5%90%8D%E4%B8%8D%E5%90%8C%E7%AB%AF%E5%8F%A3%E4%B8%8B%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>场景描述,现有两个界面A和B,他们的IP和端口情况如下：</p><blockquote><p>A : 192.168.1.2:8081<br>B : 192.168.1.2:8082</p></blockquote><p>A界面中使用<iframe>标签引入B界面。</p><p>我们想在A界面来获取B界面中的元素时，在浏览器的console中就会提示cross….等字样的错误。</p><h2 id="解决跨域问题"><a href="#解决跨域问题" class="headerlink" title="解决跨域问题"></a>解决跨域问题</h2><h3 id="1-使用设置请求头"><a href="#1-使用设置请求头" class="headerlink" title="1. 使用设置请求头"></a>1. 使用设置请求头</h3><p>response.setHeader();<br>response.setHeader();</p><h3 id="2-使用domain"><a href="#2-使用domain" class="headerlink" title="2. 使用domain"></a>2. 使用domain</h3><h3 id="3-使用ngnix左请求转发"><a href="#3-使用ngnix左请求转发" class="headerlink" title="3. 使用ngnix左请求转发"></a>3. 使用ngnix左请求转发</h3><p>我使用了第三种方式来解决问题，让ngnix监听8083端口，分别将请求转发到A和B。这样就可以做到在访问A和B界面的时候，使用的都是同一个域名+端口。192.168.1.2：8083</p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>问题总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shiro学习</title>
    <link href="/2018/03/13/2018-03-13-shiro-shiro%E5%AD%A6%E4%B9%A0/"/>
    <url>/2018/03/13/2018-03-13-shiro-shiro%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>永不止步!感谢开老师的分享!</p><blockquote><p><a href="http://jinnianshilongnian.iteye.com/blog/2018398">http://jinnianshilongnian.iteye.com/blog/2018398</a><br><a href="https://github.com/zhangkaitao/shiro-example">https://github.com/zhangkaitao/shiro-example</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shiro</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用wine安装迅雷和QQ</title>
    <link href="/2018/03/13/2018-03-13-ubuntu-%E5%88%A9%E7%94%A8wine%E5%AE%89%E8%A3%85%E8%BF%85%E9%9B%B7%E5%92%8CQQ/"/>
    <url>/2018/03/13/2018-03-13-ubuntu-%E5%88%A9%E7%94%A8wine%E5%AE%89%E8%A3%85%E8%BF%85%E9%9B%B7%E5%92%8CQQ/</url>
    
    <content type="html"><![CDATA[<h2 id="本机环境"><a href="#本机环境" class="headerlink" title="本机环境:"></a>本机环境:</h2><p>这个方法在本机试了。不行。小伙伴们还是散了吧！！</p><p>前一篇安装QQ2012国际版由于版本太老，部分功能不能使用，下面我们安装新版QQ。本机环境</p><blockquote><p>$ cat &#x2F;proc&#x2F;version<br>Linux version 4.10.0-28-generic (buildd@lgw01-12) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1<del>16.04.4) ) #32</del>16.04.2-Ubuntu SMP Thu Jul 20 10:19:48 UTC 2017</p></blockquote><h2 id="核心内容"><a href="#核心内容" class="headerlink" title="核心内容"></a>核心内容</h2><ul><li>1.迅雷运行几乎完美，能够用手机号登录，能够正常下载和加速。已知部分图片无法正常显示，无伤大雅。</li><li>2.QQ运行效率比起其他版本的wineqq来说要高，能够记住密码和自动登录，无法视频通话、远程演示。</li></ul><h3 id="所需文件一览"><a href="#所需文件一览" class="headerlink" title="所需文件一览"></a>所需文件一览</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs ada">+<span class="hljs-comment">-- deepin.com.qq.im_8.9.19983deepin16_i386.deb</span><br>+<span class="hljs-comment">-- deepin.com.thunderspeed_7.10.35.366deepin15_i386.deb</span><br>+<span class="hljs-comment">-- deepin-wine-d</span><br>|   +<span class="hljs-comment">-- deepin-fonts-wine_1.9-26_all.deb</span><br>|   +<span class="hljs-comment">-- deepin-libwine_1.9-26_i386.deb</span><br>|   +<span class="hljs-comment">-- deepin-wine32_1.9-26_i386.deb</span><br>|   +<span class="hljs-comment">-- udis86_1.72-2_i386.deb</span><br>+<span class="hljs-comment">-- deepin-wine-helper-d</span><br>|   +<span class="hljs-comment">-- libgif4_4.1.6-11_i386.deb</span><br>|   +<span class="hljs-comment">-- libgnutls26_2.12.23-18_i386.deb</span><br>|   +<span class="hljs-comment">-- libgnutls-deb0-28_3.3.20-1_i386.deb</span><br>|   +<span class="hljs-comment">-- libgstreamer0.10-0_0.10.36-1.5_i386.deb</span><br>|   +<span class="hljs-comment">-- libgstreamer-plugins-base0.10-0_0.10.36-2_i386.deb</span><br>|   +<span class="hljs-comment">-- libpng16-16_1.6.26-1_i386.deb</span><br>|   +<span class="hljs-comment">-- libreadline7_7.0-1_i386.deb</span><br>+<span class="hljs-comment">-- dependences</span><br>+<span class="hljs-comment">-- install.sh</span><br>+<span class="hljs-comment">-- qq-d</span><br>|   +<span class="hljs-comment">-- deepin-wine_1.9-26_all.deb</span><br>|   +<span class="hljs-comment">-- deepin-wine32-preloader_1.9-26_i386.deb</span><br>|   +<span class="hljs-comment">-- deepin-wine-helper_1.0deepin17_i386.deb</span><br>|   +<span class="hljs-comment">-- deepin-wine-uninstaller_0.1deepin2_i386.deb</span><br>+<span class="hljs-comment">-- README</span><br>+<span class="hljs-comment">-- remove.sh</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/02/5d1aae969fc0932921.jpg" alt="附图"></p><ul><li>qq-d文件夹中为搭建deepin-wine环境所需的第一级依赖软件，包括deepin-wine，deepin-wine-helper等。</li><li>deepin-wine-d中为软件包deepin-wine所需的依赖软件，包括deepin-libwine等。</li><li>deepin-wine-helper-d中为软件包deepin-wine-helper所需的部分依赖软件，包括32位的libreadline7等。</li></ul><p>网盘链接（链接: <a href="https://pan.baidu.com/s/1S69P6tK9St6ZDGBX2E1f2w">https://pan.baidu.com/s/1S69P6tK9St6ZDGBX2E1f2w</a> 密码: 06i9）</p><h3 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h3><p>64位操作系统安装前需检查dpkg是否包含了i386架构的软件包。终端输入</p><blockquote><p>$ dpkg –print-foreign-architectures</p></blockquote><p>如果输出i386则继续下面步骤，如果没有的话，需要先执行：</p><blockquote><p>$ sudo dpkg –add-architecture i386<br>$ sudo apt-get update</p></blockquote><p>接下来安装deepin-qq和deepin-thunder，方法为打开终端，执行:</p><blockquote><p>$ sudo bash install.sh</p></blockquote><p>如果是 32位操作系统请查看原博客 <a href="https://www.ubuntukylin.com/ukylin/forum.php?mod=viewthread&amp;tid=30614">https://www.ubuntukylin.com/ukylin/forum.php?mod=viewthread&amp;tid=30614</a></p><p>转自<a href="https://www.ubuntukylin.com/ukylin/forum.php?mod=viewthread&amp;tid=30614">https://www.ubuntukylin.com/ukylin/forum.php?mod=viewthread&amp;tid=30614</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu中没啥用的命令</title>
    <link href="/2018/03/13/2018-03-13-%E6%97%A0%E8%81%8A-ubuntu%E6%B2%A1%E5%95%A5%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4/"/>
    <url>/2018/03/13/2018-03-13-%E6%97%A0%E8%81%8A-ubuntu%E6%B2%A1%E5%95%A5%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<blockquote><p>$ echo “大家好!!” | pv -qL 5<br>$ xeyes<br>$ oneko<br>$ cowsay “MmmmmmmmmmOOOOOO….”<br>$ cmatrix</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>An invalid character [32] was present in the Cookie value</title>
    <link href="/2018/03/12/2018-03-12-java-An%20invalid%20character%20%5B32%5D%20was%20present%20in%20the%20Cookie%20value/"/>
    <url>/2018/03/12/2018-03-12-java-An%20invalid%20character%20%5B32%5D%20was%20present%20in%20the%20Cookie%20value/</url>
    
    <content type="html"><![CDATA[<p>这是因为Cookies中存储特殊字符串引起的，当我们在里面存储分号空格等一些特殊符号时，就会抛异常。</p><p>解决办法我们只需要存入和取出的时候用<code>URLEncoder.encode(xxx，&quot;UTF-8&quot;)</code>和<code>URLDcoder.decoder(xxx,&quot;UTF-8&quot;)</code>就可以得到解决。</p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>问题总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>content-disposition使用</title>
    <link href="/2018/03/12/2018-03-12-java-content-disposition/"/>
    <url>/2018/03/12/2018-03-12-java-content-disposition/</url>
    
    <content type="html"><![CDATA[<p>content-disposition 是RFC中定义的文件下载标识字段,详情查看rfc2616章节19.5 <a href="http://www.rfc-editor.org/rfc/rfc2616.pdf">Additional Features</a>,其中有两种形式供给我们选择，一个是inline，一个是attachment</p><h3 id="在页面内打开代码："><a href="#在页面内打开代码：" class="headerlink" title="在页面内打开代码："></a>在页面内打开代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;rfc1806.txt&quot;</span>);  <br><span class="hljs-type">String</span> <span class="hljs-variable">filename</span> <span class="hljs-operator">=</span> file.getName();  <br>response.setHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>,<span class="hljs-string">&quot;text/plain&quot;</span>);  <br>response.addHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>,<span class="hljs-string">&quot;inline;filename=&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(filename.getBytes(),<span class="hljs-string">&quot;utf-8&quot;</span>));  <br>response.addHeader(<span class="hljs-string">&quot;Content-Length&quot;</span>,<span class="hljs-string">&quot;&quot;</span> + file.length());  <br></code></pre></td></tr></table></figure><h3 id="弹出保存框代码："><a href="#弹出保存框代码：" class="headerlink" title="弹出保存框代码："></a>弹出保存框代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;rfc1806.txt&quot;</span>);  <br><span class="hljs-type">String</span> <span class="hljs-variable">filename</span> <span class="hljs-operator">=</span> file.getName();  <br>response.setHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>,<span class="hljs-string">&quot;text/plain&quot;</span>);  <br>response.addHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>,<span class="hljs-string">&quot;attachment;filename=&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(filename.getBytes(),<span class="hljs-string">&quot;utf-8&quot;</span>));  <br>response.addHeader(<span class="hljs-string">&quot;Content-Length&quot;</span>,<span class="hljs-string">&quot;&quot;</span> + file.length());  <br></code></pre></td></tr></table></figure><h3 id="场景应用，导出word文档："><a href="#场景应用，导出word文档：" class="headerlink" title="场景应用，导出word文档："></a>场景应用，导出word文档：</h3><p>控制层使用的springmvc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 导出word功能</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> workflowId 流程的id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException </span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@ApiOperation(value=&quot;导出word功能&quot;,notes=&quot;导出word功能&quot;)</span><br><span class="hljs-meta">@ApiResponses(value= &#123;@ApiResponse(code=200,message=&quot;导出成功&quot;,response=BimWorkflowDetailController.class)&#125;)</span><br><span class="hljs-meta">@RequestMapping(value=&quot;/exportCollision&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">exportCollision</span><span class="hljs-params">(String workflowId,HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-comment">//response.setContentType(&quot;application/octet-stream; charset=UTF-8&quot;);</span><br>response.setHeader(<span class="hljs-string">&quot;content-disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyyMMddHH:mm:ss&quot;</span>).format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis())) + <span class="hljs-string">&quot;.doc&quot;</span>);<br><span class="hljs-comment">// opera和firefox可以正常使用，而ie不能正常使用 添加下列头</span><br>response.setHeader(<span class="hljs-string">&quot;Pragma&quot;</span>,<span class="hljs-string">&quot;No-cache&quot;</span>); <br>response.setHeader(<span class="hljs-string">&quot;Cache-Control&quot;</span>,<span class="hljs-string">&quot;No-cache&quot;</span>); <br>response.setDateHeader(<span class="hljs-string">&quot;Expires&quot;</span>,<span class="hljs-number">0</span>);<br><br><span class="hljs-type">ApiResultEntity</span> <span class="hljs-variable">apiResultEntity</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiResultEntity</span>();<br>apiResultEntity.setDataEncode(<span class="hljs-literal">true</span>);<br><span class="hljs-comment">// 1.根据workflowid从数据库查询相关信息</span><br><span class="hljs-type">Parameter</span> <span class="hljs-variable">parameter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parameter</span>(BizServiceDefine.bimWorkflowDetailService, <span class="hljs-string">&quot;getBimWorkflowInfoById&quot;</span>).setId(NumberUtil.tryParseLong(workflowId));<br>parameter = bizProvider.execute(parameter);<br>apiResultEntity = (ApiResultEntity) parameter.getResult();<br>Map&lt;String,Object&gt; param = (Map&lt;String,Object&gt;) apiResultEntity.getData();<br><span class="hljs-type">BimWorkflowDetail</span> <span class="hljs-variable">workflowBase</span> <span class="hljs-operator">=</span> (BimWorkflowDetail) param.get(<span class="hljs-string">&quot;bimWorkflowDetail&quot;</span>);<br>List&lt;BimWorkflowCollision&gt; collisionLists = (List&lt;BimWorkflowCollision&gt;) param.get(<span class="hljs-string">&quot;collisionLists&quot;</span>);<br><span class="hljs-type">OutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>out = response.getOutputStream();<br><span class="hljs-comment">// 存word</span><br>saveDoc(workflowBase, collisionLists, out);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>logger.error(<span class="hljs-string">&quot;导出word异常!!!!&quot;</span>);<br>e.printStackTrace();<br>&#125;<br>out.flush();  <br>    out.close();  <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>问题总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC接收复杂集合参数</title>
    <link href="/2018/03/12/2018-03-12-springmvc-SpringMVC%E6%8E%A5%E6%94%B6%E5%A4%8D%E6%9D%82%E9%9B%86%E5%90%88%E5%8F%82%E6%95%B0/"/>
    <url>/2018/03/12/2018-03-12-springmvc-SpringMVC%E6%8E%A5%E6%94%B6%E5%A4%8D%E6%9D%82%E9%9B%86%E5%90%88%E5%8F%82%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>记两个方式</p><h2 id="1-使用form的ajax方式提交"><a href="#1-使用form的ajax方式提交" class="headerlink" title="1.使用form的ajax方式提交"></a>1.使用form的ajax方式提交</h2><h3 id="后台代码"><a href="#后台代码" class="headerlink" title="后台代码"></a>后台代码</h3><p>后台使用的是springmvc框架</p><p>实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BimWorkflowDetailBase</span> &#123;<br><br><span class="hljs-meta">@TableField(&quot;model_id&quot;)</span><br><span class="hljs-keyword">private</span> String modelId;<br>   <br><span class="hljs-meta">@TableField(&quot;cc_name&quot;)</span><br><span class="hljs-keyword">private</span> String ccName;<br><br><span class="hljs-meta">@TableField(&quot;cc_names&quot;)</span><br><span class="hljs-keyword">private</span> String ccNames;<br><br><span class="hljs-meta">@TableField(&quot;status_&quot;)</span><br><span class="hljs-keyword">private</span> String status;<br>....<br>&#125;<br></code></pre></td></tr></table></figure><p>实体类包装起来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WorkFlowCollisionWrapper</span> &#123;<br><br><span class="hljs-keyword">private</span> List&lt;BimWorkflowCollision&gt; collisions;<br><br><span class="hljs-keyword">public</span> List&lt;BimWorkflowCollision&gt; <span class="hljs-title function_">getCollisions</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> collisions;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCollisions</span><span class="hljs-params">(List&lt;BimWorkflowCollision&gt; collisions)</span> &#123;<br><span class="hljs-built_in">this</span>.collisions = collisions;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在控制器的参数中直接写上包装类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value=&quot;/check&quot;,method=RequestMethod.POST,produces=&quot;application/json&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@ResponseBody</span> String <span class="hljs-title function_">check</span><span class="hljs-params">(WorkFlowCollisionWrapper collisions)</span> &#123;<br>System.out.println(collisions.getCollisions().size());<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="前台代码"><a href="#前台代码" class="headerlink" title="前台代码"></a>前台代码</h3><p>这里我使用了ES6动态生成html 里面的${index} 是ES6的写法,我们在这边的写法是<code>name=&quot;collisions[0].id&quot;  name=&quot;collisions[1].id</code>以此类推就可以正常传入到后台</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;m-initating-table hei30&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;initating-table-$&#123;index&#125;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span>专业编号<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">readonly</span>=<span class="hljs-string">&quot;readonly&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;collisions[$&#123;index&#125;].zybh&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;typeof(node.zybh)==&#x27;undefined&#x27;?&#x27;&#x27;:node.zybh&#125;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tableinput first firstStageInput fourthStageInput&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">maxlength</span>=<span class="hljs-string">&quot;20&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span>类别编号<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&quot;disabled&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;collisions[$&#123;index&#125;].lbbh&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tableSelect first firstStageSelect fourthStageSelect&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 80%;margin: 0 auto;display: block;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;A&quot;</span> $&#123;<span class="hljs-attr">typeof</span>(<span class="hljs-attr">node.lbbh</span>)==<span class="hljs-string">&#x27;undefined&#x27;</span> || <span class="hljs-attr">node.lbbh</span> == <span class="hljs-string">&#x27;A&#x27;</span>?&#x27;<span class="hljs-attr">selected</span>&#x27;<span class="hljs-attr">:</span>&#x27;&#x27;&#125;&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;B&quot;</span> $&#123;<span class="hljs-attr">node.lbbh</span> == <span class="hljs-string">&#x27;B&#x27;</span>?&#x27;<span class="hljs-attr">selected</span>&#x27;<span class="hljs-attr">:</span>&#x27;&#x27;&#125;&gt;</span>B<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;C&quot;</span> $&#123;<span class="hljs-attr">node.lbbh</span> == <span class="hljs-string">&#x27;C&#x27;</span>?&#x27;<span class="hljs-attr">selected</span>&#x27;<span class="hljs-attr">:</span>&#x27;&#x27;&#125;&gt;</span>C<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;D&quot;</span> $&#123;<span class="hljs-attr">node.lbbh</span> == <span class="hljs-string">&#x27;D&#x27;</span>?&#x27;<span class="hljs-attr">selected</span>&#x27;<span class="hljs-attr">:</span>&#x27;&#x27;&#125;&gt;</span>D<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里使用form表单序列化所有的值,发送ajax请求后台</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> url = publicJS.<span class="hljs-property">tomcat_url</span> + <span class="hljs-string">&#x27;/workflow/check&#x27;</span>;<br><span class="hljs-keyword">var</span> data = $(<span class="hljs-string">&#x27;#collisionForm&#x27;</span>).<span class="hljs-title function_">serialize</span>();<br>$.<span class="hljs-title function_">ajax</span>(&#123;<br>url : url,<br>type : <span class="hljs-string">&#x27;POST&#x27;</span>,<br>data : data,<br>dataType : <span class="hljs-string">&#x27;json&#x27;</span>,<br>success : <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;<br><br>&#125;,<br>error : <span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>)&#123;<br><br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="2-使用纯ajax方式提交"><a href="#2-使用纯ajax方式提交" class="headerlink" title="2.使用纯ajax方式提交"></a>2.使用纯ajax方式提交</h2><h3 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h3><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;  <br>        <span class="hljs-keyword">private</span> String name;   <br>    <span class="hljs-keyword">private</span> String pwd;  <br>    <span class="hljs-comment">//省略getter/setter  </span><br>&#125;    <br></code></pre></td></tr></table></figure><p>控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span>  <br><span class="hljs-meta">@RequestMapping(&quot;/catalog.do&quot;)</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CatalogController</span> &#123;  <br>  <br>    <span class="hljs-meta">@RequestMapping(params = &quot;fn=saveUsers&quot;)</span>  <br>    <span class="hljs-meta">@ResponseBody</span>  <br>    <span class="hljs-keyword">public</span> AjaxJson <span class="hljs-title function_">saveUsers</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> List&lt;User&gt; userList)</span> &#123;  <br>        …  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="前台"><a href="#前台" class="headerlink" title="前台"></a>前台</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> userList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();  <br>userList.<span class="hljs-title function_">push</span>(&#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-attr">pwd</span>: <span class="hljs-string">&quot;123&quot;</span>&#125;);   <br>userList.<span class="hljs-title function_">push</span>(&#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-attr">pwd</span>: <span class="hljs-string">&quot;332&quot;</span>&#125;);   <br>$.<span class="hljs-title function_">ajax</span>(&#123;  <br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,  <br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;&lt;%=path%&gt;/catalog.do?fn=saveUsers&quot;</span>,  <br>    <span class="hljs-attr">data</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(userList),<span class="hljs-comment">//将对象序列化成JSON字符串  </span><br>    <span class="hljs-attr">dataType</span>:<span class="hljs-string">&quot;json&quot;</span>,  <br>    contentType : <span class="hljs-string">&#x27;application/json;charset=utf-8&#x27;</span>, <span class="hljs-comment">//设置请求头信息  </span><br>    <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;  <br>        …  <br>    &#125;,  <br>    <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>)&#123;  <br>        …  <br>    &#125;  <br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>问题总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IntelliJ IDEA安装python插件分享</title>
    <link href="/2018/03/03/2018-03-3-idea-idea%E5%AE%89%E8%A3%85python%E6%8F%92%E4%BB%B6/"/>
    <url>/2018/03/03/2018-03-3-idea-idea%E5%AE%89%E8%A3%85python%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>开始在File-&gt;Settings-&gt;Plugins-&gt;中尝试集成python,下载了半天提示了个错误框,然后只好通过手动方式安装了</p><h2 id="本机环境"><a href="#本机环境" class="headerlink" title="本机环境:"></a>本机环境:</h2><p>本机是在ubuntu16上使用的是2016.3.7版本的IntelliJ IDEA</p><p><img src="https://i.loli.net/2019/07/02/5d1aaeff28cc824539.jpg" alt="image"></p><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><p>首先我们到官网插件中心<a href="http://plugins.jetbrains.com/plugin/631-python">http://plugins.jetbrains.com/plugin/631-python</a>下载我们要的插件,在下载的时候尽量选择版本比较接近的,这样不容易有冲突</p><p>我下载的是<code>163.12024—163.*</code></p><p><img src="https://i.loli.net/2019/07/02/5d1aaf019e81967760.jpg" alt="image"></p><p>下载好以后在Intellij IDEA File——&gt;Settings——&gt;IDE setttings——&gt;Plugins——&gt;Install plugin from disk…——&gt;选择插件所在路径即可。</p><p><img src="https://i.loli.net/2019/07/02/5d1aaf0d989ff16995.jpg" alt="image"></p>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu16.04TLS安装QQ国际版</title>
    <link href="/2018/03/03/2018-03-3-ubuntu-ubuntu16.04%E5%AE%89%E8%A3%85qq/"/>
    <url>/2018/03/03/2018-03-3-ubuntu-ubuntu16.04%E5%AE%89%E8%A3%85qq/</url>
    
    <content type="html"><![CDATA[<p>经过不断折腾,终于找到了一个可安装的QQ,下面的方法不出意外应该是适用与所有的ubuntu16版本,本人已经使用这个方法正常安装了QQ2012国际版,如图:</p><p><img src="https://i.loli.net/2019/07/02/5d1aaf12b94a887505.jpg" alt="image"></p><p>QQ2012国际版:</p><ul><li>支持密码键盘输入并记住密码。</li><li>可以发送QQ表情无问题。</li><li>传送文件无问题。</li><li>IBus输入法正常。</li><li>QQ设置常用功能，比较精简，且占用CPU少。</li></ul><h2 id="本机环境"><a href="#本机环境" class="headerlink" title="本机环境:"></a>本机环境:</h2><p>本机使用的是ubuntu16.04 TLS 64版,内核版本为4.10.0-28-generic,qq在本机上安装过程无任何问题(仅限本机)</p><blockquote><p>$ cat &#x2F;proc&#x2F;version<br>Linux version 4.10.0-28-generic (buildd@lgw01-12) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1<del>16.04.4) ) #32</del>16.04.2-Ubuntu SMP Thu Jul 20 10:19:48 UTC 2017</p></blockquote><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><p>首先我们需要安装依赖库 <code>libgtk2.0-0:i386</code> 因为我们是64位系统,所以我们还需要安装 <code>ia32-libs</code> , 但是ubuntu16.04中该软件包已经被其他版本代替了,所以我们选择安装<code>lib32ncurses5</code></p><h3 id="1-安装libgtk2-0-0-i386"><a href="#1-安装libgtk2-0-0-i386" class="headerlink" title="1. 安装libgtk2.0-0:i386"></a>1. 安装libgtk2.0-0:i386</h3><p>在终端输入<code>sudo apt-get install libgtk2.0-0:i386</code></p><blockquote><p>$ sudo apt-get install libgtk2.0-0:i386</p></blockquote><h3 id="2-安装-lib32ncurses5"><a href="#2-安装-lib32ncurses5" class="headerlink" title="2. 安装 lib32ncurses5"></a>2. 安装 lib32ncurses5</h3><p>在终端输入<code>sudo apt-get install lib32ncurses5</code></p><blockquote><p>$ sudo apt-get install lib32ncurses5</p></blockquote><h3 id="3-下载QQ2012国际版"><a href="#3-下载QQ2012国际版" class="headerlink" title="3. 下载QQ2012国际版"></a>3. 下载QQ2012国际版</h3><p>下载链接<a href="https://pan.baidu.com/s/1bpF3p7L"><code>https://pan.baidu.com/s/1bpF3p7L</code></a>,我们只需要下载<code>wine-qqintl-www.linuxidc.com.tar.xz</code>到本地,随后我们解压出里面的三个deb文件:</p><p><img src="https://i.loli.net/2019/07/02/5d1aaf1829a7265782.jpg" alt="image"></p><p>我们使用dpkg分别安装三个deb文件</p><h3 id="4-安装-wine-qqintl-0-1-3-2-i386-deb"><a href="#4-安装-wine-qqintl-0-1-3-2-i386-deb" class="headerlink" title="4. 安装 wine-qqintl_0.1.3-2_i386.deb"></a>4. 安装 wine-qqintl_0.1.3-2_i386.deb</h3><blockquote><p>$ sudo dpkg -i wine-qqintl_0.1.3-2_i386.deb</p></blockquote><p>初次安装这个文件的时候,如果有部分lib没有配置,就会安装失败.我们的解决办法 执行一遍<code>sudo apt-get install -f</code>,这个命令的意思是<code>假如用户的系统上有某个package不满足依赖条件，这个命令就会自动修复,安装程序包所依赖的包</code>.完成以后我们再运行一遍<code>sudo dpkg -i wine-qqintl_0.1.3-2_i386.deb</code>就会发现成功安装了</p><h3 id="5-安装ttf-wqy-microhei-0-2-0-beta-2-all-deb和fonts-wqy-microhei-0-2-0-beta-2-all-deb"><a href="#5-安装ttf-wqy-microhei-0-2-0-beta-2-all-deb和fonts-wqy-microhei-0-2-0-beta-2-all-deb" class="headerlink" title="5. 安装ttf-wqy-microhei_0.2.0-beta-2_all.deb和fonts-wqy-microhei_0.2.0-beta-2_all.deb"></a>5. 安装ttf-wqy-microhei_0.2.0-beta-2_all.deb和fonts-wqy-microhei_0.2.0-beta-2_all.deb</h3><p>安装完后面两个deb文件</p><blockquote><p>$ sudo dpkg -i ttf-wqy-microhei_0.2.0-beta-2_all.deb<br>$ sudo dpkg -i fonts-wqy-microhei_0.2.0-beta-2_all.deb</p></blockquote><h2 id="运行QQ2012国际版"><a href="#运行QQ2012国际版" class="headerlink" title="运行QQ2012国际版"></a>运行QQ2012国际版</h2><p>在开始菜单中我们可以找到QQ2012国际版</p><p><img src="https://i.loli.net/2019/07/02/5d1aaf1e3de8475350.jpg" alt="image"></p><p>我们可以在终端使用命令<code>sudo dpkg -l|grep qq</code> 和 <code>sudo find / -name qq*</code> 查看QQ的安装情况</p><p><img src="https://i.loli.net/2019/07/02/5d1aaf228c1aa14653.jpg" alt="image"></p><p>如果在登录时提示版本过低,我们只需要将 手机QQ–&gt;设置–&gt;帐号、设备安全–&gt;设备锁 设置为<code>未启用</code>状态即可</p><h2 id="卸载QQ2012国际版"><a href="#卸载QQ2012国际版" class="headerlink" title="卸载QQ2012国际版"></a>卸载QQ2012国际版</h2><h3 id="1-查看有关qq的详情信息"><a href="#1-查看有关qq的详情信息" class="headerlink" title="1.查看有关qq的详情信息"></a>1.查看有关qq的详情信息</h3><blockquote><p>$ sudo dpkg -l | grep qq</p></blockquote><p>我们可以发现存在两个package,使用<code>dpkg -P</code>命令分别卸载两个package</p><p><img src="https://i.loli.net/2019/07/02/5d1aaf285bf5e67027.jpg" alt="image"></p><h3 id="2-卸载-wine-qqintl-i386"><a href="#2-卸载-wine-qqintl-i386" class="headerlink" title="2.卸载 wine-qqintl:i386"></a>2.卸载 wine-qqintl:i386</h3><blockquote><p>$ sudo dpkg -P wine-qqintl:i386</p></blockquote><h3 id="3-卸载-libqqwing2v5-amd64"><a href="#3-卸载-libqqwing2v5-amd64" class="headerlink" title="3.卸载 libqqwing2v5:amd64"></a>3.卸载 libqqwing2v5:amd64</h3><blockquote><p>$ sudo dpkg -P libqqwing2v5:amd64</p></blockquote><p>在卸载的时候提示存在依赖,所以卸载失败了,我们使用<code>-l</code>查看gnome-sudoku详情,并将其卸载后一切就正常了</p><p><img src="https://i.loli.net/2019/07/02/5d1aaf2e95fd668360.jpg" alt="image"></p><blockquote><p>$ sudo dpkg -l | grep gnome-sudoku<br>$ sudo dpkg -P gnome-sudoku</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Firefox下利用微博图床优化markdown粘贴图片链接体验分享</title>
    <link href="/2018/02/26/2018-02-26-markdown-%E5%88%A9%E7%94%A8%E5%BE%AE%E5%8D%9A%E5%9B%BE%E5%BA%8A%E4%BC%98%E5%8C%96markdown%E7%B2%98%E8%B4%B4%E5%9B%BE%E7%89%87%E9%93%BE%E6%8E%A5%E4%BD%93%E9%AA%8C/"/>
    <url>/2018/02/26/2018-02-26-markdown-%E5%88%A9%E7%94%A8%E5%BE%AE%E5%8D%9A%E5%9B%BE%E5%BA%8A%E4%BC%98%E5%8C%96markdown%E7%B2%98%E8%B4%B4%E5%9B%BE%E7%89%87%E9%93%BE%E6%8E%A5%E4%BD%93%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<p>网上有很多利用图床优化markdown粘贴图片链接的优化方式,我的这种并不是最好的,也不是最简便的.但是这个方法很容易配置,适合不懂代码的新手,具体配置步骤如下：</p><ul><li>在ubuntu中配置自定义快捷键,执行xxx.sh脚本命令,该脚本命令由我们自己编写,其中会调用<code>gnome-screenshot</code>进行截图(如果不想使用gnome-screenshot截图工具,可以自行寻找其他截图方式代替).调用<code>xclip</code>将剪切板中的截图保存到某磁盘下</li><li>下载firefox图床拓展<a href="https://addons.mozilla.org/zh-CN/firefox/addon/acwb/"><code>围脖就是好图床</code></a></li><li>手动将磁盘中的图片托到firefox图床拓展中上传。(如果有能力自己可以研究一下如何自动上传)</li></ul><h2 id="本机环境"><a href="#本机环境" class="headerlink" title="本机环境:"></a>本机环境:</h2><p>本机使用的是ubuntu16.04 TLS 64版,内核版本为4.10.0-28-generic,qq在本机上安装过程无任何问题(仅限本机)</p><blockquote><p>$ cat &#x2F;proc&#x2F;version<br>Linux version 4.10.0-28-generic (buildd@lgw01-12) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1<del>16.04.4) ) #32</del>16.04.2-Ubuntu SMP Thu Jul 20 10:19:48 UTC 2017</p></blockquote><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><p>首先我们需要安装<code>xclip</code>工具,这个命令其实是<code>命令建立了终端和剪切板之间通道，可以用命令的方式将终端输出或文件的内容保存到剪切板中，也可以将剪切板的内容输出到终端或文件中</code>,具体命令的细节有兴趣的小伙伴可以去研究一下。</p><p>其次我们需要用到ubuntu自带的<code>gnome-screenshot</code>截图工具,我们可以打开终端 输入<code>gnome-screenshot -a -c</code></p><h3 id="1-安装xclip"><a href="#1-安装xclip" class="headerlink" title="1. 安装xclip"></a>1. 安装xclip</h3><blockquote><p>$ sudo apt-get install xclip</p></blockquote><h3 id="2-编写snapshot-sh"><a href="#2-编写snapshot-sh" class="headerlink" title="2. 编写snapshot.sh"></a>2. 编写snapshot.sh</h3><p>打开<code>/home/zyh/Documents/screenshot/snapshot.sh</code>,具体内容如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>gnome-screenshot -a -c<br>xclip -selection clipboard -t image/png -o &gt; $HOME/Desktop/snapshot.png<br></code></pre></td></tr></table></figure><p>第二行的意思是将剪切板中的图片以snapshot.png为名保存到桌面上</p><p>编写完snapshot.sh,在终端输入<code>chmod +x snapshot.sh</code>,修改snapshot.sh为<code>可执行</code>状态</p><h3 id="3-自定义截图快捷键运行snapshot-sh"><a href="#3-自定义截图快捷键运行snapshot-sh" class="headerlink" title="3. 自定义截图快捷键运行snapshot.sh"></a>3. 自定义截图快捷键运行snapshot.sh</h3><p>我们可以在系统设置的键盘选项中自定义快捷键来运行我们想要运行的脚本文件</p><p><img src="https://i.loli.net/2019/07/02/5d1aae8d10c8091578.jpg" alt="image"></p><p>点击<code>+</code>号添加自定义快捷键,<code>名称</code>随意填写即可,<code>命令填写我们刚刚编写的snapshot.sh,记得要写全路径</code>,本机填写的是&#x2F;home&#x2F;zyh&#x2F;Documents&#x2F;screenshot&#x2F;snapshot.sh</p><p><img src="https://i.loli.net/2019/07/02/5d1aae911a06d47385.jpg" alt="image"></p><p>我这里设置的快捷键是<code>Ctrl+Alt+W</code>,自己根据喜好调整即可。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>我们使用Ctrl+Alt+W截图,然后会发现桌面上多出一个snapshot.png的文件,随后我们打开firefox将文件托到拓展中上传就可以拿到想要的链接了！</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>如果你喜欢chrome浏览器,你可以在chrome下载新浪图床拓展程序,因为最近GWF很严,本人惨造封杀,无法科学上网,chrome拓展不太好下载,所以选择了firefox :(</p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>前端一些知识汇总分享</title>
    <link href="/2018/02/24/2018-02-24-%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB-%E6%AF%8F%E5%A4%A9%E8%BF%9B%E6%AD%A5%E4%B8%80%E7%82%B9%E7%82%B9/"/>
    <url>/2018/02/24/2018-02-24-%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB-%E6%AF%8F%E5%A4%A9%E8%BF%9B%E6%AD%A5%E4%B8%80%E7%82%B9%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<p>在segmentfault.com看到一篇好的文章<a href="https://segmentfault.com/a/1190000013331105?utm_source=index-hottest#articleHeader15">面试的信心来源于过硬的基础</a>，来分享一下。</p><ul><li>1.viewport</li><li>2.跨域的几种方式</li><li>3.渲染优化</li><li>4.事件的各个阶段</li><li>5.let var const</li><li>6.箭头函数</li><li>7.快速的让一个数组乱序</li><li>8.字体font-family</li><li>9.可能用到的meta标签</li><li>10.消除transition闪屏</li><li>11.android 4.x bug</li><li>12.JS 判断设备来源</li><li>13.audio元素和video元素在ios和andriod中无法自动播放</li><li>14.css实现单行文本溢出显示 …</li><li>15.实现多行文本溢出显示…</li><li>16.让图文不可复制</li><li>17.盒子垂直水平居中</li><li>18.改变placeholder的字体颜色大小</li><li>19.最快捷的数组求最大值</li><li>20.更短的数组去重写法</li><li>21.vue 父子组件嵌套时，组件内部的各个生命周期钩子触发先后顺序</li></ul><h3 id="1-viewport"><a href="#1-viewport" class="headerlink" title="1.viewport"></a>1.viewport</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no&quot;</span> /&gt;</span><br>// width    设置viewport宽度，为一个正整数，或字符串‘device-width’<br>// device-width  设备宽度<br>// height   设置viewport高度，一般设置了宽度，会自动解析出高度，可以不用设置<br>// initial-scale    默认缩放比例（初始缩放比例），为一个数字，可以带小数<br>// minimum-scale    允许用户最小缩放比例，为一个数字，可以带小数<br>// maximum-scale    允许用户最大缩放比例，为一个数字，可以带小数<br>// user-scalable    是否允许手动缩放<br></code></pre></td></tr></table></figure><p>延伸 提问:怎样处理 移动端 1px 被 渲染成 2px 问题?</p><ul><li>局部处理<ul><li>mata标签中的 viewport属性 ，initial-scale 设置为 1 </li><li>rem 按照设计稿标准走，外加利用transfrome 的scale(0.5) 缩小一倍即可；</li></ul></li><li>全局处理<ul><li>mata标签中的 viewport属性 ，initial-scale 设置为 0.5</li><li>rem 按照设计稿标准走即可</li></ul></li></ul><h3 id="2-跨域的几种方式"><a href="#2-跨域的几种方式" class="headerlink" title="2.跨域的几种方式"></a>2.跨域的几种方式</h3><p>首先了解下浏览器的同源策略<br>同源策略&#x2F;SOP（Same origin policy）是一种约定，由Netscape公司1995年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSRF等攻击。所谓同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个ip地址，也非同源。</p><p>那么怎样解决跨域问题的呢？</p><ul><li><p>通过jsonp跨域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>    <span class="hljs-keyword">var</span> script = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>);<br>    script.<span class="hljs-property">type</span> = <span class="hljs-string">&#x27;text/javascript&#x27;</span>;<br><br>    <span class="hljs-comment">// 传参并指定回调执行函数为onBack</span><br>    script.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;http://www.....:8080/login?user=admin&amp;callback=onBack&#x27;</span>;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">head</span>.<span class="hljs-title function_">appendChild</span>(script);<br><br>    <span class="hljs-comment">// 回调执行函数</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">onBack</span>(<span class="hljs-params">res</span>) &#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(res));<br>    &#125;<br> &lt;/script&gt;<br></code></pre></td></tr></table></figure></li><li><p>document.domain + iframe跨域(<code>此方案仅限主域相同，子域不同的跨域应用场景</code>)</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--父窗口：(http://www.domain.com/a.html)--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;iframe&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://child.domain.com/b.html&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-property">domain</span> = <span class="hljs-string">&#x27;domain.com&#x27;</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> user = <span class="hljs-string">&#x27;admin&#x27;</span>;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--子窗口：(http://child.domain.com/b.html)--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-property">domain</span> = <span class="hljs-string">&#x27;domain.com&#x27;</span>;</span><br><span class="language-javascript">    <span class="hljs-comment">// 获取父窗口中变量</span></span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;get js data from parent ---&gt; &#x27;</span> + <span class="hljs-variable language_">window</span>.<span class="hljs-property">parent</span>.<span class="hljs-property">user</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--弊端：请看下面渲染加载优化--&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>nginx代理跨域</p></li><li><p>nodejs中间件代理跨域</p></li><li><p>后端在头部信息里面设置安全域名</p></li></ul><p>更多跨域的具体内容请看  <a href="https://segmentfault.com/a/1190000011145364">https://segmentfault.com/a/1190000011145364</a></p><h3 id="3-渲染优化"><a href="#3-渲染优化" class="headerlink" title="3.渲染优化"></a>3.渲染优化</h3><ul><li><p>禁止使用iframe（阻塞父文档onload事件）；</p><ul><li>iframe会阻塞主页面的Onload事件；</li><li>搜索引擎的检索程序无法解读这种页面，不利于SEO;</li><li>iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。</li><li>使用iframe之前需要考虑这两个缺点。如果需要使用iframe，最好是通过javascript动态给iframe添加src属性值，这样可以绕开以上两个问题。</li></ul></li><li><p>禁止使用gif图片实现loading效果（降低CPU消耗，提升渲染性能）；</p></li><li><p>使用CSS3代码代替JS动画（尽可能避免重绘重排以及回流）；</p></li><li><p>对于一些小图标，可以使用base64位编码，以减少网络请求。但不建议大图使用，比较耗费CPU；</p><ul><li>小图标优势在于：</li></ul><ol><li>减少HTTP请求；</li><li>避免文件跨域；</li><li>修改及时生效；</li></ol></li><li><p>页面头部的<style></style> 会阻塞页面；（因为 Renderer进程中 JS线程和渲染线程是互斥的）；</p></li><li><p>页面头部&lt;script</script> 会阻塞页面；（因为 Renderer进程中 JS线程和渲染线程是互斥的）；</p></li><li><p>页面中空的 href 和 src 会阻塞页面其他资源的加载 (阻塞下载进程)；</p></li><li><p>网页Gzip，CDN托管，data缓存 ，图片服务器；</p></li><li><p>前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数</p></li><li><p>用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。</p></li><li><p>当需要设置的样式很多时设置className而不是直接操作style。</p></li><li><p>少用全局变量、缓存DOM节点查找的结果。减少IO读取操作。</p></li><li><p>避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)。</p></li><li><p>图片预加载，将样式表放在顶部，将脚本放在底部  加上时间戳。</p></li><li><p>避免在页面的主体布局中使用table，table要等其中的内容完全下载之后才会显示出来，显示比div+css布局慢。</p></li><li><p>对普通的网站有一个统一的思路，就是尽量向前端优化、减少数据库操作、减少磁盘IO。</p><ul><li>向前端优化指的是，在不影响功能和体验的情况下，能在浏览器执行的不要在服务端执行，</li><li>能在缓存服务器上直接返回的不要到应用服务器，程序能直接取得的结果不要到外部取得，</li><li>本机内能取得的数据不要到远程取，内存能取到的不要到磁盘取，缓存中有的不要去数据库查询。</li><li>减少数据库操作指减少更新次数、缓存结果减少查询次数、将数据库执行的操作尽可能的让你的程序完成（例如join查询），</li><li>减少磁盘IO指尽量不使用文件系统作为缓存、减少读写文件次数等。程序优化永远要优化慢的部分，换语言是无法“优化”的。</li></ul></li></ul><h3 id="4-事件的各个阶段"><a href="#4-事件的各个阶段" class="headerlink" title="4.事件的各个阶段"></a>4.事件的各个阶段</h3><p>1：捕获阶段 —&gt; 2：目标阶段 —&gt; 3：冒泡阶段<br>document   —&gt; target目标 —-&gt; document</p><p>由此，addEventListener的第三个参数设置为true和false的区别已经非常清晰了：</p><p>true表示该元素在事件的“捕获阶段”（由外往内传递时）响应事件；</p><p>false表示该元素在事件的“冒泡阶段”（由内向外传递时）响应事件。</p><h3 id="5-let-var-const"><a href="#5-let-var-const" class="headerlink" title="5.let var const"></a>5.let var const</h3><ul><li><p>let 允许你声明一个作用域被限制在块级中的变量、语句或者表达式</p><ul><li>let绑定不受变量提升的约束，这意味着let声明不会被提升到当前</li><li>该变量处于从块开始到初始化处理的“暂存死区”。</li></ul></li><li><p>var 声明变量的作用域限制在其声明位置的上下文中，而非声明变量总是全局的</p><ul><li>由于变量声明（以及其他声明）总是在任意代码执行之前处理的，所以在代码中的任意位置声明变量总是等效于在代码开头声明</li></ul></li><li><p>const 声明创建一个值的只读引用 (即指针)</p><ul><li>这里就要介绍下 JS 常用类型</li></ul><ol><li>String、Number、Boolean、Array、Object、Null、Undefined</li><li>基本类型 有 Undefined、Null、Boolean、Number、String，保存在栈中；</li><li>复合类型 有 Array、Object ，保存在堆中；</li><li>基本数据当值发生改变时，那么其对应的指针也将发生改变，故造成 const申明基本数据类型时，</li><li>再将其值改变时，将会造成报错， 例如 const a &#x3D; 3 ; a &#x3D; 5 时 将会报错；</li><li>但是如果是复合类型时，如果只改变复合类型的其中某个Value项时， 将还是正常使用；</li></ol></li></ul><h3 id="6-箭头函数"><a href="#6-箭头函数" class="headerlink" title="6.箭头函数"></a>6.箭头函数</h3><blockquote><p>语法比函数表达式更短，并且不绑定自己的this，arguments，super或 new.target。这些函数表达式最适合用于非方法函数，并且它们不能用作构造函数。<br>这个是我本地的profile作参考</p></blockquote><h3 id="7-快速的让一个数组乱序"><a href="#7-快速的让一个数组乱序" class="headerlink" title="7.快速的让一个数组乱序"></a>7.快速的让一个数组乱序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>];<br>arr.<span class="hljs-title function_">sort</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() - <span class="hljs-number">0.5</span>;<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr);<br></code></pre></td></tr></table></figure><p>此处解释：（语言组织能力不足，请勿吐槽）</p><p><img src="https://sfault-image.b0.upaiyun.com/631/413/631413101-5a8f7bbc29deb_articlex"></p><p>首先： 当return 的值</p><pre><code class="hljs">小于 0 ，那么 a 会被排列到 b 之前；等于 0 ， a 和 b 的相对位置不变；大于 0 ， b 会被排列到 a 之前；</code></pre><p>这里你会 发现起始 的时候数组是正序排列，每当进行一次排列的时候， 都会先随机一个随机数（注意这里的每一次排列 指 每一个红框指一次排列， 共9次排列 ， 一次排列中可能存在多次比较）；</p><p>当一次排列的 随机数大于0.5 时 将会进行第二次比较， 当第二次随机数 仍然大于0.5 时 ，将会再 进行一次比较， 直到 随机数大于0.5 或者排列到第一位；</p><p>当一次排列的 随机数 小于0.5时 当前比较的两项 索引将不会改变 ，继续下一次 的排列；</p><h3 id="8-字体font-family"><a href="#8-字体font-family" class="headerlink" title="8.字体font-family"></a>8.字体font-family</h3><p>@ 宋体      SimSun<br>@ 黑体      SimHei<br>@ 微信雅黑   Microsoft Yahei<br>@ 微软正黑体 Microsoft JhengHei<br>@ 新宋体    NSimSun<br>@ 新细明体  MingLiU<br>@ 细明体    MingLiU<br>@ 标楷体    DFKai-SB<br>@ 仿宋     FangSong<br>@ 楷体     KaiTi<br>@ 仿宋_GB2312  FangSong_GB2312<br>@ 楷体_GB2312  KaiTi_GB2312<br>@<br>@ 说明：中文字体多数使用宋体、雅黑，英文用Helvetica</p><p>body { font-family: Microsoft Yahei,SimSun,Helvetica; } </p><h3 id="9-可能用到的meta标签"><a href="#9-可能用到的meta标签" class="headerlink" title="9.可能用到的meta标签"></a>9.可能用到的meta标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 仅针对IOS的Safari顶端状态条的样式（可选default/black/black-translucent ） --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;apple-mobile-web-app-status-bar-style&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;black&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- IOS中禁用将数字识别为电话号码/忽略Android平台中对邮箱地址的识别 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;format-detection&quot;</span><span class="hljs-attr">content</span>=<span class="hljs-string">&quot;telephone=no, email=no&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!--其他meta标签--&gt;</span><br><span class="hljs-comment">&lt;!-- 启用360浏览器的极速模式(webkit) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;renderer&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;webkit&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 避免IE使用兼容模式 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;HandheldFriendly&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 微软的老式浏览器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;MobileOptimized&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;320&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- uc强制竖屏 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;screen-orientation&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;portrait&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- QQ强制竖屏 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;x5-orientation&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;portrait&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- UC强制全屏 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;full-screen&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;yes&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- QQ强制全屏 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;x5-fullscreen&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- UC应用模式 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;browsermode&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;application&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- QQ应用模式 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;x5-page-mode&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- windows phone 点击无高光 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;msapplication-tap-highlight&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;no&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="10-消除transition闪屏"><a href="#10-消除transition闪屏" class="headerlink" title="10.消除transition闪屏"></a>10.消除transition闪屏</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.css</span> &#123;<br>-webkit-<span class="hljs-attribute">transform-style</span>: preserve-<span class="hljs-number">3</span>d;<br>-webkit-<span class="hljs-attribute">backface-visibility</span>: hidden;<br>-webkit-<span class="hljs-attribute">perspective</span>: <span class="hljs-number">1000</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p> 过渡动画（在没有启动硬件加速的情况下）会出现抖动的现象， 以上的 解决方案只是改变 视角 来启动硬件加速的一种方式；启动硬件加速的 另外一种方式： </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.css</span> &#123;<br>-webkit-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate3d</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>-moz-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate3d</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>-ms-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate3d</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate3d</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>启动硬件加速:最常用的方式：translate3d、translateZ、transform</p><p>opacity属性&#x2F;过渡动画（需要动画执行的过程中才会创建合成层，动画没有开始或结束后元素还会回到之前的状态）</p><p>will-chang属性（这个比较偏僻），一般配合opacity与translate使用（而且经测试，除了上述可以引发硬件加速的属性外，其它属性并不会变成复合层），</p><p>弊端： 硬件加速会导致 CPU性能占用量过大，电池电量消耗加大 ；因此 尽量避免泛滥使用硬件加速。</p><h3 id="11-android-4-x-bug"><a href="#11-android-4-x-bug" class="headerlink" title="11.android 4.x bug"></a>11.android 4.x bug</h3><p>1.三星 Galaxy S4中自带浏览器不支持border-radius缩写<br>2.同时设置border-radius和背景色的时候，背景色会溢出到圆角以外部分<br>3.部分手机(如三星)，a链接支持鼠标:visited事件，也就是说链接访问后文字变为紫色<br>4.android无法同时播放多音频audio<br>5.oppo 的border-radius 会失效</p><h3 id="12-JS-判断设备来源"><a href="#12-JS-判断设备来源" class="headerlink" title="12.JS 判断设备来源"></a>12.JS 判断设备来源</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">deviceType</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> ua = navigator.<span class="hljs-property">userAgent</span>;<br>    <span class="hljs-keyword">var</span> agent = [<span class="hljs-string">&quot;Android&quot;</span>, <span class="hljs-string">&quot;iPhone&quot;</span>, <span class="hljs-string">&quot;SymbianOS&quot;</span>, <span class="hljs-string">&quot;Windows Phone&quot;</span>, <span class="hljs-string">&quot;iPad&quot;</span>, <span class="hljs-string">&quot;iPod&quot;</span>];    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>; i&lt;len,len = agent.<span class="hljs-property">length</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(ua.<span class="hljs-title function_">indexOf</span>(agent[i])&gt;<span class="hljs-number">0</span>)&#123;         <br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-title function_">deviceType</span>();<br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">deviceType</span>();<br>&#125;)<br><span class="hljs-comment">//微信的 有些不太一样</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">isWeixin</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> ua = navigator.<span class="hljs-property">userAgent</span>.<span class="hljs-title function_">toLowerCase</span>();<br>    <span class="hljs-keyword">if</span>(ua.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/MicroMessenger/i</span>)==<span class="hljs-string">&#x27;micromessenger&#x27;</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="13-audio元素和video元素在ios和andriod中无法自动播放"><a href="#13-audio元素和video元素在ios和andriod中无法自动播放" class="headerlink" title="13.audio元素和video元素在ios和andriod中无法自动播放"></a>13.audio元素和video元素在ios和andriod中无法自动播放</h3><p>原因： 因为各大浏览器都为了节省流量，做出了优化，在用户没有行为动作时（交互）不予许自动播放；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//音频，写法一</span><br>&lt;audio src=<span class="hljs-string">&quot;music/bg.mp3&quot;</span> autoplay loop controls&gt;你的浏览器还不支持哦&lt;/audio&gt;<br><span class="hljs-comment">//音频，写法二</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">controls</span>=<span class="hljs-string">&quot;controls&quot;</span>&gt;</span> </span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;music/bg.ogg&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;audio/ogg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;music/bg.mp3&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;audio/mpeg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span></span><br><span class="language-xml">    优先播放音乐bg.ogg，不支持在播放bg.mp3</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span></span><br><span class="hljs-comment">//JS绑定自动播放（操作window时，播放音乐）</span><br>$(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">one</span>(<span class="hljs-string">&#x27;touchstart&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    music.<span class="hljs-title function_">play</span>();<br>&#125;)<br><span class="hljs-comment">//微信下兼容处理</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;WeixinJSBridgeReady&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    music.<span class="hljs-title function_">play</span>();<br>&#125;, <span class="hljs-literal">false</span>);<br><span class="hljs-comment">//小结</span><br><span class="hljs-comment">//1.audio元素的autoplay属性在IOS及Android上无法使用，在PC端正常；</span><br><span class="hljs-comment">//2.audio元素没有设置controls时，在IOS及Android会占据空间大小，而在PC端Chrome是不会占据任何空间；</span><br><span class="hljs-comment">//3.注意不要遗漏微信的兼容处理需要引用微信JS；</span><br></code></pre></td></tr></table></figure><h3 id="14-css实现单行文本溢出显示-…"><a href="#14-css实现单行文本溢出显示-…" class="headerlink" title="14.css实现单行文本溢出显示 …"></a>14.css实现单行文本溢出显示 …</h3><p>直接上效果：相对于多行文本溢出做处理， 单行要简单多，且更容易理解。</p><p><img src="https://sfault-image.b0.upaiyun.com/331/369/3313696839-5a8f7bb9864cc_articlex"></p><p>实现方法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">overflow</span>: hidden;<br><span class="hljs-attribute">text-overflow</span>:ellipsis;<br><span class="hljs-attribute">white-space</span>: nowrap;<br>//当然还需要加宽度<span class="hljs-attribute">width</span>属来兼容部分浏览。<br></code></pre></td></tr></table></figure><h3 id="15-实现多行文本溢出显示…"><a href="#15-实现多行文本溢出显示…" class="headerlink" title="15.实现多行文本溢出显示…"></a>15.实现多行文本溢出显示…</h3><p>效果：</p><p><img src="https://sfault-image.b0.upaiyun.com/382/035/3820353650-5a8f7bb98a123_articlex"></p><p>实现方法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">display</span>: -webkit-box;<br>-webkit-box-orient: vertical;<br>-webkit-line-clamp: <span class="hljs-number">3</span>;<br><span class="hljs-attribute">overflow</span>: hidden;<br></code></pre></td></tr></table></figure><p>适用范围：</p><p>因使用了WebKit的CSS扩展属性，该方法适用于WebKit浏览器及移动端；</p><p>注：</p><ol><li>-webkit-line-clamp用来限制在一个块元素显示的文本的行数。 为了实现该效果，它需要组合其他的WebKit属性。常见结合属性：</li><li>display: -webkit-box; 必须结合的属性 ，将对象作为弹性伸缩盒子模型显示 。</li><li>-webkit-box-orient 必须结合的属性 ，设置或检索伸缩盒对象的子元素的排列方式 。</li></ol><p>如果你觉着这样还不够美观， 那么就接着往下看：</p><p>效果：</p><p><img src="https://sfault-image.b0.upaiyun.com/203/987/2039871283-5a8f7bb9883e8_articlex"></p><p>这样 是不是你想要的呢？</p><p>实现方法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">position</span>: relative;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">20px</span>;<br>    <span class="hljs-attribute">max-height</span>: <span class="hljs-number">40px</span>;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:after</span> &#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;...&quot;</span>; <span class="hljs-attribute">position</span>: absolute; <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>; <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>; <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">40px</span>;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-webkit-linear-gradient</span>(left, transparent, <span class="hljs-number">#fff</span> <span class="hljs-number">55%</span>);<br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-o-linear-gradient</span>(right, transparent, <span class="hljs-number">#fff</span> <span class="hljs-number">55%</span>);<br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-moz-linear-gradient</span>(right, transparent, <span class="hljs-number">#fff</span> <span class="hljs-number">55%</span>);<br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to right, transparent, <span class="hljs-number">#fff</span> <span class="hljs-number">55%</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>不要只顾着吃，要注意胃口，此方法有个弊端 那就是 【未超出行的情况下也会出现省略号】 ，这样会不会很挫！！！ 没办法，只能结合JS 进行优化该方法了。</p></blockquote><p>注：</p><ol><li>将height设置为line-height的整数倍，防止超出的文字露出。</li><li>给p::after添加渐变背景可避免文字只显示一半。</li><li>由于ie6-7不显示content内容，所以要添加标签兼容ie6-7（如：<span>…<span/>）；兼容ie8需要将::after替换成:after。</li></ol><h3 id="16-让图文不可复制"><a href="#16-让图文不可复制" class="headerlink" title="16.让图文不可复制"></a>16.让图文不可复制</h3><p>这点应该大家 都很熟悉了， 某些时候【你懂的】为了快捷搜索答案，可是打死也不让你复制</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">-webkit-user-select: none; <br>-ms-user-select: none;<br>-moz-user-select: none;<br>-khtml-user-select: none;<br>user-select: none;<br></code></pre></td></tr></table></figure><p>那有些网页为了尊重原创，复制的文本 都会被加上一段来源说明，是如何做到的呢？问的好！ 等的就是你这个问题 -_- 。</p><p>大致思路：</p><ol><li>答案区域监听copy事件，并阻止这个事件的默认行为。</li><li>获取选中的内容（window.getSelection()）加上版权信息，然后设置到剪切板（clipboarddata.setData()）。</li></ol><h3 id="17-盒子垂直水平居中"><a href="#17-盒子垂直水平居中" class="headerlink" title="17.盒子垂直水平居中"></a>17.盒子垂直水平居中</h3><p>这个问题好像面试必问的吔！反正我是必问的，哈哈！！！ 其实无关多少种实现思路，只要你能实现就可以！</p><p>提供4种方法</p><ol><li><p>定位 盒子宽高已知， position: absolute; left: 50%; top: 50%; margin-left:-自身一半宽度; margin-top: -自身一半高度;</p></li><li><p>table-cell布局 父级 display: table-cell; vertical-align: middle;  子级 margin: 0 auto;</p></li><li><p>定位 + transform ; 适用于 子盒子 宽高不定时； （这里是本人常用方法）</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">position</span>: relative / absolute;<br><span class="hljs-comment">/*top和left偏移各为50%*/</span><br><span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br><span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br><span class="hljs-comment">/*translate(-50%,-50%) 偏移自身的宽和高的-50%*/</span><br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);<br><span class="hljs-comment">/*注意这里启动了3D硬件加速哦 会增加耗电量的 （至于何是3D加速 请看浏览器进程与线程篇）*/</span><br></code></pre></td></tr></table></figure></li><li><p>flex 布局</p><ul><li>父级： <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*flex 布局*/</span><br><span class="hljs-attribute">display</span>: flex;<br><span class="hljs-comment">/*实现垂直居中*/</span><br><span class="hljs-attribute">align-items</span>: center;<br><span class="hljs-comment">/*实现水平居中*/</span><br><span class="hljs-attribute">justify-content</span>: center;<br></code></pre></td></tr></table></figure></li></ul></li></ol><p>再加一种水平方向上居中 ：<code>margin-left : 50% ; transform: translateX(-50%);</code></p><h3 id="18-改变placeholder的字体颜色大小"><a href="#18-改变placeholder的字体颜色大小" class="headerlink" title="18.改变placeholder的字体颜色大小"></a>18.改变placeholder的字体颜色大小</h3><p>其实这个方法也就在PC端可以，真机上屁用都没有，当时我就哭了。 但 还是贴出来吧</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">input</span>::-webkit-input-placeholder &#123; <br>    <span class="hljs-comment">/* WebKit browsers */</span> <br>    <span class="hljs-attribute">font-size</span>:<span class="hljs-number">14px</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span>;<br>&#125; <br><span class="hljs-selector-tag">input</span>::-moz-placeholder &#123; <br>    <span class="hljs-comment">/* Mozilla Firefox 19+ */</span> <br>    <span class="hljs-attribute">font-size</span>:<span class="hljs-number">14px</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span>;<br>&#125; <br><span class="hljs-selector-tag">input</span>:-ms-input-placeholder &#123; <br>    <span class="hljs-comment">/* Internet Explorer 10+ */</span> <br>    <span class="hljs-attribute">font-size</span>:<span class="hljs-number">14px</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="19-最快捷的数组求最大值"><a href="#19-最快捷的数组求最大值" class="headerlink" title="19.最快捷的数组求最大值"></a>19.最快捷的数组求最大值</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">var</span> arr = <span class="hljs-selector-attr">[ 1,5,1,7,5,9]</span>;<br>Math<span class="hljs-selector-class">.max</span>(..<span class="hljs-selector-class">.arr</span>)  // <span class="hljs-number">9</span> <br></code></pre></td></tr></table></figure><h3 id="20-更短的数组去重写法"><a href="#20-更短的数组去重写法" class="headerlink" title="20.更短的数组去重写法"></a>20.更短的数组去重写法</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[...new Set([2,<span class="hljs-string">&quot;12&quot;</span>,2,12,1,2,1,6,12,13,6]</span>)]<br>// <span class="hljs-selector-attr">[2, <span class="hljs-string">&quot;12&quot;</span>, 12, 1, 6, 13]</span><br></code></pre></td></tr></table></figure><h3 id="21-vue-父子组件嵌套时，组件内部的各个生命周期钩子触发先后顺序"><a href="#21-vue-父子组件嵌套时，组件内部的各个生命周期钩子触发先后顺序" class="headerlink" title="21.vue 父子组件嵌套时，组件内部的各个生命周期钩子触发先后顺序"></a>21.vue 父子组件嵌套时，组件内部的各个生命周期钩子触发先后顺序</h3><p>首先 我们可以把 子组件当做function函数来看待，当父组件 import 子组件的时候， 就当是声明了 并加载了这个函数，在调用的时候才会去执行这个函数（子组件）。那么父子组件中的各个声明周期钩子触发的先后顺序是怎样的呢？如下图：<br><img src="https://sfault-image.b0.upaiyun.com/225/705/225705772-5a8f7bbc255fe_articlex"><br>下图带222 的 是为子组件，所以一次顺序是为 先创建父组件，然后才穿件子组件，当子组件创建完成并且实体dom挂载完成后父组件才挂载完成</p><p>注：资源来源于<a href="https://segmentfault.com/a/1190000013331105?utm_source=index-hottest#articleHeader15">https://segmentfault.com/a/1190000013331105?utm_source=index-hottest#articleHeader15</a></p>]]></content>
    
    
    <categories>
      
      <category>转载</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Python五大标准数据类型</title>
    <link href="/2018/02/23/2018-02-23-python-%E6%A0%87%E5%87%86%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2018/02/23/2018-02-23-python-%E6%A0%87%E5%87%86%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/07/02/5d1aae89dbe8372668.jpg" alt="python"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">a,b,c,d = <span class="hljs-number">1</span>,<span class="hljs-number">2.0</span>,<span class="hljs-number">3.00</span>,<span class="hljs-string">&quot;HHHH&quot;</span>;<br><span class="hljs-built_in">print</span>(a);<br><span class="hljs-built_in">print</span>(b); <br><span class="hljs-built_in">print</span>(c);<br><span class="hljs-built_in">print</span>(d);<br>lists = [<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>];<br><span class="hljs-built_in">print</span>(lists);<br>tuples = (<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>);<br><span class="hljs-built_in">print</span>(tuples);<br>dictionary = &#123;<span class="hljs-number">1</span>:<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">2</span>:<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-number">3</span>:<span class="hljs-string">&#x27;c&#x27;</span>&#125;;<br><span class="hljs-built_in">print</span>(dictionary);<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 99乘法表</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>):<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i,<span class="hljs-number">10</span>):<br><span class="hljs-built_in">print</span>(i,<span class="hljs-string">&quot;*&quot;</span>,j,<span class="hljs-string">&quot;=&quot;</span>,i*j,end=<span class="hljs-string">&#x27;\t&#x27;</span>);<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>selenium资料馆库</title>
    <link href="/2018/02/12/2018-02-12-js-selenium%E8%B5%84%E6%96%99%E5%BA%93/"/>
    <url>/2018/02/12/2018-02-12-js-selenium%E8%B5%84%E6%96%99%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<p>今天把手头有的一些关于selenium测试的资源整理了一下，分享出来。</p><h3 id="1-所有版本chrome下载"><a href="#1-所有版本chrome下载" class="headerlink" title="1.所有版本chrome下载"></a>1.所有版本chrome下载</h3><p>是不是很难找到老版本的chrome？博主收集了几个下载chrome老版本的网站，其中哪个下载的是原版的就不得而知了。</p><p><a href="http://www.slimjet.com/chrome/google-chrome-old-version.php">http://www.slimjet.com/chrome/google-chrome-old-version.php</a></p><p><a href="http://google_chrome.en.downloadastro.com/old_versions/">http://google_chrome.en.downloadastro.com/old_versions/</a></p><p><a href="http://filehippo.com/zh/download_google_chrome/">http://filehippo.com/zh/download_google_chrome/</a></p><p><a href="http://www.chromedownloads.net/">http://www.chromedownloads.net/</a></p><p>下面这个网址大多是Mac的多些，Windows下的很缺，但是有好多其他的软件下载，可以去看看：<a href="http://google-chrome.en.uptodown.com/mac/old">uptodown</a></p><h3 id="2-所有版本firefox下载"><a href="#2-所有版本firefox下载" class="headerlink" title="2. 所有版本firefox下载"></a>2. 所有版本firefox下载</h3><p>火狐相对比较容易找，这里也贴出来其ftp链接：</p><p><a href="http://ftp.mozilla.org/pub/firefox/releases/">http://ftp.mozilla.org/pub/firefox/releases/</a></p><p>至于火狐的版本与selenium的对应关系，确实没有这方面合适的资料，不过建议selenium 2.53以及以下的朋友，用47以下的火狐。</p><h3 id="3-所有版本chromedriver下载"><a href="#3-所有版本chromedriver下载" class="headerlink" title="3. 所有版本chromedriver下载"></a>3. 所有版本chromedriver下载</h3><p>chromedriver的版本也不容易找：</p><p><a href="http://chromedriver.storage.googleapis.com/index.html">http://chromedriver.storage.googleapis.com/index.html</a></p><p>其中各版本下的notes.txt中说明了该版本以及以前一些版本支持的chrome浏览器版本，不过，老司机早就给你整理了一份一目了然的表格：</p><p>selenium之 chromedriver与chrome版本映射表</p><p>这样，该下载哪个版本的chrome与chromedriver是不是就很清楚了。</p><h3 id="4-所有版本selenium以及IEDriverServer下载"><a href="#4-所有版本selenium以及IEDriverServer下载" class="headerlink" title="4. 所有版本selenium以及IEDriverServer下载"></a>4. 所有版本selenium以及IEDriverServer下载</h3><p>最后，当然还有selenium和IEDriverServer，Python版的selenium直接pip就可以了，下面的链接里主要是Java版的和.NET版的：</p><p><a href="http://selenium-release.storage.googleapis.com/index.html">http://selenium-release.storage.googleapis.com/index.html</a></p><p>好吧，暂时就这些吧。如果你有更好地资源站，也请告知下博主，资源共享，共同进步。</p><p>博文转自：<a href="http://blog.csdn.net/huilan_same/article/details/52615123">huilan_same</a></p>]]></content>
    
    
    <categories>
      
      <category>自动化测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Selenium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DataTables与requireJs冲突的解决</title>
    <link href="/2018/01/29/2018-01-29-js-datatables/"/>
    <url>/2018/01/29/2018-01-29-js-datatables/</url>
    
    <content type="html"><![CDATA[<p><strong>DataTables与requireJs冲突的解决</strong>当我在项目中同时使用requireJs和DataTablesJs的时候，提示了一个错误**$(…).DataTable is not a function**，我通过尝试修改源码并解决了这个问题。具体操作步骤如下:</p><p>先看datatables.js源码总体的一个结构:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span>(<span class="hljs-params"> factory </span>) &#123;<span class="hljs-comment">//......&#125;</span><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-string">&quot;use strict&quot;</span>;<br>       <span class="hljs-comment">//.......</span><br>       <span class="hljs-keyword">return</span> $.fn.<span class="hljs-property">dataTable</span>;<br>&#125;));  <br></code></pre></td></tr></table></figure><p>修改为以下两种任意一种形式都可以（一本机测试为准）:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span>(<span class="hljs-params"> factory </span>) &#123;<span class="hljs-comment">//......&#125;</span><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params"> $ </span>) &#123;<br>      <span class="hljs-string">&quot;use strict&quot;</span>;<br>      <span class="hljs-comment">//.......</span><br>      <span class="hljs-keyword">return</span> $.fn.<span class="hljs-property">dataTable</span>;<br>&#125;($));  <br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span>(<span class="hljs-params"> factory </span>) &#123;<span class="hljs-comment">//......&#125;</span><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params"> </span>) &#123;<br>      <span class="hljs-string">&quot;use strict&quot;</span>;<br>      <span class="hljs-comment">//.......</span><br>      <span class="hljs-keyword">return</span> $.fn.<span class="hljs-property">dataTable</span>;<br>&#125;());<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DataTable</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu16.04TLS sublime不能输入中文</title>
    <link href="/2017/09/19/2017-9-19-ubuntu-sublime/"/>
    <url>/2017/09/19/2017-9-19-ubuntu-sublime/</url>
    
    <content type="html"><![CDATA[<p>ubuntu 16.0.4使用sublime不能输入中文</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ul><li>从github上下载下面这个玩意</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/lyfeyaj/</span>sublime-text-imfix.git<br><br></code></pre></td></tr></table></figure><ul><li>进入目录</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> sublime<span class="hljs-literal">-text-imfix</span>/<br></code></pre></td></tr></table></figure><ul><li>像这样把文件拷到对应目录下</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ sudo cp .<span class="hljs-regexp">/lib/</span>libsublime-imfix.so <span class="hljs-regexp">/opt/</span>sublime_text/<br>$ sudo cp .<span class="hljs-regexp">/src/</span>subl <span class="hljs-regexp">/usr/</span>bin/<br></code></pre></td></tr></table></figure><ul><li>编写一个sh脚本启动sublime</li></ul><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>vim sublime<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so subl<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC乱码</title>
    <link href="/2017/08/22/2017-8-22-SpringMVC%E4%B9%B1%E7%A0%81/"/>
    <url>/2017/08/22/2017-8-22-SpringMVC%E4%B9%B1%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>解决SpringMvc的POST和GET乱码问题</p><h3 id="POST乱码"><a href="#POST乱码" class="headerlink" title="POST乱码"></a>POST乱码</h3><p>在web.xml配置SpringMVC提供的Filter就可以解决POST乱码了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">async-supported</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">async-supported</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="GET乱码"><a href="#GET乱码" class="headerlink" title="GET乱码"></a>GET乱码</h3><p>Filter只针对POST请求的，tomacat对GET和POST请求处理方式是不同的，要处理针对GET请求的编码问题，则需要改tomcat的server.xml配置文件，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">Connector</span> <span class="hljs-attr">connectionTimeout</span>=<span class="hljs-string">&quot;20000&quot;</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;8080&quot;</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">&quot;HTTP/1.1&quot;</span> <span class="hljs-attr">redirectPort</span>=<span class="hljs-string">&quot;8443&quot;</span>/&gt;</span><br><br></code></pre></td></tr></table></figure><p>注意:如果你用的是MyEclipse,到tomcat的根目录下修改server.xml,运行即可生效,如果你是eclipse需要在eclipse中修改server.xml才能生效</p><p><img src="http://images.cnitblog.com/blog/205051/201412/222012348121043.png" alt="server"></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Struts2和Spring集成后关于struts.xml中的class如何写的问题</title>
    <link href="/2017/08/22/2017-8-22-Struts2-Spring%E9%9B%86%E6%88%90%E5%90%8E%E5%85%B3%E4%BA%8Estruts.xml%E4%B8%AD%E7%9A%84class%E5%A6%82%E4%BD%95%E5%86%99%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2017/08/22/2017-8-22-Struts2-Spring%E9%9B%86%E6%88%90%E5%90%8E%E5%85%B3%E4%BA%8Estruts.xml%E4%B8%AD%E7%9A%84class%E5%A6%82%E4%BD%95%E5%86%99%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>Sturts整合Spring后，想让Spring管理Struts的Action，在struts.xml中配置Action的class属性时使用bean的id来指定Action的类路径</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li>在applicationContext.xml中注册TeamAction,id我们写成TeamAction在这里写成大写的 ‘T’</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;TeamAction&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Action.TeamAction&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;tm&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;TeamMapper&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bts&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;BDIPUtils&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>在struts.xml中配置,配置的时候class写TeamAction即可从spring容器中获取TeamAction对象</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;TeamInfo&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;TeamAction&quot;</span>&gt;</span><br>    ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><p>由于Action根据class&#x3D;”TeamAction”去spring容器中寻找对应的bean这一特性是由<strong>struts2-spring-plugin-2.3.1.2.jar</strong>提供的,没有引入它就会报这样的错误！</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">Unable</span> <span class="hljs-string">to load configuration. - action - file:/E:/apache-tomcat-7.0.81/webapps/4DAnalog/WEB-INF/classes/struts.xml:6:46</span><br><span class="hljs-attr">at</span> <span class="hljs-string">org.apache.struts2.dispatcher.Dispatcher.init(Dispatcher.java:428)</span><br><span class="hljs-attr">at</span> <span class="hljs-string">org.apache.struts2.dispatcher.ng.InitOperations.initDispatcher(InitOperations.java:69)</span><br><span class="hljs-attr">at</span> <span class="hljs-string">org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter.init(StrutsPrepareAndExecuteFilter.java:51)</span><br><span class="hljs-attr">at</span> <span class="hljs-string">org.apache.catalina.core.ApplicationFilterConfig.initFilter(ApplicationFilterConfig.java:279)</span><br><span class="hljs-attr">at</span> <span class="hljs-string">org.apache.catalina.core.ApplicationFilterConfig.getFilter(ApplicationFilterConfig.java:260)</span><br><span class="hljs-attr">at</span> <span class="hljs-string">org.apache.catalina.core.ApplicationFilterConfig.&lt;init&gt;(ApplicationFilterConfig.java:105)</span><br><span class="hljs-attr">at</span> <span class="hljs-string">org.apache.catalina.core.StandardContext.filterStart(StandardContext.java:4950)</span><br><span class="hljs-attr">at</span> <span class="hljs-string">org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5652)</span><br><span class="hljs-attr">at</span> <span class="hljs-string">org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145)</span><br><span class="hljs-attr">at</span> <span class="hljs-string">org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:1009)</span><br><span class="hljs-attr">at</span> <span class="hljs-string">org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:985)</span><br><span class="hljs-attr">at</span> <span class="hljs-string">org.apache.catalina.core.StandardHost.addChild(StandardHost.java:652)</span><br><span class="hljs-attr">at</span> <span class="hljs-string">org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1296)</span><br><span class="hljs-attr">at</span> <span class="hljs-string">org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:2038)</span><br><span class="hljs-attr">at</span> <span class="hljs-string">java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)</span><br><span class="hljs-attr">at</span> <span class="hljs-string">java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)</span><br><span class="hljs-attr">at</span> <span class="hljs-string">java.util.concurrent.FutureTask.run(FutureTask.java:166)</span><br><span class="hljs-attr">at</span> <span class="hljs-string">java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)</span><br><span class="hljs-attr">at</span> <span class="hljs-string">java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)</span><br><span class="hljs-attr">at</span> <span class="hljs-string">java.lang.Thread.run(Thread.java:722)</span><br><span class="hljs-attr">Caused</span> <span class="hljs-string">by: Unable to load configuration. - action - file:/E:/apache-tomcat-7.0.81/webapps/4DAnalog/WEB-INF/classes/struts.xml:6:46</span><br><span class="hljs-attr">at</span> <span class="hljs-string">com.opensymphony.xwork2.config.ConfigurationManager.getConfiguration(ConfigurationManager.java:69)</span><br><span class="hljs-attr">at</span> <span class="hljs-string">org.apache.struts2.dispatcher.Dispatcher.init_PreloadConfiguration(Dispatcher.java:371)</span><br><span class="hljs-attr">at</span> <span class="hljs-string">org.apache.struts2.dispatcher.Dispatcher.init(Dispatcher.java:415)</span><br><span class="hljs-attr">...</span> <span class="hljs-string">19 more</span><br><span class="hljs-attr">Caused</span> <span class="hljs-string">by: Action class [TeamAction] not found - action - file:/E:/apache-tomcat-7.0.81/webapps/4DAnalog/WEB-INF/classes/struts.xml:6:46</span><br><span class="hljs-attr">at</span> <span class="hljs-string">com.opensymphony.xwork2.config.providers.XmlConfigurationProvider.verifyAction(XmlConfigurationProvider.java:420)</span><br><span class="hljs-attr">at</span> <span class="hljs-string">com.opensymphony.xwork2.config.providers.XmlConfigurationProvider.addAction(XmlConfigurationProvider.java:365)</span><br><span class="hljs-attr">at</span> <span class="hljs-string">com.opensymphony.xwork2.config.providers.XmlConfigurationProvider.addPackage(XmlConfigurationProvider.java:479)</span><br><span class="hljs-attr">at</span> <span class="hljs-string">com.opensymphony.xwork2.config.providers.XmlConfigurationProvider.loadPackages(XmlConfigurationProvider.java:275)</span><br><span class="hljs-attr">at</span> <span class="hljs-string">org.apache.struts2.config.StrutsXmlConfigurationProvider.loadPackages(StrutsXmlConfigurationProvider.java:111)</span><br><span class="hljs-attr">at</span> <span class="hljs-string">com.opensymphony.xwork2.config.impl.DefaultConfiguration.reloadContainer(DefaultConfiguration.java:204)</span><br><span class="hljs-attr">at</span> <span class="hljs-string">com.opensymphony.xwork2.config.ConfigurationManager.getConfiguration(ConfigurationManager.java:66)</span><br><span class="hljs-attr">...</span> <span class="hljs-string">21 more</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Struts2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HDFS and YARN</title>
    <link href="/2017/08/21/2017-8-21-hadoop-HDFS%E5%92%8CYARN/"/>
    <url>/2017/08/21/2017-8-21-hadoop-HDFS%E5%92%8CYARN/</url>
    
    <content type="html"><![CDATA[<p>本文主要说明HDFS和MapReduce两门技术的入门使用.因为MapReduce太长,后面就简称MR,我们到<a href="http://hadoop.apache.org/releases.html">官网</a>下载hadoop-2.4.1.tar.gz,并解压,进入到hadoop-2.4.1&#x2F;etc&#x2F;hadoop,分别配置以下几个文件</p><ul><li>hadoop-env.sh</li><li>core-site.xml</li><li>hdfs-site.xml</li><li>mapred-site.xml.template(重命名为mapred-site.xml)</li><li>yarn-site.xml</li></ul><h3 id="配置-hadoop-env-sh"><a href="#配置-hadoop-env-sh" class="headerlink" title="配置 hadoop-env.sh"></a>配置 hadoop-env.sh</h3><p>需要到hadoop-env.sh中配置Java环境,值得注意的是在hadoop-env.sh文件中使用的变量名不会生效,我们在这里写死它,查询Java存放路径</p><blockquote><p>ehco $JAVA_HOME</p></blockquote><p><img src="https://i.loli.net/2019/06/30/5d18567363a5f26626.jpg" alt="java"></p><p><img src="https://i.loli.net/2019/06/30/5d185674e1eac90408.jpg"></p><h3 id="配置-core-site-xml"><a href="#配置-core-site-xml" class="headerlink" title="配置 core-site.xml"></a>配置 core-site.xml</h3><ol><li>fs.defaultFS: 指定HADOOP所使用的文件系统访问的URI</li><li>hadoop.tmp.dir: 指定hadoop运行时产生文件的存储目录</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fs.defaultFS<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdfs://zyh:9000/<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.tmp.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/media/zyh/software/hadoop-2.4.1/data/<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里hdfs:&#x2F;&#x2F;zyh:9000&#x2F;中的zyh相当于localhost,因为我在&#x2F;etc&#x2F;hosts文件中修改了</p><p><img src="https://i.loli.net/2019/06/30/5d1856759d07a87559.jpg"></p><h3 id="配置-hdfs-site-xml"><a href="#配置-hdfs-site-xml" class="headerlink" title="配置 hdfs-site.xml"></a>配置 hdfs-site.xml</h3><ol><li>dfs.replication: 指定HDFS切块(blk)的副本数量</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.replication<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="配置-mapred-site-xml"><a href="#配置-mapred-site-xml" class="headerlink" title="配置 mapred-site.xml"></a>配置 mapred-site.xml</h3><ol><li>mapreduce.framework.name:指定MR的运行的资源由yarn分配</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.framework.name<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>yarn<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="配置-yarn-site-xml"><a href="#配置-yarn-site-xml" class="headerlink" title="配置 yarn-site.xml"></a>配置 yarn-site.xml</h3><ol><li>yarn.resourcemanager.hostname: 指定YARN的ResourceManager的地址,其实就是我本机zyh(127.0.0.1)</li><li>yarn.nodemanager.aux-services: reducer获取数据的方式</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>zyh<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>mapreduce_shuffle<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="将hadoop添加到环境变量"><a href="#将hadoop添加到环境变量" class="headerlink" title="将hadoop添加到环境变量"></a>将hadoop添加到环境变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">vim /etc/proflie</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">export</span> JAVA_HOME=/usr/java/jdk1.6.0_45</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">export</span> HADOOP_HOME=/media/zyh/software/software <span class="hljs-keyword">for</span> linux/hadoop-2.4.1</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$JAVA_HOME</span>/bin:<span class="hljs-variable">$HADOOP_HOME</span>/bin:<span class="hljs-variable">$HADOOP_HOME</span>/sbin</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">source</span> /etc/profile</span><br></code></pre></td></tr></table></figure><p>这个是我本地的profile作参考</p><p><img src="https://i.loli.net/2019/06/30/5d18567686ce084291.jpg" alt="hadoop添加到环境变量"></p><h3 id="初始化namenode（又叫格式化namenode）"><a href="#初始化namenode（又叫格式化namenode）" class="headerlink" title="初始化namenode（又叫格式化namenode）"></a>初始化namenode（又叫格式化namenode）</h3><blockquote><p>$ hdfs namenode -format (hadoop namenode -format)</p></blockquote><p><img src="https://i.loli.net/2019/06/30/5d18567a2fe3a45964.jpg" alt="初始化namenode"></p><p>弹出一大片log,英语很nice可以稍微看看,不好的可以键入命令<code>echo $?</code>来校验上一个操作是否正确,如果是0就是正确的</p><h2 id="启动hadoop"><a href="#启动hadoop" class="headerlink" title="启动hadoop"></a>启动hadoop</h2><p>如果你格式化namenode已成功,就可以运行hadoop了！在<strong>hadoop-2.4.1&#x2F;sbin</strong>目录下面,hadoop为我们提供了很多命令</p><ol><li>start-all.sh : 启动dfs和yarn</li><li>start-dfs.sh : 启动dfs</li><li>start-yarn.sh : 启动yarn</li></ol><p><img src="https://i.loli.net/2019/06/30/5d18567b17a6e33029.jpg"></p><p>作为入门的新手,我们当然是一步一步启动,先启动HDFS,再启动YARN.并观察启动后的运行状态</p><h3 id="启动HDFS"><a href="#启动HDFS" class="headerlink" title="启动HDFS"></a>启动HDFS</h3><blockquote><p>$ sbin&#x2F;start-dfs.sh</p></blockquote><p>启动报错,如果说本地ssh拒绝访问,那么我们需要安装openssh-server,如果没有报错请无视！</p><p><img src="https://i.loli.net/2019/06/30/5d18567e4b37e92668.jpg" alt="报错"></p><p>安装后再次键入命令.HDFS会提示会让我们输入很多次密码并确认,因为部署的是分布式系统,尽管我们只使用了一台电脑,但是HDSF不知道,他会使用SSH去访问我们远程的服务器(本例中远程服务器就是本机啦！)之后它会启动一系列进程,这些进程分别是:</p><ol><li>NameNode</li><li>DataNode</li><li>SecondaryNameNode</li></ol><p><img src="https://i.loli.net/2019/06/30/5d18567fd7f1683994.jpg" alt="启动HDFS"></p><h3 id="启动YARN"><a href="#启动YARN" class="headerlink" title="启动YARN"></a>启动YARN</h3><blockquote><p>$ sbin&#x2F;start-yarn.sh</p></blockquote><p>yarn也是一样的一路yes并输入密码即可,yarn会先后开启两个进程,他们分别是</p><ol><li>ResourceManager</li><li>NodeManager</li></ol><p><img src="https://i.loli.net/2019/06/30/5d185682ac28195281.jpg" alt="启动YARN"></p><h3 id="查看启动进程的状态"><a href="#查看启动进程的状态" class="headerlink" title="查看启动进程的状态"></a>查看启动进程的状态</h3><blockquote><p>$ jps</p></blockquote><p><img src="https://i.loli.net/2019/06/30/5d184751aabf122988.jpg" alt="查看启动状态"></p><h2 id="使用HDFS"><a href="#使用HDFS" class="headerlink" title="使用HDFS"></a>使用HDFS</h2><p>打开网址<a href="http://zyh:50070/">http://zyh:50070</a> （HDFS管理界面）,在该界面我们可以查看HDFS的运行状态信息,在Browse the file system一栏中可以查看HDFS目录结构</p><p><img src="https://i.loli.net/2019/06/30/5d1847531472850379.jpg" alt="Browse the file system"></p><p>因为我们什么都没有做,所以在Browse Directory下面什么都没有,HDFS的目录结构和linux的目录结构差不多,都是以<code>/</code>为根目录.</p><p><img src="https://i.loli.net/2019/06/30/5d1847540b49622501.jpg" alt="什么都没有"></p><p>编写test.txt并上传到HDFS中(被上传的文件会被分为若干个切块，分别放于不同的datanode中)</p><p><img src="https://i.loli.net/2019/06/30/5d184755225a588947.jpg" alt="test.txt"></p><p>键入命令,将test.txt上传到hdfs上</p><blockquote><p>$ hadoop fs -put test.txt hdfs:&#x2F;&#x2F;zyh:9000&#x2F;</p></blockquote><p><img src="https://i.loli.net/2019/06/30/5d1856883ee1b39713.jpg" alt="put"></p><p>再次打开<a href="http://zyh:50070,查看HDFS就会发现多出了一个test.txt文件">http://zyh:50070,查看HDFS就会发现多出了一个test.txt文件</a></p><p><img src="https://i.loli.net/2019/06/30/5d1856891db3037047.jpg" alt="查看结果"></p><h2 id="使用MR"><a href="#使用MR" class="headerlink" title="使用MR"></a>使用MR</h2><p>到<strong>hadoop-2.4.1&#x2F;share&#x2F;hadoop&#x2F;mapreduce</strong>目录下可以找到<strong>hadoop-mapreduce-examples-2.4.1.jar</strong>,这个jar是Hadoop为我们编写的mapreduce小例子,我们可以使用它来做一些测试</p><p><img src="https://i.loli.net/2019/06/30/5d18568a5a14a37356.jpg" alt="examples"></p><p>我们使用MR做一些小测试！</p><ul><li>打印pi的值</li></ul><p>到<strong>hadoop-mapreduce-examples-2.4.1.jar</strong>根目录</p><ol><li>pi : 方法名</li><li>5 : 参数1</li><li>100 : 参数2</li></ol><blockquote><p>$ hadoop jar hadoop-mapreduce-examples-2.4.1.jar pi 5 100</p></blockquote><p><img src="https://i.loli.net/2019/06/30/5d18568c4251f40910.jpg" alt="pi"></p><ul><li>统计我们之前test.txt中字符串出现的次数</li></ul><blockquote><p>$ cat test.txt</p></blockquote><p><img src="https://i.loli.net/2019/06/30/5d18568e7a5b870045.jpg" alt="test file"></p><p>这一次我们在HDFS文件系统中创建一些目录,将test.txt上传到指定目录中去</p><p>创建&#x2F;<strong>wordcount</strong>&#x2F;<strong>input</strong>用来放被统计的文件,值得注意的是我们必须先创建&#x2F;<strong>wordcount</strong>,才能再创建&#x2F;<strong>input</strong></p><blockquote><p>$ hadoop fs -mkdir &#x2F;wordcount</p></blockquote><blockquote><p>$ hadoop fs -mkdir &#x2F;wordcount&#x2F;input</p></blockquote><p><img src="https://i.loli.net/2019/06/30/5d18568fba13758809.jpg"></p><p><img src="https://i.loli.net/2019/06/30/5d1856912037076903.jpg"></p><p>同理创建创建&#x2F;<strong>wordcount</strong>&#x2F;<strong>output</strong>用来放被统计后的输出文件</p><blockquote><p>$ hadoop fs -mkdir &#x2F;wordcount</p></blockquote><blockquote><p>$ hadoop fs -mkdir &#x2F;wordcount&#x2F;out </p></blockquote><p>将test.txt文件上传到HDFS文件系统中的input目录</p><blockquote><p>$ hadoop fs -put text.txt &#x2F;wordcount&#x2F;input </p></blockquote><p>使用命令对test.txt进行统计,<strong>wordcount</strong>:指定本次运行的是统计方法,&#x2F;<strong>wordcount</strong>&#x2F;<strong>input</strong>:指定被统计的文件,&#x2F;<strong>wordcount</strong>&#x2F;<strong>out</strong>: 指定统计后的输出目录</p><ol><li>wordcount : 方法名</li><li>&#x2F;wordcount&#x2F;input : 参数1</li><li>&#x2F;wordcount&#x2F;out : 参数2</li></ol><blockquote><p>$ hadoop jar hadoop-mapreduce-examples-2.4.1.jar wordcount &#x2F;wordcount&#x2F;input &#x2F;wordcount&#x2F;out </p></blockquote><p><img src="https://i.loli.net/2019/06/30/5d185692e5a9d43661.jpg"></p><p>到&#x2F;<strong>wordcount</strong>&#x2F;<strong>out</strong>查看MR分析结果,并使用命令下载文件</p><blockquote><p>$ hadoop fs -ls &#x2F;wordcount&#x2F;out&#x2F;</p></blockquote><p><img src="https://i.loli.net/2019/06/30/5d185699bc9f428703.jpg"></p><blockquote><p>$ hadoop fs -get &#x2F;wordcount&#x2F;out part-r-00000</p></blockquote><p><img src="https://i.loli.net/2019/06/30/5d18569c354df29231.jpg"></p><p>查看MR分析结果</p><p><img src="https://i.loli.net/2019/06/30/5d18569d7134b87906.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JQuery弹出框小Demo</title>
    <link href="/2017/08/15/2017-8-15-JQuery%E5%BC%B9%E5%87%BA%E6%A1%86/"/>
    <url>/2017/08/15/2017-8-15-JQuery%E5%BC%B9%E5%87%BA%E6%A1%86/</url>
    
    <content type="html"><![CDATA[<h3 id="编写css"><a href="#编写css" class="headerlink" title="编写css"></a>编写css</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style type=&quot;text/css&quot;&gt;<br>    <span class="hljs-selector-class">.gray</span>&#123;<br>        <span class="hljs-attribute">width</span>:<span class="hljs-number">100%</span>;<br>        <span class="hljs-attribute">height</span>:<span class="hljs-number">100%</span>;<br>        <span class="hljs-attribute">background</span>:<span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.3</span>);<br>        <span class="hljs-attribute">position</span>:absolute;<br>        <span class="hljs-attribute">top</span>:<span class="hljs-number">0px</span>;<br>        <span class="hljs-attribute">left</span>:<span class="hljs-number">0</span>;<br>        <span class="hljs-attribute">display</span>:none;<br>        <span class="hljs-attribute">z-index</span>:<span class="hljs-number">99</span>;<br>    &#125;<br>    <span class="hljs-selector-class">.popup</span>&#123;<br>        <span class="hljs-attribute">width</span>:<span class="hljs-number">532px</span>; <br>        <span class="hljs-attribute">height</span>:auto;<br>        <span class="hljs-attribute">background-color</span>:<span class="hljs-number">#fff</span>;<br>        <span class="hljs-attribute">position</span>:absolute;<br>        <span class="hljs-attribute">z-index</span>:<span class="hljs-number">100</span>;<br>        <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#ebeaea</span>;<br>        <span class="hljs-attribute">left</span>:<span class="hljs-number">400px</span>;<br>        <span class="hljs-attribute">top</span>:<span class="hljs-number">96px</span>;<br>        <span class="hljs-attribute">display</span>:none;<br>    &#125;<br>    <span class="hljs-selector-class">.popup</span> <span class="hljs-selector-class">.top_nav</span>&#123;<br>        <span class="hljs-attribute">width</span>:<span class="hljs-number">532px</span>;<br>        <span class="hljs-attribute">height</span>:<span class="hljs-number">46px</span>;<br>        <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">images/popup_top_bj.jpg</span>);<br>        <span class="hljs-attribute">border-bottom</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#ebeaea</span>;<br>        <span class="hljs-attribute">position</span>:relative;<br>        <span class="hljs-attribute">cursor</span>:move;<br>    &#125;<br>    <span class="hljs-selector-class">.popup</span> <span class="hljs-selector-class">.top_nav</span> <span class="hljs-selector-tag">i</span>&#123;<br>        <span class="hljs-attribute">width</span>:<span class="hljs-number">35px</span>;<br>        <span class="hljs-attribute">height</span>:<span class="hljs-number">35px</span>;<br>        <span class="hljs-attribute">background</span>: <span class="hljs-number">#ccc</span>;<br>        <span class="hljs-attribute">position</span>:absolute;<br>        <span class="hljs-attribute">top</span>:<span class="hljs-number">6px</span>;<br>        <span class="hljs-attribute">left</span>:<span class="hljs-number">8px</span>;<br>        <span class="hljs-attribute">display</span>:block; <br>    &#125;<br>    <span class="hljs-selector-class">.popup</span> <span class="hljs-selector-class">.top_nav</span> <span class="hljs-selector-tag">span</span>&#123;<br>        <span class="hljs-attribute">font</span>:<span class="hljs-number">18px</span>/<span class="hljs-number">18px</span> <span class="hljs-string">&#x27;microsoft yahei&#x27;</span>;<br>        <span class="hljs-attribute">color</span>:<span class="hljs-number">#707070</span>;<br>        <span class="hljs-attribute">display</span>:block;<br>        <span class="hljs-attribute">position</span>:absolute;<br>        <span class="hljs-attribute">top</span>:<span class="hljs-number">13px</span>;<br>        <span class="hljs-attribute">left</span>:<span class="hljs-number">50px</span>;<br>    &#125;<br>    <span class="hljs-selector-class">.popup</span> <span class="hljs-selector-class">.top_nav</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.guanbi</span> &#123; <br>        <span class="hljs-attribute">background</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">images/popup_guanbi.png</span>) repeat <span class="hljs-number">0px</span> <span class="hljs-number">0px</span>; <br>        <span class="hljs-attribute">width</span>:<span class="hljs-number">35px</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">35px</span>; <br>        <span class="hljs-attribute">display</span>: block; <br>        <span class="hljs-attribute">position</span>:absolute;<br>        <span class="hljs-attribute">top</span>:<span class="hljs-number">8px</span>;<br>        <span class="hljs-attribute">right</span>:<span class="hljs-number">10px</span>;<br>        <span class="hljs-attribute">cursor</span>:pointer;<br>    &#125;<br>    <span class="hljs-selector-class">.popup</span> <span class="hljs-selector-class">.top_nav</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.guanbi</span> <span class="hljs-selector-tag">span</span> &#123; <span class="hljs-attribute">display</span>: none;&#125;<br>    <span class="hljs-selector-class">.popup</span> <span class="hljs-selector-class">.top_nav</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.guanbi</span><span class="hljs-selector-pseudo">:hover</span>&#123; <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">images/popup_guanbi.png</span>) repeat <span class="hljs-number">0px</span> -<span class="hljs-number">35px</span>; &#125;<br>    <span class="hljs-selector-class">.popup</span> <span class="hljs-selector-class">.min</span>&#123;<span class="hljs-attribute">height</span>:auto;<span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;&#125;<br>    <span class="hljs-selector-class">.box_mid</span>&#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>        <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">20px</span>;<br>        <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid silver;<br>    &#125;<br>    <span class="hljs-selector-class">.checkbox</span> &#123;<br>        <span class="hljs-attribute">position</span>: relative;<br>        <span class="hljs-attribute">display</span>: inline-block;<br>    &#125;<br>    <span class="hljs-selector-class">.checkbox</span> <span class="hljs-selector-tag">input</span> &#123;<br>        <span class="hljs-attribute">position</span>: absolute;<br>        <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>        <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>        <span class="hljs-attribute">z-index</span>: <span class="hljs-number">5</span>;<br>        <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>        <span class="hljs-attribute">cursor</span>: pointer;<br>    &#125;<br>    <span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;checkbox&quot;</span>]</span>, <span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;radio&quot;</span>]</span> &#123;<br>        <span class="hljs-attribute">box-sizing</span>: border-box;<br>        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-selector-class">.checkbox</span> <span class="hljs-selector-tag">label</span> &#123;<br>    &#125;<br>    <span class="hljs-selector-class">.checkbox</span> <span class="hljs-selector-tag">label</span> &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">55px</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">25px</span>;<br>        <span class="hljs-attribute">background</span>: <span class="hljs-number">#ccc</span>;<br>        <span class="hljs-attribute">position</span>: relative;<br>        <span class="hljs-attribute">display</span>: inline-block;<br>        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">46px</span>;<br>        -webkit-<span class="hljs-attribute">transition</span>: <span class="hljs-number">0.4s</span>;<br>        <span class="hljs-attribute">transition</span>: <span class="hljs-number">0.4s</span>;<br>    &#125;<br>    <span class="hljs-selector-class">.checkbox</span> <span class="hljs-selector-tag">label</span><span class="hljs-selector-pseudo">:after</span> &#123;<br>        <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-attribute">position</span>: absolute;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">25px</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">25px</span>;<br>        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">100%</span>;<br>        <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>        <span class="hljs-attribute">top</span>: <span class="hljs-number">0px</span>;<br>        <span class="hljs-attribute">z-index</span>: <span class="hljs-number">2</span>;<br>        <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span>;<br>        <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.2</span>);<br>        -webkit-<span class="hljs-attribute">transition</span>: <span class="hljs-number">0.4s</span>;<br>        <span class="hljs-attribute">transition</span>: <span class="hljs-number">0.4s</span>;<br>    &#125;<br>    <span class="hljs-selector-class">.checkbox</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:checked</span> + <span class="hljs-selector-tag">label</span> &#123;<br>        <span class="hljs-attribute">background</span>: <span class="hljs-number">#4BD865</span>;<br>    &#125;<br>    <span class="hljs-selector-class">.checkbox</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:checked</span> + <span class="hljs-selector-tag">label</span><span class="hljs-selector-pseudo">:after</span> &#123;<br>        <span class="hljs-attribute">left</span>: <span class="hljs-number">30px</span>;<br>    &#125;<br>    <span class="hljs-selector-class">.box_mid</span> <span class="hljs-selector-tag">span</span>&#123;<br>        <span class="hljs-attribute">position</span>: relative;<br>        <span class="hljs-attribute">top</span>: -<span class="hljs-number">10px</span>;<br>        <span class="hljs-attribute">color</span>: <span class="hljs-number">#888</span>;<br>        <span class="hljs-attribute">left</span>: <span class="hljs-number">20px</span>;<br>    &#125;<br>    <span class="hljs-selector-class">.qr_code</span>&#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>        <span class="hljs-attribute">height</span>:<span class="hljs-number">200px</span>;<br>    &#125;<br>    <span class="hljs-selector-class">.qr_code</span> <span class="hljs-selector-class">.left_box</span>&#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>;<br>        <span class="hljs-attribute">height</span>:<span class="hljs-number">100%</span>;<br>        <span class="hljs-comment">/*background: blue;*/</span><br>        <span class="hljs-attribute">float</span>: left;<br>    &#125;<br>    <span class="hljs-selector-class">.left_box</span>&#123;<br>        <span class="hljs-attribute">justify-content</span>: center; <span class="hljs-comment">/*子元素水平居中*/</span><br>        <span class="hljs-attribute">align-items</span>: center; <span class="hljs-comment">/*子元素垂直居中*/</span><br>        <span class="hljs-attribute">display</span>: -webkit-flex;<br>    &#125;<br>    <span class="hljs-selector-class">.right_box</span>&#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>        <span class="hljs-comment">/*background: red;*/</span><br>        <span class="hljs-attribute">float</span>: right;<br>    &#125;<br>    <span class="hljs-selector-class">.right_box</span> <span class="hljs-selector-tag">img</span>&#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">160px</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">160px</span>;<br>        <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">30px</span>;<br>        <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">40px</span>;<br>    &#125;<br>    <span class="hljs-selector-class">.box_mids</span>&#123;<br>        <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">0px</span>;<br>        <span class="hljs-attribute">border</span>:<span class="hljs-number">0px</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>    &#125;<br>    <span class="hljs-selector-class">.foot</span> <span class="hljs-selector-tag">p</span>&#123;<br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h3 id="编写body"><a href="#编写body" class="headerlink" title="编写body"></a>编写body</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点击&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;jQuery.tanchuk();&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;qrcodeGray&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;gray&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;popup&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;popup&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;top_nav&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;top_nav&#x27;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>视点共享<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;guanbi&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;min&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:100%;height:400px;&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 打开共享链接 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box_mid&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>/&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>打开共享链接<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 二维码 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;qr_code&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left_box&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>将此项目用以下链接与他人共享<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;复制&quot;</span> /&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right_box&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;jiam.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;foot&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>隐私设置<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!-- 打开共享链接 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box_mid box_mids&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>/&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>需要密码才能访问此公共链接<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;设置密码&quot;</span> /&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>           <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>    <span class="hljs-comment">//窗口效果</span><br>    <span class="hljs-comment">//点击按钮显示</span><br>    jQuery.<span class="hljs-property">tanchuk</span>= <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        $(<span class="hljs-string">&quot;#qrcodeGray&quot;</span>).<span class="hljs-title function_">show</span>();<br>        $(<span class="hljs-string">&quot;#popup&quot;</span>).<span class="hljs-title function_">show</span>();<span class="hljs-comment">//查找ID为popup的DIV show()显示#qrcodeGray</span><br>        <span class="hljs-title function_">tc_center</span>();<br>    &#125;;<br>    <span class="hljs-comment">//点击关闭按钮</span><br>    $(<span class="hljs-string">&quot;a.guanbi&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        $(<span class="hljs-string">&quot;#qrcodeGray&quot;</span>).<span class="hljs-title function_">hide</span>();<br>        $(<span class="hljs-string">&quot;#popup&quot;</span>).<span class="hljs-title function_">hide</span>();<span class="hljs-comment">//查找ID为popup的DIV hide()隐藏</span><br>    &#125;)<br>    <span class="hljs-comment">//窗口水平居中</span><br>    $(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">resize</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title function_">tc_center</span>();<br>    &#125;);<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">tc_center</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">var</span> _top=($(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">height</span>()-$(<span class="hljs-string">&quot;.popup&quot;</span>).<span class="hljs-title function_">height</span>())/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">var</span> _left=($(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">width</span>()-$(<span class="hljs-string">&quot;.popup&quot;</span>).<span class="hljs-title function_">width</span>())/<span class="hljs-number">2</span>;<br>        $(<span class="hljs-string">&quot;.popup&quot;</span>).<span class="hljs-title function_">css</span>(&#123;<span class="hljs-attr">top</span>:_top,<span class="hljs-attr">left</span>:_left&#125;);<br>    &#125;<br>&lt;/script&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; </span></span><br><span class="language-javascript"><span class="language-xml">        $(<span class="hljs-string">&quot;.top_nav&quot;</span>).<span class="hljs-title function_">mousedown</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123; <span class="hljs-comment">//鼠标按下事件</span></span></span><br><span class="language-javascript"><span class="language-xml">            $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;cursor&quot;</span>,<span class="hljs-string">&quot;move&quot;</span>);<span class="hljs-comment">//改变鼠标指针的形状 鼠标移动 </span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">var</span> offset = $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">offset</span>();<span class="hljs-comment">//DIV在页面的位置 offset() 方法返回或设置匹配元素相对于文档的偏移（位置）</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">var</span> x = e.<span class="hljs-property">pageX</span> - offset.<span class="hljs-property">left</span>;<span class="hljs-comment">//获得鼠标指针离DIV元素左边界的距离 pageX() 属性是鼠标指针的位置，相对于文档的左边缘。</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">var</span> y = e.<span class="hljs-property">pageY</span> - offset.<span class="hljs-property">top</span>;<span class="hljs-comment">//获得鼠标指针离DIV元素上边界的距离  pageY() 属性是鼠标指针的位置，相对于文档的上边缘。</span></span></span><br><span class="language-javascript"><span class="language-xml">            $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">bind</span>(<span class="hljs-string">&quot;mousemove&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">ev</span>)&#123; <span class="hljs-comment">//绑定鼠标的移动事件，因为光标在DIV元素外面也要有效果，所以要用doucment的事件，而不用DIV元素的事件 </span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">//bind() 方法为被选元素添加一个或多个事件处理程序，并规定事件发生时运行的函数</span></span></span><br><span class="language-javascript"><span class="language-xml">            $(<span class="hljs-string">&quot;.popup&quot;</span>).<span class="hljs-title function_">stop</span>();<span class="hljs-comment">//加上这个之后 </span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">var</span> _x = ev.<span class="hljs-property">pageX</span> - x;<span class="hljs-comment">//获得X轴方向移动的值 </span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">var</span> _y = ev.<span class="hljs-property">pageY</span> - y;<span class="hljs-comment">//获得Y轴方向移动的值 </span></span></span><br><span class="language-javascript"><span class="language-xml">            $(<span class="hljs-string">&quot;.popup&quot;</span>).<span class="hljs-title function_">animate</span>(&#123;<span class="hljs-attr">left</span>:_x+<span class="hljs-string">&quot;px&quot;</span>,<span class="hljs-attr">top</span>:_y+<span class="hljs-string">&quot;px&quot;</span>&#125;,<span class="hljs-number">10</span>); </span></span><br><span class="language-javascript"><span class="language-xml">            &#125;); </span></span><br><span class="language-javascript"><span class="language-xml">        &#125;); </span></span><br><span class="language-javascript"><span class="language-xml">        $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">mouseup</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">//mouseup 鼠标松开时</span></span></span><br><span class="language-javascript"><span class="language-xml">            $(<span class="hljs-string">&quot;.popup&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;cursor&quot;</span>,<span class="hljs-string">&quot;default&quot;</span>); <span class="hljs-comment">// default 默认光标（通常是一个箭头）</span></span></span><br><span class="language-javascript"><span class="language-xml">            $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">unbind</span>(<span class="hljs-string">&quot;mousemove&quot;</span>); <span class="hljs-comment">// unbind() 方法移除被选元素的事件处理程序。mousemove触发</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="最终样式展示"><a href="#最终样式展示" class="headerlink" title="最终样式展示"></a>最终样式展示</h3><p><img src="https://i.loli.net/2019/07/02/5d1aae86d23a591622.jpg" alt="img1"></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Maven骨架无法生成在IDEA中</title>
    <link href="/2017/08/15/2017-8-20-maven%E9%AA%A8%E6%9E%B6%E6%97%A0%E6%B3%95%E7%94%9F%E6%88%90/"/>
    <url>/2017/08/15/2017-8-20-maven%E9%AA%A8%E6%9E%B6%E6%97%A0%E6%B3%95%E7%94%9F%E6%88%90/</url>
    
    <content type="html"><![CDATA[<p>在IDEA中maven骨架生成速度缓慢，只见进度条在疯狂运动就不见导入成功,是不是有点崩溃？</p><p><img src="https://i.loli.net/2019/06/30/5d185623c881183155.jpg" alt="2.jpg"></p><p>解决办法:</p><p>找到 file -&gt; other settings -&gt; Default settings .. -&gt; maven -&gt; runner,在<strong>VM Options</strong>中添加-DarchetypeCatalog&#x3D;internal</p><p><img src="https://i.loli.net/2019/06/30/5d185624db5a011674.jpg" alt="3.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hibernate one to many 和many to one 有什么区别？</title>
    <link href="/2017/08/13/2017-8-13-hibernate%E4%B8%80%E5%92%8C%E5%A4%9A/"/>
    <url>/2017/08/13/2017-8-13-hibernate%E4%B8%80%E5%92%8C%E5%A4%9A/</url>
    
    <content type="html"><![CDATA[<p>室友问了我个奇怪的问题</p><ul><li>问：我们在配Hibernate的时候有<one-to-many>也有<many-to-one>,为什么会有两个？</li><li>问：我的意思one to many 要是反过来不就是many to one了吗？</li><li>问：我要是把相关的配置 调换一下，那么one to many和many to one不就是可以互换了吗？</li></ul><p>从字面意思上看，one to many 是一对多,many to one是多对一。很明显就是区别（说实话，问这样的问题，一开始我也有点诧异，后来想了想还是不对劲）。从实际开发角度来说，一对多反过来就是多对一。我们以学生和班级为例。学生对班级是many to one，班级对学生就是one to many。那么问题来了，到底我们配置班级方的one to many？还是配置学生方的many to one呢？这个问题就要看实际开发需求了。在这个需求中，从经验上可以想象，我们查看班级的时候，并不一定要看到每个学生的信息。因为学生很多。但我们查看学生的时候，可能想看班级的信息，因为一个学生对应一个班级。在这种情况下，我们当然是配置学生方的many to one，然后做级联操作。以便取出学生时取出对应班级。而事实上，大多数情况下，many to one比one to many的应用也更为防范，这主要是基于一个效率考虑</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hibernate</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>liquid</title>
    <link href="/2017/08/10/2017-8-10-jekyll-liquid/"/>
    <url>/2017/08/10/2017-8-10-jekyll-liquid/</url>
    
    <content type="html"><![CDATA[<p>传送门</p><p><a href="https://alfred-sun.github.io/blog/2015/01/10/jekyll-liquid-syntax-documentation/">https://alfred-sun.github.io/blog/2015/01/10/jekyll-liquid-syntax-documentation/</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jekyll</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown使用</title>
    <link href="/2017/08/10/2017-8-10-markdown/"/>
    <url>/2017/08/10/2017-8-10-markdown/</url>
    
    <content type="html"><![CDATA[<p>传送门</p><p><a href="https://www.zybuluo.com/AntLog/note/63228#2-%E6%AC%A1%E5%B8%B8%E7%94%A8%E6%A0%87%E8%AE%B0">https://www.zybuluo.com/AntLog/note/63228#2-次常用标记</a>  </p><p><a href="https://www.zybuluo.com/mdeditor">https://www.zybuluo.com/mdeditor</a></p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>NodeJS学习</title>
    <link href="/2017/08/10/2017-8-10-nodejs/"/>
    <url>/2017/08/10/2017-8-10-nodejs/</url>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装Nodejs，不用说他是核心包</p><pre>    <code class="linux">    $ sudo apt install nodejs-legacy    $ node -v    </code></pre><p>安装npm,npm是什么东东？npm其实是Node.js的包管理工具(package manager).为啥我们需要一个包管理工具呢？因为我们在Node.js上开发时，会用到很多别人写的JavaScript代码。如果我们要使用别人写的某个包，每次都根据名称搜索一下官方网站，下载代码，解压，再使用，非常繁琐。于是一个集中管理的工具应运而生：大家都把自己开发的模块打包后放到npm官网上，如果要使用，直接通过npm安装就可以直接用，不用管代码存在哪，应该从哪下载。更重要的是，如果我们要使用模块A，而模块A又依赖于模块B，模块B又依赖于模块X和模块Y，npm可以根据依赖关系，把所有依赖的包都下载下来并管理起来。否则，靠我们自己手动管理，肯定既麻烦又容易出错。</p><pre>    <code class="linux">    $ sudo apt install npm    $ npm -v    </code></pre><h3 id="入门Demo"><a href="#入门Demo" class="headerlink" title="入门Demo"></a>入门Demo</h3><p>进入一个目录新建一个hello.js文件,<strong>use strict</strong>指的是以严格模式运行JavaScript代码，避免各种潜在陷阱.</p><pre>    <code class="javascript">        'use strict'         console.log("hello nodejs!!");    </code></pre><p>在命令行下输入<strong>node hello.js</strong>,就可以看到哦啊打印出来的信息了!</p><pre>    <code class="linux">       $ node hello.js    </code></pre><p>如果不喜欢在文件中使用<strong>use strict</strong>,我们可以在命令行中使用!</p><pre>    <code class="linux">       $ node --use_strict hello.js    </code></pre><h3 id="搭建Node开发环境"><a href="#搭建Node开发环境" class="headerlink" title="搭建Node开发环境"></a>搭建Node开发环境</h3><p>如果只是用vim,EditPlus,sublime等一些编辑软件写效率太低,Java一般使用Eclipse,Intellij idea,C#使用的集成开发工具isual Studio,Node开发工具哪家强？考察Node.js的集成开发环境，重点放在启动速度快，执行简单，调试方便这三点上。当然，免费使用是一个加分项。</p><p>综合考察后，我们隆重向大家推荐Node.js集成开发环境：</p><h3 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h3><p>Visual Studio Code由微软出品，但它不是那个大块头的Visual Studio，它是一个精简版的迷你Visual Studio，并且，Visual Studio Code可以跨！平！台！Windows、Mac和Linux通用。</p><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p>可以从Visual Studio Code的<a href="https://code.visualstudio.com/">官方网站</a>下载并安装最新的1.4版本。网速慢的童鞋请移步<a href="https://pan.baidu.com/s/1kU5OCOB#list/path=%2Fpub%2Fvscode">国内镜像</a>。</p><ul><li>windows</li></ul><p>安装过程中，请务必钩上以下选项：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/001470970449638b5be3b1cf1414a29ad07b9d0e8808e70000/l" alt="vscode install"></p><ul><li><input checked="" disabled="" type="checkbox"> 将“通过Code打开”操作添加到Windows资源管理器目录上下文菜单</li></ul><p>这将大大提升将来的操作快捷度。</p><ul><li>Mac</li></ul><p>在Mac系统上，Finder选中一个目录，右键菜单并没有“通过Code打开”这个操作。不过我们可以通过Automator自己添加这个操作。</p><p>先运行Automator，选择“服务”：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/001479009276589bab7dfa2286940a68c0909b03eb1de60000/l" alt="mc vscode install"></p><p>然后，执行以下操作：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/00147900990508378669cb1fac64dcb97761259ede99cf6000/l" alt="mc vscode install 1"></p><blockquote><p>1.在右侧面板选择“服务”收到选定的“文件夹”，位于“Finder.app“，该选项是为了从Finder中接收一个文件夹；<br> 2.在左侧面板选择”实用工具“，然后找到”运行Shell脚本“，把它拽到右侧面板里；<br> 3.在右侧”运行Shell脚本“的面板里，选择Shell”&#x2F;bin&#x2F;bash“，传递输入“作为自变量”，然后修改Shell脚本如下：  </p></blockquote><pre>    <code class="linux">    for f in "$@"    do        open -a "Visual Studio Code" "$f"    done    </code></pre><p>保存为“Open With VSCode”后，打开Finder，选中一个文件夹，点击右键，“服务”，就可以看到“Open With VSCode”菜单：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/001479009671385606059d6b40c4316b2ac57a2acc739aa000/l" alt="mc vscode install2"></p><ul><li>linux</li></ul><p>可以自行到官网找到tar.gz安装包下载解压即可使用</p><p>也可以使用这条命令,后面的网址是我从官网上copy下来的</p><pre>    <code class="linux">    $ wget https://vscode.cdn.azure.cn/stable/cb82febafda0c8c199b9201ad274e25d9a76874e/code-stable-code_1.14.2-1500506907_amd64.tar.gz    </code></pre><p>解压双击&#x2F;media&#x2F;zyh&#x2F;software&#x2F;software for linux&#x2F;VSCode-linux-x64&#x2F;code文件即可打开应用使用</p><p><img src="https://i.loli.net/2019/06/30/5d1847c8c47b962708.jpg" alt="demo"></p><h4 id="运行和调试"><a href="#运行和调试" class="headerlink" title="运行和调试"></a>运行和调试</h4><p>在VS Code中，我们可以非常方便地运行JavaScript文件。</p><p>VS Code以文件夹作为工程目录（Workspace Dir），所有的JavaScript文件都存放在该目录下。此外，VS Code在工程目录下还需要一个.vscode的配置目录，里面存放里VS Code需要的配置文件。</p><p>假设我们在C:\Work\目录下创建了一个hello目录作为工程目录，并编写了一个hello.js文件，则该工程目录的结构如下：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs applescript">hello/ &lt;<span class="hljs-comment">-- workspace dir</span><br>|<br>+- hello.js &lt;<span class="hljs-comment">-- JavaScript file</span><br>|<br>+- .vscode/  &lt;<span class="hljs-comment">-- VS Code config</span><br>   |<br>   +- <span class="hljs-built_in">launch</span>.json &lt;<span class="hljs-comment">-- VS Code config file for JavaScript</span><br></code></pre></td></tr></table></figure><p>可以用VS Code快速创建launch.json，然后修改如下：</p><pre>    <code class="json">    &#123;        "version": "0.2.0",        "configurations": [            &#123;                "name": "Run hello.js",                "type": "node",                "request": "launch",                "program": "$&#123;workspaceRoot&#125;/hello.js",                "stopOnEntry": false,                "args": [],                "cwd": "$&#123;workspaceRoot&#125;",                "preLaunchTask": null,                "runtimeExecutable": null,                "runtimeArgs": [                    "--nolazy"                ],                "env": &#123;                    "NODE_ENV": "development"                &#125;,                "externalConsole": false,                "sourceMaps": false,                "outDir": null            &#125;        ]    &#125;    </code></pre><p>有了配置文件，即可使用VS Code调试JavaScript。</p><p>视频演示：</p><embed height="415" width="544" quality="high" allowfullscreen="true" type="application/x-shockwave-flash" src="//static.hdslb.com/miniloader.swf" flashvars="aid=5827351&page=1" pluginspage="//www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash"><p>推荐链接<a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000">https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NodeJS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FFmpeg下的录屏录音</title>
    <link href="/2017/08/05/2017-8-5-ffmpeg-%E5%BD%95%E5%B1%8F%E5%BD%95%E9%9F%B3/"/>
    <url>/2017/08/05/2017-8-5-ffmpeg-%E5%BD%95%E5%B1%8F%E5%BD%95%E9%9F%B3/</url>
    
    <content type="html"><![CDATA[<p>前面我们安装了FFmpeg,FFmpeg还提供了录屏+录音的功能，可以方便录制直播视频,教学视频等等.我们使用alsa录音功能，alsa driver驱动被内嵌志linux内核中,  基本上只要不是内核本版太老，是不需要再进行安装的.如果小伙伴们发现机器上不能使用alsa,可以去安装一下alsa的三个库alsa-driver,alsa-lib,alsa-utils</p><p>到FFmpeg官网查看相应资料<a href="https://trac.ffmpeg.org/wiki/Capture/Desktop">FFmpeg</a></p><p>在linux中录音录屏发现了三条指令</p><blockquote><p>$ ffmpeg -video_size 1024x768 -framerate 25 -f x11grab -i :0.0+100,200 output.mp4<br>$ ffmpeg -video_size 1024x768 -framerate 25 -f x11grab -i :0.0+100,200 -f alsa -ac 2 -i hw:0 output.mkv<br>$ ffmpeg -video_size 1024x768 -framerate 25 -f x11grab -i :0.0+100,200 -f pulse -ac 2 -i default output.mkv</p></blockquote><h2 id="参数详解"><a href="#参数详解" class="headerlink" title="参数详解"></a>参数详解</h2><ul><li><p>-video_size 录制视频的分辨率</p><blockquote><p>$ echo $(xdpyinfo|grep ‘dimensions:’ | awk ‘{print $2}’)</p></blockquote></li><li><p>-f device 指定设备,这里我们使用<code>x11grab</code>设备去录屏，使用<code>alsa</code>设备去录音,请在使用前确保该设备被安装,并且确保在FFmpeg编译时已经添加到FFmpeg的devices列表中</p><blockquote><p>$ ffmpeg -devices </p></blockquote><p>  <img src="https://i.loli.net/2019/06/30/5d1856640b0f297830.jpg" alt="devices"></p></li><li><p>-i :0.0+100,200 从左上角开始，向x轴偏移100,y轴偏移200,我们可以不用偏移</p></li><li><p>-ac 设置音频通道数</p></li><li><p>-i hw:1 指定音频设备</p><blockquote><p>在linux中使用<strong>alsamixer</strong>可以打开alsa控制面板<br>  $ alsamixer</p></blockquote><p>  <img src="https://i.loli.net/2019/06/30/5d18566563c8f13381.jpg" alt="alsamixer1"></p><blockquote><p>按F6选择声卡，注意前面的标号根据实际情况选择,我的音频设备是1号,与hw:后面的1相对应 </p></blockquote><p>  <img src="https://i.loli.net/2019/06/30/5d185666c34ac64770.jpg" alt="alsamixer2"></p><blockquote><p>到下面的界面后,按F4跳转到捕获音频界面  </p></blockquote><p>  <img src="https://i.loli.net/2019/06/30/5d185667d64e467574.jpg" alt="alsamixer3"></p><blockquote><p>在这里我们可以调整录音时音量的大小,左右切换至capture,上下调整音量</p></blockquote><p>  <img src="https://i.loli.net/2019/06/30/5d185668e31cc41101.jpg" alt="alsamixer4"></p></li></ul><h2 id="FFmpeg录屏录音"><a href="#FFmpeg录屏录音" class="headerlink" title="FFmpeg录屏录音"></a>FFmpeg录屏录音</h2><ul><li>x11grab录屏</li></ul><blockquote><p>$ ffmpeg -video_size 1920x1080 -framerate 25 -f x11grab -i :0.0+0,0 ~&#x2F;output.mp4</p></blockquote><ul><li>alsa录音</li></ul><blockquote><p>$ ffmpeg -f alsa -ac 2 -i hw:1 ~&#x2F;out.wav</p></blockquote><ul><li>录屏+录音</li></ul><blockquote><p>$ ffmpeg -video_size 1920x1080 -framerate 25 -f x11grab -i :0.0+0,0 -f alsa -ac 2 -i hw:1 out.mp4</p></blockquote><h2 id="录屏演示"><a href="#录屏演示" class="headerlink" title="录屏演示"></a>录屏演示</h2><iframe width="560" height="315" src="https://www.youtube.com/embed/opsIp_vBe5s" frameborder="0" allowfullscreen></iframe>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FFmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>highlight网页代码高亮显示</title>
    <link href="/2017/08/05/2017-8-5-highlight/"/>
    <url>/2017/08/05/2017-8-5-highlight/</url>
    
    <content type="html"><![CDATA[<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ol><li>引入highlight.min.js和monokai_sublime.min.css，使用initHighlightingOnLoad()初始化.</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://cdn.bootcss.com/highlight.js/8.0/styles/monokai_sublime.min.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://cdn.bootcss.com/highlight.js/8.0/highlight.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> &gt;</span>hljs.initHighlightingOnLoad();<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <br></code></pre></td></tr></table></figure><ol start="2"><li>使用<code>&lt;pre&gt;</code>和<code>&lt;code class=&quot;html&quot;&gt;</code> 指定文本的内容信息例如</li></ol><p><code>&lt;pre&gt;&lt;code class=&quot;js&quot;&gt;code.....&lt;/code&gt;&lt;/pre&gt;</code></p><h4 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h4><ul><li>js代码:</li></ul><pre><code class="js">    var arr = new Array();    var input_element =  document.getElementById("input");    alert(input_element.value);</code></pre><ul><li>java代码:</li></ul><pre><code class="java">   class Demo&#123;    public static void main(String[] args)&#123;        Systemm.out.println("java");    &#125;   &#125;</code></pre><ul><li>C代码:</li></ul><pre><code class="c">   int main()&#123;    printf("c");    return 1;   &#125;</code></pre><ul><li>linux</li></ul><pre><code class="linux">   $ echo $(xdpyinfo|grep 'dimensions:' | awk '&#123;print $2&#125;')</code></pre><p>官网 <a href="https://highlightjs.org/download/">https://highlightjs.org/download/</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jekyll</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis的使用总结</title>
    <link href="/2017/07/31/2017-7-31-redis/"/>
    <url>/2017/07/31/2017-7-31-redis/</url>
    
    <content type="html"><![CDATA[<p>redis是一个开源的数据存储系统，与memcached一样内部都是使用内存来存储数据，但与之不同的是redis会将数据定期写入磁盘，防止数据丢失。</p><p>redis内部可以存放字符串、链表、散列表、集合。它支持主从同步，我们可以从主服务器将数据同步到任意数量的其他服务器上。</p><p>当内存满了的时候，它会采用LUR算法来置换出长久未被使用的数据，以此来确保数据库中一直存放的是最有用的数据。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>下载3.2.100-version-msi安装包(windows)</li></ul><blockquote><p><a href="https://github.com/MicrosoftArchive/redis/tags">https://github.com/MicrosoftArchive/redis/tags</a></p></blockquote><ul><li><p>安装redis,一路next</p><ul><li>默认端口6379</li></ul></li><li><p>链接redis,先进入安装目录,找到redis-cli.exe</p></li></ul><blockquote><p>redis-cli.exe -h 127.0.0.1 -p 6379</p></blockquote><ul><li>存入数据</li></ul><blockquote><p>setex mykey 60 “redis”</p></blockquote><ul><li>取数据</li></ul><blockquote><p>get mykey</p></blockquote><ul><li>Java 编程</li></ul><ol><li><p>需要两个jar <strong>Jedis.jar</strong>和<strong>commons-pool.jar</strong>;(tip:可以到maven repository 中搜索相关jar,点开版本后下面有Compile Dependencies一栏可以看到依赖其他的jar包)</p></li><li><p>使用Jedis链接redis</p></li></ol><pre><code class="java">    Jedis jedis = new Jedis("127.0.0.1","6379");      // jedis.auth("admin");      jedis.set("myKey", "testStr");      jedis.setex...    jedis.get...</code></pre>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zTree的使用总结</title>
    <link href="/2017/07/26/2017-7-26-zTree/"/>
    <url>/2017/07/26/2017-7-26-zTree/</url>
    
    <content type="html"><![CDATA[<p>zTree是开源的一个插件，它是一款JQuery实现的多功能“树型”列表插件。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li><p>需要引入下面的库</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;link rel=<span class="hljs-string">&quot;stylesheet&quot;</span> href=<span class="hljs-string">&quot;zTreeStyle/zTreeStyle.css&quot;</span> type=<span class="hljs-string">&quot;text/css&quot;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;jquery-1.4.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;jquery.ztree.core-3.x.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><p>编写一个div</p></li></ul><p><code>&lt;div&gt;&lt;ul id=&quot;treeDemo&quot; class=&quot;ztree&quot;&gt;&lt;/ul&gt;&lt;/div&gt;</code></p><ul><li>编写js</li></ul><pre><code class="js">    var zTree ;      var setting = &#123;          callback: &#123;              onCheck: zTreeOnCheck,              onClick: zTreeOnClick          &#125;,          check:&#123;              enable : true          &#125;      &#125;;      $.ajax(&#123;          url:"/hrm/GetJson",          type:"get",          data:&#123;&#125;,          dataType:"jsonp",          jsonp:"callBackJsonp",          success : success,          error : function(a,b,c)&#123;              alert("error"+c);          &#125;      &#125;);      function success(nodes)&#123;          zTree = $.fn.zTree.init($("#treeDemo"), setting, nodes);      &#125;      function zTreeOnCheck(event,treeNode,treeId)&#123;          alert("checked");      &#125;      function zTreeOnClick(event,treeNode,treeId)&#123;          alert("Clicked");      &#125;      function getTree()&#123;          return zTree;      &#125;      /*      // nodes样式      var nodes = [      &#123;id:1, pId:0, name: "父节点1"&#125;,      &#123;id:11, pId:1, name: "子节点1"&#125;,      &#123;id:12, pId:1, name: "子节点2"&#125;      ];      */  </code></pre><ul><li>关于后台数据</li></ul><p>由于跨域请求，所以用了jsonp，如果不跨域可以去掉，后台使用JSONObject和JSONArray拼的JSON串返回到界面并不能被zTree解析(自己当时做的时候是这样的)，用list拼为nodes,再使用<strong>out.println(nodes);</strong></p><pre><code class="js">    arrayList.put("&#123;id:12, pId:1, name: "子节点2"&#125;");</code></pre><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li><p>在父窗体上如何触发子窗体的zTree的onCheck方法</p><ol><li><p>在父窗体使用js获取子窗体对象，parent.$(“#iframeID”).get(0).contentWindow; get(0)将Jquery对象转换为普通的js对象!!!</p></li><li><p>在子窗体定义一个获取zTree的方法getTree()，获取到子窗体调用getTree()方法拿到对象，之后相干啥就可以干了。获取选中的节点是getChangeCheckedNodes()</p></li></ol></li><li><p>我怎么知道zTree有getChangeCheckedNodes</p><ol><li>教给你一个办法，获取zTree对象，用console.log(zTree)。在控制台就可以看到zTree有什么方法了！</li></ol></li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>zTree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FFMPEG 视频格式转换</title>
    <link href="/2017/07/23/2017-7-23-ffmpeg%20%E8%A7%86%E9%A2%91%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2/"/>
    <url>/2017/07/23/2017-7-23-ffmpeg%20%E8%A7%86%E9%A2%91%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<p>FFmpeg的名称来自MPEG视频编码标准，前面的“FF”代表“Fast Forward”，FFmpeg是一套可以用来记录、转换数字音频、视频，并能将其转化为流的开源计算机程序。可以轻易地实现多种视频格式之间的相互转换。FFmpeg的用户有Google，Facebook，Youtube，优酷，爱奇艺，土豆等。</p><ul><li><p>组成</p><ul><li>libavformat：用于各种音视频封装格式的生成和解析，包括获取解码所需信息以生成解码上下文结构和读取音视频帧等功能，包含demuxers和muxer库；</li><li>libavcodec：用于各种类型声音&#x2F;图像编解码；</li><li>libavutil：包含一些公共的工具函数；</li><li>libswscale：用于视频场景比例缩放、色彩映射转换；</li><li>libpostproc：用于后期效果处理；</li><li>ffmpeg：是一个命令行工具，用来对视频文件转换格式，也支持对电视卡实时编码；</li><li>ffsever：是一个HTTP多媒体实时广播流服务器，支持时光平移；</li><li>ffplay：是一个简单的播放器，使用ffmpeg 库解析和解码，通过SDL显示；</li></ul></li><li><p>需要准备的东西</p><ul><li>ffmpeg-2.4.1.tar.bz2  下载地址<a href="https://www.ffmpeg.org/releases/">https://www.ffmpeg.org/releases/</a></li><li>下载ffmpeg所需要的所有依赖库文件libx264、libfaac、libmp3lame、libtheora、libvorbis、libxvid、libxext、libxfixes</li></ul></li></ul><h2 id="安装libx264"><a href="#安装libx264" class="headerlink" title="安装libx264"></a>安装libx264</h2><p>因为libx264依赖yasm,所以我们先安装yasm</p><blockquote><p>sudo apt-get install yasm </p></blockquote><ul><li><p>使用aptitude安装libx264</p><blockquote><p>sudo aptitude install libx264-dev</p></blockquote><p>  有的同学没有aptitude,下载一个就行了</p><blockquote><p>sudo apt-get install aptitude</p></blockquote></li><li><p>tar.gz安装包安装libx264，我们需要去下载last_x264.tar.bz2 </p><blockquote><p>tar -zxvf last_x264.tar.bz2 </p></blockquote><p>  进入目录进行编译并安装</p><blockquote><p>.&#x2F;configure –enable-shared –enable-pic<br>    make<br>    make install</p></blockquote></li></ul><h2 id="安装ffmpeg"><a href="#安装ffmpeg" class="headerlink" title="安装ffmpeg"></a>安装ffmpeg</h2><p>我们一个一个来安装ffmpeg的依赖，<strong>请确保每个依赖都安装成功！</strong>(可以使用<code>echo $?</code>来判断是否成功)</p><ul><li><p>libfaac</p><blockquote><p>sudo aptitude install libfaac-dev  </p></blockquote></li><li><p>libmp3lame-dev</p><blockquote><p>sudo aptitude install libmp3lame-dev </p></blockquote></li><li><p>libtheora-dev </p><blockquote><p>sudo aptitude install libtheora-dev </p></blockquote></li><li><p>libvorbis-dev </p><blockquote><p>sudo aptitude install libvorbis-dev </p></blockquote></li><li><p>libxvidcore-dev  </p><blockquote><p>sudo aptitude install libxvidcore-dev  </p></blockquote></li><li><p>libxext-dev  </p><blockquote><p>sudo aptitude install libxext-dev   </p></blockquote></li><li><p>libxfixes-dev  </p><blockquote><p>sudo aptitude install libxfixes-dev</p></blockquote></li><li><p>libasound2-dev (lz后续想使用alsa录音,遇到了麻烦<a href="https://raspberrypi.stackexchange.com/questions/70479/ffmpeg-unknown-input-format-alsa">FFMPEG: Unknown input format:’alsa’</a>,点击可以跳转到lz参考的解决办法)</p><blockquote><p>sudo apt-get install libasound2-dev </p></blockquote></li><li><p>安装ffmpeg</p><blockquote><p>tar -xjvf ffmpeg-2.4.1.tar.bz2<br>  cd ffmpeg-2.4.1  </p></blockquote><p>  编译并安装,–prefix指定安装后的目录(方便卸载),后面我添加上了alsa的支持**–enable-indev&#x3D;alsa,–enable-outdev&#x3D;alsa**<br>  <div class="message"><br>  $ .&#x2F;configure –prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;ffmpeg –enable-gpl –enable-version3 –enable-nonfree –enable-postproc –enable-pthreads –enable-libfaac –enable-libmp3lame –enable-libtheora –enable-libx264 –enable-libxvid –enable-x11grab –enable-libvorbis –enable-indev&#x3D;alsa –enable-outdev&#x3D;alsa </br><br>  $ sudo make </br><br>  $ sudo make install<br>  </div></p></li></ul><p>假如我们不添加alsa支持,后续我们可能无法正常录音,录屏还是可以的.使用<strong>ffmpeg -devices</strong>可以查看ffmpeg支持的设备<br><img src="https://i.loli.net/2019/07/02/5d1aae7ecc57e74701.jpg" alt="devices"></p><h2 id="配置ffmpeg环境变量"><a href="#配置ffmpeg环境变量" class="headerlink" title="配置ffmpeg环境变量"></a>配置ffmpeg环境变量</h2><p>这里有很多配置环境变量的方法，可以按照自己的方式配，也可以按照我的配</p><blockquote><p>sudo vim &#x2F;etc&#x2F;profile</p></blockquote><p>在文件里面添加一行代码</p><blockquote><p>export FFMPEG_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;ffmpeg<br>export PATH&#x3D;$PATH:$FFMPEG_HOME&#x2F;bin</p></blockquote><p>保存退出vim使环境变量生效</p><blockquote><p>source &#x2F;etc&#x2F;profile</p></blockquote><p>查看环境变量是否可行</p><blockquote><p>echo $PATH</p></blockquote><p>查看ffmpeg是否可行</p><blockquote><p>ffmpeg -version</p></blockquote><p><img src="https://i.loli.net/2019/07/02/5d1aae83c427e36687.jpg" alt="ffmpeg version"></p><p>转换命令：</p><blockquote><p>ffmpeg -i “20090401010.mp4” -y -ab 32 -ar 22050 -qscale 10 -s 640*480 -r 15 &#x2F;opt&#x2F;a.flv</p></blockquote><table>    <tr>        <td>-i</td>        <td>是要转换文件名</td>    </tr>    <tr>        <td>-y</td>        <td>是覆盖输出文件</td>    </tr>    <tr>        <td>-ab</td>        <td>是音频数据流，大家在百度听歌的时候应该都可以看到 128 64</td>    </tr>    <tr>        <td>-ar </td>        <td>是声音的频率 22050 基本都是这个。</td>    </tr>    <tr>        <td>-qscale</td>        <td>是视频输出质量，后边的值越小质量越高，但是输出文件就越“肥”</td>    </tr>    <tr>        <td>-s</td>        <td>是输出文件的尺寸大小！</td>    </tr>    <tr>        <td>-r</td>        <td>帧率是视频文件中每一秒的帧数，肉眼想看到连续移动图像至少需要15帧。</td>    </tr>    <tr>        <td>-b</td>        <td>码率(比特率):是一个确定整体视频/音频质量的参数，秒为单位处理的字节数，码率和视频质量成正比，在视频文件中中比特率用bps来表达。</td>    </tr>    </table><p>资料</p><p>FFmpeg官网： <a href="http://www.ffmpeg.org/">http://www.ffmpeg.org</a></p><p>FFmpeg doc : <a href="http://www.ffmpeg.org/documentation.html">http://www.ffmpeg.org/documentation.html</a></p><p>FFmpeg wiki : <a href="https://trac.ffmpeg.org/wiki">https://trac.ffmpeg.org/wiki</a></p><p>FFmpeg基础: <a href="http://wenku.baidu.com/view/296eefcaf90f76c661371af1.html">http://wenku.baidu.com/view/296eefcaf90f76c661371af1.html</a></p><p>FFmpeg基本用法 : <a href="http://blog.csdn.net/doublefi123/article/details/24325159">http://blog.csdn.net/doublefi123/article/details/24325159</a></p><p>FFmpeg参数详解 : <a href="http://www.cuplayer.com/player/PlayerCode/FFmpeg/2014/0706/1399.html">http://www.cuplayer.com/player/PlayerCode/FFmpeg/2014/0706/1399.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FFmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu16.04TLS安装ffmpeg</title>
    <link href="/2017/07/23/2017-7-23-%E5%9C%A8ubuntu1.6.04%E5%AE%89%E8%A3%85ffmpeg/"/>
    <url>/2017/07/23/2017-7-23-%E5%9C%A8ubuntu1.6.04%E5%AE%89%E8%A3%85ffmpeg/</url>
    
    <content type="html"><![CDATA[<p>FFmpeg的名称来自MPEG视频编码标准，前面的“FF”代表“Fast Forward”，FFmpeg是一套可以用来记录、转换数字音频、视频，并能将其转化为流的开源计算机程序。可以轻易地实现多种视频格式之间的相互转换。FFmpeg的用户有Google，Facebook，Youtube，优酷，爱奇艺，土豆等。</p><ul><li><p>组成</p><ul><li>libavformat：用于各种音视频封装格式的生成和解析，包括获取解码所需信息以生成解码上下文结构和读取音视频帧等功能，包含demuxers和muxer库；</li><li>libavcodec：用于各种类型声音&#x2F;图像编解码；</li><li>libavutil：包含一些公共的工具函数；</li><li>libswscale：用于视频场景比例缩放、色彩映射转换；</li><li>libpostproc：用于后期效果处理；</li><li>ffmpeg：是一个命令行工具，用来对视频文件转换格式，也支持对电视卡实时编码；</li><li>ffsever：是一个HTTP多媒体实时广播流服务器，支持时光平移；</li><li>ffplay：是一个简单的播放器，使用ffmpeg 库解析和解码，通过SDL显示；</li></ul></li><li><p>需要准备的东西</p><ul><li>ffmpeg-2.4.1.tar.bz2  下载地址<a href="https://www.ffmpeg.org/releases/">https://www.ffmpeg.org/releases/</a></li><li>下载ffmpeg所需要的所有依赖库文件libx264、libfaac、libmp3lame、libtheora、libvorbis、libxvid、libxext、libxfixes</li></ul></li></ul><h2 id="安装libx264"><a href="#安装libx264" class="headerlink" title="安装libx264"></a>安装libx264</h2><p>因为libx264依赖yasm,所以我们先安装yasm</p><blockquote><p>sudo apt-get install yasm </p></blockquote><ul><li><p>使用aptitude安装libx264</p><blockquote><p>sudo aptitude install libx264-dev</p></blockquote><p>  有的同学没有aptitude,下载一个就行了</p><blockquote><p>sudo apt-get install aptitude</p></blockquote></li><li><p>tar.gz安装包安装libx264，我们需要去下载last_x264.tar.bz2 </p><blockquote><p>tar -zxvf last_x264.tar.bz2 </p></blockquote><p>  进入目录进行编译并安装</p><blockquote><p>.&#x2F;configure –enable-shared –enable-pic<br>    make<br>    make install</p></blockquote></li></ul><h2 id="安装ffmpeg"><a href="#安装ffmpeg" class="headerlink" title="安装ffmpeg"></a>安装ffmpeg</h2><p>我们一个一个来安装ffmpeg的依赖，<strong>请确保每个依赖都安装成功！</strong>(可以使用<code>echo $?</code>来判断是否成功)</p><ul><li><p>libfaac</p><blockquote><p>sudo aptitude install libfaac-dev  </p></blockquote></li><li><p>libmp3lame-dev</p><blockquote><p>sudo aptitude install libmp3lame-dev </p></blockquote></li><li><p>libtheora-dev </p><blockquote><p>sudo aptitude install libtheora-dev </p></blockquote></li><li><p>libvorbis-dev </p><blockquote><p>sudo aptitude install libvorbis-dev </p></blockquote></li><li><p>libxvidcore-dev  </p><blockquote><p>sudo aptitude install libxvidcore-dev  </p></blockquote></li><li><p>libxext-dev  </p><blockquote><p>sudo aptitude install libxext-dev   </p></blockquote></li><li><p>libxfixes-dev  </p><blockquote><p>sudo aptitude install libxfixes-dev</p></blockquote></li><li><p>libasound2-dev (lz后续想使用alsa录音,遇到了麻烦<a href="https://raspberrypi.stackexchange.com/questions/70479/ffmpeg-unknown-input-format-alsa">FFMPEG: Unknown input format:’alsa’</a>,点击可以跳转到lz参考的解决办法)</p><blockquote><p>sudo apt-get install libasound2-dev </p></blockquote></li><li><p>安装ffmpeg</p><blockquote><p>tar -xjvf ffmpeg-2.4.1.tar.bz2<br>  cd ffmpeg-2.4.1  </p></blockquote><p>  编译并安装,–prefix指定安装后的目录(方便卸载),后面我添加上了alsa的支持**–enable-indev&#x3D;alsa,–enable-outdev&#x3D;alsa**<br>  <div class="message"><br>  $ .&#x2F;configure –prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;ffmpeg –enable-gpl –enable-version3 –enable-nonfree –enable-postproc –enable-pthreads –enable-libfaac –enable-libmp3lame –enable-libtheora –enable-libx264 –enable-libxvid –enable-x11grab –enable-libvorbis –enable-indev&#x3D;alsa –enable-outdev&#x3D;alsa </br><br>  $ sudo make </br><br>  $ sudo make install<br>  </div></p></li></ul><p>假如我们不添加alsa支持,后续我们可能无法正常录音,录屏还是可以的.使用<strong>ffmpeg -devices</strong>可以查看ffmpeg支持的设备<br><img src="https://i.loli.net/2019/07/02/5d1aae7ecc57e74701.jpg" alt="devices"></p><h2 id="配置ffmpeg环境变量"><a href="#配置ffmpeg环境变量" class="headerlink" title="配置ffmpeg环境变量"></a>配置ffmpeg环境变量</h2><p>这里有很多配置环境变量的方法，可以按照自己的方式配，也可以按照我的配</p><blockquote><p>sudo vim &#x2F;etc&#x2F;profile</p></blockquote><p>在文件里面添加一行代码</p><blockquote><p>export FFMPEG_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;ffmpeg<br>export PATH&#x3D;$PATH:$FFMPEG_HOME&#x2F;bin</p></blockquote><p>保存退出vim使环境变量生效</p><blockquote><p>source &#x2F;etc&#x2F;profile</p></blockquote><p>查看环境变量是否可行</p><blockquote><p>echo $PATH</p></blockquote><p>查看ffmpeg是否可行</p><blockquote><p>ffmpeg -version</p></blockquote><p><img src="https://i.loli.net/2019/07/02/5d1aae83c427e36687.jpg" alt="ffmpeg version"></p><p>转换命令：</p><blockquote><p>ffmpeg -i “20090401010.mp4” -y -ab 32 -ar 22050 -qscale 10 -s 640*480 -r 15 &#x2F;opt&#x2F;a.flv</p></blockquote><table>    <tr>        <td>-i</td>        <td>是要转换文件名</td>    </tr>    <tr>        <td>-y</td>        <td>是覆盖输出文件</td>    </tr>    <tr>        <td>-ab</td>        <td>是音频数据流，大家在百度听歌的时候应该都可以看到 128 64</td>    </tr>    <tr>        <td>-ar </td>        <td>是声音的频率 22050 基本都是这个。</td>    </tr>    <tr>        <td>-qscale</td>        <td>是视频输出质量，后边的值越小质量越高，但是输出文件就越“肥”</td>    </tr>    <tr>        <td>-s</td>        <td>是输出文件的尺寸大小！</td>    </tr>    <tr>        <td>-r</td>        <td>帧率是视频文件中每一秒的帧数，肉眼想看到连续移动图像至少需要15帧。</td>    </tr>    <tr>        <td>-b</td>        <td>码率(比特率):是一个确定整体视频/音频质量的参数，秒为单位处理的字节数，码率和视频质量成正比，在视频文件中中比特率用bps来表达。</td>    </tr>    </table><p>资料</p><p>FFmpeg官网： <a href="http://www.ffmpeg.org/">http://www.ffmpeg.org</a></p><p>FFmpeg doc : <a href="http://www.ffmpeg.org/documentation.html">http://www.ffmpeg.org/documentation.html</a></p><p>FFmpeg wiki : <a href="https://trac.ffmpeg.org/wiki">https://trac.ffmpeg.org/wiki</a></p><p>FFmpeg基础: <a href="http://wenku.baidu.com/view/296eefcaf90f76c661371af1.html">http://wenku.baidu.com/view/296eefcaf90f76c661371af1.html</a></p><p>FFmpeg基本用法 : <a href="http://blog.csdn.net/doublefi123/article/details/24325159">http://blog.csdn.net/doublefi123/article/details/24325159</a></p><p>FFmpeg参数详解 : <a href="http://www.cuplayer.com/player/PlayerCode/FFmpeg/2014/0706/1399.html">http://www.cuplayer.com/player/PlayerCode/FFmpeg/2014/0706/1399.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FFmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建ftp服务器</title>
    <link href="/2017/07/23/2017-7-23-%E6%90%AD%E5%BB%BAftp%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2017/07/23/2017-7-23-%E6%90%AD%E5%BB%BAftp%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>想要在不同操作系统之间传送数据是不是很头疼，lz操作系统是ubuntu 1.6.04，室友的操作系统是window，想给我传个文件困难重重，而且慢满的要死哟。ftp只要在同一个局域网就可以用呢，而且传输速度那个嗖嗖的，来搞吧！</p><h2 id="安装vsftpd服务"><a href="#安装vsftpd服务" class="headerlink" title="安装vsftpd服务"></a>安装vsftpd服务</h2><ul><li><p>安装之前先看看自己有没有安装过类似的软件呢</p><p>  which is vsftpd</p></li><li><p>使用ubuntu的apt-get安装vsftpd</p><p>  sudo apt-get install vsftpd</p></li></ul><h2 id="配置vvsftpd-conf"><a href="#配置vvsftpd-conf" class="headerlink" title="配置vvsftpd.conf"></a>配置vvsftpd.conf</h2><ul><li><p>一路安装下去,成功之后去配置一下ftp的配置文件!</p><p>  sudo vim &#x2F;etc&#x2F;vsftpd.conf</p></li><li><p>修改vsftpd.conf</p>   <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">anonymous_enable</span>=<span class="hljs-literal">YES</span>    <span class="hljs-comment">#设置匿名可登录</span><br><br><span class="hljs-attr">local_enable</span>=<span class="hljs-literal">YES</span>        <span class="hljs-comment">#本地用户允许登录</span><br><br><span class="hljs-attr">write_enable</span>=<span class="hljs-literal">YES</span>        <span class="hljs-comment">#用户是否有写的权限</span><br><br><span class="hljs-attr">anon_upload_enable</span>=<span class="hljs-literal">YES</span>   <span class="hljs-comment">#允许匿名用户上传</span><br><br><span class="hljs-attr">anon_mkdir_write_enable</span>=<span class="hljs-literal">YES</span>   <span class="hljs-comment">#允许匿名用户创建目录文件</span><br><br></code></pre></td></tr></table></figure></li><li><p>重启服务</p><p>  sudo service vsftpd restart</p></li></ul><h2 id="指定上传和下载目录"><a href="#指定上传和下载目录" class="headerlink" title="指定上传和下载目录"></a>指定上传和下载目录</h2><p>其实现在已经可以访问了，lz的ip是192.168.1.19，打开浏览器输入<a href="ftp://192.168.1.19,我们访问后发现是空.原因是匿名访问默认会访问/srv/ftp,%E6%88%91%E4%BB%AC%E7%A3%81%E7%9B%98%E4%B8%8A%E6%9C%AC%E8%BA%AB%E5%B0%B1%E6%B2%A1%E5%8A%A8%E8%A5%BF%E5%91%A2%EF%BC%81">ftp://192.168.1.19，我们访问后发现是空。原因是匿名访问默认会访问/srv/ftp,我们磁盘上本身就没动西呢！</a></p><p>我们需要上传和下载功能，在&#x2F;srv&#x2F;ftp&#x2F; 创建了两个文件夹，update和download。把upload的权限设置为可读可写，把download权限设置为可读不可写。上传的文件夹，其他人可以上传到这个文件夹，但是不能有删除</p><p>权限，试想如果有匿名登录进来的给你删除掉了别人好心给你分享的文件还行吗？下载的文件夹，其他人只能读取这个文件夹，但是不能修改这个文件夹，也就是你要分享给其他人的文件可以放到这里面。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>sudo mkdir /srv/ftp/upload  <br>sudo mkdir /srv/ftp/download  <br>sudo chmod -R 777 /srv/ftp/update  <br>sudo chmod -R 755 /srv/ftp/download<br><br></code></pre></td></tr></table></figure><p> 现在下面的事情就可以实现了：</p><ol><li><p>室友有一个非常好看的电影，发网盘又太慢，怎么办？你就把你的FTP地址扔给他让他上传到ftp:&#x2F;&#x2F;&lt;你的IP地址&gt;&#x2F;upload 文件夹下吧。</p></li><li><p>你剪辑了一个很不错的视频短片，想分享给学校里的小伙伴，你就可以把它扔到你的FTP服务器 &#x2F;srv&#x2F;ftp&#x2F;download 目录下，然后对小伙伴们说，我的视频已经共享了，你们到 ftp:&#x2F;&#x2F;&lt;你的IP地址&gt;&#x2F;download 里面去下载吧。</p></li></ol><p> 恩，只要你配置好了FTP，就能享受FTP局域网高速传输，分分钟搞定~~!</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FTP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GITHUB-JEKYLL搭建个人博客网站</title>
    <link href="/2017/07/20/2017-7-20-github-jekyll-ubuntu-%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    <url>/2017/07/20/2017-7-20-github-jekyll-ubuntu-%E9%98%BF%E9%87%8C%E4%BA%91/</url>
    
    <content type="html"><![CDATA[<p>使用<strong>github</strong>和<strong>jekyll</strong>搭建的<a href="http://www.zonegood.com/">博客</a>，运行环境是<strong>ubuntu 1.6.04</strong>使用的域名是<a href="https://cn.aliyun.com/">阿里云</a></p><p>推荐: <a href="http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html">github Pages和Jekyll入门</a>，<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">Git教程</a></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><ul><li><a href="#%E9%99%84%E5%BD%95">附录</a></li><li><a href="#jekyll">jekyll</a><ul><li><a href="#ruby">ruby</a></li><li><a href="#rubygems">rubyGems</a></li><li><a href="#jekyll-1">jekyll</a></li></ul></li><li><a href="#%E5%88%9B%E5%BB%BA%E5%B9%B6%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2">创建并发布博客</a><ul><li><a href="#%E6%97%A0%E6%A0%B7%E5%BC%8F%E7%9A%84%E5%8D%9A%E5%AE%A2">无样式的博客</a></li><li><a href="#%E6%9C%89%E6%A0%B7%E5%BC%8F%E7%9A%84%E5%8D%9A%E5%AE%A2">有样式的博客</a></li></ul></li><li><a href="#%E6%B3%A8%E5%86%8C%E5%9F%9F%E5%90%8D">注册域名</a></li></ul><h2 id="jekyll"><a href="#jekyll" class="headerlink" title="jekyll"></a>jekyll</h2><p>Jekyll是一个简单的博客形态的静态站点生产机器。它有一个模版目录，其中包含原始文本格式的文档，通过 <a href="https://daringfireball.net/projects/markdown/">Markdown</a> （或者 <a href="http://textile.sitemonks.com/">Textile</a>） 以及 <a href="http://docs.shopify.com/themes/liquid-basics">Liquid</a> 转化成一个完整的可发布的静态网站，你可以发布在任何你喜爱的服务器上。Jekyll 也可以运行在 <a href="https://pages.github.com/">GitHub Page</a> 上，也就是说，你可以使用 GitHub 的服务来搭建你的项目页面、博客或者网站，而且是完全免费的。</p><p>安装jekyll之前呢，需要准备下面内容。</p><ul><li><a href="https://www.ruby-lang.org/en/downloads/">Ruby</a></li><li><a href="https://rubygems.org/pages/download">RubyGems</a></li></ul><h3 id="ruby"><a href="#ruby" class="headerlink" title="ruby"></a>ruby</h3><p>具体怎么可以到<a href="https://www.ruby-lang.org/en/downloads/">Ruby官网</a>下载tar.gz安装包安装（注意有时候make install 报错的话，可能是权限问题，我就碰到咯，只要在代码前面加上sudo 就行了）</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vim">wget https://cache.<span class="hljs-keyword">ruby</span>-lang.org/pub/<span class="hljs-keyword">ruby</span>/<span class="hljs-number">2.4</span>/<span class="hljs-keyword">ruby</span>-<span class="hljs-number">2.4</span>.<span class="hljs-number">1</span>.tar.gz<br>tar -zxvf <span class="hljs-keyword">ruby</span>-<span class="hljs-number">2.4</span>.<span class="hljs-number">1</span>.tar.gz<br><span class="hljs-keyword">cd</span> <span class="hljs-keyword">ruby</span>-<span class="hljs-number">2.4</span>.<span class="hljs-number">1</span>/<br>./configure<br><span class="hljs-keyword">make</span><br><span class="hljs-keyword">make</span> install<br><span class="hljs-keyword">make</span> clean<br>sudo <span class="hljs-keyword">make</span> distclean<br><span class="hljs-keyword">ruby</span> -v<br><br></code></pre></td></tr></table></figure><h3 id="rubyGems"><a href="#rubyGems" class="headerlink" title="rubyGems"></a>rubyGems</h3><p>具体怎么可以到<a href="https://rubygems.org/pages/download">RubyGems官网</a>，和Ruby安装是一样的，不做详细说明</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gauss">wget https:<span class="hljs-comment">//rubygems.org/rubygems/rubygems-2.6.12.tgz</span><br>tar -zxvf rubygems<span class="hljs-number">-2.6</span><span class="hljs-number">.12</span>.tgz<br>cd rubygems<span class="hljs-number">-2.6</span><span class="hljs-number">.12</span><br>./configure<br><span class="hljs-built_in">make</span><br><span class="hljs-built_in">make</span> install<br><span class="hljs-built_in">make</span> clean<br>sudo <span class="hljs-built_in">make</span> distclean<br></code></pre></td></tr></table></figure><h3 id="jekyll-1"><a href="#jekyll-1" class="headerlink" title="jekyll"></a>jekyll</h3><p><a href="http://jekyll.com.cn/docs/installation/">jekyll官网</a>，jekyll的doc一栏中也提供了安装的参考</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">sudo gem <span class="hljs-keyword">install </span><span class="hljs-keyword">jekyll</span><br><span class="hljs-keyword"></span><br></code></pre></td></tr></table></figure><p>可能会出现一些错误，这是因为少安装了一些插件，这里我也卡了很久，搜索了很多资料，试了很多次</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">ERROR: </span>Loading command: update (LoadError)<br>cannot load such file -- zlib<br><span class="hljs-keyword">ERROR: </span>While executing gem ... (NoMethodError)<br>undefined method `invoke_with_build_args&#x27; for nil:NilClass<br></code></pre></td></tr></table></figure><p>解决办法</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vim">sudo apt-<span class="hljs-built_in">get</span> <span class="hljs-keyword">update</span><br>sudo apt-<span class="hljs-built_in">get</span> install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev <span class="hljs-keyword">python</span>-software-properties<br>sudo apt-<span class="hljs-built_in">get</span> install libgdbm-dev libncurses5-dev automake libtool bison libffi-dev<br>sudo apt-<span class="hljs-built_in">get</span> install zlib1g-dev<br><span class="hljs-keyword">cd</span> <span class="hljs-keyword">ruby</span>-<span class="hljs-number">2.4</span>.<span class="hljs-number">1</span>/ext/zlib/<br><span class="hljs-keyword">ruby</span> extconf.rb <br><span class="hljs-keyword">cd</span> /usr/<span class="hljs-keyword">ruby</span>-<span class="hljs-number">2.4</span>.<span class="hljs-number">1</span>/<br>./configure<br>sudo <span class="hljs-keyword">make</span> install<br>sudo <span class="hljs-keyword">make</span> clean<br>sudo <span class="hljs-keyword">make</span> distclean<br></code></pre></td></tr></table></figure><h2 id="创建并发布博客"><a href="#创建并发布博客" class="headerlink" title="创建并发布博客"></a>创建并发布博客</h2><h3 id="无样式的博客"><a href="#无样式的博客" class="headerlink" title="无样式的博客"></a>无样式的博客</h3><ul><li><p>创建一个无样式的博客</p>  <figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">jekyll </span>new <span class="hljs-keyword">blog</span><br><span class="hljs-keyword"></span>cd <span class="hljs-keyword">blog</span><br><span class="hljs-keyword"></span>git init <br>git <span class="hljs-keyword">add </span>.<br>git commit -m <span class="hljs-string">&quot;fist jekyll program&quot;</span><br>git status<br></code></pre></td></tr></table></figure></li><li><p>将博客关联到github远程仓库<br>  这里不做详述，可以自行谷歌</p></li><li><p>将无样式的blog项目远程推送到github仓库中，这里以我的为例，我的username为hoey94，注意修改成自己的</p>  <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd blog/<br>git remote add origin https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/hoey94/</span>hoey94.github.io.git<br>git push origin master<br></code></pre></td></tr></table></figure></li><li><p>配置github pages，并运行</p><ul><li>进入到github.com&#x2F;hoey94&#x2F;hoey94.github.io项目中，在Settings选项卡中找到GitHub Pages面板，在Source中选择master branch，并save</li><li>通过hoey94.github.io就可以成功访问我们的界面了！</li></ul></li></ul><h3 id="有样式的博客"><a href="#有样式的博客" class="headerlink" title="有样式的博客"></a>有样式的博客</h3><p>本次lz用到的样式是<a href="https://github.com/poole/hyde">hyde</a>，以这个为例子进行推送部署。在github上网有学多jekyll的样式，你也可以下载并部署，<a href="https://github.com/jekyll/jekyll/wiki/Themes">样式链接</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/poole/</span>hyde.git<br>cd hyde/<br></code></pre></td></tr></table></figure><p>我们需要修改一些东西，不然会报错，之前lz同样卡在这里半天，网上搜索了半天资料才解决。</p><ul><li>修改_config.yml文件中的relative_permalinks: false，如果不改，会报XXX过期的错误，记不得了</li><li>删除CNAME中的内容，如果不改会提示域名已经存在，因为这个是别人的项目，人家已经在github上注册了，后面会介绍怎么配置自己的域名</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">rm -rm .git/ <span class="hljs-comment"># 删除原本的.git 文件使用自己的.git</span><br>git init<br>git add .<br>git commit -m <span class="hljs-string">&quot;beautiful jekyll theme&quot;</span><br>git remote add https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/hoey94/</span>hoey94.github.io.git <span class="hljs-comment"># 记得退回历史版本之后再进行这里的操作不然会报错的</span><br>git push origin master<br></code></pre></td></tr></table></figure><p>后面的和无样式博客发布是一样的，只要注意修改_config.yml文件，其他应该没什么大碍了。</p><blockquote><p>Tip : 项目里面已经有一个.gitignore我们可以使用它来忽略上传内容</p></blockquote><h2 id="注册域名"><a href="#注册域名" class="headerlink" title="注册域名"></a>注册域名</h2><p>登录<a href="https://www.aliyun.com/">阿里云</a>注册一个帐号，然后选择一个自己喜欢的域名并购买即可。</p><p>我们买好域名以后，我们就可以去绑定github pages了</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> hyde/<br>vim <span class="hljs-string">./CNAME</span><br></code></pre></td></tr></table></figure><p>推送更改信息，更新项目</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> <span class="hljs-keyword">add</span> .<br><span class="hljs-symbol">git</span> commit -m <span class="hljs-string">&quot;modify CNAME file ，add hoey.com&quot;</span><br><span class="hljs-symbol">git</span> <span class="hljs-keyword">push</span> origin master<br></code></pre></td></tr></table></figure><p>登录<a href="https://home.console.aliyun.com/new#/">阿里云域名控制台</a></p><p>在云解析DNS选项卡中找到自己购买的域名选项，并点击“解析”</p><p>在“解析设置”一栏中选择“添加解析”，记录类型填写为CNAME，主机记录填写www，记录值在这里以我的为例填写hoey94.github.io之后保存。推荐一片博文<a href="http://blog.csdn.net/pzasdq/article/details/51171424">解析域名的时候不同的项目代表什么含义？主机记录、记录类型、线路类型、记录值、MX优先级、TTL</a></p><p>推荐 : <a href="http://jmcglone.com/guides/github-pages/">http://jmcglone.com/guides/github-pages/</a></p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jekyll</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
